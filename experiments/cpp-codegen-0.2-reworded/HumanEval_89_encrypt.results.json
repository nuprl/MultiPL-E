{
  "name": "HumanEval_89_encrypt",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n",
  "tests": "}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); ++i) {\n        result += s[i] - 2 * (s[i] / 2);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp8e7ubi_r: /tmp/tmp8e7ubi_r.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmptuof3iwe: /tmp/tmptuof3iwe.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        char c = s[i];\n        int index = (c - 'a') / 2;\n        result.push_back(s[index]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpvhkdlmtr: /tmp/tmpvhkdlmtr.cpp:27: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.length(); i++) {\n        result += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpr7boo19e: /tmp/tmpr7boo19e.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        res.push_back(s[i] - 'a' + 'a' + (s[i] - 'a' + 'a')%26);\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpeu_3mcvw: /tmp/tmpeu_3mcvw.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpduwx_pmm: /tmp/tmpduwx_pmm.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.size(); i++) {\n        int index = (s[i] - 'a') + 2;\n        if(index >= 26) {\n            index -= 26;\n        }\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp7j_rmr42: /tmp/tmp7j_rmr42.cpp:29: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.length(); i++) {\n        res.push_back(s[i] - 2 * (s[i] - 'a'));\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpz5aekxmx: /tmp/tmpz5aekxmx.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.size(); i++) {\n        ret.push_back(s[i] - 2 * (s[i] / 2));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpe8oig5an: /tmp/tmpe8oig5an.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp150wplfm: /tmp/tmp150wplfm.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp3txoop4q: /tmp/tmp3txoop4q.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpnbsk6rph: /tmp/tmpnbsk6rph.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpzxq_n5ev: /tmp/tmpzxq_n5ev.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 'a' + 'a';\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpy8s73bgf: /tmp/tmpy8s73bgf.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp7wxwjhqp: /tmp/tmp7wxwjhqp.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp2cses66_: /tmp/tmp2cses66_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp_8wwm4da: /tmp/tmp_8wwm4da.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp2cses66_: /tmp/tmp2cses66_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp_8wwm4da: /tmp/tmp_8wwm4da.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        int index = s[i] - 'a';\n        index = (index + 2) % 26;\n        result += 'a' + index;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpp931bt08: /tmp/tmpp931bt08.cpp:27: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp3txoop4q: /tmp/tmp3txoop4q.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += s[i] - 'a' + 'a';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += s[i] - 'A' + 'A';\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpwhuz8ped: /tmp/tmpwhuz8ped.cpp:31: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); ++i) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpxwanoko9: /tmp/tmpxwanoko9.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(char c : s) {\n        result += alphabet[(alphabet[c] + alphabet[c]) % 26];\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "/tmp/tmphennfj48.cpp: In function \u2018std::string encrypt(std::string)\u2019:\n/tmp/tmphennfj48.cpp:19:19: error: \u2018alphabet\u2019 was not declared in this scope\n   19 |         result += alphabet[(alphabet[c] + alphabet[c]) % 26];\n      |                   ^~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (auto c : s) {\n        result += (char)((c + 2) % 26 + 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpa5zphikq: /tmp/tmpa5zphikq.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpbt8hajx4: /tmp/tmpbt8hajx4.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (auto c : s) {\n        ret += (char)(c + 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpzblc1mbz: /tmp/tmpzblc1mbz.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpzxq_n5ev: /tmp/tmpzxq_n5ev.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpbf10ydx0: /tmp/tmpbf10ydx0.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpemi6ylcf: /tmp/tmpemi6ylcf.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        res += s[(i + 2) % s.size()];\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmp97bkdzau: /tmp/tmp97bkdzau.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 'a' + (s[i] - 'a' + 2) % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpks4t72w4: /tmp/tmpks4t72w4.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        int index = (s[i] - 'a') + 2;\n        if (index >= 26) {\n            index -= 26;\n        }\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpl57ocyx_: /tmp/tmpl57ocyx_.cpp:29: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmprdpkzf75: /tmp/tmprdpkzf75.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.size(); i++) {\n        result += s[(i + 2) % s.size()];\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmp5xj7q5l6: /tmp/tmp5xj7q5l6.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        int index = (s[i] - 'a' + 2) % 26;\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpohy9zwjg: /tmp/tmpohy9zwjg.cpp:26: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpzxq_n5ev: /tmp/tmpzxq_n5ev.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        res += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmp1hqg4eoj: /tmp/tmp1hqg4eoj.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s[i];\n        if(c >= 'a' && c <= 'z') {\n            result += (char)((c - 'a' + 1) * 2);\n        } else if(c >= 'A' && c <= 'Z') {\n            result += (char)((c - 'A' + 1) * 2);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpfgf8wi_s: /tmp/tmpfgf8wi_s.cpp:30: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpbt8hajx4: /tmp/tmpbt8hajx4.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] / 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmp8r_s_rzm: /tmp/tmp8r_s_rzm.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        result.push_back(s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpcfi22urf: /tmp/tmpcfi22urf.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        res += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpa3bd5hfo: /tmp/tmpa3bd5hfo.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] / 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpbldpc55f: /tmp/tmpbldpc55f.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        int index = (s[i] - 'a') + 2;\n        if (index >= 26) {\n            index -= 26;\n        }\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpyyjlqghr: /tmp/tmpyyjlqghr.cpp:29: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a';\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpnihzz9n0: /tmp/tmpnihzz9n0.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        result += s[(i + 2) % s.size()];\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmp_jny26hn: /tmp/tmp_jny26hn.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpnbsk6rph: /tmp/tmpnbsk6rph.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.size(); i++) {\n        ret += s[i] + s[i] + s[i];\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpgu4l_ag9: /tmp/tmpgu4l_ag9.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        int index = (s[i] - 'a') + 2;\n        if (index > 25) {\n            index -= 26;\n        }\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmp5fy8rfyg: /tmp/tmp5fy8rfyg.cpp:29: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        int index = s[i] - 'a';\n        if (index < 0) {\n            index = 26 + index;\n        }\n        result += 'a' + (index - 2) * 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmp4al87uju: /tmp/tmp4al87uju.cpp:29: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res.push_back(s[i] - 2 * (s[i] % 2));\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmph7z51s1_: /tmp/tmph7z51s1_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] / 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292981,
      "stdout": "",
      "stderr": "tmpnkad9zig: /tmp/tmpnkad9zig.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        res += s[(i + 2) % s.size()];\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmp97bkdzau: /tmp/tmp97bkdzau.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 2 * (s[i] - 'a') + 'a';\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp3ck5gpwf: /tmp/tmp3ck5gpwf.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + (s[i] - 'a' + 2) % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmpy9l4tvbb: /tmp/tmpy9l4tvbb.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[(i + 2) % s.size()];\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp4h42mczu: /tmp/tmp4h42mczu.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += (s[i] - 'a' + 'a' - 2) % 26 + 'a';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += (s[i] - 'A' + 'A' - 2) % 26 + 'A';\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmpyeqa2bvj: /tmp/tmpyeqa2bvj.cpp:31: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmpjuxupmfz: /tmp/tmpjuxupmfz.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            result += s[(s[i] - 'a' + 26) % 26 + 'a'];\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z') {\n            result += s[(s[i] - 'A' + 26) % 26 + 'A'];\n        }\n        else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmpvsm7ipl8: /tmp/tmpvsm7ipl8.cpp:33: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        ret += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmpkemngiw0: /tmp/tmpkemngiw0.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[i] - 2 * (s[i] / 2);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmps4u4v2e_: /tmp/tmps4u4v2e_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        ret += s[i] + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmpgnnhcu5o: /tmp/tmpgnnhcu5o.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp_8wwm4da: /tmp/tmp_8wwm4da.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (auto c : s) {\n        if (c >= 'a' && c <= 'z') {\n            res += c - 2 * (c - 'a');\n        } else if (c >= 'A' && c <= 'Z') {\n            res += c - 2 * (c - 'A');\n        } else {\n            res += c;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmpbo5ktuib: /tmp/tmpbo5ktuib.cpp:31: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        result += s[i] - 2 * (s[i] / 2);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp0iykpwox: /tmp/tmp0iykpwox.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            result.push_back(s[i] - 2 * (s[i] - 'a'));\n        } else if(s[i] >= 'A' && s[i] <= 'Z') {\n            result.push_back(s[i] - 2 * (s[i] - 'A'));\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmps8khlnhh: /tmp/tmps8khlnhh.cpp:31: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += (s[i] - 'a' + 2) % 26 + 'a';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += (s[i] - 'A' + 2) % 26 + 'A';\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp35woghsj: /tmp/tmp35woghsj.cpp:31: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp12ly9925: /tmp/tmp12ly9925.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp9t9uw3hp: /tmp/tmp9t9uw3hp.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] / 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpbldpc55f: /tmp/tmpbldpc55f.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.length(); i++) {\n        int index = (s[i] - 'a') % 26;\n        result.push_back('a' + index);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp72dv_z57: /tmp/tmp72dv_z57.cpp:26: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp2cses66_: /tmp/tmp2cses66_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp2cses66_: /tmp/tmp2cses66_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.size(); i++) {\n        ret += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp4wtn6075: /tmp/tmp4wtn6075.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] + ((s[i] - 'a' + 1) * 2) - 'a';\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmpe4yq084r: /tmp/tmpe4yq084r.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); ++i) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += (s[i] - 'a' + 'a' - 2) % 26 + 'a';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += (s[i] - 'A' + 'A' - 2) % 26 + 'A';\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmpal4k_4hk: /tmp/tmpal4k_4hk.cpp:31: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i=0; i<s.length(); i++) {\n        res += s[i] - 'a' + 2*(s[i] - 'a') + 'a';\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp3u_8cdj3: /tmp/tmp3u_8cdj3.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += s[i] - 'a' + 'a';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += s[i] - 'A' + 'a';\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmprvz854sc: /tmp/tmprvz854sc.cpp:31: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpnbsk6rph: /tmp/tmpnbsk6rph.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp150wplfm: /tmp/tmp150wplfm.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 2 * (s[i] - 'a');\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292983,
      "stdout": "",
      "stderr": "tmpegam989u: /tmp/tmpegam989u.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp2cses66_: /tmp/tmp2cses66_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] / 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmpp1lvqft_: /tmp/tmpp1lvqft_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[i] - 'a' + 'a';\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpj4pvc1t_: /tmp/tmpj4pvc1t_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpnbsk6rph: /tmp/tmpnbsk6rph.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpu28noo97: /tmp/tmpu28noo97.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 2 * (s[i] / 2);\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpf02h65vh: /tmp/tmpf02h65vh.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpnbsk6rph: /tmp/tmpnbsk6rph.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 'a';\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmp03vivij_: /tmp/tmp03vivij_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[(i + 2) % s.size()];\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp4h42mczu: /tmp/tmp4h42mczu.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        int index = s[i] - 'a';\n        index = (index + 2) % 26;\n        result += 'a' + index;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpp931bt08: /tmp/tmpp931bt08.cpp:27: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a';\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpnihzz9n0: /tmp/tmpnihzz9n0.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result.push_back(s[i] + 2 * (s[i] / 2));\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpl5flq86l: /tmp/tmpl5flq86l.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 'a' + 'a';\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmptbuoygfn: /tmp/tmptbuoygfn.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        res.push_back(s[i] - 2 * (s[i] % 2));\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpset9msxp: /tmp/tmpset9msxp.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp3txoop4q: /tmp/tmp3txoop4q.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmp2cm7pq8p: /tmp/tmp2cm7pq8p.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmp2cm7pq8p: /tmp/tmp2cm7pq8p.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.size(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpw3_lmawl: /tmp/tmpw3_lmawl.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpzm08w01j: /tmp/tmpzm08w01j.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp2cses66_: /tmp/tmp2cses66_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpnbsk6rph: /tmp/tmpnbsk6rph.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (auto c : s) {\n        if (c >= 'a' && c <= 'z') {\n            res += (char)(c + 2);\n        } else {\n            res += c;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmp0h0kzp4v: /tmp/tmp0h0kzp4v.cpp:29: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] / 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpbldpc55f: /tmp/tmpbldpc55f.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpfk5e7xud: /tmp/tmpfk5e7xud.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a') * 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpmuuejjfo: /tmp/tmpmuuejjfo.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[(i + 2) % s.size()];\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp4h42mczu: /tmp/tmp4h42mczu.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for(int i = 0; i < s.length(); i++) {\n        ret.push_back(s[i] + (s[i] - 'a' + 'a') % 26);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpgy7bnpq2: /tmp/tmpgy7bnpq2.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.size(); i++) {\n        ret += s[(i + 2) % s.size()];\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmp1w717plw: /tmp/tmp1w717plw.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpnbsk6rph: /tmp/tmpnbsk6rph.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] / 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpbldpc55f: /tmp/tmpbldpc55f.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] + s[i + 2];\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpac1z175q: /tmp/tmpac1z175q.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmprdpkzf75: /tmp/tmprdpkzf75.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        res.push_back(s[i] - 2 * (s[i] - 'a'));\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpumzr5qx8: /tmp/tmpumzr5qx8.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] + ((s[i] - 'a') + 2) % 26 + 'a';\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpzxipmm4o: /tmp/tmpzxipmm4o.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.length(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpr1dgxzvt: /tmp/tmpr1dgxzvt.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.size(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpw3_lmawl: /tmp/tmpw3_lmawl.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        res += s[i] - 'a' + (s[i] - 'a' + 2) % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpjmhufdlo: /tmp/tmpjmhufdlo.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        int index = s[i] - 'a';\n        if (index < 0) {\n            index = 26 + index;\n        }\n        result += (char)(index + 2);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmp2xs2owbk: /tmp/tmp2xs2owbk.cpp:29: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 2 * (s[i] / 2);\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpf02h65vh: /tmp/tmpf02h65vh.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        result.push_back(s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpcfi22urf: /tmp/tmpcfi22urf.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmphw6rpfgm: /tmp/tmphw6rpfgm.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] / 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpbldpc55f: /tmp/tmpbldpc55f.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += (s[i] - 'a' + 'a' + 'a') % 26 + 'a';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += (s[i] - 'A' + 'A' + 'A') % 26 + 'A';\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmps_2dqqnb: /tmp/tmps_2dqqnb.cpp:31: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 'a';\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmp03vivij_: /tmp/tmp03vivij_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] / 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpbldpc55f: /tmp/tmpbldpc55f.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        result.push_back(s[i] - 2 * (s[i] / 2));\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpe_kxp0jc: /tmp/tmpe_kxp0jc.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a') * 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmp2mpm4261: /tmp/tmp2mpm4261.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpnbsk6rph: /tmp/tmpnbsk6rph.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp3txoop4q: /tmp/tmp3txoop4q.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.length(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpx6nyd7ce: /tmp/tmpx6nyd7ce.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.length(); i++) {\n        res += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmp0ir_nds7: /tmp/tmp0ir_nds7.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a') * 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmp2mpm4261: /tmp/tmp2mpm4261.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s[i];\n        int index = (c - 'a') + 2;\n        if(index > 25) {\n            index -= 26;\n        }\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmptvkixung: /tmp/tmptvkixung.cpp:30: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp3txoop4q: /tmp/tmp3txoop4q.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[(i + 2) % s.size()];\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmphpezaz5l: /tmp/tmphpezaz5l.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (char c : s) {\n        if (c >= 'a' && c <= 'z') {\n            result += c - 2;\n        } else if (c >= 'A' && c <= 'Z') {\n            result += c + 2;\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpya33bgq4: /tmp/tmpya33bgq4.cpp:31: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpu28noo97: /tmp/tmpu28noo97.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp3txoop4q: /tmp/tmp3txoop4q.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        res += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmprriut5x9: /tmp/tmprriut5x9.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.length(); i++) {\n        res += s[i] - 2 * (s[i] - 'a');\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpba4tcxlr: /tmp/tmpba4tcxlr.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (auto c : s) {\n        if (c >= 'a' && c <= 'z') {\n            res += c - 2;\n        } else if (c >= 'A' && c <= 'Z') {\n            res += c - 2;\n        } else {\n            res += c;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpeq5hvt_e: /tmp/tmpeq5hvt_e.cpp:31: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        res.push_back(s[i] - 2*(s[i]/2));\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpo_d3k56s: /tmp/tmpo_d3k56s.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] - 2 * (s[i] / 2);\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpf02h65vh: /tmp/tmpf02h65vh.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.size(); i++) {\n        ret += s[i] - 2 * (s[i] - 'a');\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpw0qcq9v0: /tmp/tmpw0qcq9v0.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.size(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a') * 2;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpazldl58m: /tmp/tmpazldl58m.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 2 * (s[i] / 2);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpj7340ryc: /tmp/tmpj7340ryc.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for(int i = 0; i < s.size(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpkuan172k: /tmp/tmpkuan172k.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.size(); ++i) {\n        ret.push_back(s[i] + 2 * (s[i] - 'a'));\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpate43pt8: /tmp/tmpate43pt8.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + (s[i] - 'a' + 2) % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmph1zq_ky3: /tmp/tmph1zq_ky3.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp_8wwm4da: /tmp/tmp_8wwm4da.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] + ((s[i] - 'a' + 2) % 26) + 'a';\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpamvt_r7b: /tmp/tmpamvt_r7b.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[i] - 2 * (s[i] - 'a' + 1);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpgm95nlvo: /tmp/tmpgm95nlvo.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); ++i) {\n        result += s[i] - 'a' + 'a';\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmptg134svd: /tmp/tmptg134svd.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        int index = (s[i] - 'a') + 2;\n        if (index > 25) {\n            index -= 26;\n        }\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmp5fy8rfyg: /tmp/tmp5fy8rfyg.cpp:29: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (auto c : s) {\n        if (c >= 'a' && c <= 'z') {\n            result += (char)(c + 2);\n        } else {\n            result += c;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmppptv2ya4: /tmp/tmppptv2ya4.cpp:29: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmp6izfgkmo: /tmp/tmp6izfgkmo.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (auto c : s) {\n        result += (c + 2) % 26 + 'a';\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmptj3mbllz: /tmp/tmptj3mbllz.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); ++i) {\n        result += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmp4vofh9ct: /tmp/tmp4vofh9ct.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        res += s[i] - 2 * (s[i] - 'a');\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpvtuvm4i7: /tmp/tmpvtuvm4i7.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (auto c : s) {\n        result += (c + 2) % 26 + 'a';\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmptj3mbllz: /tmp/tmptj3mbllz.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.length(); i++) {\n        char c = s[i];\n        int index = (c - 'a') + 2;\n        if(index >= 26) {\n            index -= 26;\n        }\n        result += (char)(index + 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpmffym1cm: /tmp/tmpmffym1cm.cpp:30: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for(int i = 0; i < s.size(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpkuan172k: /tmp/tmpkuan172k.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp2cses66_: /tmp/tmp2cses66_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.length(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpu28noo97: /tmp/tmpu28noo97.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] - 'a') + 'a';\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmp2cm7pq8p: /tmp/tmp2cm7pq8p.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmprdpkzf75: /tmp/tmprdpkzf75.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        result += s[i] - 2 * (s[i] / 2);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292982,
      "stdout": "",
      "stderr": "tmp0iykpwox: /tmp/tmp0iykpwox.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpbf10ydx0: /tmp/tmpbf10ydx0.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmp6izfgkmo: /tmp/tmp6izfgkmo.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res.push_back(s[i] + 2 * (s[i] - 'a'));\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpnqs7j2sm: /tmp/tmpnqs7j2sm.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 2 * (s[i] / 2);\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmpj7340ryc: /tmp/tmpj7340ryc.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpendvl1yg: /tmp/tmpendvl1yg.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp7wxwjhqp: /tmp/tmp7wxwjhqp.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] / 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292981,
      "stdout": "",
      "stderr": "tmpnkad9zig: /tmp/tmpnkad9zig.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpnbsk6rph: /tmp/tmpnbsk6rph.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a';\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpnihzz9n0: /tmp/tmpnihzz9n0.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.length(); i++) {\n        res += s[i] + s[i+2];\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpg9ee7prb: /tmp/tmpg9ee7prb.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        res += s[(i+2)%s.size()];\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmp372m8j7z: /tmp/tmp372m8j7z.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        int index = (s[i] - 'a') + (26 * 2);\n        if (index >= 26) {\n            index -= 26;\n        }\n        result.push_back(index + 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmph_qj0abn: /tmp/tmph_qj0abn.cpp:29: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            result += s[(s[i] - 'a' + 26) % 26 + 'a'];\n        }\n        else if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += s[(s[i] - 'A' + 26) % 26 + 'A'];\n        }\n        else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpi8jq2bry: /tmp/tmpi8jq2bry.cpp:33: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.length(); i++) {\n        res += s[i] + s[i] + s[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpqvukhhrj: /tmp/tmpqvukhhrj.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 2 * (s[i] - 'a');\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpul0mz8ik: /tmp/tmpul0mz8ik.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmp2cses66_: /tmp/tmp2cses66_.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        ret += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmpbf10ydx0: /tmp/tmpbf10ydx0.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        res += s[i] - 'a' + (s[i] - 'a' + 2) % 26;\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292984,
      "stdout": "",
      "stderr": "tmpjmhufdlo: /tmp/tmpjmhufdlo.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        res += s[i] - 2 * (s[i] - 'a');\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpdhq3w1sj: /tmp/tmpdhq3w1sj.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292978,
      "stdout": "",
      "stderr": "tmpnbsk6rph: /tmp/tmpnbsk6rph.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        res += s[(i + 2) % s.size()];\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292986,
      "stdout": "",
      "stderr": "tmphpezaz5l: /tmp/tmphpezaz5l.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); ++i) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmp_pa_y89n: /tmp/tmp_pa_y89n.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (int i = 0; i < s.size(); ++i) {\n        ret.push_back(s[i] + s[i + 2]);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmp7q6b3hvi: /tmp/tmp7q6b3hvi.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] - 2 * (s[i] / 2);\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292981,
      "stdout": "",
      "stderr": "tmpnkad9zig: /tmp/tmpnkad9zig.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret;\n    for (auto c : s) {\n        ret += (c + 2) % 26 + 'a';\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmp6pdi6dfe: /tmp/tmp6pdi6dfe.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string ret = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        ret += s[i] + s[i] + s[i];\n    }\n    return ret;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpyyr5ug9g: /tmp/tmpyyr5ug9g.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i=0; i<s.length(); i++) {\n        res.push_back(s[i] + 2*(s[i]/2));\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpjccini1r: /tmp/tmpjccini1r.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        res.push_back(s[i] + 2*(s[i]/2));\n    }\n    return res;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmp5rbmodt0: /tmp/tmp5rbmodt0.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmprdpkzf75: /tmp/tmprdpkzf75.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        result += s[i] + 2 * (s[i] - 'a');\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292988,
      "stdout": "",
      "stderr": "tmpcmtipncr: /tmp/tmpcmtipncr.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function encrypt that takes a string as an argument and\n// returns a string encrypted with the alphabet being rotated. \n// The alphabet should be rotated in a manner such that the letters \n// shift down by two multiplied to two places.\n// For example:\n// >>> encrypt('hi')\n// 'lm'\n// >>> encrypt('asdfghjkl')\n// 'ewhjklnop'\n// >>> encrypt('gf')\n// 'kj'\n// >>> encrypt('et')\n// 'ix'\nstd::string encrypt(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        result += s[i] - 'a' + 'a' + (s[i] - 'a' + 'a') % 26;\n    }\n    return result;\n}\nint main() {\n    auto candidate = encrypt;\n    assert(candidate((\"hi\")) == (\"lm\"));\n    assert(candidate((\"asdfghjkl\")) == (\"ewhjklnop\"));\n    assert(candidate((\"gf\")) == (\"kj\"));\n    assert(candidate((\"et\")) == (\"ix\"));\n    assert(candidate((\"faewfawefaewg\")) == (\"jeiajeaijeiak\"));\n    assert(candidate((\"hellomyfriend\")) == (\"lippsqcjvmirh\"));\n    assert(candidate((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")) == (\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"));\n    assert(candidate((\"a\")) == (\"e\"));\n}\n",
      "timestamp": 1664292980,
      "stdout": "",
      "stderr": "tmprdpkzf75: /tmp/tmprdpkzf75.cpp:25: int main(): Assertion `candidate((\"hi\")) == (\"lm\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}