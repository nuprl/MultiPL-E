{
  "name": "HumanEval_111_histogram",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n",
  "tests": "}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto c : test) {\n        if(result.find(c) == result.end()) {\n            result[c] = 1;\n        } else {\n            result[c] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmps9tt59cv.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmps9tt59cv.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(result.find(c) == result.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmps9tt59cv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(hist.find(s) == hist.end()) {\n            hist[s] = 1;\n        } else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpgggvykt2: /tmp/tmpgggvykt2.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(!s.empty()) {\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpblx4iuui: /tmp/tmpblx4iuui.cpp:31: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(std::string::iterator it = test.begin(); it != test.end(); ++it) {\n        std::string letter = std::string(1, *it);\n        if(result.find(letter) == result.end()) {\n            result[letter] = 1;\n        } else {\n            result[letter] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpus7lj2iq: /tmp/tmpus7lj2iq.cpp:31: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    std::string s;\n    for(int i=0;i<test.size();i++) {\n        s=test.substr(i,1);\n        if(h.find(s)==h.end()) {\n            h[s]=1;\n        }\n        else {\n            h[s]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpx1k5yj5k: /tmp/tmpx1k5yj5k.cpp:33: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        } else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmp_bjg082t.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp_bjg082t.cpp:20:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp_bjg082t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss >> s) {\n        if(res.find(s) == res.end()) {\n            res[s] = 1;\n        } else {\n            res[s]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmphgg251r2: /tmp/tmphgg251r2.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> map;\n    for(int i=0;i<test.size();i++) {\n        if(map.find(test[i])==map.end()) {\n            map[test[i]]=1;\n        }\n        else {\n            map[test[i]]++;\n        }\n    }\n    return map;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmp8kby4is1.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp8kby4is1.cpp:20:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(map.find(test[i])==map.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp8kby4is1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        }\n        else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpou9kznih.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpou9kznih.cpp:20:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpou9kznih.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto c : test) {\n        if(hist.find(c) == hist.end()) {\n            hist[c] = 1;\n        }\n        else {\n            hist[c] += 1;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpbpik3iwj.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpbpik3iwj.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(c) == hist.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpbpik3iwj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_strin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(hist.find(s)==hist.end()) {\n            hist[s]=1;\n        }\n        else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpwq_486gz: /tmp/tmpwq_486gz.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto c : test) {\n        if(hist.find(c) == hist.end()) {\n            hist[c] = 1;\n        } else {\n            hist[c]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmp58idnd51.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp58idnd51.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(c) == hist.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp58idnd51.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_strin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        }\n        else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpou9kznih.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpou9kznih.cpp:20:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpou9kznih.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(res.find(s)==res.end()) {\n            res[s]=1;\n        } else {\n            res[s]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpchhb9afq: /tmp/tmpchhb9afq.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(auto i : test) {\n        if(res.find(i) == res.end()) {\n            res[i] = 1;\n        }\n        else {\n            res[i]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkawadu2c.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkawadu2c.cpp:20:22: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(res.find(i) == res.end()) {\n      |                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkawadu2c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(h.find(test[i])==h.end()) {\n            h[test[i]]=1;\n        } else {\n            h[test[i]]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpcnx7gm2o.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpcnx7gm2o.cpp:21:26: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(h.find(test[i])==h.end()) {\n      |                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpcnx7gm2o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')){\n        if(h.find(s)==h.end())\n            h[s]=1;\n        else\n            h[s]++;\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmp28n2u0lo: /tmp/tmp28n2u0lo.cpp:32: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::string word;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') {\n            if(word!=\"\") {\n                hist[word]++;\n                word=\"\";\n            }\n        } else {\n            word+=test[i];\n        }\n    }\n    if(word!=\"\") {\n        hist[word]++;\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpg34bo5pw: /tmp/tmpg34bo5pw.cpp:38: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto c:test) {\n        if(hist.find(c)==hist.end()) {\n            hist[c]=1;\n        } else {\n            hist[c]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmphpopn0kh.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmphpopn0kh.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(c)==hist.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmphpopn0kh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto c : test) {\n        if(result.find(c) == result.end()) {\n            result[c] = 1;\n        } else {\n            result[c]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpf0ap6lox.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpf0ap6lox.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(result.find(c) == result.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpf0ap6lox.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::string cur;\n    for(auto i = 0; i < test.size(); ++i) {\n        if(test[i] == ' ') {\n            if(cur.size() > 0) {\n                res[cur]++;\n                cur.clear();\n            }\n        } else {\n            cur += test[i];\n        }\n    }\n    if(cur.size() > 0) {\n        res[cur]++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpi591tl0h: /tmp/tmpi591tl0h.cpp:38: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(hist.find(s)==hist.end()) {\n            hist[s]=1;\n        } else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpymw095ug: /tmp/tmpymw095ug.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(int i=0;i<test.size();i++) {\n        if(h.find(test[i])==h.end()) {\n            h[test[i]]=1;\n        } else {\n            h[test[i]]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmp3mi_tz69.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp3mi_tz69.cpp:20:26: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(h.find(test[i])==h.end()) {\n      |                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp3mi_tz69.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(std::string::iterator it = test.begin(); it != test.end(); ++it) {\n        std::string temp = \"\";\n        temp += *it;\n        if(hist.find(temp) == hist.end()) {\n            hist[temp] = 1;\n        }\n        else {\n            hist[temp] += 1;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmp122yazzf: /tmp/tmp122yazzf.cpp:33: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        } else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmp_bjg082t.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp_bjg082t.cpp:20:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp_bjg082t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(auto c:test) {\n        if(h.find(c)==h.end()) {\n            h[c]=1;\n        }\n        else {\n            h[c]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmp6t5_t9q6.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp6t5_t9q6.cpp:20:20: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(h.find(c)==h.end()) {\n      |                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp6t5_t9q6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        }\n        else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpou9kznih.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpou9kznih.cpp:20:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpou9kznih.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto c : test) {\n        if(hist.find(c) == hist.end()) {\n            hist[c] = 1;\n        } else {\n            hist[c]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmp58idnd51.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp58idnd51.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(c) == hist.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp58idnd51.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_strin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(res.find(test[i])==res.end()) {\n            res[test[i]]=1;\n        } else {\n            res[test[i]]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmpmi15gv8e.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpmi15gv8e.cpp:21:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(res.find(test[i])==res.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpmi15gv8e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(auto i = 0; i < test.size(); i++) {\n        if(res.find(test[i]) == res.end()) {\n            res[test[i]] = 1;\n        } else {\n            res[test[i]]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmpyrecjgbd.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpyrecjgbd.cpp:20:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(res.find(test[i]) == res.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpyrecjgbd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_stri",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s) == result.end()) {\n            result[s] = 1;\n        } else {\n            result[s] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmpzq65kb3n: /tmp/tmpzq65kb3n.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss >> s) {\n        if(result.find(s) == result.end()) {\n            result[s] = 1;\n        } else {\n            result[s] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmp1_m0chqk: /tmp/tmp1_m0chqk.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        } else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmp_bjg082t.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp_bjg082t.cpp:20:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp_bjg082t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]!=' ') {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmp2ijhy_py.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp2ijhy_py.cpp:21:19: error: no match for \u2018operator[]\u2019 (operand types are \u2018std::map<std::__cxx11::basic_string<char>, long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019})\n   21 |             result[test[i]]++;\n      |                   ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp2ijhy_py.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:490:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type = long int; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n  490 |       operator[](const key_type& __k)\n      |       ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:490:34: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n  490 |       operator[](const key_type& __k)\n      |                  ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:510:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& std::map<_Key, _Tp, _Compare, _Alloc>::operator[](std::map<_Key, _Tp, _Compare, _Alloc>::key_type&&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(hist.find(s)==hist.end()) {\n            hist[s]=1;\n        } else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmpj2aar046: /tmp/tmpj2aar046.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::string curr;\n    for(auto c : test) {\n        if(c == ' ') {\n            if(curr.size() > 0) {\n                res[curr]++;\n                curr.clear();\n            }\n        } else {\n            curr += c;\n        }\n    }\n    if(curr.size() > 0) {\n        res[curr]++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmprxy8xvw1: /tmp/tmprxy8xvw1.cpp:38: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')){\n        if(result.find(s)==result.end()){\n            result[s]=1;\n        }\n        else{\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmphxs6frhw: /tmp/tmphxs6frhw.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s) == result.end()) {\n            result[s] = 1;\n        } else {\n            result[s] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmpzq65kb3n: /tmp/tmpzq65kb3n.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s) == result.end()) {\n            result[s] = 1;\n        } else {\n            result[s] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmpzq65kb3n: /tmp/tmpzq65kb3n.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(auto c : test) {\n        if(h.find(c) == h.end()) {\n            h[c] = 1;\n        }\n        else {\n            h[c]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmpl3jp66gv.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpl3jp66gv.cpp:20:20: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(h.find(c) == h.end()) {\n      |                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpl3jp66gv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        std::string temp = test.substr(i,1);\n        if(result.find(temp)==result.end()) {\n            result[temp] = 1;\n        } else {\n            result[temp] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "tmp7fbs6x_t: /tmp/tmp7fbs6x_t.cpp:31: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(hist.find(s)==hist.end()) {\n            hist[s]=1;\n        }\n        else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpwq_486gz: /tmp/tmpwq_486gz.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')){\n        if(result.find(s)==result.end()){\n            result[s]=1;\n        }\n        else{\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmphxs6frhw: /tmp/tmphxs6frhw.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto c : test) {\n        if(result.find(c) == result.end()) {\n            result[c] = 1;\n        } else {\n            result[c] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmps9tt59cv.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmps9tt59cv.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(result.find(c) == result.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmps9tt59cv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss >> s) {\n        if(res.find(s) == res.end()) {\n            res[s] = 1;\n        } else {\n            res[s] += 1;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "tmp6be8v_nn: /tmp/tmp6be8v_nn.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> map;\n    for(int i=0;i<test.size();i++) {\n        if(map.find(test[i])==map.end()) {\n            map[test[i]]=1;\n        } else {\n            map[test[i]]++;\n        }\n    }\n    return map;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmpgta6e6n4.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpgta6e6n4.cpp:20:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(map.find(test[i])==map.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpgta6e6n4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss >> word) {\n        if(result.find(word) == result.end()) {\n            result[word] = 1;\n        }\n        else {\n            result[word]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "tmp1zg_4vtx: /tmp/tmp1zg_4vtx.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(hist.find(s)==hist.end()) {\n            hist[s]=1;\n        }\n        else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "tmp9ss4jskq: /tmp/tmp9ss4jskq.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        std::string temp = test.substr(i,1);\n        if(result.find(temp)==result.end()) {\n            result[temp] = 1;\n        }\n        else {\n            result[temp] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "tmpgvq8y24v: /tmp/tmpgvq8y24v.cpp:32: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(h.find(test[i])==h.end()) {\n            h[test[i]]=1;\n        } else {\n            h[test[i]]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpcnx7gm2o.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpcnx7gm2o.cpp:21:26: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(h.find(test[i])==h.end()) {\n      |                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpcnx7gm2o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        std::string temp=test.substr(i,1);\n        if(result.find(temp)==result.end()) {\n            result[temp]=1;\n        }\n        else {\n            result[temp]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "tmpnm0559qa: /tmp/tmpnm0559qa.cpp:32: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        }\n        else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmp72f75_u4.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp72f75_u4.cpp:21:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp72f75_u4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> map;\n    for(int i=0;i<test.size();i++) {\n        if(map.find(test[i])==map.end()) {\n            map[test[i]]=1;\n        } else {\n            map[test[i]]++;\n        }\n    }\n    return map;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmpgta6e6n4.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpgta6e6n4.cpp:20:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(map.find(test[i])==map.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpgta6e6n4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')){\n        if(res.find(s)==res.end())\n            res[s]=1;\n        else\n            res[s]++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "tmp8e9rsnn9: /tmp/tmp8e9rsnn9.cpp:32: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(!s.empty()) {\n            h[s]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "tmp9rfoe_n7: /tmp/tmp9rfoe_n7.cpp:31: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    std::string word;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') {\n            if(word.size()>0) {\n                h[word]++;\n                word.clear();\n            }\n        } else {\n            word+=test[i];\n        }\n    }\n    if(word.size()>0) {\n        h[word]++;\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "tmpfloa8if4: /tmp/tmpfloa8if4.cpp:38: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(auto c : test) {\n        if(h.find(c) == h.end()) {\n            h[c] = 1;\n        }\n        else {\n            h[c] += 1;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmp673bmmjk.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp673bmmjk.cpp:20:20: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(h.find(c) == h.end()) {\n      |                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp673bmmjk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto c : test) {\n        if(hist.find(c) == hist.end()) {\n            hist[c] = 1;\n        } else {\n            hist[c] += 1;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmpfgcwbyll.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpfgcwbyll.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(c) == hist.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpfgcwbyll.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_strin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(res.find(s)==res.end()) {\n            res[s]=1;\n        }\n        else {\n            res[s]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "tmps_oposs4: /tmp/tmps_oposs4.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto ch:test) {\n        if(hist.find(ch)==hist.end()) {\n            hist[ch]=1;\n        } else {\n            hist[ch]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmp4s221a5i.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp4s221a5i.cpp:20:24: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(ch)==hist.end()) {\n      |                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp4s221a5i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_strin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        std::string cur = test.substr(i,1);\n        if(res.find(cur)==res.end()) {\n            res[cur] = 1;\n        }\n        else {\n            res[cur]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "tmpteb2e9aw: /tmp/tmpteb2e9aw.cpp:32: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> map;\n    for(auto i = 0; i < test.size(); i++) {\n        if(map.find(test[i]) == map.end()) {\n            map[test[i]] = 1;\n        }\n        else {\n            map[test[i]] += 1;\n        }\n    }\n    return map;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmptvls090m.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmptvls090m.cpp:20:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(map.find(test[i]) == map.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmptvls090m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_stri",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(res.find(s)==res.end()) {\n            res[s]=1;\n        } else {\n            res[s]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "tmp3q440lz9: /tmp/tmp3q440lz9.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(std::string::iterator it = test.begin(); it != test.end(); ++it) {\n        std::string s = \"\";\n        s += *it;\n        if(hist.find(s) == hist.end()) {\n            hist[s] = 1;\n        } else {\n            hist[s] += 1;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "tmpicoenu8l: /tmp/tmpicoenu8l.cpp:32: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::string word;\n    for(std::string::iterator it = test.begin(); it != test.end(); ++it) {\n        if(*it == ' ') {\n            if(word.size() > 0) {\n                result[word]++;\n                word.clear();\n            }\n        } else {\n            word += *it;\n        }\n    }\n    if(word.size() > 0) {\n        result[word]++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "tmp390llcx2: /tmp/tmp390llcx2.cpp:38: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(h.count(s)==0) {\n            h[s]=1;\n        } else {\n            h[s]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "tmpkc9femef: /tmp/tmpkc9femef.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto c : test) {\n        if(hist.find(c) == hist.end()) {\n            hist[c] = 1;\n        } else {\n            hist[c] += 1;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmpfgcwbyll.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpfgcwbyll.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(c) == hist.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpfgcwbyll.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_strin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss >> s) {\n        if(h.find(s) == h.end()) {\n            h[s] = 1;\n        }\n        else {\n            h[s]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "tmpyiujixnf: /tmp/tmpyiujixnf.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')){\n        if(hist.find(s)==hist.end())\n            hist[s]=1;\n        else\n            hist[s]++;\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "tmp9olw4cvl: /tmp/tmp9olw4cvl.cpp:32: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(std::string::iterator it = test.begin(); it != test.end(); it++) {\n        if(hist.find(*it) == hist.end()) {\n            hist[*it] = 1;\n        }\n        else {\n            hist[*it] += 1;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmpaplly5k_.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpaplly5k_.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(*it) == hist.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpaplly5k_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(auto c : test) {\n        if(h.find(c) == h.end()) {\n            h[c] = 1;\n        } else {\n            h[c]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmpzs3etfgb.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpzs3etfgb.cpp:20:20: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(h.find(c) == h.end()) {\n      |                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpzs3etfgb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto i:test) {\n        if(hist.find(i)==hist.end()) {\n            hist[i]=1;\n        }\n        else {\n            hist[i]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmppy63vbxt.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmppy63vbxt.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(i)==hist.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmppy63vbxt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(hist.find(s)==hist.end()) {\n            hist[s] = 1;\n        } else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpeunarqvm: /tmp/tmpeunarqvm.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(auto c : test) {\n        if(h.find(c) == h.end()) {\n            h[c] = 1;\n        } else {\n            h[c] += 1;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmp7cfhiko3.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp7cfhiko3.cpp:20:20: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(h.find(c) == h.end()) {\n      |                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp7cfhiko3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(res.find(test[i])==res.end()) {\n            res[test[i]]=1;\n        }\n        else {\n            res[test[i]]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmp2sbpavbp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp2sbpavbp.cpp:21:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(res.find(test[i])==res.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp2sbpavbp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto c : test) {\n        if(hist.count(c) == 0) {\n            hist[c] = 1;\n        }\n        else {\n            hist[c]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "/tmp/tmpm9imxbgi.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpm9imxbgi.cpp:20:24: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::count(char&)\u2019\n   20 |         if(hist.count(c) == 0) {\n      |                        ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpm9imxbgi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1214:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::size_type std::map<_Key, _Tp, _Compare, _Alloc>::count(const key_type&) const [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::size_type = long unsigned int; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1214 |       count(const key_type& __x) const\n      |       ^~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1214:29: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1214 |       count(const key_type& __x) const\n      |             ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1220:2: note: candidate: \u2018template<class _Kt> decltype (((const std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_count_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::count(const _Kt&) const [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >]\u2019\n 1220 |  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(res.find(s)==res.end()) {\n            res[s]=1;\n        } else {\n            res[s]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpchhb9afq: /tmp/tmpchhb9afq.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(res.find(test[i])==res.end()) {\n            res[test[i]]=1;\n        } else {\n            res[test[i]]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmpmi15gv8e.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpmi15gv8e.cpp:21:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(res.find(test[i])==res.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpmi15gv8e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s) == result.end()) {\n            result[s] = 1;\n        } else {\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdgup99ll: /tmp/tmpdgup99ll.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss >> word) {\n        if(hist.find(word) == hist.end()) {\n            hist[word] = 1;\n        }\n        else {\n            hist[word] += 1;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpix1a6umd: /tmp/tmpix1a6umd.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(hist.find(s)==hist.end()) {\n            hist[s]=1;\n        } else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmpj2aar046: /tmp/tmpj2aar046.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(std::string::iterator it = test.begin(); it != test.end(); ++it) {\n        if(h.find(*it) == h.end()) {\n            h[*it] = 1;\n        }\n        else {\n            h[*it] += 1;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "/tmp/tmpsjh2fep4.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpsjh2fep4.cpp:20:22: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(h.find(*it) == h.end()) {\n      |                      ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpsjh2fep4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<cha",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto c : test) {\n        if(result.find(c) == result.end()) {\n            result[c] = 1;\n        } else {\n            result[c] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmps9tt59cv.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmps9tt59cv.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(result.find(c) == result.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmps9tt59cv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        }\n        else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpou9kznih.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpou9kznih.cpp:20:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpou9kznih.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto c:test) {\n        if(hist.find(c)==hist.end()) {\n            hist[c]=1;\n        } else {\n            hist[c]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmphpopn0kh.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmphpopn0kh.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(c)==hist.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmphpopn0kh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(res.find(test[i])==res.end()) {\n            res[test[i]]=1;\n        } else {\n            res[test[i]]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmpmi15gv8e.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpmi15gv8e.cpp:21:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(res.find(test[i])==res.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpmi15gv8e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto c : test) {\n        if(result.find(c) == result.end()) {\n            result[c] = 1;\n        } else {\n            result[c] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmps9tt59cv.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmps9tt59cv.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(result.find(c) == result.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmps9tt59cv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto c: test) {\n        if(result.find(c) == result.end()) {\n            result[c] = 1;\n        } else {\n            result[c] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "/tmp/tmpswo930ha.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpswo930ha.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(result.find(c) == result.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpswo930ha.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(hist.find(s)==hist.end()) {\n            hist[s]=1;\n        } else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpymw095ug: /tmp/tmpymw095ug.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> map;\n    for(auto i = 0; i < test.size(); i++) {\n        if(map.find(test[i]) == map.end()) {\n            map[test[i]] = 1;\n        } else {\n            map[test[i]] += 1;\n        }\n    }\n    return map;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "/tmp/tmpqsjjmmta.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpqsjjmmta.cpp:20:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(map.find(test[i]) == map.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpqsjjmmta.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_stri",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s)==result.end()) {\n            result[s]=1;\n        } else {\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "tmp2yg8yuf3: /tmp/tmp2yg8yuf3.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(std::string::iterator it = test.begin(); it != test.end(); ++it) {\n        if(hist.find(*it) == hist.end()) {\n            hist[*it] = 1;\n        } else {\n            hist[*it] += 1;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "/tmp/tmpwip2qf3f.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwip2qf3f.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(*it) == hist.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwip2qf3f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto c : test) {\n        if(result.find(c) == result.end()) {\n            result[c] = 1;\n        } else {\n            result[c]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpf0ap6lox.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpf0ap6lox.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(result.find(c) == result.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpf0ap6lox.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(h.find(test[i])==h.end()) {\n            h[test[i]]=1;\n        } else {\n            h[test[i]]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpcnx7gm2o.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpcnx7gm2o.cpp:21:26: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(h.find(test[i])==h.end()) {\n      |                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpcnx7gm2o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(auto ch:test) {\n        if(res.find(ch)==res.end()) {\n            res[ch]=1;\n        }\n        else {\n            res[ch]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "/tmp/tmp61ckzz61.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp61ckzz61.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(res.find(ch)==res.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp61ckzz61.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(hist.find(s)==hist.end()) {\n            hist[s]=1;\n        } else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmpj2aar046: /tmp/tmpj2aar046.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto c : test) {\n        if(result.find(c) == result.end()) {\n            result[c] = 1;\n        } else {\n            result[c] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmps9tt59cv.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmps9tt59cv.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(result.find(c) == result.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmps9tt59cv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        } else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmp_bjg082t.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp_bjg082t.cpp:20:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp_bjg082t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s) == result.end()) {\n            result[s] = 1;\n        } else {\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292821,
      "stdout": "",
      "stderr": "tmpdgup99ll: /tmp/tmpdgup99ll.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto c:test) {\n        if(result.find(c)==result.end()) {\n            result[c]=1;\n        } else {\n            result[c]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "/tmp/tmpn_xj74cv.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpn_xj74cv.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(result.find(c)==result.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpn_xj74cv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto c:test) {\n        if(hist.find(c)==hist.end()) {\n            hist[c]=1;\n        } else {\n            hist[c]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmphpopn0kh.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmphpopn0kh.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(c)==hist.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmphpopn0kh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(hist.find(s)==hist.end())\n            hist[s]=1;\n        else\n            hist[s]++;\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "tmpeqcccou9: /tmp/tmpeqcccou9.cpp:32: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]!=' ') {\n            if(res.find(test[i])==res.end()) {\n                res[test[i]]=1;\n            }\n            else {\n                res[test[i]]++;\n            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "/tmp/tmp3jbd3hp4.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp3jbd3hp4.cpp:21:32: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |             if(res.find(test[i])==res.end()) {\n      |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp3jbd3hp4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(auto c : test) {\n        if(h.find(c) == h.end()) {\n            h[c] = 1;\n        }\n        else {\n            h[c]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmpl3jp66gv.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpl3jp66gv.cpp:20:20: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(h.find(c) == h.end()) {\n      |                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpl3jp66gv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(!s.empty()) {\n            if(result.find(s)==result.end()) {\n                result[s]=1;\n            } else {\n                result[s]++;\n            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "tmpyi00s20h: /tmp/tmpyi00s20h.cpp:35: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> map;\n    for(int i=0;i<test.size();i++) {\n        if(map.find(test[i])==map.end()) {\n            map[test[i]]=1;\n        }\n        else {\n            map[test[i]]++;\n        }\n    }\n    return map;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmp8kby4is1.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp8kby4is1.cpp:20:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(map.find(test[i])==map.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp8kby4is1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string word;\n    while(ss >> word) {\n        if(result.find(word) == result.end()) {\n            result[word] = 1;\n        } else {\n            result[word] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "tmpqhmvo_jn: /tmp/tmpqhmvo_jn.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        hist[s]++;\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "tmp9lojv3cv: /tmp/tmp9lojv3cv.cpp:29: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(h.find(test[i])==h.end()) {\n            h[test[i]]=1;\n        }\n        else {\n            h[test[i]]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "/tmp/tmpuw0c9cp0.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpuw0c9cp0.cpp:21:26: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(h.find(test[i])==h.end()) {\n      |                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpuw0c9cp0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        if(res.find(test[i])==res.end()) {\n            res[test[i]]=1;\n        } else {\n            res[test[i]]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "/tmp/tmpbc142i_v.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpbc142i_v.cpp:20:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(res.find(test[i])==res.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpbc142i_v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> map;\n    for(int i=0;i<test.size();i++) {\n        if(map.find(test[i])==map.end()) {\n            map[test[i]]=1;\n        } else {\n            map[test[i]]++;\n        }\n    }\n    return map;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmpgta6e6n4.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpgta6e6n4.cpp:20:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(map.find(test[i])==map.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpgta6e6n4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')){\n        if(res.find(s)==res.end()){\n            res[s]=1;\n        }\n        else{\n            res[s]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "tmpiy4g_405: /tmp/tmpiy4g_405.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto c : test) {\n        if(hist.find(c) == hist.end()) {\n            hist[c] = 1;\n        } else {\n            hist[c]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmp58idnd51.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp58idnd51.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(c) == hist.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp58idnd51.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_strin",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        std::string s = test.substr(i,1);\n        if(hist.find(s)==hist.end()) {\n            hist[s] = 1;\n        } else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "tmpboodggou: /tmp/tmpboodggou.cpp:31: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(std::string::iterator it = test.begin(); it != test.end(); it++) {\n        if(hist.find(*it) == hist.end()) {\n            hist[*it] = 1;\n        }\n        else {\n            hist[*it]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "/tmp/tmpzfcw0ea3.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpzfcw0ea3.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(*it) == hist.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpzfcw0ea3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_s",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        std::string ch=test.substr(i,1);\n        if(hist.find(ch)==hist.end()) {\n            hist[ch]=1;\n        } else {\n            hist[ch]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "tmph74px5wg: /tmp/tmph74px5wg.cpp:31: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto i=0; i<test.size(); i++) {\n        if(test[i]==' ') continue;\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        } else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "/tmp/tmpcrxw4vlm.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpcrxw4vlm.cpp:21:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpcrxw4vlm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::string::iterator it;\n    for(it=test.begin();it!=test.end();it++) {\n        std::string s=*it;\n        if(hist.find(s)==hist.end()) {\n            hist[s]=1;\n        }\n        else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "/tmp/tmpylekyjn9.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpylekyjn9.cpp:21:23: error: conversion from \u2018char\u2019 to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   21 |         std::string s=*it;\n      |                       ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        std::string s=test.substr(i,1);\n        if(result.find(s)==result.end()) {\n            result[s]=1;\n        }\n        else {\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpxsyyu3q2: /tmp/tmpxsyyu3q2.cpp:32: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(hist.find(s)==hist.end()) {\n            hist[s] = 1;\n        } else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpg3rvl1ui: /tmp/tmpg3rvl1ui.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        }\n        else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpou9kznih.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpou9kznih.cpp:20:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpou9kznih.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s)==result.end()) {\n            result[s]=1;\n        } else {\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "tmp2yg8yuf3: /tmp/tmp2yg8yuf3.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        std::string temp = test.substr(i,1);\n        if(result.find(temp)==result.end()) {\n            result[temp] = 1;\n        }\n        else {\n            result[temp] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "tmpgvq8y24v: /tmp/tmpgvq8y24v.cpp:32: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(res.find(test[i])==res.end()) {\n            res[test[i]]=1;\n        }\n        else {\n            res[test[i]]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmp2sbpavbp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp2sbpavbp.cpp:21:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(res.find(test[i])==res.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp2sbpavbp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test.substr(i,1))==result.end()) {\n            result.insert(std::pair<std::string,long>(test.substr(i,1),1));\n        }\n        else {\n            result[test.substr(i,1)]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp07r3766q: /tmp/tmp07r3766q.cpp:31: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(hist.find(s)==hist.end()) {\n            hist[s] = 1;\n        } else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpg3rvl1ui: /tmp/tmpg3rvl1ui.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(res.find(test[i])==res.end()) {\n            res[test[i]]=1;\n        }\n        else {\n            res[test[i]]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmp2sbpavbp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp2sbpavbp.cpp:21:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(res.find(test[i])==res.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp2sbpavbp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]!=' ') {\n            if(res.find(test[i])==res.end()) {\n                res[test[i]]=1;\n            }\n            else {\n                res[test[i]]++;\n            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "/tmp/tmp3jbd3hp4.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp3jbd3hp4.cpp:21:32: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |             if(res.find(test[i])==res.end()) {\n      |                                ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp3jbd3hp4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basi",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]!=' ') {\n            std::string tmp = test.substr(i,test.size()-i);\n            if(res.find(tmp)==res.end()) {\n                res[tmp] = 1;\n            } else {\n                res[tmp] += 1;\n            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmpm6gz4ixk: /tmp/tmpm6gz4ixk.cpp:33: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        } else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "/tmp/tmp6_oj4x2k.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp6_oj4x2k.cpp:21:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp6_oj4x2k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(!s.empty()) {\n            if(hist.find(s) == hist.end()) {\n                hist[s] = 1;\n            }\n            else {\n                hist[s]++;\n            }\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "tmp82e95mq0: /tmp/tmp82e95mq0.cpp:36: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(auto c:test) {\n        if(hist.find(c)==hist.end()) {\n            hist[c]=1;\n        }\n        else {\n            hist[c]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292823,
      "stdout": "",
      "stderr": "/tmp/tmp2qkww9ng.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp2qkww9ng.cpp:20:23: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(hist.find(c)==hist.end()) {\n      |                       ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp2qkww9ng.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::string curr;\n    for(int i = 0; i < test.size(); i++) {\n        if(test[i] == ' ') {\n            if(curr.size() > 0) {\n                res[curr]++;\n                curr.clear();\n            }\n        }\n        else {\n            curr += test[i];\n        }\n    }\n    if(curr.size() > 0) {\n        res[curr]++;\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmpqmd0ozev: /tmp/tmpqmd0ozev.cpp:39: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto i=0;i<test.size();i++) {\n        if(result.find(test.substr(i,1))==result.end()) {\n            result[test.substr(i,1)]=1;\n        } else {\n            result[test.substr(i,1)]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmpq9v1lnzc: /tmp/tmpq9v1lnzc.cpp:30: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(res.find(s)==res.end()) {\n            res[s]=1;\n        } else {\n            res[s]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpchhb9afq: /tmp/tmpchhb9afq.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(result.find(s)==result.end()) {\n            result[s]=1;\n        } else {\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmp2cftkvyt: /tmp/tmp2cftkvyt.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s)==result.end()) {\n            result[s] = 1;\n        } else {\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmpmtqu7p7u: /tmp/tmpmtqu7p7u.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(auto c : test) {\n        if(result.find(c) == result.end()) {\n            result[c] = 1;\n        }\n        else {\n            result[c] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "/tmp/tmpyxkowx87.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpyxkowx87.cpp:20:25: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(result.find(c) == result.end()) {\n      |                         ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpyxkowx87.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(h.find(test[i])==h.end()) {\n            h[test[i]]=1;\n        } else {\n            h[test[i]]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpcnx7gm2o.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpcnx7gm2o.cpp:21:26: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(h.find(test[i])==h.end()) {\n      |                          ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpcnx7gm2o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(hist.find(s)==hist.end()) {\n            hist[s]=1;\n        } else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292817,
      "stdout": "",
      "stderr": "tmpymw095ug: /tmp/tmpymw095ug.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s)==result.end()) {\n            result[s]=1;\n        } else {\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292822,
      "stdout": "",
      "stderr": "tmp2yg8yuf3: /tmp/tmp2yg8yuf3.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s)==result.end()) {\n            result[s]=1;\n        }\n        else {\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmpfpsqjsml: /tmp/tmpfpsqjsml.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        }\n        else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpwunx9owp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpwunx9owp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpwunx9owp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(std::string::iterator it=test.begin();it!=test.end();it++) {\n        std::string temp=*it;\n        if(result.find(temp)==result.end()) {\n            result[temp]=1;\n        }\n        else {\n            result[temp]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "/tmp/tmpcg4ho317.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpcg4ho317.cpp:20:26: error: conversion from \u2018char\u2019 to non-scalar type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   20 |         std::string temp=*it;\n      |                          ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s)==result.end()) {\n            result[s] = 1;\n        }\n        else {\n            result[s]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmp5rvuwjpl: /tmp/tmp5rvuwjpl.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    std::stringstream ss(test);\n    std::string s;\n    while(ss>>s) {\n        if(hist.find(s)==hist.end()) {\n            hist[s]=1;\n        }\n        else {\n            hist[s]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292819,
      "stdout": "",
      "stderr": "tmp9ss4jskq: /tmp/tmp9ss4jskq.cpp:34: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s) == result.end()) {\n            result[s] = 1;\n        } else {\n            result[s] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmpzq65kb3n: /tmp/tmpzq65kb3n.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(auto c : test) {\n        if(h.find(c) == h.end()) {\n            h[c] = 1;\n        } else {\n            h[c]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmpzs3etfgb.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpzs3etfgb.cpp:20:20: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(h.find(c) == h.end()) {\n      |                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpzs3etfgb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::stringstream ss(test);\n    std::string s;\n    while(std::getline(ss,s,' ')) {\n        if(result.find(s) == result.end()) {\n            result[s] = 1;\n        } else {\n            result[s] += 1;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "tmpzq65kb3n: /tmp/tmpzq65kb3n.cpp:33: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test[i])==result.end()) {\n            result[test[i]]=1;\n        } else {\n            result[test[i]]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmp_bjg082t.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp_bjg082t.cpp:20:31: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(result.find(test[i])==result.end()) {\n      |                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp_bjg082t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::bas",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> res;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') continue;\n        if(res.find(test[i])==res.end()) {\n            res[test[i]]=1;\n        }\n        else {\n            res[test[i]]++;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292820,
      "stdout": "",
      "stderr": "/tmp/tmp2sbpavbp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmp2sbpavbp.cpp:21:28: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   21 |         if(res.find(test[i])==res.end()) {\n      |                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmp2sbpavbp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> hist;\n    for(int i=0;i<test.size();i++) {\n        if(hist.find(test[i])==hist.end()) {\n            hist[test[i]]=1;\n        } else {\n            hist[test[i]]++;\n        }\n    }\n    return hist;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292816,
      "stdout": "",
      "stderr": "/tmp/tmpkr9h86cp.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpkr9h86cp.cpp:20:29: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\n   20 |         if(hist.find(test[i])==hist.end()) {\n      |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpkr9h86cp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_str",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> h;\n    for(auto c : test) {\n        if(h.find(c) == h.end()) {\n            h[c] = 1;\n        }\n        else {\n            h[c]++;\n        }\n    }\n    return h;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292818,
      "stdout": "",
      "stderr": "/tmp/tmpl3jp66gv.cpp: In function \u2018std::map<std::__cxx11::basic_string<char>, long int> histogram(std::string)\u2019:\n/tmp/tmpl3jp66gv.cpp:20:20: error: no matching function for call to \u2018std::map<std::__cxx11::basic_string<char>, long int>::find(char&)\u2019\n   20 |         if(h.find(c) == h.end()) {\n      |                    ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/map:61,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:81,\n                 from /tmp/tmpl3jp66gv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:7: note: candidate: \u2018std::map<_Key, _Tp, _Compare, _Alloc>::iterator std::map<_Key, _Tp, _Compare, _Alloc>::find(const key_type&) [with _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::iterator = std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, long int> >; std::map<_Key, _Tp, _Compare, _Alloc>::key_type = std::__cxx11::basic_string<char>]\u2019\n 1168 |       find(const key_type& __x)\n      |       ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1168:28: note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const key_type&\u2019 {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 1168 |       find(const key_type& __x)\n      |            ~~~~~~~~~~~~~~~~^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_map.h:1174:2: note: candidate: \u2018template<class _Kt> decltype (((std::map<_Key, _Tp, _Compare, _Alloc>*)this)->std::map<_Key, _Tp, _Compare, _Alloc>::_M_t._M_find_tr(__x)) std::map<_Key, _Tp, _Compare, _Alloc>::find(const _Kt&) [with _Kt = _Kt; _Key = std::__cxx11::basic_string<char>; _Tp = long int; _Compare = std::less<std::__cxx11::basic_string<char> >; _Alloc = std::allocator<std::pair<const std::__cxx11::basic_string<char>, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    std::string temp;\n    for(int i=0;i<test.size();i++) {\n        if(test[i]==' ') {\n            if(temp.size()>0) {\n                result[temp]++;\n                temp.clear();\n            }\n        }\n        else {\n            temp+=test[i];\n        }\n    }\n    if(temp.size()>0) {\n        result[temp]++;\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmp8osjw6wp: /tmp/tmp8osjw6wp.cpp:39: int main(): Assertion `candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string representing a space separated lowercase letters, return a map\n// of the letter with the most repetition and containing the corresponding count.\n// If several letters have the same occurrence, return all of them.\n// Example:\n// >>> histogram('a b c')\n// {'a': 1, 'b': 1, 'c': 1}\n// >>> histogram('a b b a')\n// {'a': 2, 'b': 2}\n// >>> histogram('a b c a b')\n// {'a': 2, 'b': 2}\n// >>> histogram('b b b b a')\n// {'b': 4}\n// >>> histogram('')\n// {}\nstd::map<std::string,long> histogram(std::string test) {\n    std::map<std::string,long> result;\n    for(int i=0;i<test.size();i++) {\n        if(result.find(test.substr(i,1))==result.end()) {\n            result[test.substr(i,1)]=1;\n        }\n        else {\n            result[test.substr(i,1)]++;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = histogram;\n    assert(candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c a b\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}})));\n    assert(candidate((\"a b c d g\")) == (std::map<std::string,long>({{\"a\", 1}, {\"b\", 1}, {\"c\", 1}, {\"d\", 1}, {\"g\", 1}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"b b b b a\")) == (std::map<std::string,long>({{\"b\", 4}})));\n    assert(candidate((\"r t g\")) == (std::map<std::string,long>({{\"r\", 1}, {\"t\", 1}, {\"g\", 1}})));\n    assert(candidate((\"\")) == (std::map<std::string,long>()));\n    assert(candidate((\"a\")) == (std::map<std::string,long>({{\"a\", 1}})));\n}\n",
      "timestamp": 1664292824,
      "stdout": "",
      "stderr": "tmpy4mjie_g: /tmp/tmpy4mjie_g.cpp:31: int main(): Assertion `candidate((\"a b b a\")) == (std::map<std::string,long>({{\"a\", 2}, {\"b\", 2}}))' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}