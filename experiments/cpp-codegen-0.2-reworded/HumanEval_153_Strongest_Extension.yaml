name: HumanEval_153_Strongest_Extension
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name\
  \ of a class (a string) and a vector of extensions.\n// The extensions are to be\
  \ used to load additional classes to the class. The\n// strength of the extension\
  \ is as follows: Let CAP be the number of the uppercase\n// letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n// in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n// You should find the strongest\
  \ extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
  // If there are two or more extensions with the same strength, you should\n// choose\
  \ the one that comes first in the vector.\n// For example, if you are given \"Slices\"\
  \ as the class and a vector of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
  \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC'])\n// 'my_class.AA'\nstd::string Strongest_Extension(std::string\
  \ class_name, std::vector<std::string> extensions) {\n"
tests: "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
  Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
  , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
  Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\"\
  , (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
  ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
  t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"\
  NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n   \
  \ assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"\
  TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n  \
  \  assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\"\
  , (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"\
  __HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
  HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
  Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
  finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
  NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n\
  \    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"\
  91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"\
  671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n"
completions: ["    std::string result;\n    std::stringstream ss;\n    int strength\
    \ = 0;\n    for (auto ext : extensions) {\n        int cap = 0;\n        int sm\
    \ = 0;\n        for (auto c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            }\n            else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    for (auto\
    \ ext : extensions) {\n        if (ext.find(class_name) != std::string::npos)\
    \ {\n            result = ext;\n            break;\n        }\n    }\n    if (result.empty())\
    \ {\n        result = class_name + \".AA\";\n    }\n    return result;", "   \
    \ std::string result;\n    int strength = 0;\n    for (auto& extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto& c : extension) {\n     \
    \       if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    for (auto& extension : extensions) {\n        if (extension.size()\
    \ > result.size()) {\n            result = extension;\n        } else if (extension.size()\
    \ == result.size() && strength > 0) {\n            if (extension < result) {\n\
    \                result = extension;\n            }\n        }\n    }\n    return\
    \ class_name + \".\" + result;", "    std::string result = class_name;\n    int\
    \ strength = 0;\n    for (auto extension : extensions) {\n        int cap = 0,\
    \ sm = 0;\n        for (auto c : extension) {\n            if (c >= 'A' && c <=\
    \ 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    for (auto\
    \ extension : extensions) {\n        if (extension.find(class_name) != std::string::npos)\
    \ {\n            continue;\n        }\n        int cap = 0, sm = 0;\n        for\
    \ (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n          \
    \      cap++;\n            } else {\n                sm++;\n            }\n  \
    \      }\n        if (cap - sm > strength) {\n            strength = cap - sm;\n\
    \            result = class_name + \".\" + extension;\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    int strength = 0;\n    for (auto& extension\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (auto& c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (auto& extension : extensions) {\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            result = extension;\n            break;\n\
    \        }\n    }\n    if (result.empty()) {\n        result = class_name + \"\
    .A\";\n    }\n    return result;", "    std::string ret;\n    int cap = 0;\n \
    \   int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.size();\n\
    \        sm += ext.size();\n    }\n    cap -= sm;\n    for (auto &ext : extensions)\
    \ {\n        if (ext.size() > sm) {\n            ret = class_name + \".\" + ext;\n\
    \            return ret;\n        }\n    }\n    return class_name + \".\" + extensions[0];",
  "    std::string result;\n    std::stringstream ss;\n    int strength = 0;\n   \
    \ for (auto& extension : extensions) {\n        int cap = 0, sm = 0;\n       \
    \ for (auto& c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n     \
    \           cap++;\n            } else {\n                sm++;\n            }\n\
    \        }\n        strength += cap - sm;\n    }\n    for (auto& extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto& c : extension) {\n     \
    \       if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        if (cap - sm > strength)\
    \ {\n            strength = cap - sm;\n            result = class_name + \".\"\
    \ + extension;\n        }\n    }\n    return result;", "    std::string result\
    \ = class_name + \".\";\n    std::sort(extensions.begin(), extensions.end(), [](const\
    \ std::string &a, const std::string &b) {\n        return a.size() - b.size()\
    \ > 0;\n    });\n    for (auto &extension : extensions) {\n        if (extension.size()\
    \ > result.size()) {\n            result = extension;\n        }\n    }\n    return\
    \ result;", "    std::string result = class_name;\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for (auto it = extensions.begin(); it != extensions.end();\
    \ ++it) {\n        int strength = 0;\n        for (auto it2 = it->begin(); it2\
    \ != it->end(); ++it2) {\n            if (*it2 >= 'A' && *it2 <= 'Z') {\n    \
    \            strength += 1;\n            }\n            else if (*it2 >= 'a' &&\
    \ *it2 <= 'z') {\n                strength += 1;\n            }\n        }\n \
    \       if (strength > result.length()) {\n            result = class_name + \"\
    .\" + *it;\n        }\n    }\n    return result;", "    std::string result = class_name\
    \ + \".\";\n    int strength = 0;\n    for (auto extension : extensions) {\n \
    \       int cap = 0, sm = 0;\n        for (auto c : extension) {\n           \
    \ if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n\
    \                sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string&\
    \ a, const std::string& b) {\n        return a.size() < b.size();\n    });\n \
    \   for (auto extension : extensions) {\n        if (extension.size() == strength)\
    \ {\n            result += extension;\n            return result;\n        }\n\
    \    }\n    return result;", "    std::string result = class_name + \".\";\n \
    \   std::sort(extensions.begin(), extensions.end());\n    for (auto& extension\
    \ : extensions) {\n        int strength = 0;\n        for (auto& c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                strength--;\n  \
    \          } else {\n                strength++;\n            }\n        }\n \
    \       if (strength < 0) {\n            result += extension;\n        }\n   \
    \ }\n    return result;", "    std::string result;\n    int strength = 0;\n  \
    \  for (auto& extension : extensions) {\n        int cap = 0, sm = 0;\n      \
    \  for (auto& c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n    \
    \            cap++;\n            } else {\n                sm++;\n           \
    \ }\n        }\n        strength += cap - sm;\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string& a, const std::string& b) {\n       \
    \ return a.size() < b.size();\n    });\n    for (auto& extension : extensions)\
    \ {\n        if (extension.size() == strength) {\n            result = class_name\
    \ + \".\" + extension;\n            break;\n        }\n    }\n    return result;",
  "    std::string result;\n    std::string temp;\n    int strength = 0;\n    for\
    \ (auto extension : extensions) {\n        temp = extension;\n        int cap\
    \ = 0;\n        int sm = 0;\n        for (auto c : temp) {\n            if (c\
    \ == '_') {\n                continue;\n            }\n            if (c >= 'A'\
    \ && c <= 'Z') {\n                cap++;\n            }\n            if (c >=\
    \ 'a' && c <= 'z') {\n                sm++;\n            }\n        }\n      \
    \  strength += cap - sm;\n    }\n    for (auto extension : extensions) {\n   \
    \     if (extension.find(class_name) != std::string::npos) {\n            continue;\n\
    \        }\n        if (extension.find('.') != std::string::npos) {\n        \
    \    continue;\n        }\n        if (extension.find('_') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('-') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('.') == std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('.') == 0) {\n\
    \            continue;\n        }\n        if (extension.find('.') == extension.size()\
    \ - 1) {\n            continue;\n        }\n        if (extension.find('.') ==\
    \ extension.size() - 2) {\n            continue;\n        }\n        if (extension.find('.')\
    \ == extension.size() - 3) {\n            continue;\n        }\n        if (extension.find('.')\
    \ == extension.size() - 4) {\n            continue;\n        }\n        if (extension.find('.')\
    \ == extension.size() - 5) {\n            continue;\n        }\n        if (extension.find('.')\
    \ == extension.size() - 6) {\n            continue;\n        }\n        if (extension.find('.')\
    \ == extension.size() - 7) {\n            continue;\n        }\n        if (extension.find('.')\
    \ == extension.size() -", "    std::string result = class_name;\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for (auto& extension : extensions) {\n        int cap\
    \ = 0, sm = 0;\n        for (auto& c : extension) {\n            if (c >= 'A'\
    \ && c <= 'Z') {\n                cap++;\n            } else {\n             \
    \   sm++;\n            }\n        }\n        int strength = cap - sm;\n      \
    \  if (strength > result.length()) {\n            result = extension;\n      \
    \  }\n    }\n    return result;", "    std::string result = class_name + \".\"\
    ;\n    int strength = 0;\n    for (auto &extension : extensions) {\n        int\
    \ cap = 0, sm = 0;\n        for (auto &c : extension) {\n            if (c >=\
    \ 'A' && c <= 'Z') {\n                cap++;\n            } else {\n         \
    \       sm++;\n            }\n        }\n        strength += cap - sm;\n    }\n\
    \    std::sort(extensions.begin(), extensions.end(), [](const std::string &a,\
    \ const std::string &b) {\n        return a.compare(b) < 0;\n    });\n    for\
    \ (auto &extension : extensions) {\n        if (extension.compare(result) == 0)\
    \ {\n            continue;\n        }\n        if (extension.compare(result) >\
    \ 0) {\n            result = extension;\n            break;\n        }\n    }\n\
    \    return result;", "    std::string result;\n    std::string temp;\n    int\
    \ strength;\n    for (auto i = extensions.begin(); i != extensions.end(); ++i)\
    \ {\n        temp = *i;\n        strength = 0;\n        for (auto j = temp.begin();\
    \ j != temp.end(); ++j) {\n            if (*j >= 'A' && *j <= 'Z') {\n       \
    \         strength++;\n            }\n        }\n        if (strength > strength)\
    \ {\n            result = class_name + \".\" + temp;\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    std::string temp;\n    int strength;\n\
    \    for (auto &ext : extensions) {\n        temp = ext;\n        std::transform(temp.begin(),\
    \ temp.end(), temp.begin(), ::toupper);\n        strength = 0;\n        for (auto\
    \ &c : temp) {\n            if (c == 'A' || c == 'E' || c == 'I' || c == 'O' ||\
    \ c == 'U') {\n                strength++;\n            }\n        }\n       \
    \ if (strength > result.size()) {\n            result = ext;\n        }\n    }\n\
    \    return class_name + \".\" + result;", "    std::string result = class_name\
    \ + \".\";\n    int strength = 0;\n    for (auto &extension : extensions) {\n\
    \        int cap = 0, sm = 0;\n        for (auto &c : extension) {\n         \
    \   if (isupper(c)) {\n                cap++;\n            } else {\n        \
    \        sm++;\n            }\n        }\n        strength += cap - sm;\n    }\n\
    \    std::sort(extensions.begin(), extensions.end(), [](const std::string &a,\
    \ const std::string &b) {\n        return a.size() < b.size();\n    });\n    for\
    \ (auto &extension : extensions) {\n        if (extension.size() == strength)\
    \ {\n            result += extension;\n            break;\n        }\n    }\n\
    \    return result;", "    std::string result;\n    std::stringstream ss;\n  \
    \  int strength = 0;\n    for (auto e : extensions) {\n        int cap = 0, sm\
    \ = 0;\n        for (auto c : e) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto e : extensions)\
    \ {\n        if (e.length() > result.length()) {\n            result = e;\n  \
    \      }\n    }\n    ss << class_name << \".\" << result;\n    return ss.str();",
  "    std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto\
    \ extension : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c\
    \ : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    for (auto extension : extensions) {\n  \
    \      if (extension.compare(class_name) == 0) {\n            continue;\n    \
    \    }\n        if (extension.compare(result) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(result + \".\") == 0) {\n          \
    \  continue;\n        }\n        if (extension.compare(result + \".\") + 1 ==\
    \ result.length()) {\n            continue;\n        }\n        if (extension.compare(result\
    \ + \".\") + 2 == result.length()) {\n            continue;\n        }\n     \
    \   if (extension.compare(result + \".\") + 3 == result.length()) {\n        \
    \    continue;\n        }\n        if (extension.compare(result + \".\") + 4 ==\
    \ result.length()) {\n            continue;\n        }\n        if (extension.compare(result\
    \ + \".\") + 5 == result.length()) {\n            continue;\n        }\n     \
    \   if (extension.compare(result + \".\") + 6 == result.length()) {\n        \
    \    continue;\n        }\n        if (extension.compare(result + \".\") + 7 ==\
    \ result.length()) {\n            continue;\n        }\n        if (extension.compare(result\
    \ + \".\") + 8 == result.length()) {\n            continue;\n        }\n     \
    \   if (extension.compare(result + \".\") + 9 == result.length()) {\n        \
    \    continue;\n        }\n        if (extension.compare(result + \".\") + 10\
    \ == result.length()) {\n            continue;\n        }\n        if (extension.compare(result\
    \ + \".\") + 11 == result.length()) {\n            continue;\n        }\n    \
    \    if (extension.compare(result + \"", "    std::string result;\n    std::string\
    \ temp;\n    int strength;\n    for (auto it = extensions.begin(); it != extensions.end();\
    \ ++it) {\n        temp = *it;\n        strength = 0;\n        for (auto it2 =\
    \ temp.begin(); it2 != temp.end(); ++it2) {\n            if (*it2 >= 'A' && *it2\
    \ <= 'Z') {\n                strength += 1;\n            } else if (*it2 >= 'a'\
    \ && *it2 <= 'z') {\n                strength -= 1;\n            }\n        }\n\
    \        if (strength > 0) {\n            result = class_name + \".\" + temp;\n\
    \        }\n    }\n    return result;", "    std::string strongest_extension;\n\
    \    int strength = 0;\n    for (auto extension : extensions) {\n        int cap\
    \ = 0, sm = 0;\n        for (auto c : extension) {\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n        if (strength\
    \ > strongest_extension.size()) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  std::string result = class_name;\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto& extension : extensions) {\n        int strength = 0;\n       \
    \ for (auto& c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n     \
    \           strength -= 1;\n            }\n            else if (c >= 'a' && c\
    \ <= 'z') {\n                strength += 1;\n            }\n        }\n      \
    \  if (strength > 0) {\n            result += \".\" + extension;\n        }\n\
    \    }\n    return result;", "    std::string result = class_name + \".\";\n \
    \   int strength = 0;\n    for (auto &extension : extensions) {\n        int cap\
    \ = 0, sm = 0;\n        for (auto &c : extension) {\n            if (c >= 'A'\
    \ && c <= 'Z') {\n                cap++;\n            } else {\n             \
    \   sm++;\n            }\n        }\n        strength += cap - sm;\n    }\n  \
    \  std::sort(extensions.begin(), extensions.end(), [](const std::string &a, const\
    \ std::string &b) {\n        return a.compare(b) < 0;\n    });\n    for (auto\
    \ &extension : extensions) {\n        if (extension.compare(result) == 0) {\n\
    \            continue;\n        }\n        if (extension.compare(result) > 0)\
    \ {\n            result = extension;\n            break;\n        }\n    }\n \
    \   return result;", "    std::string strongest_extension;\n    int strength =\
    \ 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n        if (strength > strongest_extension.size())\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;", "    std::string result = class_name\
    \ + \".\";\n    std::sort(extensions.begin(), extensions.end(), [](const std::string&\
    \ a, const std::string& b) {\n        return a.size() - b.size() > 0;\n    });\n\
    \    for (auto& ext : extensions) {\n        int cap = 0;\n        int sm = 0;\n\
    \        for (auto& c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n    \
    \            cap++;\n            } else {\n                sm++;\n           \
    \ }\n        }\n        result += ext;\n        result += \".\";\n        result\
    \ += std::to_string(cap - sm);\n    }\n    return result;", "    int CAP, SM;\n\
    \    std::string result;\n    for (auto &extension : extensions) {\n        CAP\
    \ = 0;\n        SM = 0;\n        for (auto &c : extension) {\n            if (c\
    \ >= 'A' && c <= 'Z') CAP++;\n            else if (c >= 'a' && c <= 'z') SM++;\n\
    \        }\n        if (CAP - SM > result.size()) {\n            result = extension;\n\
    \        }\n    }\n    return class_name + \".\" + result;", "    std::string\
    \ result = class_name;\n    std::sort(extensions.begin(), extensions.end(), [](const\
    \ std::string& a, const std::string& b) {\n        return a.size() - b.size()\
    \ < 0;\n    });\n    for (auto& ext : extensions) {\n        int cap = 0;\n  \
    \      int sm = 0;\n        for (auto& c : ext) {\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        result += \".\";\n        result += ext;\n\
    \        result += \".\";\n        result += std::to_string(cap - sm);\n    }\n\
    \    return result;", "    std::string result;\n    int strength = 0;\n    for\
    \ (auto& ext : extensions) {\n        int cap = 0, sm = 0;\n        for (auto&\
    \ c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() >\
    \ b.size();\n    });\n    for (auto& ext : extensions) {\n        if (ext.size()\
    \ == strength) {\n            result = class_name + \".\" + ext;\n           \
    \ break;\n        }\n    }\n    return result;", "    std::string result;\n  \
    \  int strength = 0;\n    for (auto extension : extensions) {\n        int cap\
    \ = 0;\n        int sm = 0;\n        for (auto c : extension) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string&\
    \ a, const std::string& b) {\n        return a.compare(b) < 0;\n    });\n    for\
    \ (auto extension : extensions) {\n        if (extension.compare(class_name) ==\
    \ 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_",
  "    int CAP, SM;\n    std::string result;\n    for (auto extension : extensions)\
    \ {\n        CAP = 0;\n        SM = 0;\n        for (auto c : extension) {\n \
    \           if (c >= 'A' && c <= 'Z') CAP++;\n            if (c >= 'a' && c <=\
    \ 'z') SM++;\n        }\n        if (CAP - SM > result.length()) {\n         \
    \   result = class_name + \".\" + extension;\n        }\n    }\n    return result;",
  "    std::string ret = class_name;\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto it = extensions.begin(); it != extensions.end(); ++it) {\n    \
    \    if (ret.find(*it) == std::string::npos) {\n            ret += \".\" + *it;\n\
    \        }\n    }\n    return ret;", "    std::string result;\n    int strength\
    \ = 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto extension\
    \ : extensions) {\n        if (extension.find(class_name) != std::string::npos)\
    \ {\n            result = class_name + \".\" + extension;\n            break;\n\
    \        }\n    }\n    return result;", "    std::string result = class_name;\n\
    \    std::sort(extensions.begin(), extensions.end(), [](const std::string &a,\
    \ const std::string &b) {\n        return a.size() - b.size() > 0;\n    });\n\
    \    for (auto &extension : extensions) {\n        int cap = 0;\n        int sm\
    \ = 0;\n        for (auto &c : extension) {\n            if (c >= 'A' && c <=\
    \ 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        if (cap - sm > 0) {\n            result +=\
    \ \".\" + extension;\n        }\n    }\n    return result;", "    std::string\
    \ strongest_extension = class_name;\n    for (auto ext : extensions) {\n     \
    \   int strength = 0;\n        for (auto c : ext) {\n            if (c >= 'A'\
    \ && c <= 'Z') strength++;\n            if (c >= 'a' && c <= 'z') strength--;\n\
    \        }\n        if (strength > 0) strongest_extension += \".\" + ext;\n  \
    \  }\n    return strongest_extension;", "    std::string result;\n    std::string\
    \ temp;\n    std::string temp2;\n    int strength;\n    int max_strength = 0;\n\
    \    for (auto i = extensions.begin(); i != extensions.end(); ++i) {\n       \
    \ temp = class_name + *i;\n        temp2 = temp;\n        std::transform(temp2.begin(),\
    \ temp2.end(), temp2.begin(), ::toupper);\n        strength = 0;\n        for\
    \ (auto j = temp2.begin(); j != temp2.end(); ++j) {\n            if (*j == '_')\
    \ {\n                continue;\n            }\n            if (*j == '.') {\n\
    \                break;\n            }\n            if (*j == ' ') {\n       \
    \         continue;\n            }\n            if (*j == '-') {\n           \
    \     continue;\n            }\n            strength++;\n        }\n        if\
    \ (strength > max_strength) {\n            max_strength = strength;\n        \
    \    result = temp;\n        }\n    }\n    return result;", "    std::string result\
    \ = class_name + \".\";\n    int strength = 0;\n    for (auto& ext : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto& c : ext) {\n           \
    \ if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n\
    \                sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string&\
    \ a, const std::string& b) {\n        return a.size() > b.size();\n    });\n \
    \   for (auto& ext : extensions) {\n        if (ext == result) {\n           \
    \ continue;\n        }\n        if (ext.size() < result.size()) {\n          \
    \  continue;\n        }\n        if (ext.size() > result.size()) {\n         \
    \   break;\n        }\n        if (ext.compare(0, result.size(), result) == 0)\
    \ {\n            result = ext;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    int strength = 0;\n    for (auto extension : extensions) {\n  \
    \      int cap = 0, sm = 0;\n        for (auto c : extension) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            }\n          \
    \  else {\n                sm++;\n            }\n        }\n        strength +=\
    \ cap - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            result = class_name + \".\" + extension;\n\
    \            return result;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    int strength = 0;\n    for (auto extension : extensions) {\n  \
    \      int cap = 0, sm = 0;\n        for (auto c : extension) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (auto extension : extensions) {\n        if (extension.size()\
    \ > result.size()) {\n            result = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + result;", "    std::string result;\n    int strength =\
    \ 0;\n    for (auto &extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto &c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto &extension\
    \ : extensions) {\n        if (extension.size() > result.size()) {\n         \
    \   result = extension;\n        }\n    }\n    return class_name + \".\" + result;",
  "    std::string result;\n    std::stringstream ss;\n    int strength = 0;\n   \
    \ for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n        for\
    \ (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n          \
    \      cap++;\n            } else {\n                sm++;\n            }\n  \
    \      }\n        strength += cap - sm;\n    }\n    for (auto extension : extensions)\
    \ {\n        if (extension.compare(class_name) == 0) {\n            continue;\n\
    \        }\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n\
    \            if (c >= 'A' && c <= 'Z') {\n                cap++;\n           \
    \ } else {\n                sm++;\n            }\n        }\n        if (cap -\
    \ sm > strength) {\n            strength = cap - sm;\n            result = class_name\
    \ + \".\" + extension;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    int strength = 0;\n    for (auto extension : extensions) {\n  \
    \      int cap = 0, sm = 0;\n        for (auto c : extension) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (auto extension : extensions) {\n        if (extension.size()\
    \ > result.size()) {\n            result = extension;\n        } else if (extension.size()\
    \ == result.size() && strength < 0) {\n            result = extension;\n     \
    \   }\n    }\n    return class_name + \".\" + result;", "    std::string result;\n\
    \    int strength = 0;\n    for (auto extension : extensions) {\n        int cap\
    \ = 0, sm = 0;\n        for (auto c : extension) {\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    for (auto\
    \ extension : extensions) {\n        if (extension.compare(class_name) == 0) {\n\
    \            continue;\n        }\n        int cap = 0, sm = 0;\n        for (auto\
    \ c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   if (cap - sm > strength) {\n            strength = cap - sm;\n           \
    \ result = class_name + \".\" + extension;\n        }\n    }\n    return result;",
  "    std::string result;\n    std::stringstream ss;\n    int strength = 0;\n   \
    \ for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n        for\
    \ (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n          \
    \      cap++;\n            }\n            else {\n                sm++;\n    \
    \        }\n        }\n        strength += cap - sm;\n    }\n    for (auto extension\
    \ : extensions) {\n        if (extension.find(class_name) != std::string::npos)\
    \ {\n            result = extension;\n            break;\n        }\n    }\n \
    \   return result;", "    std::string result = class_name;\n    for (auto extension\
    \ : extensions) {\n        int CAP = 0, SM = 0;\n        for (auto c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') CAP++;\n            else SM++;\n  \
    \      }\n        if (CAP - SM > result.size()) result = extension;\n    }\n \
    \   return result;", "    std::string result = class_name;\n    int strength =\
    \ 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto extension\
    \ : extensions) {\n        if (extension.find(class_name) != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('.') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('_') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('-') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(' ') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('.') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('/') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('\\\\') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('*') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('&') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('|') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('^') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('%') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('$') != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find('#         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                           ",
  "    std::string result;\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.size()\
    \ > result.size()) {\n            result = extension;\n        } else if (extension.size()\
    \ == result.size() && strength < 0) {\n            result = extension;\n     \
    \   }\n    }\n    return class_name + \".\" + result;", "    std::string result\
    \ = class_name;\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0;\n        int sm = 0;\n        for (auto c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.size()\
    \ > result.size()) {\n            result = extension;\n        } else if (extension.size()\
    \ == result.size() && strength > 0) {\n            result = extension;\n     \
    \   }\n    }\n    return result;", "    std::string result = class_name + \".\"\
    ;\n    int strength = 0;\n    for (auto extension : extensions) {\n        int\
    \ cap = 0, sm = 0;\n        for (auto c : extension) {\n            if (c >= 'A'\
    \ && c <= 'Z') {\n                cap++;\n            } else {\n             \
    \   sm++;\n            }\n        }\n        strength += cap - sm;\n        result\
    \ += extension;\n        if (cap - sm > strength) {\n            strength = cap\
    \ - sm;\n        }\n    }\n    return result;", "    std::string result;\n   \
    \ std::stringstream ss;\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n        ss << class_name << \".\" << extension << \".\";\n    }\n   \
    \ ss << class_name << \".\" << extensions[0];\n    result = ss.str();\n    return\
    \ result;", "    std::string result;\n    std::string temp;\n    int cap, sm;\n\
    \    for (auto e : extensions) {\n        cap = 0;\n        sm = 0;\n        for\
    \ (auto c : e) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            }\n            if (c >= 'a' && c <= 'z') {\n                sm++;\n\
    \            }\n        }\n        if (cap - sm > result.length()) {\n       \
    \     result = e;\n        }\n    }\n    return class_name + \".\" + result;",
  "    std::string result = class_name;\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto& extension : extensions) {\n        int strength = 0;\n       \
    \ for (auto& c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n     \
    \           strength++;\n            }\n        }\n        if (strength > result.size())\
    \ {\n            result = class_name + \".\" + extension;\n        }\n    }\n\
    \    return result;", "    std::string strongest_extension;\n    int strength\
    \ = 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n        if (strength > strongest_extension.size())\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;", "    std::string result;\n    std::string\
    \ temp;\n    int strength = 0;\n    for (auto extension : extensions) {\n    \
    \    temp = extension;\n        std::transform(temp.begin(), temp.end(), temp.begin(),\
    \ ::tolower);\n        int cap = 0;\n        int sm = 0;\n        for (auto c\
    \ : temp) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto extension : extensions) {\n        temp = extension;\n        std::transform(temp.begin(),\
    \ temp.end(), temp.begin(), ::tolower);\n        int cap = 0;\n        int sm\
    \ = 0;\n        for (auto c : temp) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        if (cap - sm == strength) {\n            result =\
    \ class_name + \".\" + extension;\n            break;\n        }\n    }\n    return\
    \ result;", "    std::string ret = class_name;\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string& a, const std::string& b) {\n       \
    \ return a.size() - b.size() < 0;\n    });\n    for (auto& ext : extensions) {\n\
    \        if (ext.size() > ret.size()) {\n            ret = ext;\n        }\n \
    \   }\n    return ret;", "    std::string result;\n    std::string temp;\n   \
    \ int strength;\n    for (auto& extension : extensions) {\n        strength =\
    \ 0;\n        for (auto& c : extension) {\n            if (c >= 'A' && c <= 'Z')\
    \ {\n                strength++;\n            } else if (c >= 'a' && c <= 'z')\
    \ {\n                strength--;\n            }\n        }\n        if (strength\
    \ > 0) {\n            temp = extension;\n        }\n    }\n    if (temp.size()\
    \ > 0) {\n        result = class_name + \".\" + temp;\n    } else {\n        result\
    \ = class_name;\n    }\n    return result;", "    std::string result;\n    std::string\
    \ temp;\n    int strength;\n    for (auto ext : extensions) {\n        temp =\
    \ ext;\n        strength = 0;\n        for (auto c : temp) {\n            if (c\
    \ >= 'A' && c <= 'Z') {\n                strength -= 1;\n            }\n     \
    \       else if (c >= 'a' && c <= 'z') {\n                strength += 1;\n   \
    \         }\n        }\n        if (strength > 0) {\n            result = class_name\
    \ + \".\" + ext;\n        }\n    }\n    return result;", "    std::string result;\n\
    \    int strength = 0;\n    for (auto extension : extensions) {\n        int cap\
    \ = 0, sm = 0;\n        for (auto c : extension) {\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    for (auto\
    \ extension : extensions) {\n        if (extension.find(class_name) != std::string::npos)\
    \ {\n            result = class_name + \".\" + extension;\n            break;\n\
    \        }\n    }\n    return result;", "    std::string result = class_name +\
    \ \".\";\n    std::sort(extensions.begin(), extensions.end());\n    for (auto&\
    \ ext : extensions) {\n        int cap = 0, sm = 0;\n        for (auto& c : ext)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        int strength\
    \ = cap - sm;\n        if (strength > result.size()) {\n            result = ext;\n\
    \        } else if (strength == result.size()) {\n            if (ext < result)\
    \ {\n                result = ext;\n            }\n        }\n    }\n    return\
    \ result;", "    std::string result = class_name + \".\";\n    int strength =\
    \ 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string& a, const std::string& b) {\n       \
    \ return a.size() < b.size();\n    });\n    for (auto extension : extensions)\
    \ {\n        if (extension.size() == strength) {\n            result += extension;\n\
    \            return result;\n        }\n    }\n    return result;", "    std::string\
    \ result = class_name;\n    std::string temp;\n    int strength = 0;\n    for\
    \ (auto extension : extensions) {\n        temp = extension;\n        int cap\
    \ = 0;\n        int sm = 0;\n        for (auto c : temp) {\n            if (c\
    \ >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n      \
    \          sm++;\n            }\n        }\n        strength += cap - sm;\n  \
    \  }\n    for (auto extension : extensions) {\n        if (extension.compare(result)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(result)\
    \ > 0 && strength == extension.length()) {\n            result = extension;\n\
    \        }\n    }\n    return result;", "    int CAP, SM;\n    std::string ext;\n\
    \    for (auto &extension : extensions) {\n        CAP = 0;\n        SM = 0;\n\
    \        for (auto &c : extension) {\n            if (isupper(c)) CAP++;\n   \
    \         else SM++;\n        }\n        if (CAP - SM > 0) {\n            ext\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + ext;", "   \
    \ std::string result;\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            result = class_name + \".\" + extension;\n\
    \            return result;\n        }\n    }\n    return result;", "    std::string\
    \ result = class_name + \".\";\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto& ext : extensions) {\n        int strength = 0;\n        for (auto&\
    \ c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n                strength--;\n\
    \            } else {\n                strength++;\n            }\n        }\n\
    \        if (strength < 0) {\n            result += ext;\n        }\n    }\n \
    \   return result;", "    std::string result;\n    int strength = 0;\n    for\
    \ (auto extension : extensions) {\n        int cap = 0, sm = 0;\n        for (auto\
    \ c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    for (auto extension : extensions) {\n  \
    \      if (extension.size() > result.size()) {\n            result = extension;\n\
    \        } else if (extension.size() == result.size() && strength < 0) {\n   \
    \         result = extension;\n        }\n    }\n    return class_name + \".\"\
    \ + result;", "    std::string strongest_extension;\n    int strength = 0;\n \
    \   for (auto extension : extensions) {\n        int cap = 0;\n        int sm\
    \ = 0;\n        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z')\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        strength += (cap - sm);\n        if (strength\
    \ > strongest_extension.size()) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  std::string result = class_name;\n    for (auto extension : extensions) {\n\
    \        int strength = 0;\n        for (auto c : extension) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                strength += 1;\n            } else\
    \ {\n                strength -= 1;\n            }\n        }\n        if (strength\
    \ > 0) {\n            result += \".\" + extension;\n        }\n    }\n    return\
    \ result;", "    std::string result = class_name + \".\";\n    int strength =\
    \ 0;\n    for (auto &extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto &c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for (auto &extension : extensions) {\n        if (extension\
    \ == result) {\n            continue;\n        }\n        if (extension.find(result)\
    \ != std::string::npos) {\n            continue;\n        }\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .cpp\") != std::string::npos) {\n            continue;\n        }\n        if\
    \ (extension.find(\".h\") != std::string::npos) {\n            continue;\n   \
    \     }\n        if (extension.find(\".c\") != std::string::npos) {\n        \
    \    continue;\n        }\n        if (extension.find(\".java\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".py\") !=\
    \ std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .cs\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .js\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .cpp\") != std::string::npos) {\n            continue;\n        }\n        if\
    \ (extension.find(\".h\") != std::string::npos) {\n            continue;\n   \
    \     }\n        if (extension.find(\".c\") != std::string::npos) {\n        \
    \    continue;\n        }\n        if (extension.find(\".java\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (", "    std::string result\
    \ = class_name + \".\";\n    int strength = 0;\n    for (auto& ext : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto& c : ext) {\n           \
    \ if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n\
    \                sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string&\
    \ a, const std::string& b) {\n        return a.size() > b.size();\n    });\n \
    \   for (auto& ext : extensions) {\n        if (ext.size() == strength) {\n  \
    \          result += ext;\n            break;\n        }\n    }\n    return result;",
  "    std::string result = class_name;\n    int strength = 0;\n    for (auto extension\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.compare(result)\
    \ == 0) {\n            continue;\n        }\n        int cap = 0, sm = 0;\n  \
    \      for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n \
    \               cap++;\n            } else {\n                sm++;\n        \
    \    }\n        }\n        if (cap - sm > strength) {\n            strength =\
    \ cap - sm;\n            result = extension;\n        }\n    }\n    return result;",
  "    int CAP, SM;\n    std::string result;\n    for (std::string ext : extensions)\
    \ {\n        CAP = 0;\n        SM = 0;\n        for (char c : ext) {\n       \
    \     if (isupper(c)) CAP++;\n            else SM++;\n        }\n        if (CAP\
    \ - SM > result.size()) {\n            result = ext;\n        }\n    }\n    return\
    \ class_name + \".\" + result;", "    std::string result = class_name + \".\"\
    ;\n    int strength = 0;\n    for (auto extension : extensions) {\n        int\
    \ cap = 0, sm = 0;\n        for (auto c : extension) {\n            if (c >= 'A'\
    \ && c <= 'Z') {\n                cap++;\n            } else {\n             \
    \   sm++;\n            }\n        }\n        strength += cap - sm;\n    }\n  \
    \  std::sort(extensions.begin(), extensions.end());\n    for (auto extension :\
    \ extensions) {\n        if (extension.compare(result) == 0) {\n            return\
    \ result;\n        }\n        if (extension.compare(result) > 0) {\n         \
    \   result = extension;\n        }\n    }\n    return result;", "    int cap,\
    \ sm;\n    std::string name;\n    std::stringstream ss;\n    for (auto &ext :\
    \ extensions) {\n        cap = 0;\n        sm = 0;\n        for (auto &c : ext)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        ss <<\
    \ class_name << \".\" << ext << \".\" << (cap - sm);\n    }\n    return ss.str();",
  "    std::string result;\n    std::stringstream ss;\n    std::stringstream ss2;\n\
    \    std::stringstream ss3;\n    std::stringstream ss4;\n    std::stringstream\
    \ ss5;\n    std::stringstream ss6;\n    std::stringstream ss7;\n    std::stringstream\
    \ ss8;\n    std::stringstream ss9;\n    std::stringstream ss10;\n    std::stringstream\
    \ ss11;\n    std::stringstream ss12;\n    std::stringstream ss13;\n    std::stringstream\
    \ ss14;\n    std::stringstream ss15;\n    std::stringstream ss16;\n    std::stringstream\
    \ ss17;\n    std::stringstream ss18;\n    std::stringstream ss19;\n    std::stringstream\
    \ ss20;\n    std::stringstream ss21;\n    std::stringstream ss22;\n    std::stringstream\
    \ ss23;\n    std::stringstream ss24;\n    std::stringstream ss25;\n    std::stringstream\
    \ ss26;\n    std::stringstream ss27;\n    std::stringstream ss28;\n    std::stringstream\
    \ ss29;\n    std::stringstream ss30;\n    std::stringstream ss31;\n    std::stringstream\
    \ ss32;\n    std::stringstream ss33;\n    std::stringstream ss34;\n    std::stringstream\
    \ ss35;\n    std::stringstream ss36;\n    std::stringstream ss37;\n    std::stringstream\
    \ ss38;\n    std::stringstream ss39;\n    std::stringstream ss40;\n    std::stringstream\
    \ ss41;\n    std::stringstream ss42;\n    std::stringstream ss43;\n    std::stringstream\
    \ ss44;\n    std::stringstream ss45;\n    std::stringstream ss46;\n    std::stringstream\
    \ ss47;\n    std::stringstream ss48;\n    std::stringstream ss49;\n    std::stringstream\
    \ ss50;\n    std::stringstream ss51;\n    std::stringstream ss52;\n    std::stringstream\
    \ ss53;\n    std::stringstream ss54;\n    std::stringstream ss55;\n    std::stringstream\
    \ ss56;\n    std", "    std::string result = class_name + \".\";\n    int strength\
    \ = 0;\n    for (auto& ext : extensions) {\n        int cap = 0, sm = 0;\n   \
    \     for (auto& c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n       \
    \         cap++;\n            } else {\n                sm++;\n            }\n\
    \        }\n        strength += cap - sm;\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string& a, const std::string& b) {\n       \
    \ return a.size() > b.size();\n    });\n    for (auto& ext : extensions) {\n \
    \       if (ext.size() == strength) {\n            result += ext;\n          \
    \  break;\n        }\n    }\n    return result;", "    std::string result = class_name\
    \ + \".\";\n    int strength = 0;\n    for (auto extension : extensions) {\n \
    \       int cap = 0, sm = 0;\n        for (auto c : extension) {\n           \
    \ if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n\
    \                sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string&\
    \ a, const std::string& b) {\n        return a.size() < b.size();\n    });\n \
    \   for (auto extension : extensions) {\n        if (extension.size() == strength)\
    \ {\n            result += extension;\n            break;\n        }\n    }\n\
    \    return result;", "    std::string result = class_name + \".\";\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for (auto it = extensions.begin(); it != extensions.end();\
    \ ++it) {\n        int strength = 0;\n        for (auto c : it->begin(), e = it->end();\
    \ c != e; ++c) {\n            if (isupper(*c)) strength++;\n            else strength--;\n\
    \        }\n        if (strength > 0) result += *it;\n    }\n    return result;",
  "    std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto\
    \ extension : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c\
    \ : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.compare(b)\
    \ < 0;\n    });\n    for (auto extension : extensions) {\n        if (extension.compare(result)\
    \ == 0) {\n            continue;\n        }\n        int cap = 0, sm = 0;\n  \
    \      for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n \
    \               cap++;\n            } else {\n                sm++;\n        \
    \    }\n        }\n        if (cap - sm > strength) {\n            result = extension;\n\
    \            strength = cap - sm;\n        }\n    }\n    return result;", "  \
    \  std::string result;\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.size()\
    \ > result.size()) {\n            result = extension;\n        } else if (extension.size()\
    \ == result.size() && strength < 0) {\n            result = extension;\n     \
    \   }\n    }\n    return class_name + \".\" + result;", "    std::string result;\n\
    \    std::stringstream ss;\n    int strength = 0;\n    for (auto ext : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : ext) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            }\n          \
    \  else {\n                sm++;\n            }\n        }\n        strength +=\
    \ cap - sm;\n    }\n    for (auto ext : extensions) {\n        int cap = 0, sm\
    \ = 0;\n        for (auto c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            }\n            else {\n                sm++;\n\
    \            }\n        }\n        if (cap - sm > strength) {\n            strength\
    \ = cap - sm;\n            result = class_name + \".\" + ext;\n        }\n   \
    \ }\n    return result;", "    std::string result = class_name;\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for (auto& ext : extensions) {\n        int cap = 0,\
    \ sm = 0;\n        for (auto& c : ext) {\n            if (c >= 'A' && c <= 'Z')\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        int strength = cap - sm;\n        if (strength\
    \ > 0) {\n            result += \".\" + ext;\n        }\n    }\n    return result;",
  "    std::string result = class_name;\n    int strength = 0;\n    for (auto extension\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (char c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(), [](const\
    \ std::string& a, const std::string& b) {\n        return a.size() < b.size();\n\
    \    });\n    for (auto extension : extensions) {\n        if (extension.size()\
    \ == result.size() && strength == 0) {\n            return result + \".\" + extension;\n\
    \        }\n        if (extension.size() > result.size() && strength > 0) {\n\
    \            result = extension;\n            strength = 0;\n        }\n     \
    \   if (extension.size() == result.size() && strength == 0) {\n            strength\
    \ += extension.size();\n        }\n        if (extension.size() < result.size()\
    \ && strength < extension.size()) {\n            result = extension;\n       \
    \     strength = extension.size();\n        }\n    }\n    return result;", " \
    \   std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto&\
    \ extension : extensions) {\n        int cap = 0, sm = 0;\n        for (auto&\
    \ c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    for (auto& extension : extensions) {\n \
    \       if (extension.compare(extension) == 0) {\n            continue;\n    \
    \    }\n        if (extension.compare(extension) < 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) > 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n            continue;\n\
    \        }\n        if (extension.compare(extension) == 0) {\n", "    std::string\
    \ result = class_name;\n    std::string temp;\n    int strength = 0;\n    for\
    \ (auto ext : extensions) {\n        temp = ext;\n        int cap = 0, sm = 0;\n\
    \        for (auto c : temp) {\n            if (c >= 'A' && c <= 'Z') {\n    \
    \            cap++;\n            } else {\n                sm++;\n           \
    \ }\n        }\n        strength += (cap - sm);\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string& a, const std::string& b) {\n       \
    \ return a.size() < b.size();\n    });\n    for (auto ext : extensions) {\n  \
    \      if (ext.size() == result.size() && strength == 0) {\n            result\
    \ += \".\" + ext;\n        } else if (ext.size() > result.size() && strength >\
    \ 0) {\n            result += \".\" + ext;\n        }\n    }\n    return result;",
  "    std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto&\
    \ ext : extensions) {\n        int cap = 0, sm = 0;\n        for (auto& c : ext)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(), [](const\
    \ std::string& a, const std::string& b) {\n        return a.size() < b.size();\n\
    \    });\n    for (auto& ext : extensions) {\n        if (ext.size() == strength)\
    \ {\n            result += ext;\n            return result;\n        }\n    }\n\
    \    return result;", "    std::string result = class_name + \".\";\n    int strength\
    \ = 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string &a, const std::string &b) {\n       \
    \ return a.size() > b.size();\n    });\n    for (auto extension : extensions)\
    \ {\n        if (extension.size() == strength) {\n            result += extension;\n\
    \            break;\n        }\n    }\n    return result;", "    std::string result;\n\
    \    std::string temp;\n    int strength = 0;\n    for (auto it = extensions.begin();\
    \ it != extensions.end(); ++it) {\n        temp = *it;\n        int cap = 0, sm\
    \ = 0;\n        for (auto it = temp.begin(); it != temp.end(); ++it) {\n     \
    \       if (*it >= 'A' && *it <= 'Z') {\n                cap++;\n            }\n\
    \            if (*it >= 'a' && *it <= 'z') {\n                sm++;\n        \
    \    }\n        }\n        strength += cap - sm;\n    }\n    for (auto it = extensions.begin();\
    \ it != extensions.end(); ++it) {\n        temp = *it;\n        if (temp.compare(class_name)\
    \ == 0) {\n            continue;\n        }\n        int cap = 0, sm = 0;\n  \
    \      for (auto it = temp.begin(); it != temp.end(); ++it) {\n            if\
    \ (*it >= 'A' && *it <= 'Z') {\n                cap++;\n            }\n      \
    \      if (*it >= 'a' && *it <= 'z') {\n                sm++;\n            }\n\
    \        }\n        if (cap - sm > strength) {\n            result = class_name\
    \ + \".\" + temp;\n            strength = cap - sm;\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    std::string temp;\n    int strength;\n\
    \    for (auto it = extensions.begin(); it != extensions.end(); it++) {\n    \
    \    temp = *it;\n        strength = 0;\n        for (auto it2 = temp.begin();\
    \ it2 != temp.end(); it2++) {\n            if (*it2 >= 'A' && *it2 <= 'Z') {\n\
    \                strength++;\n            }\n        }\n        if (strength >\
    \ 0) {\n            if (result.empty()) {\n                result = class_name\
    \ + \".\" + temp;\n            } else {\n                if (strength > strength_of_extension(result))\
    \ {\n                    result = class_name + \".\" + temp;\n               \
    \ }\n            }\n        }\n    }\n    return result;", "    std::string strongest_extension;\n\
    \    int strength = 0;\n    for (auto extension : extensions) {\n        int cap\
    \ = 0, sm = 0;\n        for (auto c : extension) {\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n        if (strength\
    \ > strongest_extension.size()) {\n            strongest_extension = extension;\n\
    \        }\n    }\n    return class_name + \".\" + strongest_extension;", "  \
    \  std::string result = class_name;\n    int strength = 0;\n    for (auto extension\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.size()\
    \ > result.size()) {\n            result = extension;\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    int strength = 0;\n    for (auto extension\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(), [](const\
    \ std::string& a, const std::string& b) {\n        return a.compare(b) < 0;\n\
    \    });\n    for (auto extension : extensions) {\n        if (extension.compare(class_name)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \"", "    std::string result = class_name + \".\";\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string& a, const std::string& b) {\n       \
    \ return a.size() - b.size();\n    });\n    for (auto& ext : extensions) {\n \
    \       if (ext.size() > result.size()) {\n            result = ext;\n       \
    \ }\n    }\n    return result;", "    std::string result;\n    std::string temp;\n\
    \    int strength = 0;\n    for (auto it = extensions.begin(); it != extensions.end();\
    \ ++it) {\n        temp = *it;\n        int cap = 0;\n        int sm = 0;\n  \
    \      for (auto it2 = temp.begin(); it2 != temp.end(); ++it2) {\n           \
    \ if (*it2 >= 'A' && *it2 <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    for (auto it = extensions.begin(); it != extensions.end();\
    \ ++it) {\n        temp = *it;\n        if (temp.find(class_name) != std::string::npos)\
    \ {\n            if (strength == 0) {\n                result = temp;\n      \
    \          break;\n            } else if (strength < 0) {\n                if\
    \ (temp.find('.') != std::string::npos) {\n                    result = temp;\n\
    \                    break;\n                }\n            } else {\n       \
    \         if (temp.find('.') != std::string::npos) {\n                    if (strength\
    \ > strength) {\n                        result = temp;\n                    \
    \    break;\n                    }\n                } else {\n               \
    \     if (strength > strength) {\n                        result = temp;\n   \
    \                     break;\n                    }\n                }\n     \
    \       }\n        }\n    }\n    return result;", "    std::string result;\n \
    \   std::string temp;\n    int strength = 0;\n    for (auto &extension : extensions)\
    \ {\n        temp = extension;\n        std::transform(temp.begin(), temp.end(),\
    \ temp.begin(), ::tolower);\n        int cap = 0;\n        int sm = 0;\n     \
    \   for (auto &c : temp) {\n            if (c >= 'A' && c <= 'Z') {\n        \
    \        cap++;\n            } else {\n                sm++;\n            }\n\
    \        }\n        strength += cap - sm;\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string &a, const std::string &b) {\n       \
    \ return a.compare(b) < 0;\n    });\n    for (auto &extension : extensions) {\n\
    \        temp = extension;\n        std::transform(temp.begin(), temp.end(), temp.begin(),\
    \ ::tolower);\n        if (temp.compare(class_name) == 0) {\n            result\
    \ = class_name + \".\" + extension;\n            break;\n        }\n    }\n  \
    \  return result;", "    std::string result = class_name + \".\";\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string& a, const std::string& b) {\n       \
    \ return a.size() < b.size();\n    });\n    for (const auto& ext : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : ext) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        int strength = cap - sm;\n\
    \        if (strength == 0) {\n            result += ext;\n        } else if (strength\
    \ > 0) {\n            result += ext;\n        }\n    }\n    return result;", " \
    \   std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto\
    \ extension : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c\
    \ : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(),\
    \ [](const std::string &a, const std::string &b) {\n        return a.size() <\
    \ b.size();\n    });\n    for (auto extension : extensions) {\n        if (extension.size()\
    \ == strength) {\n            result += extension;\n            return result;\n\
    \        }\n    }\n    return result;", "    std::string result;\n    std::stringstream\
    \ ss;\n    int strength = 0;\n    for (auto it = extensions.begin(); it != extensions.end();\
    \ ++it) {\n        int cap = 0, sm = 0;\n        for (auto i = 0; i < it->size();\
    \ ++i) {\n            if (isupper(it->at(i))) {\n                ++cap;\n    \
    \        }\n            else {\n                ++sm;\n            }\n       \
    \ }\n        strength += cap - sm;\n        ss << class_name << \".\" << *it <<\
    \ \".\" << std::to_string(cap - sm);\n    }\n    result = ss.str();\n    return\
    \ result;", "    std::string ret = class_name + \".\";\n    int strength = 0;\n\
    \    for (auto e : extensions) {\n        int cap = 0, sm = 0;\n        for (auto\
    \ c : e) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.compare(b)\
    \ < 0;\n    });\n    for (auto e : extensions) {\n        if (e.compare(ret) ==\
    \ 0) {\n            return ret;\n        }\n        if (e.compare(ret) > 0) {\n\
    \            ret = e;\n        }\n    }\n    return ret;", "    std::string result\
    \ = class_name;\n    int strength = 0;\n    for (auto& extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto& c : extension) {\n     \
    \       if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    for (auto& extension : extensions) {\n        if (extension.size()\
    \ > result.size()) {\n            result = extension;\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    std::stringstream ss;\n    int strength\
    \ = 0;\n    for (auto &extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto &c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            }\n            else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    for (auto\
    \ &extension : extensions) {\n        if (extension.size() > result.size()) {\n\
    \            result = extension;\n        }\n        else if (extension.size()\
    \ == result.size() && strength > 0) {\n            if (extension < result) {\n\
    \                result = extension;\n            }\n        }\n    }\n    ss\
    \ << class_name << \".\" << result;\n    return ss.str();", "    std::string result\
    \ = class_name + \".\";\n    int strength = 0;\n    for (auto &extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto &c : extension) {\n     \
    \       if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string\
    \ &a, const std::string &b) {\n        return a.size() < b.size();\n    });\n\
    \    for (auto &extension : extensions) {\n        if (extension.size() == strength)\
    \ {\n            result += extension;\n            return result;\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::string temp;\n\
    \    int strength = 0;\n    for (auto &ext : extensions) {\n        int cap =\
    \ 0, sm = 0;\n        for (auto &c : ext) {\n            if (c >= 'A' && c <=\
    \ 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string &a, const std::string &b) {\n       \
    \ return a.compare(b) < 0;\n    });\n    for (auto &ext : extensions) {\n    \
    \    if (ext.compare(class_name) == 0) {\n            result = class_name + \"\
    .\" + ext;\n            return result;\n        }\n        if (ext.compare(class_name)\
    \ > 0 && strength == 0) {\n            result = class_name + \".\" + ext;\n  \
    \          return result;\n        }\n        if (ext.compare(class_name) > 0\
    \ && strength > 0 && strength == strength) {\n            result = class_name\
    \ + \".\" + ext;\n            return result;\n        }\n        if (ext.compare(class_name)\
    \ > 0 && strength > 0 && strength > strength) {\n            result = class_name\
    \ + \".\" + ext;\n            return result;\n        }\n    }\n    return result;",
  "    std::string result;\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            result = class_name + \".\" + extension;\n\
    \            break;\n        }\n    }\n    return result;", "    std::string result\
    \ = class_name + \".\";\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto it = extensions.begin(); it != extensions.end(); it++) {\n    \
    \    int strength = 0;\n        for (auto c = it->begin(); c != it->end(); c++)\
    \ {\n            if (isupper(*c)) {\n                strength++;\n           \
    \ }\n        }\n        for (auto c = it->begin(); c != it->end(); c++) {\n  \
    \          if (islower(*c)) {\n                strength--;\n            }\n  \
    \      }\n        if (strength > 0) {\n            result += *it;\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::string temp;\n\
    \    int strength = 0;\n    for (auto it = extensions.begin(); it != extensions.end();\
    \ it++) {\n        temp = *it;\n        int cap = 0, sm = 0;\n        for (auto\
    \ it2 = temp.begin(); it2 != temp.end(); it2++) {\n            if (*it2 >= 'A'\
    \ && *it2 <= 'Z') {\n                cap++;\n            }\n            if (*it2\
    \ >= 'a' && *it2 <= 'z') {\n                sm++;\n            }\n        }\n\
    \        strength += cap - sm;\n    }\n    for (auto it = extensions.begin();\
    \ it != extensions.end(); it++) {\n        temp = *it;\n        if (temp.find(class_name)\
    \ != std::string::npos) {\n            if (result.empty() || strength < result.find(class_name)\
    \ - result.find(class_name)) {\n                result = class_name + \".\" +\
    \ temp;\n            }\n        }\n    }\n    return result;", "    std::string\
    \ result = class_name;\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto& extension : extensions) {\n        int cap = 0, sm = 0;\n    \
    \    for (auto& c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n  \
    \              cap++;\n            } else {\n                sm++;\n         \
    \   }\n        }\n        int strength = cap - sm;\n        if (strength > result.size())\
    \ {\n            result = extension;\n        }\n    }\n    return result;", " \
    \   std::string result = class_name;\n    int strength = 0;\n    for (auto& extension\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (auto& c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(), [](const\
    \ std::string& a, const std::string& b) {\n        return a.size() < b.size();\n\
    \    });\n    for (auto& extension : extensions) {\n        if (extension.size()\
    \ == result.size() && strength == 0) {\n            result += '.';\n        }\n\
    \        result += extension;\n        strength -= extension.size();\n    }\n\
    \    return result;", "    std::string result;\n    int strength = 0;\n    for\
    \ (auto ext : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c\
    \ : ext) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    for (auto ext : extensions) {\n        if\
    \ (ext.find(class_name) != std::string::npos) {\n            result = class_name\
    \ + \".\" + ext;\n            break;\n        }\n    }\n    return result;", " \
    \   std::string result;\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                cap++;\n            }\n  \
    \          else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.length()\
    \ > result.length()) {\n            result = extension;\n        }\n        else\
    \ if (extension.length() == result.length() && strength < 0) {\n            result\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + result;", " \
    \   std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto&\
    \ ext : extensions) {\n        int cap = 0, sm = 0;\n        for (auto& c : ext)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(), [](const\
    \ std::string& a, const std::string& b) {\n        return a.size() < b.size();\n\
    \    });\n    for (auto& ext : extensions) {\n        if (ext.size() == strength)\
    \ {\n            result += ext;\n            return result;\n        }\n    }\n\
    \    return result;", "    int CAP, SM;\n    std::string result;\n    for (auto\
    \ &ext : extensions) {\n        CAP = 0;\n        SM = 0;\n        for (auto &c\
    \ : ext) {\n            if (c >= 'A' && c <= 'Z') CAP++;\n            if (c >=\
    \ 'a' && c <= 'z') SM++;\n        }\n        if (CAP - SM > result.length()) {\n\
    \            result = ext;\n        }\n    }\n    return class_name + \".\" +\
    \ result;", "    std::string result = class_name;\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string& a, const std::string& b) {\n       \
    \ return a.size() - b.size();\n    });\n    for (auto& ext : extensions) {\n \
    \       if (ext.size() > result.size()) {\n            result = ext;\n       \
    \ }\n    }\n    return result + \".\" + result.substr(0, result.size() - 1);",
  "    std::string result;\n    int strength = 0;\n    for (auto ext : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : ext) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string&\
    \ a, const std::string& b) {\n        return a.size() < b.size();\n    });\n \
    \   for (auto ext : extensions) {\n        if (ext.size() == strength) {\n   \
    \         result = class_name + \".\" + ext;\n            break;\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::string temp;\n\
    \    int strength = 0;\n    int cap = 0;\n    int sm = 0;\n    for (int i = 0;\
    \ i < extensions.size(); i++) {\n        temp = extensions[i];\n        cap =\
    \ temp.find_first_of('C');\n        sm = temp.find_first_of('c');\n        strength\
    \ = cap - sm;\n        if (strength > strength) {\n            result = class_name\
    \ + \".\" + temp;\n        }\n    }\n    return result;", "    std::string result\
    \ = class_name;\n    int strength = 0;\n    for (auto ext : extensions) {\n  \
    \      int cap = 0, sm = 0;\n        for (auto c : ext) {\n            if (c >=\
    \ 'A' && c <= 'Z') {\n                cap++;\n            } else {\n         \
    \       sm++;\n            }\n        }\n        strength += cap - sm;\n    }\n\
    \    for (auto ext : extensions) {\n        if (ext == result) {\n           \
    \ continue;\n        }\n        if (ext.size() < result.size()) {\n          \
    \  continue;\n        }\n        if (ext.size() > result.size()) {\n         \
    \   result = ext;\n            strength = 0;\n            continue;\n        }\n\
    \        if (ext.compare(0, result.size(), result) == 0) {\n            if (ext.size()\
    \ > result.size()) {\n                result = ext;\n                strength\
    \ = 0;\n                continue;\n            }\n            if (ext.size() <\
    \ result.size()) {\n                continue;\n            }\n            if (ext.compare(0,\
    \ result.size(), result) == 0) {\n                if (ext.size() > result.size())\
    \ {\n                    result = ext;\n                    strength = 0;\n  \
    \                  continue;\n                }\n                if (ext.size()\
    \ < result.size()) {\n                    continue;\n                }\n     \
    \           if (ext.compare(0, result.size(), result) == 0) {\n              \
    \      if (ext.size() > result.size()) {\n                        result = ext;\n\
    \                        strength = 0;\n                        continue;\n  \
    \                  }\n                    if (ext.size() < result.size()) {\n\
    \                        continue;\n                    }\n                  \
    \  if (ext.compare(0, result.size(), result) == 0) {\n                       \
    \ if (ext.size() > result.size()) {\n                            result = ext;\n\
    \                            strength = 0;\n                            continue;\n\
    \                        }\n                        if (ext.size() < result.size())\
    \ {\n                            continue;\n                        }\n      \
    \                  if (ext.compare(0, result.size(), result) == 0) {\n       \
    \                     if (ext.size() > result.size()) {\n                    \
    \            result", "    std::string result;\n    std::stringstream ss;\n  \
    \  int strength = 0;\n    for (auto it = extensions.begin(); it != extensions.end();\
    \ it++) {\n        int cap = 0;\n        int sm = 0;\n        for (auto it2 =\
    \ it->begin(); it2 != it->end(); it2++) {\n            if (*it2 >= 'A' && *it2\
    \ <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n        ss << class_name\
    \ << \".\" << *it << \".\";\n    }\n    ss << class_name << \".\" << *std::min_element(extensions.begin(),\
    \ extensions.end(), [](std::string a, std::string b) {\n        return a.compare(b)\
    \ < 0;\n    }) << \".\";\n    result = ss.str();\n    return result;", "    std::string\
    \ result;\n    int strength = 0;\n    for (auto extension : extensions) {\n  \
    \      int cap = 0, sm = 0;\n        for (auto c : extension) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (auto extension : extensions) {\n        if (extension.compare(class_name)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare",
  "    std::string result;\n    std::string temp;\n    int strength = 0;\n    for\
    \ (int i = 0; i < extensions.size(); i++) {\n        temp = extensions[i];\n \
    \       int cap = 0, sm = 0;\n        for (int j = 0; j < temp.length(); j++)\
    \ {\n            if (temp[j] == 'A' || temp[j] == 'a') {\n                cap++;\n\
    \            }\n            if (temp[j] == 'a' || temp[j] == 'A') {\n        \
    \        sm++;\n            }\n        }\n        strength += (cap - sm);\n  \
    \  }\n    for (int i = 0; i < extensions.size(); i++) {\n        temp = extensions[i];\n\
    \        if (temp.length() > result.length()) {\n            result = temp;\n\
    \        }\n    }\n    return class_name + \".\" + result;", "    std::string\
    \ result = class_name;\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string&\
    \ a, const std::string& b) {\n        return a.size() < b.size();\n    });\n \
    \   for (auto extension : extensions) {\n        if (extension.size() == result.size()\
    \ && strength == 0) {\n            return result + \".\" + extension;\n      \
    \  }\n        if (extension.size() > result.size() && strength >= 0) {\n     \
    \       result = extension;\n            strength = 0;\n        }\n        if\
    \ (extension.size() == result.size() && strength > 0) {\n            strength\
    \ += extension.size() - result.size();\n        }\n    }\n    return result;",
  "    std::string result = class_name;\n    std::sort(extensions.begin(), extensions.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() -\
    \ b.size() > 0;\n    });\n    for (auto& extension : extensions) {\n        if\
    \ (extension.size() > result.size()) {\n            result = extension;\n    \
    \    }\n    }\n    return result;", "    std::string result;\n    std::string\
    \ temp;\n    std::stringstream ss;\n    int strength;\n    int cap, sm;\n    for\
    \ (auto &extension : extensions) {\n        cap = 0;\n        sm = 0;\n      \
    \  for (auto &c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n    \
    \            cap++;\n            } else {\n                sm++;\n           \
    \ }\n        }\n        strength = cap - sm;\n        if (result.empty()) {\n\
    \            result = class_name + \".\" + extension;\n        } else if (strength\
    \ > strength_of_extension(result)) {\n            result = class_name + \".\"\
    \ + extension;\n        }\n    }\n    return result;", "    std::string result;\n\
    \    std::stringstream ss;\n    int strength = 0;\n    for (auto ext : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : ext) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (auto ext : extensions) {\n        int cap = 0, sm = 0;\n    \
    \    for (auto c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n         \
    \       cap++;\n            } else {\n                sm++;\n            }\n \
    \       }\n        if (cap - sm > strength) {\n            strength = cap - sm;\n\
    \            result = class_name + \".\" + ext;\n        }\n    }\n    return\
    \ result;", "    std::string result = class_name + \".\";\n    int strength =\
    \ 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto extension\
    \ : extensions) {\n        if (extension.find(\".\") != std::string::npos) {\n\
    \            continue;\n        }\n        if (extension.find(\".\") == std::string::npos)\
    \ {\n            extension += \".\";\n        }\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            continue;\n        }\n        if (extension.find(class_name)\
    \ == std::string::npos) {\n            extension += class_name;\n        }\n \
    \       if (extension.find(\".\") != std::string::npos) {\n            continue;\n\
    \        }\n        if (extension.find(\".\") == std::string::npos) {\n      \
    \      extension += \".\";\n        }\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            continue;\n        }\n        if (extension.find(class_name)\
    \ == std::string::npos) {\n            extension += class_name;\n        }\n \
    \       if (extension.find(\".\") != std::string::npos) {\n            continue;\n\
    \        }\n        if (extension.find(\".\") == std::string::npos) {\n      \
    \      extension += \".\";\n        }\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            continue;\n        }\n        if (extension.find(class_name)\
    \ == std::string::npos) {\n            extension += class_name;\n        }\n \
    \       if (extension.find(\".\") != std::string::npos) {\n            continue;\n\
    \        }\n        if (extension.find(\".\") == std::string::npos) {\n      \
    \      ext", "    std::string result = class_name;\n    std::string temp;\n  \
    \  int strength = 0;\n    for (std::string extension : extensions) {\n       \
    \ int cap = 0, sm = 0;\n        for (char c : extension) {\n            if (c\
    \ >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n      \
    \          sm++;\n            }\n        }\n        strength += cap - sm;\n  \
    \      temp = extension;\n    }\n    if (strength == 0) {\n        return result;\n\
    \    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string&\
    \ a, const std::string& b) {\n        return a.compare(b) < 0;\n    });\n    for\
    \ (std::string extension : extensions) {\n        if (extension.compare(temp)\
    \ == 0) {\n            return result + \".\" + extension;\n        }\n    }\n\
    \    return result + \".\" + temp;", "    std::string result = class_name + \"\
    .\";\n    int strength = 0;\n    for (auto e : extensions) {\n        int cap\
    \ = 0, sm = 0;\n        for (auto c : e) {\n            if (c >= 'A' && c <= 'Z')\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        strength += cap - sm;\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string& a, const std::string& b) {\n       \
    \ return a.size() < b.size();\n    });\n    for (auto e : extensions) {\n    \
    \    if (e.size() > result.size()) {\n            result = e;\n        }\n   \
    \ }\n    return result;", "    std::string result;\n    std::string temp;\n  \
    \  int strength;\n    for (auto extension : extensions) {\n        temp = extension;\n\
    \        std::transform(temp.begin(), temp.end(), temp.begin(), ::toupper);\n\
    \        strength = 0;\n        for (auto c : temp) {\n            if (c == 'A'\
    \ || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n                strength++;\n\
    \            }\n        }\n        if (strength > result.length()) {\n       \
    \     result = extension;\n        }\n    }\n    return class_name + \".\" + result;",
  "    std::string result;\n    std::stringstream ss;\n    ss << class_name << \"\
    .\";\n    int strength = 0;\n    for (auto &extension : extensions) {\n      \
    \  int cap = 0, sm = 0;\n        for (auto &c : extension) {\n            if (c\
    \ >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n      \
    \          sm++;\n            }\n        }\n        strength += cap - sm;\n  \
    \      ss << extension << \".\";\n    }\n    ss >> result;\n    return result;",
  "    std::string result = class_name;\n    int strength = 0;\n    for (auto& ext\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (auto& c : ext) {\n\
    \            if (c >= 'A' && c <= 'Z') {\n                cap++;\n           \
    \ } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(), [](const\
    \ std::string& a, const std::string& b) {\n        return a.size() < b.size();\n\
    \    });\n    for (auto& ext : extensions) {\n        if (ext.size() == result.size()\
    \ && strength == 0) {\n            return result + \".\" + ext;\n        }\n \
    \       if (ext.size() > result.size() && strength == 0) {\n            result\
    \ = ext;\n        }\n        if (ext.size() == result.size() && strength > 0)\
    \ {\n            if (ext < result) {\n                result = ext;\n        \
    \    }\n        }\n    }\n    return result;", "    std::string result;\n    int\
    \ strength = 0;\n    for (auto extension : extensions) {\n        int cap = 0,\
    \ sm = 0;\n        for (auto c : extension) {\n            if (c >= 'A' && c <=\
    \ 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    for (auto\
    \ extension : extensions) {\n        if (extension.find(class_name) != std::string::npos)\
    \ {\n            result = extension;\n            break;\n        }\n    }\n \
    \   if (result.empty()) {\n        result = class_name + \".A\";\n    }\n    return\
    \ result;", "    std::string result = class_name + \".\";\n    int strength =\
    \ 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto extension\
    \ : extensions) {\n        if (extension.find(class_name) != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(\".\") != std",
  "    std::string result = class_name + \".\";\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string& a, const std::string& b) {\n       \
    \ return a.size() - b.size();\n    });\n    for (auto& extension : extensions)\
    \ {\n        if (extension.size() > result.size()) {\n            result = extension;\n\
    \        }\n    }\n    return result;", "    std::string result;\n    int strength\
    \ = 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto extension\
    \ : extensions) {\n        if (extension.compare(class_name) == 0) {\n       \
    \     continue;\n        }\n        int cap = 0, sm = 0;\n        for (auto c\
    \ : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   if (cap - sm > strength) {\n            result = class_name + \".\" + extension;\n\
    \            strength = cap - sm;\n        }\n    }\n    return result;", "  \
    \  std::string ret = class_name;\n    int strength = 0;\n    for (auto ext : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : ext) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (auto ext : extensions) {\n        if (ext.size() > ret.size())\
    \ {\n            ret = ext;\n        }\n    }\n    return ret + \".\" + ret.substr(0,\
    \ ret.size() - ret.size() / 2);", "    std::string result;\n    int strength =\
    \ 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto extension\
    \ : extensions) {\n        if (extension.size() > result.size()) {\n         \
    \   result = extension;\n        }\n    }\n    return class_name + \".\" + result;",
  "    std::string result;\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            result = extension;\n            break;\n\
    \        }\n    }\n    return result;", "    std::string result;\n    int strength\
    \ = 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    std::sort(extensions.begin(),\
    \ extensions.end(), [](const std::string& a, const std::string& b) {\n       \
    \ return a.length() < b.length();\n    });\n    for (auto extension : extensions)\
    \ {\n        if (extension.length() == strength) {\n            result = class_name\
    \ + \".\" + extension;\n            break;\n        }\n    }\n    return result;",
  "    std::string result;\n    int strength = 0;\n    for (auto& extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto& c : extension) {\n     \
    \       if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string&\
    \ a, const std::string& b) {\n        return a.size() < b.size();\n    });\n \
    \   for (auto& extension : extensions) {\n        if (extension.size() == strength)\
    \ {\n            result = class_name + \".\" + extension;\n            break;\n\
    \        }\n    }\n    return result;", "    std::string result;\n    int strength\
    \ = 0;\n    for (auto &extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto &c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto &extension\
    \ : extensions) {\n        if (extension.compare(class_name) == 0) {\n       \
    \     continue;\n        }\n        if (extension.compare(class_name + \".\")\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (", "    std::string\
    \ result = class_name + \".\";\n    int strength = 0;\n    for (auto extension\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto extension : extensions) {\n        if (extension.compare(result)\
    \ == 0) {\n            continue;\n        }\n        int cap = 0, sm = 0;\n  \
    \      for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n \
    \               cap++;\n            } else {\n                sm++;\n        \
    \    }\n        }\n        if (cap - sm > strength) {\n            result = extension;\n\
    \            strength = cap - sm;\n        }\n    }\n    return result;", "  \
    \  std::string result;\n    std::stringstream ss;\n    int strength = 0;\n   \
    \ for (auto& extension : extensions) {\n        int cap = 0, sm = 0;\n       \
    \ for (auto& c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n     \
    \           cap++;\n            }\n            else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n        ss << class_name\
    \ << \".\" << extension << \".\";\n    }\n    result = ss.str();\n    return result.substr(0,\
    \ result.size() - 1);", "    std::string result = class_name;\n    std::sort(extensions.begin(),\
    \ extensions.end());\n    for (auto it = extensions.begin(); it != extensions.end();\
    \ ++it) {\n        int strength = 0;\n        for (auto it2 = it->begin(); it2\
    \ != it->end(); ++it2) {\n            if (*it2 >= 'A' && *it2 <= 'Z') {\n    \
    \            strength += 1;\n            } else {\n                strength +=\
    \ 2;\n            }\n        }\n        if (strength < result.length()) {\n  \
    \          result = class_name + \".\" + *it;\n        }\n    }\n    return result;",
  "    std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto\
    \ &ext : extensions) {\n        int cap = 0, sm = 0;\n        for (auto &c : ext)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(), [](const\
    \ std::string &a, const std::string &b) {\n        return a.compare(b) < 0;\n\
    \    });\n    for (auto &ext : extensions) {\n        if (ext.compare(result)\
    \ == 0) {\n            continue;\n        }\n        int cap = 0, sm = 0;\n  \
    \      for (auto &c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n      \
    \          cap++;\n            } else {\n                sm++;\n            }\n\
    \        }\n        if (cap - sm > strength) {\n            result = ext;\n  \
    \          strength = cap - sm;\n        }\n    }\n    return result;", "    std::string\
    \ result = class_name;\n    std::string temp;\n    int strength = 0;\n    for\
    \ (auto &extension : extensions) {\n        temp = extension;\n        int cap\
    \ = 0, sm = 0;\n        for (auto &c : temp) {\n            if (c >= 'A' && c\
    \ <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    for (auto\
    \ &extension : extensions) {\n        if (extension.compare(result) == 0) {\n\
    \            continue;\n        }\n        if (extension.compare(result) > 0 &&\
    \ strength == extension.length()) {\n            result = extension;\n       \
    \ }\n    }\n    return result;", "    int cap = 0, sm = 0;\n    for (auto &ext\
    \ : extensions) {\n        cap += count(ext.begin(), ext.end(), 'A');\n      \
    \  sm += count(ext.begin(), ext.end(), 'a');\n    }\n    std::string result =\
    \ class_name;\n    for (auto &ext : extensions) {\n        if (cap - sm > 0) {\n\
    \            result += \".\" + ext;\n        }\n    }\n    return result;", " \
    \   std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto\
    \ extension : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c\
    \ : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n        result += extension;\n        if (cap - sm\
    \ > strength) {\n            strength = cap - sm;\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    int strength = 0;\n    for (auto extension\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            result = class_name + \".\" + extension;\n\
    \            break;\n        }\n    }\n    return result;", "    std::string result;\n\
    \    std::stringstream ss;\n    int strength = 0;\n    for (auto &extension :\
    \ extensions) {\n        int cap = 0, sm = 0;\n        for (auto &c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (auto &extension : extensions) {\n        if (extension.compare(class_name)\
    \ == 0) {\n            continue;\n        }\n        int cap = 0, sm = 0;\n  \
    \      for (auto &c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        if (cap - sm > strength) {\n            strength =\
    \ cap - sm;\n            result = class_name + \".\" + extension;\n        }\n\
    \    }\n    return result;", "    std::string result;\n    std::stringstream ss;\n\
    \    int strength = 0;\n    for (auto &extension : extensions) {\n        int\
    \ cap = 0;\n        int sm = 0;\n        for (auto &c : extension) {\n       \
    \     if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    for (auto &extension : extensions) {\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            result = extension;\n            break;\n\
    \        }\n    }\n    if (result.empty()) {\n        ss << class_name << \".StrongestExtensionName\"\
    ;\n    } else {\n        ss << class_name << \".\" << result;\n    }\n    return\
    \ ss.str();", "    std::string strongest_extension = class_name;\n    for (auto\
    \ extension : extensions) {\n        int strength = 0;\n        for (auto c :\
    \ extension) {\n            if (c >= 'A' && c <= 'Z') {\n                strength\
    \ -= 1;\n            } else {\n                strength += 1;\n            }\n\
    \        }\n        if (strength > strongest_extension.length()) {\n         \
    \   strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    std::string result = class_name + \".\"\
    ;\n    int strength = 0;\n    for (auto& ext : extensions) {\n        int cap\
    \ = 0, sm = 0;\n        for (auto& c : ext) {\n            if (c >= 'A' && c <=\
    \ 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    for (auto&\
    \ ext : extensions) {\n        if (ext.size() > result.size()) {\n           \
    \ result = ext;\n        } else if (ext.size() == result.size() && strength <\
    \ 0) {\n            result = ext;\n        }\n    }\n    return result;", "  \
    \  std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto&\
    \ ext : extensions) {\n        int cap = 0, sm = 0;\n        for (auto& c : ext)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (auto& ext : extensions) {\n        if (ext.find('.')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('_')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('-')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('\
    \ ') != std::string::npos) {\n            continue;\n        }\n        if (ext.find('.')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('/')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('\\\
    \\') != std::string::npos) {\n            continue;\n        }\n        if (ext.find('|')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('&')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('*')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('+')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('(')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find(')')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('{')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('}')\
    \ != std::string::npos) {\n            continue;\n        }\n        if (ext.find('[')\
    \ != std", "    std::string result = class_name;\n    for (auto ext : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : ext) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        if (cap - sm > result.size())\
    \ {\n            result = ext;\n        }\n    }\n    return result;", "    std::string\
    \ result = class_name;\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto& extension : extensions) {\n        int strength = 0;\n       \
    \ for (auto& c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n     \
    \           strength -= 1;\n            } else if (c >= 'a' && c <= 'z') {\n \
    \               strength += 1;\n            }\n        }\n        if (strength\
    \ > 0) {\n            result += \".\" + extension;\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    std::stringstream ss;\n    int strength\
    \ = 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto extension\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        if (cap\
    \ - sm > strength) {\n            strength = cap - sm;\n            result = class_name\
    \ + \".\" + extension;\n        }\n    }\n    return result;", "    std::string\
    \ strongest_extension;\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n        if (strength > strongest_extension.size()) {\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return class_name + \".\" + strongest_extension;",
  "    std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto\
    \ &extension : extensions) {\n        int cap = 0, sm = 0;\n        for (auto\
    \ &c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n               \
    \ cap++;\n            } else {\n                sm++;\n            }\n       \
    \ }\n        strength += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(),\
    \ [](const std::string &a, const std::string &b) {\n        return a.size() <\
    \ b.size();\n    });\n    for (auto &extension : extensions) {\n        if (extension.size()\
    \ == strength) {\n            result += extension;\n            return result;\n\
    \        }\n    }\n    return result;", "    std::string result = class_name +\
    \ \".\";\n    int strength = 0;\n    for (auto extension : extensions) {\n   \
    \     int cap = 0, sm = 0;\n        for (auto c : extension) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string\
    \ &a, const std::string &b) {\n        return a.compare(b) < 0;\n    });\n   \
    \ for (auto extension : extensions) {\n        if (extension.compare(result) ==\
    \ 0) {\n            continue;\n        }\n        if (extension.compare(result)\
    \ > 0) {\n            result = extension;\n            break;\n        }\n   \
    \ }\n    return result;", "    std::string result;\n    std::stringstream ss;\n\
    \    std::stringstream ss2;\n    std::stringstream ss3;\n    std::stringstream\
    \ ss4;\n    std::stringstream ss5;\n    std::stringstream ss6;\n    std::stringstream\
    \ ss7;\n    std::stringstream ss8;\n    std::stringstream ss9;\n    std::stringstream\
    \ ss10;\n    std::stringstream ss11;\n    std::stringstream ss12;\n    std::stringstream\
    \ ss13;\n    std::stringstream ss14;\n    std::stringstream ss15;\n    std::stringstream\
    \ ss16;\n    std::stringstream ss17;\n    std::stringstream ss18;\n    std::stringstream\
    \ ss19;\n    std::stringstream ss20;\n    std::stringstream ss21;\n    std::stringstream\
    \ ss22;\n    std::stringstream ss23;\n    std::stringstream ss24;\n    std::stringstream\
    \ ss25;\n    std::stringstream ss26;\n    std::stringstream ss27;\n    std::stringstream\
    \ ss28;\n    std::stringstream ss29;\n    std::stringstream ss30;\n    std::stringstream\
    \ ss31;\n    std::stringstream ss32;\n    std::stringstream ss33;\n    std::stringstream\
    \ ss34;\n    std::stringstream ss35;\n    std::stringstream ss36;\n    std::stringstream\
    \ ss37;\n    std::stringstream ss38;\n    std::stringstream ss39;\n    std::stringstream\
    \ ss40;\n    std::stringstream ss41;\n    std::stringstream ss42;\n    std::stringstream\
    \ ss43;\n    std::stringstream ss44;\n    std::stringstream ss45;\n    std::stringstream\
    \ ss46;\n    std::stringstream ss47;\n    std::stringstream ss48;\n    std::stringstream\
    \ ss49;\n    std::stringstream ss50;\n    std::stringstream ss51;\n    std::stringstream\
    \ ss52;\n    std::stringstream ss53;\n    std::stringstream ss54;\n    std::stringstream\
    \ ss55;\n    std::stringstream ss56;\n    std", "    std::string result;\n   \
    \ int strength = 0;\n    for (auto extension : extensions) {\n        int cap\
    \ = 0, sm = 0;\n        for (auto c : extension) {\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    for (auto\
    \ extension : extensions) {\n        if (extension.size() > result.size()) {\n\
    \            result = extension;\n        } else if (extension.size() == result.size()\
    \ && strength > 0) {\n            if (extension < result) {\n                result\
    \ = extension;\n            }\n        }\n    }\n    return class_name + \".\"\
    \ + result;", "    std::string strongest_extension;\n    int strength = 0;\n \
    \   for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n      \
    \  for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n     \
    \           cap++;\n            } else {\n                sm++;\n            }\n\
    \        }\n        strength += cap - sm;\n        if (strength > strongest_extension.size())\
    \ {\n            strongest_extension = extension;\n        }\n    }\n    return\
    \ class_name + \".\" + strongest_extension;", "    std::string result;\n    std::string\
    \ temp;\n    int strength;\n    for (auto extension : extensions) {\n        strength\
    \ = 0;\n        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z')\
    \ {\n                strength++;\n            }\n        }\n        for (auto\
    \ c : extension) {\n            if (c >= 'a' && c <= 'z') {\n                strength--;\n\
    \            }\n        }\n        if (strength > 0) {\n            temp = extension;\n\
    \        }\n    }\n    result = class_name + \".\" + temp;\n    return result;",
  "    std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto\
    \ &ext : extensions) {\n        int cap = 0, sm = 0;\n        for (auto &c : ext)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n       \
    \     } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto &ext : extensions) {\n        if (ext == result) {\n          \
    \  continue;\n        }\n        if (ext.length() > result.length()) {\n     \
    \       result = ext;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    int strength = 0;\n    for (auto ext : extensions) {\n        int\
    \ cap = 0, sm = 0;\n        for (auto c : ext) {\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    for (auto\
    \ ext : extensions) {\n        if (ext == class_name) {\n            continue;\n\
    \        }\n        if (ext.find(class_name) == 0) {\n            if (strength\
    \ < 0) {\n                result = ext;\n                break;\n            }\
    \ else if (strength == 0) {\n                result = ext;\n            } else\
    \ if (strength > 0) {\n                if (ext < result) {\n                 \
    \   result = ext;\n                }\n            }\n        }\n    }\n    return\
    \ class_name + \".\" + result;", "    std::string result = class_name + \".\"\
    ;\n    std::sort(extensions.begin(), extensions.end(), [](const std::string& a,\
    \ const std::string& b) {\n        return a.size() - b.size() > 0;\n    });\n\
    \    for (auto& extension : extensions) {\n        if (extension.size() > result.size())\
    \ {\n            result = extension;\n        }\n    }\n    return result;", " \
    \   std::string result;\n    int strength = 0;\n    for (auto &extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto &c : extension) {\n     \
    \       if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    for (auto &extension : extensions) {\n        if (extension.size()\
    \ > result.size()) {\n            result = extension;\n        } else if (extension.size()\
    \ == result.size() && strength < 0) {\n            result = extension;\n     \
    \   }\n    }\n    return class_name + \".\" + result;", "    std::string strongest_extension\
    \ = class_name;\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n        if (strength > strength) {\n            strength = cap - sm;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return class_name\
    \ + \".\" + strongest_extension;", "    std::string result = class_name;\n   \
    \ std::sort(extensions.begin(), extensions.end(), [](std::string a, std::string\
    \ b) {\n        return a.size() - b.size() > 0;\n    });\n    for (auto& ext :\
    \ extensions) {\n        if (ext.size() > result.size()) {\n            result\
    \ = ext;\n        }\n    }\n    return result;", "    std::string result;\n  \
    \  int strength = 0;\n    for (auto& ext : extensions) {\n        int cap = 0,\
    \ sm = 0;\n        for (auto& c : ext) {\n            if (c >= 'A' && c <= 'Z')\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        strength += cap - sm;\n    }\n    for (auto& ext\
    \ : extensions) {\n        if (ext.find(class_name) != std::string::npos) {\n\
    \            result = ext;\n            break;\n        }\n    }\n    if (result.empty())\
    \ {\n        result = class_name + \".A\";\n    }\n    return result;", "    std::string\
    \ result;\n    std::string temp;\n    int cap, sm;\n    for (auto e : extensions)\
    \ {\n        cap = 0;\n        sm = 0;\n        for (auto c : e) {\n         \
    \   if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n\
    \                sm++;\n            }\n        }\n        if (cap - sm > result.size())\
    \ {\n            result = e;\n        }\n    }\n    return class_name + \".\"\
    \ + result;", "    std::string result;\n    int strength = 0;\n    for (auto ext\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c : ext) {\n\
    \            if (c >= 'A' && c <= 'Z') {\n                cap++;\n           \
    \ } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    for (auto ext : extensions) {\n        if (ext.length()\
    \ > result.length()) {\n            result = ext;\n        }\n    }\n    return\
    \ class_name + \".\" + result;", "    std::string result;\n    int strength =\
    \ 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto extension\
    \ : extensions) {\n        if (extension.compare(class_name) == 0) {\n       \
    \     continue;\n        }\n        int cap = 0, sm = 0;\n        for (auto c\
    \ : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   if (cap - sm > strength) {\n            result = class_name + \".\" + extension;\n\
    \            strength = cap - sm;\n        }\n    }\n    return result;", "  \
    \  std::string result;\n    int strength = 0;\n    for (auto ext : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : ext) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (auto ext : extensions) {\n        if (ext.length() > result.length())\
    \ {\n            result = ext;\n        }\n    }\n    return class_name + \".\"\
    \ + result;", "    int CAP, SM;\n    std::string strongest;\n    for (auto extension\
    \ : extensions) {\n        CAP = 0;\n        SM = 0;\n        for (auto c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                CAP++;\n       \
    \     } else {\n                SM++;\n            }\n        }\n        if (CAP\
    \ - SM > strongest.size()) {\n            strongest = extension;\n        }\n\
    \    }\n    return class_name + \".\" + strongest;", "    std::string result =\
    \ class_name + \".\";\n    int strength = 0;\n    for (auto extension : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto c : extension) {\n      \
    \      if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        strength += cap\
    \ - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string\
    \ &a, const std::string &b) {\n        return a.size() < b.size();\n    });\n\
    \    for (auto extension : extensions) {\n        if (extension.size() == strength)\
    \ {\n            result += extension;\n            break;\n        }\n    }\n\
    \    return result;", "    std::string result = class_name;\n    for (auto extension\
    \ : extensions) {\n        int strength = 0;\n        for (auto c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                strength += 1;\n\
    \            } else {\n                strength += 2;\n            }\n       \
    \ }\n        if (strength > result.length()) {\n            result = extension;\n\
    \        }\n    }\n    return result;", "    std::string result = class_name;\n\
    \    int strength = 0;\n    for (auto &extension : extensions) {\n        int\
    \ cap = 0, sm = 0;\n        for (auto &c : extension) {\n            if (c >=\
    \ 'A' && c <= 'Z') {\n                cap++;\n            } else {\n         \
    \       sm++;\n            }\n        }\n        strength += cap - sm;\n    }\n\
    \    std::sort(extensions.begin(), extensions.end(), [](const std::string &a,\
    \ const std::string &b) {\n        return a.compare(b) < 0;\n    });\n    for\
    \ (auto &extension : extensions) {\n        if (extension.compare(result) == 0)\
    \ {\n            result = class_name + \".\" + extension;\n            break;\n\
    \        }\n    }\n    return result;", "    std::string result = class_name +\
    \ \".\";\n    int strength = 0;\n    for (auto extension : extensions) {\n   \
    \     int cap = 0, sm = 0;\n        for (auto c : extension) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (auto extension : extensions) {\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std::string::npos) {\n            continue;\n        }\n        if (extension.find(\"\
    .\") != std", "    std::string result = class_name + \".\";\n    int strength\
    \ = 0;\n    for (auto& ext : extensions) {\n        int cap = 0, sm = 0;\n   \
    \     for (auto& c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n       \
    \         cap++;\n            } else {\n                sm++;\n            }\n\
    \        }\n        strength += cap - sm;\n    }\n    for (auto& ext : extensions)\
    \ {\n        if (ext.size() > result.size()) {\n            result = ext;\n  \
    \      }\n    }\n    return result;", "    std::string result;\n    std::stringstream\
    \ ss;\n    int strength = 0;\n    for (auto& ext : extensions) {\n        int\
    \ cap = 0, sm = 0;\n        for (auto& c : ext) {\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n        ss << class_name\
    \ << \".\" << ext << \".\";\n    }\n    result = ss.str();\n    return result;",
  "    std::string result = class_name;\n    std::sort(extensions.begin(), extensions.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() -\
    \ b.size();\n    });\n    for (auto& extension : extensions) {\n        if (extension.size()\
    \ > result.size()) {\n            result = extension;\n        }\n    }\n    return\
    \ result;", "    std::string result;\n    std::stringstream ss;\n    int strength\
    \ = 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n        ss << class_name <<\
    \ \".\" << extension << \".\";\n    }\n    result = ss.str();\n    return result;",
  "    std::string result = class_name;\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto it = extensions.begin(); it != extensions.end(); ++it) {\n    \
    \    int strength = 0;\n        for (auto c : it->begin(), e = it->end(); c !=\
    \ e; ++c) {\n            if (isupper(*c)) {\n                ++strength;\n   \
    \         }\n        }\n        for (auto c : it->begin(), e = it->end(); c !=\
    \ e; ++c) {\n            if (islower(*c)) {\n                --strength;\n   \
    \         }\n        }\n        if (strength > 0) {\n            result += \"\
    .\" + *it;\n        }\n    }\n    return result;", "    std::string result = class_name\
    \ + \".\";\n    int strength = 0;\n    for (auto& extension : extensions) {\n\
    \        int cap = 0, sm = 0;\n        for (auto& c : extension) {\n         \
    \   if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n\
    \                sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string&\
    \ a, const std::string& b) {\n        return a.size() < b.size();\n    });\n \
    \   for (auto& extension : extensions) {\n        if (extension.size() == strength)\
    \ {\n            result += extension;\n            return result;\n        }\n\
    \    }\n    return result;", "    std::string result;\n    int strength = 0;\n\
    \    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n     \
    \   for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n    \
    \            cap++;\n            } else {\n                sm++;\n           \
    \ }\n        }\n        strength += cap - sm;\n    }\n    for (auto extension\
    \ : extensions) {\n        if (extension.length() > result.length()) {\n     \
    \       result = extension;\n        }\n    }\n    return class_name + \".\" +\
    \ result;", "    std::string result;\n    int strength = 0;\n    for (auto& ext\
    \ : extensions) {\n        int cap = 0, sm = 0;\n        for (auto& c : ext) {\n\
    \            if (c >= 'A' && c <= 'Z') {\n                cap++;\n           \
    \ } else {\n                sm++;\n            }\n        }\n        strength\
    \ += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto& ext : extensions) {\n        if (ext == class_name) {\n      \
    \      continue;\n        }\n        int cap = 0, sm = 0;\n        for (auto&\
    \ c : ext) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   if (cap - sm > strength) {\n            strength = cap - sm;\n           \
    \ result = class_name + \".\" + ext;\n        }\n    }\n    return result;", " \
    \   std::string result;\n    int strength = 0;\n    for (auto& ext : extensions)\
    \ {\n        int cap = 0, sm = 0;\n        for (auto& c : ext) {\n           \
    \ if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n\
    \                sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (auto& ext : extensions) {\n        if (ext.length() == strength)\
    \ {\n            result = class_name + \".\" + ext;\n            break;\n    \
    \    }\n    }\n    return result;", "    std::string result = class_name;\n  \
    \  int strength = 0;\n    for (auto extension : extensions) {\n        int cap\
    \ = 0;\n        int sm = 0;\n        for (auto c : extension) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n   \
    \             sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (auto extension : extensions) {\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            continue;\n        }\n        if (extension.find(class_name\
    \ + \".\") != std::string::npos) {\n            continue;\n        }\n       \
    \ if (extension.find(class_name + \".\") != std::string::npos) {\n           \
    \ continue;\n        }\n        if (extension.find(class_name + \".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(class_name +\
    \ \".\") != std::string::npos) {\n            continue;\n        }\n        if\
    \ (extension.find(class_name + \".\") != std::string::npos) {\n            continue;\n\
    \        }\n        if (extension.find(class_name + \".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(class_name +\
    \ \".\") != std::string::npos) {\n            continue;\n        }\n        if\
    \ (extension.find(class_name + \".\") != std::string::npos) {\n            continue;\n\
    \        }\n        if (extension.find(class_name + \".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (extension.find(class_name +\
    \ \".\") != std::string::npos) {\n            continue;\n        }\n        if\
    \ (extension.find(class_name + \".\") != std::string::npos) {\n            continue;\n\
    \        }\n        if (extension.find(class_name + \".\") != std::string::npos)\
    \ {\n            continue;\n        }\n        if (", "    std::string result;\n\
    \    std::stringstream ss;\n    int strength = 0;\n    int cap = 0;\n    int sm\
    \ = 0;\n    for (std::string extension : extensions) {\n        cap = 0;\n   \
    \     sm = 0;\n        for (char c : extension) {\n            if (c >= 'A' &&\
    \ c <= 'Z') {\n                cap++;\n            } else {\n                sm++;\n\
    \            }\n        }\n        strength += cap - sm;\n    }\n    for (std::string\
    \ extension : extensions) {\n        cap = 0;\n        sm = 0;\n        for (char\
    \ c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   if (cap - sm > strength) {\n            strength = cap - sm;\n           \
    \ result = class_name + \".\" + extension;\n        }\n    }\n    return result;",
  "    std::string result = class_name + \".\";\n    int strength = 0;\n    for (auto\
    \ extension : extensions) {\n        int cap = 0, sm = 0;\n        for (auto c\
    \ : extension) {\n            if (c >= 'A' && c <= 'Z') {\n                cap++;\n\
    \            } else {\n                sm++;\n            }\n        }\n     \
    \   strength += cap - sm;\n    }\n    std::sort(extensions.begin(), extensions.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() <\
    \ b.size();\n    });\n    for (auto extension : extensions) {\n        if (extension.size()\
    \ == strength) {\n            result += extension;\n            break;\n     \
    \   }\n    }\n    return result;", "    std::string result = class_name + \".\"\
    ;\n    int strength = 0;\n    for (auto extension : extensions) {\n        int\
    \ cap = 0, sm = 0;\n        for (auto c : extension) {\n            if (c >= 'A'\
    \ && c <= 'Z') {\n                cap++;\n            }\n            else {\n\
    \                sm++;\n            }\n        }\n        strength += cap - sm;\n\
    \    }\n    for (auto extension : extensions) {\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ > 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ > 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ > 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ > 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ > 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            ", "    std::string result;\n    std::stringstream ss;\n\
    \    int strength = 0;\n    for (auto ext : extensions) {\n        int cap = 0,\
    \ sm = 0;\n        for (auto c : ext) {\n            if (c >= 'A' && c <= 'Z')\
    \ {\n                cap++;\n            } else {\n                sm++;\n   \
    \         }\n        }\n        strength += cap - sm;\n    }\n    for (auto ext\
    \ : extensions) {\n        if (ext.compare(class_name) == 0) {\n            continue;\n\
    \        }\n        if (ext.compare(class_name + \".\") == 0) {\n            continue;\n\
    \        }\n        int cap = 0, sm = 0;\n        for (auto c : ext) {\n     \
    \       if (c >= 'A' && c <= 'Z') {\n                cap++;\n            } else\
    \ {\n                sm++;\n            }\n        }\n        if (cap - sm > strength)\
    \ {\n            strength = cap - sm;\n            result = ext;\n        }\n\
    \    }\n    if (result.empty()) {\n        result = class_name + \".A\";\n   \
    \ }\n    return class_name + \".\" + result;", "    std::string result = class_name;\n\
    \    int strength = 0;\n    for (auto &extension : extensions) {\n        int\
    \ cap = 0, sm = 0;\n        for (auto &c : extension) {\n            if (c >=\
    \ 'A' && c <= 'Z') {\n                cap++;\n            } else {\n         \
    \       sm++;\n            }\n        }\n        strength += cap - sm;\n    }\n\
    \    for (auto &extension : extensions) {\n        if (extension.compare(result)\
    \ == 0) {\n            continue;\n        }\n        int cap = 0, sm = 0;\n  \
    \      for (auto &c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        if (cap - sm > strength) {\n            result = extension;\n\
    \            strength = cap - sm;\n        }\n    }\n    return result;", "  \
    \  std::string result = class_name;\n    std::sort(extensions.begin(), extensions.end(),\
    \ [](const std::string& a, const std::string& b) {\n        return a.size() -\
    \ b.size() < 0;\n    });\n    for (auto& extension : extensions) {\n        if\
    \ (extension.size() > result.size()) {\n            result = extension;\n    \
    \    }\n    }\n    return result;", "    std::string result = class_name + \"\
    .\";\n    int strength = 0;\n    for (auto extension : extensions) {\n       \
    \ int cap = 0, sm = 0;\n        for (auto c : extension) {\n            if (c\
    \ >= 'A' && c <= 'Z') {\n                cap++;\n            } else {\n      \
    \          sm++;\n            }\n        }\n        strength += cap - sm;\n  \
    \  }\n    for (auto extension : extensions) {\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ > 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ > 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ > 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ > 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ > 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(extension)\
    \ < 0) {\n            continue;", "    std::string result;\n    int strength =\
    \ 0;\n    for (auto extension : extensions) {\n        int cap = 0, sm = 0;\n\
    \        for (auto c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                cap++;\n            } else {\n                sm++;\n       \
    \     }\n        }\n        strength += cap - sm;\n    }\n    for (auto extension\
    \ : extensions) {\n        if (extension.compare(class_name) == 0) {\n       \
    \     continue;\n        }\n        if (extension.compare(class_name + \".\")\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare(class_name\
    \ + \".\") == 0) {\n            continue;\n        }\n        if (extension.compare",
  "    std::string result = class_name;\n    std::sort(extensions.begin(), extensions.end(),\
    \ [](const std::string &a, const std::string &b) {\n        return a.size() -\
    \ b.size() > 0;\n    });\n    for (auto &extension : extensions) {\n        int\
    \ cap = 0, sm = 0;\n        for (auto &c : extension) {\n            if (c >=\
    \ 'A' && c <= 'Z') {\n                cap++;\n            } else {\n         \
    \       sm++;\n            }\n        }\n        int strength = cap - sm;\n  \
    \      if (strength > 0) {\n            result += \".\" + extension;\n       \
    \ }\n    }\n    return result;", "    std::string result = class_name;\n    int\
    \ strength = 0;\n    for (auto &extension : extensions) {\n        int cap = 0,\
    \ sm = 0;\n        for (auto &c : extension) {\n            if (c >= 'A' && c\
    \ <= 'Z') {\n                cap++;\n            }\n            else {\n     \
    \           sm++;\n            }\n        }\n        strength += cap - sm;\n \
    \   }\n    std::sort(extensions.begin(), extensions.end(), [](const std::string\
    \ &a, const std::string &b) {\n        return a.compare(b) < 0;\n    });\n   \
    \ for (auto &extension : extensions) {\n        if (extension.compare(result)\
    \ == 0) {\n            continue;\n        }\n        if (extension.compare(result)\
    \ > 0) {\n            result = extension;\n        }\n    }\n    return result;",
  "    std::string result = class_name;\n    std::sort(extensions.begin(), extensions.end(),\
    \ [](std::string a, std::string b) {\n        return a.size() - b.size() > 0;\n\
    \    });\n    for (auto& extension : extensions) {\n        int strength = 0;\n\
    \        for (auto& c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n\
    \                strength++;\n            }\n        }\n        if (strength >\
    \ result.size()) {\n            result = class_name + \".\" + extension;\n   \
    \     }\n    }\n    return result;", "    std::string result = class_name;\n \
    \   std::sort(extensions.begin(), extensions.end());\n    for (auto& extension\
    \ : extensions) {\n        int strength = 0;\n        for (auto& c : extension)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                strength += 1;\n\
    \            } else if (c >= 'a' && c <= 'z') {\n                strength -= 1;\n\
    \            }\n        }\n        if (strength > 0) {\n            result +=\
    \ \".\" + extension;\n        }\n    }\n    return result;", "    std::string\
    \ result = class_name;\n    std::sort(extensions.begin(), extensions.end());\n\
    \    for (auto &extension : extensions) {\n        int strength = 0;\n       \
    \ for (auto &c : extension) {\n            if (c >= 'A' && c <= 'Z') {\n     \
    \           strength -= 1;\n            } else {\n                strength +=\
    \ 1;\n            }\n        }\n        if (strength > 0) {\n            result\
    \ += \".\" + extension;\n        }\n    }\n    return result;", "    std::string\
    \ result;\n    int strength = 0;\n    for (auto extension : extensions) {\n  \
    \      int cap = 0, sm = 0;\n        for (auto c : extension) {\n            if\
    \ (c >= 'A' && c <= 'Z') {\n                cap++;\n            }\n          \
    \  else {\n                sm++;\n            }\n        }\n        strength +=\
    \ cap - sm;\n    }\n    for (auto extension : extensions) {\n        if (extension.find(class_name)\
    \ != std::string::npos) {\n            result = extension;\n            break;\n\
    \        }\n    }\n    return result;"]
stop_tokens:
- "\n}"
