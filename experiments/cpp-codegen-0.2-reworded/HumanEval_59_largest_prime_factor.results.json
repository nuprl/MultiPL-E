{
  "name": "HumanEval_59_largest_prime_factor",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n",
  "tests": "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return n;\n    long i = 2;\n    while (n % i == 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp_5swd91y: /tmp/tmp_5swd91y.cpp:19: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        return n;\n    } else {\n        return i;\n    }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m, p;\n    m = n;\n    for (i = 2; i <= m / i; i++) {\n        if (m % i == 0) {\n            m /= i;\n            p = i;\n            while (m % i == 0) {\n                m /= i;\n                p = i;\n            }\n            if (p > 1) {\n                return p;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpls60g8nr: /tmp/tmpls60g8nr.cpp:28: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp91j7b8w9: /tmp/tmp91j7b8w9.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    assert(n > 1);\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            i = 2;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long s, t;\n    long max_factor = 0;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == 0) {\n        return n;\n    }\n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            s = 0;\n            t = i;\n            while (t <= n) {\n                s += t;\n                t *= i;\n            }\n            if (s > max_factor) {\n                max_factor = s;\n            }\n        }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp3uqcitle: /tmp/tmp3uqcitle.cpp:38: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            j = 2;\n            while (n % i == 0) {\n                n /= i;\n                j++;\n            }\n            if (j > k) {\n                k = j;\n            }\n        }\n    }\n    if (n > 1) {\n        k++;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpi_dxx_2h: /tmp/tmpi_dxx_2h.cpp:29: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    assert(n > 1);\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    if (n > 1) {\n        p = 3;\n        while (n % p == 0) {\n            n /= p;\n            p = 3;\n        }\n    }\n    if (n > 1) {\n        p = 5;\n        while (n % p == 0) {\n            n /= p;\n            p = 5;\n        }\n    }\n    if (n > 1) {\n        p = 7;\n        while (n % p == 0) {\n            n /= p;\n            p = 7;\n        }\n    }\n    if (n > 1) {\n        p = 11;\n        while (n % p == 0) {\n            n /= p;\n            p = 11;\n        }\n    }\n    if (n > 1) {\n        p = 13;\n        while (n % p == 0) {\n            n /= p;\n            p = 13;\n        }\n    }\n    if (n > 1) {\n        p = 17;\n        while (n % p == 0) {\n            n /= p;\n            p = 17;\n        }\n    }\n    if (n > 1) {\n        p = 19;\n        while (n % p == 0) {\n            n /= p;\n            p = 19;\n        }\n    }\n    if (n > 1) {\n        p = 23;\n        while (n % p == 0) {\n            n /= p;\n            p = 23;\n        }\n    }\n    if (n > 1) {\n        p = 29;\n        while (n % p == 0) {\n            n /= p;\n            p = 29;\n        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l;\n    long m = n;\n    for (i = 2; i <= m / 2; i++) {\n        if (m % i == 0) {\n            m /= i;\n            l = i;\n            while (m % i == 0) {\n                m /= i;\n                l *= i;\n            }\n            if (l > k) {\n                k = l;\n            }\n        }\n    }\n    if (m > 1) {\n        k *= m;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmptm_7diix: /tmp/tmptm_7diix.cpp:31: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            i = k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp7ehdamkk: /tmp/tmp7ehdamkk.cpp:24: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max_factor = 1;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == 1) {\n        return max_factor;\n    }\n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpvx91zzqs: /tmp/tmpvx91zzqs.cpp:36: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long prime = 2;\n    while (n % prime == 0) {\n        n /= prime;\n    }\n    for (i = prime; i <= n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n            }\n            if (i != j) {\n                k = n / j;\n                n = j;\n                j = k;\n            }\n            prime = i;\n        }\n    }\n    return prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = largest_prime_factor(n);\n            if (k > j) {\n                j = k;\n            }\n        }\n    }\n    return j;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp15sncybc: /tmp/tmp15sncybc.cpp:26: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return n;\n    long i = 2;\n    while (n % i == 0) {\n        n /= i;\n        i++;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpex3ik4xv: /tmp/tmpex3ik4xv.cpp:19: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    assert(n > 1);\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsd9wtmoq: /tmp/tmpsd9wtmoq.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpbvvsrbo7: /tmp/tmpbvvsrbo7.cpp:23: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a;\n    if (n == 1) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    if (n % 5 == 0) return 5;\n    if (n % 7 == 0) return 7;\n    if (n % 11 == 0) return 11;\n    if (n % 13 == 0) return 13;\n    if (n % 17 == 0) return 17;\n    if (n % 19 == 0) return 19;\n    if (n % 23 == 0) return 23;\n    if (n % 29 == 0) return 29;\n    if (n % 31 == 0) return 31;\n    if (n % 37 == 0) return 37;\n    if (n % 41 == 0) return 41;\n    if (n % 43 == 0) return 43;\n    if (n % 47 == 0) return 47;\n    if (n % 53 == 0) return 53;\n    if (n % 59 == 0) return 59;\n    if (n % 61 == 0) return 61;\n    if (n % 67 == 0) return 67;\n    if (n % 71 == 0) return 71;\n    if (n % 73 == 0) return 73;\n    if (n % 79 == 0) return 79;\n    if (n % 83 == 0) return 83;\n    if (n % 89 == 0) return 89;\n    if (n % 97 == 0) return 97;\n    if (n % 101 == 0) return 101;\n    if (n % 103 == 0) return 103;\n    if (n % 107 == 0) return 107;\n    if (n % 109 == 0) return 109;\n    if (n % 113 == 0) return 113;\n    if (n % 127 == 0) return 127;\n    if (n % 131 == 0) return 131;\n    if (n % 137 == 0) return 137;\n    if (n % 139 == 0) return 139;\n    if (n % 149 == 0) return 149\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293476,
      "stdout": "",
      "stderr": "/tmp/tmptakl2pw4.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmptakl2pw4.cpp:46:33: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   46 |     if (n % 149 == 0) return 149\n      |                                 ^\n      |                                 ;\n   47 | }\n      | ~                                \n/tmp/tmptakl2pw4.cpp:47:1: warning: control reaches end of non-void function [-Wreturn-type]\n   47 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 3;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 5;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 7;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 11;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 13;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 17;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 19;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 23;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 29;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpvo47sv79: /tmp/tmpvo47sv79.cpp:55: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            max = i;\n            for (j = i; j <= n / j; j++) {\n                if (n % j == 0) {\n                    max = j;\n                    for (k = j; k <= n / k; k++) {\n                        if (n % k == 0) {\n                            max = k;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp083d15ty: /tmp/tmp083d15ty.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return n;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpwgv0cje_: /tmp/tmpwgv0cje_.cpp:24: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k * j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpmabzfnhb: /tmp/tmpmabzfnhb.cpp:27: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m, p, q, r;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (n == 1) {\n                return p;\n            }\n        }\n    }\n    if (n == 1) {\n        return n;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m, p;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 2 == 0) return 2;\n    for (i = 3; i <= n / 3; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 3 == 0) return 3;\n    for (i = 5; i <= n / 5; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 5 == 0) return 5;\n    for (i = 7; i <= n / 7; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 7 == 0) return 7;\n    for (i = 11; i <= n / 11; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 11 == 0) return 11;\n    for (i = 13; i <= n / 13; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 13 == 0) return 13;\n    for (i = 17; i <= n / 17; i++) {\n        if (n % i == 0\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmpk4ytruwb.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpk4ytruwb.cpp:71:23: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   71 |         if (n % i == 0\n      |            ~          ^\n      |                       )\n   72 | }\n      | ~                      \n/tmp/tmpk4ytruwb.cpp:72:1: error: expected primary-expression before \u2018}\u2019 token\n   72 | }\n      | ^\n/tmp/tmpk4ytruwb.cpp:73:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   73 | int main() {\n      |            ^\n/tmp/tmpk4ytruwb.cpp:80:1: error: expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmpk4ytruwb.cpp:8:35: note: to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |                                   ^\n/tmp/tmpk4ytruwb.cpp:80:1: warning: control reaches end of non-void function [-Wreturn-type]\n   80 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q;\n    long max = 0;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (p > max) {\n                max = p;\n            }\n        }\n    }\n    if (n > 1) {\n        p = n;\n        while (n > 1) {\n            q = n / 2;\n            if (q < 2) {\n                break;\n            }\n            if (n % q == 0) {\n                n /= q;\n            } else {\n                p = q;\n                break;\n            }\n        }\n        if (p > max) {\n            max = p;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            max = i;\n            for (j = i; j < n; j += i) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        max = n;\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmpjt3c6e_e: /tmp/tmpjt3c6e_e.cpp:29: int main(): Assertion `candidate((330)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    long i = 3, p = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            p = i;\n            n /= i;\n        } else {\n            i += 2;\n        }\n    }\n    if (n > 1) p = n;\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmpyjw2fym3: /tmp/tmpyjw2fym3.cpp:27: int main(): Assertion `candidate((330)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 1) return 1;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) n /= i;\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmplftdb3_k: /tmp/tmplftdb3_k.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    if (n == 1) return p;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) p = n;\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 2 == 0) {\n        return 2;\n    }\n    for (i = 3; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 3 == 0) {\n        return 3;\n    }\n    for (i = 5; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 5 == 0) {\n        return 5;\n    }\n    for (i = 7; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 7 == 0) {\n        return 7;\n    }\n    for (i = 11; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 11 == 0) {\n        return 11;\n    }\n    for (i = 13; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmpq8prwbtu.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpq8prwbtu.cpp:76:21: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   76 |             return p\n      |                     ^\n      |                     ;\n   77 | }\n      | ~                    \n/tmp/tmpq8prwbtu.cpp:78:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   78 | int main() {\n      |            ^\n/tmp/tmpq8prwbtu.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpq8prwbtu.cpp:70:38: note: to match this \u2018{\u2019\n   70 |     for (i = 13; i <= n / i; i += 2) {\n      |                                      ^\n/tmp/tmpq8prwbtu.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpq8prwbtu.cpp:8:35: note: to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |                                   ^\n/tmp/tmpq8prwbtu.cpp:85:1: warning: control reaches end of non-void function [-Wreturn-type]\n   85 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    assert(n > 1);\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m, p;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        m = n;\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293492,
      "stdout": "",
      "stderr": "/tmp/tmp5gmtksse.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmp5gmtksse.cpp:9:82: error: redeclaration of \u2018long int i\u2019\n    9 |     long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\n      |                                                                                  ^\n/tmp/tmp5gmtksse.cpp:9:10: note: \u2018long int i\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\n      |          ^\n/tmp/tmp5gmtksse.cpp:9:85: error: redeclaration of \u2018long int j\u2019\n    9 |     long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f,",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 1) return 1;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) return n;\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        m = n;\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, p, q;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            p = i;\n            for (j = i; n % j == 0; j++) {\n                p = j;\n            }\n            if (p > i) {\n                return p;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmp977wx3a_: /tmp/tmp977wx3a_.cpp:25: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (k > i) {\n                return k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmpobdw31x8: /tmp/tmpobdw31x8.cpp:26: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (j > k) {\n                j = k;\n            }\n            if (j != i) {\n                i = j;\n            }\n        }\n    }\n    if (n > 1) {\n        return n;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmp7sqzehuw: /tmp/tmp7sqzehuw.cpp:36: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long prime_factor = 2;\n    for (i = 3; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    if (prime_factor > n / 2) {\n        return n;\n    }\n    for (i = prime_factor; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    return prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmp9x9swriq: /tmp/tmp9x9swriq.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max = 0;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max = i;\n            break;\n        }\n    }\n    if (max == 0) {\n        return n;\n    }\n    for (i = max; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            break;\n        }\n    }\n    if (p == n) {\n        return p;\n    }\n    for (i = p; i <= n; i++) {\n        if (n % i == 0) {\n            q = i;\n            break;\n        }\n    }\n    if (q == n) {\n        return q;\n    }\n    for (i = q; i <= n; i++) {\n        if (n % i == 0) {\n            r = i;\n            break;\n        }\n    }\n    if (r == n) {\n        return r;\n    }\n    for (i = r; i <= n; i++) {\n        if (n % i == 0) {\n            s = i;\n            break;\n        }\n    }\n    if (s == n) {\n        return s;\n    }\n    for (i = s; i <= n; i++) {\n        if (n % i == 0) {\n            t = i;\n            break;\n        }\n    }\n    if (t == n) {\n        return t;\n    }\n    for (i = t; i <= n; i++) {\n        if (n % i == 0) {\n            u = i;\n            break;\n        }\n    }\n    if (u == n) {\n        return u;\n    }\n    for (i = u; i <= n; i++) {\n        if (n % i == 0) {\n            v = i;\n            break;\n        }\n    }\n    if (v == n) {\n        return v;\n    \n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmpqq6kgkz6.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpqq6kgkz6.cpp:84:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   84 | int main() {\n      |            ^\n/tmp/tmpqq6kgkz6.cpp:91:1: error: expected \u2018}\u2019 at end of input\n   91 | }\n      | ^\n/tmp/tmpqq6kgkz6.cpp:8:35: note: to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |                                   ^\n/tmp/tmpqq6kgkz6.cpp:91:1: warning: control reaches end of non-void function [-Wreturn-type]\n   91 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            i = k;\n        }\n    }\n    if (n > 1) {\n        return n;\n    }\n    return 2;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmp1sdsmjj_: /tmp/tmp1sdsmjj_.cpp:27: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p;\n    long max_factor = 0;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            for (j = i; j <= n / j; j++) {\n                if (n % j == 0) {\n                    max_factor = j;\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    if (max_factor == 0) {\n        return n;\n    }\n    for (i = max_factor; i <= n / i; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            for (j = i; j <= n / j; j++) {\n                if (n % j == 0) {\n                    max_factor = j;\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmpg9gpc4i1: /tmp/tmpg9gpc4i1.cpp:42: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (j > k) {\n                j = k;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmph7adujx9: /tmp/tmph7adujx9.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i < m; i++) {\n        if (m % i == 0) {\n            m /= i;\n            while (m % i == 0) {\n                m /= i;\n            }\n        }\n    }\n    if (m == 1) {\n        return m;\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmpea2j3gi_: /tmp/tmpea2j3gi_.cpp:27: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp3sd9mbqn.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmp3sd9mbqn.cpp:26:10: error: redeclaration of \u2018long int i\u2019\n   26 |     long i;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:10: note: \u2018long int i\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:27:10: error: redeclaration of \u2018long int j\u2019\n   27 |     long j;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:13: note: \u2018long int j\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |             ^\n/tmp/tmp3sd9mbqn.cpp:28:10: error: redeclaration of \u2018long int k\u2019\n   28 |     long k;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:16: note: \u2018long int k\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |                ^\n/tmp/tmp3sd9mbqn.cpp:29:10: error: redeclaration of \u2018long int l\u2019\n   29 |     long l;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:19: note: \u2018long int l\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |                   ^\n/tmp/tmp3sd9mbqn.cpp:30:10: error: redeclaration of \u2018long int m\u2019\n   30 |     long m;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:22: note: \u2018long int m\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |                      ^\n/tmp/tmp3sd9mbqn.cpp:31:10: error: declaration of \u2018long int n\u2019 shadows a parameter\n   31 |     long n;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:33:10: error: redeclaration of \u2018long int p\u2019\n   33 |     long p;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:25: note: \u2018long int p\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |                         ^\n/tmp/tmp3sd9mbqn.cpp:34:10: error: redeclaration of \u2018long int q\u2019\n   34 |     long q;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:28: note: \u2018long int q\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |                            ^\n/tmp/tmp3sd9mbqn.cpp:35:10: error: redeclaration of \u2018long int r\u2019\n   35 | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (j > k) {\n                j = k;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmph7adujx9: /tmp/tmph7adujx9.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long prime_factor = 2;\n    for (i = 3; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    if (prime_factor > n / 2) {\n        return n;\n    }\n    for (i = prime_factor; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    return prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmp9x9swriq: /tmp/tmp9x9swriq.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return max(j, k);\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "/tmp/tmpner3o3g8.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpner3o3g8.cpp:20:20: error: \u2018max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n   20 |             return max(j, k);\n      |                    ^~~\n      |                    std::max\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n                 from /tmp/tmpner3o3g8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5: note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp> __l, _Compare __comp)\n      |     ^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    assert(n > 1);\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        return n;\n    } else {\n        return i;\n    }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) {\n        return n;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293480,
      "stdout": "",
      "stderr": "tmp63vg_2w0: /tmp/tmp63vg_2w0.cpp:28: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (j > k) {\n                i = j;\n                j = k;\n                k = i;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmpu0q26cfc: /tmp/tmpu0q26cfc.cpp:32: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            j = 2;\n            while (n % i == 0) {\n                n /= i;\n                j++;\n            }\n            if (j > k) {\n                k = j;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmpswg1ykix: /tmp/tmpswg1ykix.cpp:27: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (j > k) {\n                k = j;\n            }\n        }\n    }\n    if (n > 1) {\n        return n;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmp642bpajx: /tmp/tmp642bpajx.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m;\n    long prime_factor = 2;\n    while (n % prime_factor == 0) {\n        n /= prime_factor;\n    }\n    if (n == 1) {\n        return prime_factor;\n    }\n    for (i = 3; i <= n / 2; i += 2) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        prime_factor = i;\n    }\n    if (n > 2) {\n        for (i = 3; i <= n / 2; i += 2) {\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n        if (n > 1) {\n            prime_factor = i;\n        }\n    }\n    return prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmpk3u7iiin: /tmp/tmpk3u7iiin.cpp:39: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 2 == 0) {\n        return 2;\n    }\n    for (i = 3; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 3 == 0) {\n        return 3;\n    }\n    for (i = 5; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 5 == 0) {\n        return 5;\n    }\n    for (i = 7; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 7 == 0) {\n        return 7;\n    }\n    for (i = 11; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n % 11 == 0) {\n        return 11;\n    }\n    for (i = 13; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmpq8prwbtu.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpq8prwbtu.cpp:76:21: error: expected \u2018;\u2019 before \u2018}\u2019 token\n   76 |             return p\n      |                     ^\n      |                     ;\n   77 | }\n      | ~                    \n/tmp/tmpq8prwbtu.cpp:78:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   78 | int main() {\n      |            ^\n/tmp/tmpq8prwbtu.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpq8prwbtu.cpp:70:38: note: to match this \u2018{\u2019\n   70 |     for (i = 13; i <= n / i; i += 2) {\n      |                                      ^\n/tmp/tmpq8prwbtu.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpq8prwbtu.cpp:8:35: note: to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |                                   ^\n/tmp/tmpq8prwbtu.cpp:85:1: warning: control reaches end of non-void function [-Wreturn-type]\n   85 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return n;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) return n;\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i < m; i++) {\n        if (m % i == 0) {\n            m /= i;\n            j = 2;\n            while (m % j == 0) {\n                m /= j;\n                j++;\n            }\n            k = i;\n            while (m % k == 0) {\n                m /= k;\n                k++;\n            }\n            i *= j * k;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmpudalkd3u: /tmp/tmpudalkd3u.cpp:34: int main(): Assertion `candidate((330)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n <= 1) return n;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            i = 2;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    assert(n > 1);\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long prime_factor = 2;\n    for (i = 3; i < n; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    if (prime_factor == 2) {\n        return prime_factor;\n    }\n    for (i = prime_factor + 1; i < n; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    return prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmppo31pcr6: /tmp/tmppo31pcr6.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1)\n        return n;\n    else\n        return 1;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmphl_522p4: /tmp/tmphl_522p4.cpp:28: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = largest_prime_factor(n);\n            if (k > j) {\n                j = k;\n            }\n        }\n    }\n    return j;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp15sncybc: /tmp/tmp15sncybc.cpp:26: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            i = 2;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            k = n;\n            while (k % i == 0) {\n                k /= i;\n                i = j;\n            }\n            return i;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmpk4hxx9hx: /tmp/tmpk4hxx9hx.cpp:29: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l;\n    long m = n;\n    for (i = 2; i <= m / i; i++) {\n        if (m % i == 0) {\n            m /= i;\n            while (m % i == 0) {\n                m /= i;\n            }\n        }\n    }\n    if (m == 1) {\n        return m;\n    }\n    for (i = 2; i <= m / i; i++) {\n        if (m % i == 0) {\n            m /= i;\n            return i;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmptel1d8bh: /tmp/tmptel1d8bh.cpp:33: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        m = n;\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return n;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmpddzu93om: /tmp/tmpddzu93om.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            max = i;\n            for (j = i; j < n; j += i) {\n                n /= i;\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmprdxzhpie: /tmp/tmprdxzhpie.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q;\n    long max = 0;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (p > max) {\n                max = p;\n            }\n        }\n    }\n    if (n > 1) {\n        p = n;\n        while (n > 1) {\n            q = n / 2;\n            if (q < 2) {\n                break;\n            }\n            if (q < p) {\n                p = q;\n            }\n            for (i = 2; i <= p / i; i++) {\n                if (p % i == 0) {\n                    p = i;\n                    while (p % i == 0) {\n                        p /= i;\n                    }\n                    if (p > max) {\n                        max = p;\n                    }\n                }\n            }\n            n = q;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmpgtqae5_i: /tmp/tmpgtqae5_i.cpp:50: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m;\n    long prime_list[MAX_PRIMES];\n    long prime_count = 0;\n    long max_prime = 0;\n    for (i = 2; i < n; i++) {\n        if (is_prime(i)) {\n            prime_list[prime_count++] = i;\n            if (i > max_prime) max_prime = i;\n        }\n    }\n    for (i = 0; i < prime_count; i++) {\n        for (j = 0; j < prime_count; j++) {\n            if (prime_list[i] > prime_list[j]) {\n                k = prime_list[i];\n                prime_list[i] = prime_list[j];\n                prime_list[j] = k;\n            }\n        }\n    }\n    for (i = 0; i < prime_count; i++) {\n        if (prime_list[i] > max_prime) {\n            max_prime = prime_list[i];\n            l = i;\n        }\n    }\n    m = prime_list[l];\n    for (i = 0; i < prime_count; i++) {\n        if (prime_list[i] % m == 0) {\n            j = prime_list[i];\n            k = m;\n            while (j % k == 0) {\n                j /= k;\n                k = m;\n            }\n            m = j;\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "/tmp/tmpingr4098.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpingr4098.cpp:10:21: error: \u2018MAX_PRIMES\u2019 was not declared in this scope\n   10 |     long prime_list[MAX_PRIMES];\n      |                     ^~~~~~~~~~\n/tmp/tmpingr4098.cpp:14:13: error: \u2018is_prime\u2019 was not declared in this scope; did you mean \u2018max_prime\u2019?\n   14 |         if (is_prime(i)) {\n      |             ^~~~~~~~\n      |             max_prime\n/tmp/tmpingr4098.cpp:15:13: error: \u2018prime_list\u2019 was not declared in this scope\n   15 |             prime_list[prime_count++] = i;\n      |             ^~~~~~~~~~\n/tmp/tmpingr4098.cpp:21:17: error: \u2018prime_list\u2019 was not declared in this scope\n   21 |             if (prime_list[i] > prime_list[j]) {\n      |                 ^~~~~~~~~~\n/tmp/tmpingr4098.cpp:29:13: error: \u2018prime_list\u2019 was not declared in this scope\n   29 |         if (prime_list[i] > max_prime) {\n      |             ^~~~~~~~~~\n/tmp/tmpingr4098.cpp:34:9: error: \u2018prime_list\u2019 was not declared in this scope\n   34 |     m = prime_list[l];\n      |         ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp91j7b8w9: /tmp/tmp91j7b8w9.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return n;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmpddzu93om: /tmp/tmpddzu93om.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long max_factor = 0;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (m > max_factor) {\n                max_factor = m;\n            }\n        }\n    }\n    if (n > 1) {\n        max_factor = n;\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max_factor = 0;\n    if (n <= 1) return 0;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == 0) return 0;\n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == 0) return 0;\n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293482,
      "stdout": "",
      "stderr": "tmpvx_cxgl0: /tmp/tmpvx_cxgl0.cpp:36: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long prime_factor = 2;\n    for (i = 3; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    if (prime_factor > n / 2) {\n        return n;\n    }\n    for (i = prime_factor; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    return prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmp9x9swriq: /tmp/tmp9x9swriq.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long max = 0;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (p > max) max = p;\n        }\n    }\n    if (n > 1) {\n        p = n;\n        while (n > 1) {\n            q = n / 2;\n            if (q < 2) break;\n            if (n % q == 0) {\n                n /= q;\n                if (q > max) max = q;\n            } else {\n                p = q;\n                while (n % q == 0) {\n                    n /= q;\n                }\n                if (p > max) max = p;\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293497,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) return n;\n    else return 0;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmpo59_tpo8: /tmp/tmpo59_tpo8.cpp:26: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long max_p = 0;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (p > max_p) {\n                max_p = p;\n            }\n        }\n    }\n    if (n > 1) {\n        p = n;\n        while (n > 1) {\n            q = n / 2;\n            if (q < 2) {\n                break;\n            }\n            if (n % q == 0) {\n                n /= q;\n            } else {\n                p = q;\n                break;\n            }\n        }\n        if (p > max_p) {\n            max_p = p;\n        }\n    }\n    return max_p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        return n;\n    } else {\n        return i;\n    }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmp642bpajx: /tmp/tmp642bpajx.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m, p;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            m = n / i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (m > 1) {\n                p = largest_prime_factor(m);\n            }\n            return p;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long prime_factor = 2;\n    for (i = 3; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    if (prime_factor == 2) {\n        return prime_factor;\n    }\n    for (i = prime_factor + 1; i <= n / prime_factor; i++) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    return prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293482,
      "stdout": "",
      "stderr": "tmp3wjivx3n: /tmp/tmp3wjivx3n.cpp:31: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, p, q;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            q = n / i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (n == 1) {\n                return p;\n            }\n            for (j = 2; j < q; j++) {\n                if (n % j == 0) {\n                    p = j;\n                    q = n / j;\n                    while (n % j == 0) {\n                        n /= j;\n                    }\n                    if (n == 1) {\n                        return p;\n                    }\n                }\n            }\n            k = q;\n            while (n % k == 0) {\n                n /= k;\n            }\n            if (n == 1) {\n                return k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293482,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long max = 0;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (p > max) {\n                max = p;\n            }\n        }\n    }\n    if (n > 1) {\n        max = n;\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p;\n    m = n;\n    while (m % 2 == 0) {\n        m /= 2;\n    }\n    for (i = 3; i <= m / 2; i += 2) {\n        while (m % i == 0) {\n            m /= i;\n        }\n    }\n    if (m == 1) {\n        return m;\n    }\n    for (i = 2; i <= m / 2; i += 2) {\n        while (m % i == 0) {\n            m /= i;\n        }\n    }\n    if (m == 1) {\n        return m;\n    }\n    for (i = 3; i <= m / 2; i += 2) {\n        while (m % i == 0) {\n            m /= i;\n        }\n    }\n    if (m == 1) {\n        return m;\n    }\n    for (i = 5; i <= m / 2; i += 2) {\n        while (m % i == 0) {\n            m /= i;\n        }\n    }\n    if (m == 1) {\n        return m;\n    }\n    for (i = 7; i <= m / 2; i += 2) {\n        while (m % i == 0) {\n            m /= i;\n        }\n    }\n    if (m == 1) {\n        return m;\n    }\n    for (i = 11; i <= m / 2; i += 2) {\n        while (m % i == 0) {\n            m /= i;\n        }\n    }\n    if (m == 1) {\n        return m;\n    }\n    for (i = 13; i <= m / 2; i += 2) {\n        while (m % i == 0) {\n            m /= i;\n        }\n    }\n    if (m == 1) {\n        return m;\n    }\n    for (i = 17; i <= m / 2; i += 2) {\n        while (m % i == 0) {\n            m /= i;\n        }\n    }\n    if (m == 1)\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293482,
      "stdout": "",
      "stderr": "/tmp/tmpgfq__r5j.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpgfq__r5j.cpp:76:1: error: expected primary-expression before \u2018}\u2019 token\n   76 | }\n      | ^\n/tmp/tmpgfq__r5j.cpp:76:1: warning: control reaches end of non-void function [-Wreturn-type]\n   76 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return 1;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) return n;\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) {\n        return n;\n    }\n    return 1;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmpa7h7z34t: /tmp/tmpa7h7z34t.cpp:28: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) return n;\n    else return 0;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmpo59_tpo8: /tmp/tmpo59_tpo8.cpp:26: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            i = 2;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m, p;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmpvrkrl_9q: /tmp/tmpvrkrl_9q.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            i = 2;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r, s, t;\n    long max_factor = 0;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == 0)\n        return n;\n    for (i = max_factor; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    for (i = 2; i <= max_factor; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmpz74627l4: /tmp/tmpz74627l4.cpp:35: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            for (j = i; n % j == 0; j++) {\n                m = j;\n            }\n            for (k = m; n % k == 0; k++) {\n                m = k;\n            }\n            return m;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmps630ffih: /tmp/tmps630ffih.cpp:26: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max_prime = 0;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            if (i > max_prime) {\n                max_prime = i;\n            }\n            for (j = i; j <= n; j += i) {\n                n = n / i;\n            }\n        }\n    }\n    return max_prime;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmp6bma1mof: /tmp/tmp6bma1mof.cpp:28: int main(): Assertion `candidate((330)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (j > k) {\n                j = k;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmph7adujx9: /tmp/tmph7adujx9.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long result = 2;\n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result > n) {\n        return n;\n    }\n    for (i = result + 1; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result > n) {\n        return n;\n    }\n    for (i = result + 1; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result > n) {\n        return n;\n    }\n    for (i = result + 1; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result > n) {\n        return n;\n    }\n    for (i = result + 1; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result > n) {\n        return n;\n    }\n    for (i = result + 1; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result > n) {\n        return n;\n    }\n    for (i = result + 1; i <= n; i += 2) {\n        if (n % i == 0) {\n            result = i;\n            break;\n        }\n    }\n    if (result > n) {\n        return n;\n    }\n    for (i = result + 1; i <= n; i += 2) {\n        if (n % i == 0) {\n            \n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293482,
      "stdout": "",
      "stderr": "/tmp/tmpctieru6k.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpctieru6k.cpp:78:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   78 | int main() {\n      |            ^\n/tmp/tmpctieru6k.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpctieru6k.cpp:74:42: note: to match this \u2018{\u2019\n   74 |     for (i = result + 1; i <= n; i += 2) {\n      |                                          ^\n/tmp/tmpctieru6k.cpp:85:1: error: expected \u2018}\u2019 at end of input\n   85 | }\n      | ^\n/tmp/tmpctieru6k.cpp:8:35: note: to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |                                   ^\n/tmp/tmpctieru6k.cpp:85:1: warning: control reaches end of non-void function [-Wreturn-type]\n   85 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, p, q;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (n == 1) {\n                return p;\n            }\n            for (j = 2; j < p; j++) {\n                if (n % j == 0) {\n                    q = j;\n                    while (n % j == 0) {\n                        n /= j;\n                    }\n                    if (n == 1) {\n                        return p * q;\n                    }\n                }\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            j = 2;\n            while (n % i == 0) {\n                n /= i;\n                j++;\n            }\n            if (j > k) {\n                k = j;\n            }\n        }\n    }\n    if (n > 1) {\n        k++;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpi_dxx_2h: /tmp/tmpi_dxx_2h.cpp:29: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmp642bpajx: /tmp/tmp642bpajx.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            i = 2;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long s, t;\n    long max = 0;\n    long max_prime = 0;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (p > max) {\n                max = p;\n                max_prime = i;\n            }\n        }\n    }\n    if (n > 1) {\n        p = n;\n        while (n > 1) {\n            q = n / 2;\n            if (q < 2) {\n                q = 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n            if (q % 2 == 0) {\n                q /= 2;\n            }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293482,
      "stdout": "",
      "stderr": "/tmp/tmpoczexc1z.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpoczexc1z.cpp:81:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   81 | int main() {\n      |            ^\n/tmp/tmpoczexc1z.cpp:88:1: error: expected \u2018}\u2019 at end of input\n   88 | }\n      | ^\n/tmp/tmpoczexc1z.cpp:25:16: note: to match this \u2018{\u2019\n   25 |     if (n > 1) {\n      |                ^\n/tmp/tmpoczexc1z.cpp:88:1: error: expected \u2018}\u2019 at end of input\n   88 | }\n      | ^\n/tmp/tmpoczexc1z.cpp:8:35: note: to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |                                   ^\n/tmp/tmpoczexc1z.cpp:88:1: warning: no return statement in function returning non-void [-Wreturn-type]\n   88 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long largest = 2;\n    for (i = 3; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            largest = i;\n            break;\n        }\n    }\n    if (largest == 2)\n        return largest;\n    for (i = largest; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            largest = i;\n            break;\n        }\n    }\n    return largest;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmp5fvzifin: /tmp/tmp5fvzifin.cpp:29: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return n;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 3;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 5;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 7;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 11;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 13;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 17;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 19;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 23;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 29;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmpbf0exstu: /tmp/tmpbf0exstu.cpp:55: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m, p, q, r;\n    m = n;\n    while (m % 2 == 0) {\n        m /= 2;\n    }\n    for (i = 3; i <= m / 2; i += 2) {\n        while (m % i == 0) {\n            m /= i;\n        }\n    }\n    if (m == 1) {\n        return m;\n    }\n    for (i = 2; i <= m; i++) {\n        if (m % i == 0) {\n            p = i;\n            while (m % i == 0) {\n                m /= i;\n            }\n        }\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmp6kos1rs4: /tmp/tmp6kos1rs4.cpp:35: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    assert(n > 1);\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 3;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 5;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 7;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 11;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 13;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 17;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 19;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 23;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 29;\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmpd1hp_oh0: /tmp/tmpd1hp_oh0.cpp:55: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 2 == 0) return 2;\n    for (i = 3; i <= n / 3; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 3 == 0) return 3;\n    for (i = 5; i <= n / 5; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 5 == 0) return 5;\n    for (i = 7; i <= n / 7; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 7 == 0) return 7;\n    for (i = 11; i <= n / 11; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 11 == 0) return 11;\n    for (i = 13; i <= n / 13; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 13 == 0) return 13;\n    for (i = 17; i <= n / 17; i++) {\n        if (n\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293484,
      "stdout": "",
      "stderr": "/tmp/tmpiude4ds4.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpiude4ds4.cpp:71:14: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   71 |         if (n\n      |            ~ ^\n      |              )\n   72 | }\n      | ~             \n/tmp/tmpiude4ds4.cpp:72:1: error: expected primary-expression before \u2018}\u2019 token\n   72 | }\n      | ^\n/tmp/tmpiude4ds4.cpp:73:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   73 | int main() {\n      |            ^\n/tmp/tmpiude4ds4.cpp:80:1: error: expected \u2018}\u2019 at end of input\n   80 | }\n      | ^\n/tmp/tmpiude4ds4.cpp:8:35: note: to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |                                   ^\n/tmp/tmpiude4ds4.cpp:80:1: warning: control reaches end of non-void function [-Wreturn-type]\n   80 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) {\n        return n;\n    } else {\n        return 1;\n    }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293484,
      "stdout": "",
      "stderr": "tmpppcsjavg: /tmp/tmpppcsjavg.cpp:29: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return n;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpwgv0cje_: /tmp/tmpwgv0cje_.cpp:24: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = largest_prime_factor(n);\n            if (k > j) {\n                j = k;\n            }\n        }\n    }\n    return j;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp15sncybc: /tmp/tmp15sncybc.cpp:26: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) return n;\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293484,
      "stdout": "",
      "stderr": "tmpswma82pa: /tmp/tmpswma82pa.cpp:26: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            j = 2;\n            while (n % i == 0) {\n                n /= i;\n                j++;\n            }\n            if (j > k) {\n                k = j;\n            }\n        }\n    }\n    if (n > 1) {\n        k++;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpi_dxx_2h: /tmp/tmpi_dxx_2h.cpp:29: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            k = n;\n            while (k % i == 0) {\n                k /= i;\n            }\n            if (k != 1) {\n                return i * j;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293484,
      "stdout": "",
      "stderr": "tmpauy4p1z9: /tmp/tmpauy4p1z9.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293492,
      "stdout": "",
      "stderr": "/tmp/tmp5gmtksse.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmp5gmtksse.cpp:9:82: error: redeclaration of \u2018long int i\u2019\n    9 |     long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\n      |                                                                                  ^\n/tmp/tmp5gmtksse.cpp:9:10: note: \u2018long int i\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e,\n      |          ^\n/tmp/tmp5gmtksse.cpp:9:85: error: redeclaration of \u2018long int j\u2019\n    9 |     long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z, a, b, c, d, e, f,",
      "exit_code": -1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (j > k) {\n                j = k;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293479,
      "stdout": "",
      "stderr": "tmph7adujx9: /tmp/tmph7adujx9.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, p, q, r;\n    i = 2;\n    while (i <= n / i) {\n        if (n % i == 0) {\n            p = i;\n            q = n / i;\n            while (q % p == 0) {\n                q /= p;\n            }\n            if (q == 1) {\n                return p;\n            }\n            r = p;\n            while (r <= q) {\n                if (q % r == 0) {\n                    q /= r;\n                } else {\n                    r = r + p;\n                }\n            }\n            if (q == 1) {\n                return p * r;\n            }\n        }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293484,
      "stdout": "",
      "stderr": "tmpohdn6lai: /tmp/tmpohdn6lai.cpp:39: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = largest_prime_factor(n);\n            if (k > j) {\n                j = k;\n            }\n        }\n    }\n    return j;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp15sncybc: /tmp/tmp15sncybc.cpp:26: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            j = n / i;\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return k * j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "tmpmejl38dp: /tmp/tmpmejl38dp.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, p;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        p = n;\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long prime_factor = 2;\n    while (n % prime_factor == 0) {\n        n /= prime_factor;\n    }\n    for (i = 3; i <= n / 2; i += 2) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    if (n > 1) {\n        prime_factor = n;\n    }\n    return prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "tmp41hsqnk2: /tmp/tmp41hsqnk2.cpp:27: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i <= m / 2; i++) {\n        if (m % i == 0) {\n            m /= i;\n            k = i;\n            while (m % i == 0) {\n                m /= i;\n                k *= i;\n            }\n            return k;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "tmpk17zl80v: /tmp/tmpk17zl80v.cpp:26: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long prime_factor = 2;\n    for (i = 3; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    if (prime_factor > n / 2)\n        return n;\n    for (i = prime_factor; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    return prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "tmppkqsqjgp: /tmp/tmppkqsqjgp.cpp:29: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        return n;\n    } else {\n        return i;\n    }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (n == 1) {\n                return p;\n            }\n        }\n    }\n    if (n == 1) {\n        return n;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmp642bpajx: /tmp/tmp642bpajx.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) return n;\n    else return 0;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmpo59_tpo8: /tmp/tmpo59_tpo8.cpp:26: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "tmpzfimv51p: /tmp/tmpzfimv51p.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, p;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        }\n    }\n    if (n > 1) {\n        p = n;\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "tmp1mfmbfwx: /tmp/tmp1mfmbfwx.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "tmp642bpajx: /tmp/tmp642bpajx.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            k = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (j > k) {\n                i = j;\n                j = k;\n                k = i;\n            }\n            if (i > j) {\n                i = j;\n                j = k;\n                k = i;\n            }\n            if (i > k) {\n                i = k;\n                j = k;\n                k = i;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "tmp331prz7v: /tmp/tmp331prz7v.cpp:42: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m;\n    long p;\n    long max = 0;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (p > max) {\n                max = p;\n            }\n        }\n    }\n    if (n > 1) {\n        p = n;\n        while (n > 1) {\n            n /= 2;\n        }\n        if (p > max) {\n            max = p;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q;\n    m = sqrt(n);\n    for (i = 2; i <= m; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n == 1) return 1;\n    for (i = 2; i <= m; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n == 2) return 2;\n    for (i = 3; i <= m; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n == 3) return 3;\n    for (i = 5; i <= m; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n == 5) return 5;\n    for (i = 7; i <= m; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n == 7) return 7;\n    for (i = 11; i <= m; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n == 11) return 11;\n    for (i = 13; i <= m; i += 2) {\n        if (n % i == 0) {\n\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293484,
      "stdout": "",
      "stderr": "/tmp/tmpn8ant6z9.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpn8ant6z9.cpp:75:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   75 | int main() {\n      |            ^\n/tmp/tmpn8ant6z9.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpn8ant6z9.cpp:71:34: note: to match this \u2018{\u2019\n   71 |     for (i = 13; i <= m; i += 2) {\n      |                                  ^\n/tmp/tmpn8ant6z9.cpp:82:1: error: expected \u2018}\u2019 at end of input\n   82 | }\n      | ^\n/tmp/tmpn8ant6z9.cpp:8:35: note: to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |                                   ^\n/tmp/tmpn8ant6z9.cpp:82:1: warning: control reaches end of non-void function [-Wreturn-type]\n   82 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 1) return 1;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            return i;\n        }\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "tmpenj4dysa: /tmp/tmpenj4dysa.cpp:22: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            j = 2;\n            while (n % j == 0) {\n                n /= j;\n                j++;\n            }\n            k = i;\n            while (n % k == 0) {\n                n /= k;\n                k++;\n            }\n            i *= k;\n        }\n    }\n    if (n > 1) {\n        return n;\n    } else {\n        return i;\n    }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "tmpboyg518c: /tmp/tmpboyg518c.cpp:34: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            max = i;\n            for (j = i; n % j == 0; j++) {\n                n /= j;\n            }\n        }\n    }\n    if (n > 1) {\n        max = n;\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "tmp4d7eac20: /tmp/tmp4d7eac20.cpp:27: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) return n;\n    else return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "tmpnmhglczc: /tmp/tmpnmhglczc.cpp:26: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long max_factor = 2;\n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == 2)\n        return max_factor;\n    for (i = max_factor; i <= n; i += 2) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == n)\n        return max_factor;\n    for (i = max_factor; i <= n; i += 2) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == n)\n        return max_factor;\n    for (i = max_factor; i <= n; i += 2) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == n)\n        return max_factor;\n    for (i = max_factor; i <= n; i += 2) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == n)\n        return max_factor;\n    for (i = max_factor; i <= n; i += 2) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == n)\n        return max_factor;\n    for (i = max_factor; i <= n; i += 2) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == n)\n        return max_factor;\n    for (i = max_factor; i <= n; i += 2) {\n        if (n % i == 0) {\n            \n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293485,
      "stdout": "",
      "stderr": "/tmp/tmpngpyrqrv.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpngpyrqrv.cpp:71:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   71 | int main() {\n      |            ^\n/tmp/tmpngpyrqrv.cpp:78:1: error: expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpngpyrqrv.cpp:67:42: note: to match this \u2018{\u2019\n   67 |     for (i = max_factor; i <= n; i += 2) {\n      |                                          ^\n/tmp/tmpngpyrqrv.cpp:78:1: error: expected \u2018}\u2019 at end of input\n   78 | }\n      | ^\n/tmp/tmpngpyrqrv.cpp:8:35: note: to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |                                   ^\n/tmp/tmpngpyrqrv.cpp:78:1: warning: control reaches end of non-void function [-Wreturn-type]\n   78 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long prime = 2;\n    while (n % prime == 0) {\n        n /= prime;\n    }\n    if (n == 1) {\n        return prime;\n    }\n    for (i = prime; i <= n; i += prime) {\n        while (n % i == 0) {\n            n /= i;\n        }\n    }\n    if (n == 1) {\n        return prime;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmp6ah9ck6b: /tmp/tmp6ah9ck6b.cpp:29: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            j = 2;\n            while (n % i == 0) {\n                n /= i;\n                j++;\n            }\n            if (j > k) {\n                k = j;\n            }\n        }\n    }\n    if (n > 1) {\n        k++;\n    }\n    return k;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpi_dxx_2h: /tmp/tmpi_dxx_2h.cpp:29: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) return n;\n    else return 0;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmpo59_tpo8: /tmp/tmpo59_tpo8.cpp:26: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            i = 2;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n <= 1) return n;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) return n;\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long max = n;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            max = i;\n            for (j = i; j <= n / j; j++) {\n                if (n % j == 0) {\n                    max = j;\n                    for (k = j; k <= n / k; k++) {\n                        if (n % k == 0) {\n                            max = k;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp083d15ty: /tmp/tmp083d15ty.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = p + 1;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsd9wtmoq: /tmp/tmpsd9wtmoq.cpp:23: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            m = i;\n            for (j = i + i; j <= n / j; j += i) {\n                if (n % j == 0) {\n                    m = j;\n                    for (k = j + j; k <= n / k; k += j) {\n                        if (n % k == 0) {\n                            m = k;\n                            for (; k <= n / k; k *= j) {\n                                if (n % k == 0) {\n                                    m = k;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            return m;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmph2f9rlp6: /tmp/tmph2f9rlp6.cpp:35: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l;\n    long m = n;\n    for (i = 2; i <= m / 2; i++) {\n        if (m % i == 0) {\n            m /= i;\n            while (m % i == 0) {\n                m /= i;\n            }\n            j = 2;\n            k = i;\n            while (m % j == 0) {\n                m /= j;\n                j++;\n            }\n            l = i * j;\n            if (l > m) {\n                return l;\n            }\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmpvoouukdi: /tmp/tmpvoouukdi.cpp:33: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long max_factor = 0;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            max_factor = i;\n        }\n    }\n    if (n > 1) {\n        max_factor = n;\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            i = 2;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        return n;\n    } else {\n        return i;\n    }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 1) return 1;\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) n /= i;\n            return i;\n        }\n        i++;\n    }\n    if (n > 1) return n;\n    return 1;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmptusxl2va: /tmp/tmptusxl2va.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        return n;\n    }\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return n;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 3;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 5;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 7;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 11;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 13;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 17;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 19;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 23;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 29;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmpbf0exstu: /tmp/tmpbf0exstu.cpp:55: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            k = n;\n            while (k % j == 0) {\n                k /= j;\n                j = i;\n            }\n            return j;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmpdqas25qs: /tmp/tmpdqas25qs.cpp:29: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) return n;\n    else return 0;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmpedas2ms4: /tmp/tmpedas2ms4.cpp:26: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long prime_factor = 2;\n    for (i = 3; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    if (prime_factor == 2) {\n        return prime_factor;\n    }\n    for (i = prime_factor; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            prime_factor = i;\n            break;\n        }\n    }\n    return prime_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmpjuzv4nop: /tmp/tmpjuzv4nop.cpp:30: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long max_p = 0;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            if (m > max_p) {\n                max_p = m;\n            }\n        }\n    }\n    if (n > 1) {\n        max_p = n;\n    }\n    return max_p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    assert(n > 1);\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) return n;\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmp9_cubz61: /tmp/tmp9_cubz61.cpp:26: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return 1;\n    if (n == 2) return 2;\n    if (n % 2 == 0) return 2;\n    long i = 3;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmpg6xwg6mj: /tmp/tmpg6xwg6mj.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m, p, q;\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    for (i = 5; i <= n; i += 6) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    for (i = 11; i <= n; i += 12) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    for (i = 23; i <= n; i += 24) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    for (i = 67; i <= n; i += 68) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    for (i = 503; i <= n; i += 504) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            return i;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmpuwsnx5qk: /tmp/tmpuwsnx5qk.cpp:48: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long max_factor = 2;\n    for (i = 3; i <= n / i; i += 2) {\n        if (n % i == 0) {\n            max_factor = i;\n            for (j = i + i; j <= n / j; j += i) {\n                if (n % j == 0) {\n                    max_factor = j;\n                    for (k = j + j; k <= n / k; k += j) {\n                        if (n % k == 0) {\n                            max_factor = k;\n                            break;\n                        }\n                    }\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmp282r4eyi: /tmp/tmp282r4eyi.cpp:33: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (n % i == 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmp7olzvcem: /tmp/tmp7olzvcem.cpp:18: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    assert(n > 1);\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 3;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 5;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 7;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 11;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 13;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 17;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 19;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 23;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 29;\n    }\n    return p;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293483,
      "stdout": "",
      "stderr": "tmpd1hp_oh0: /tmp/tmpd1hp_oh0.cpp:55: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            j = i;\n            k = 0;\n            while (n % j == 0) {\n                n /= j;\n                k++;\n            }\n            if (k > 0) {\n                return j * k;\n            }\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmp7z9hlaos: /tmp/tmp7z9hlaos.cpp:27: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long s = sqrt(n);\n    for (i = 2; i <= s; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n == 1) return 1;\n    for (i = 2; i <= s; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return p;\n        }\n    }\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n == 4) return 2;\n    if (n == 5) return 5;\n    if (n == 6) return 2;\n    if (n == 7) return 7;\n    if (n == 8) return 2;\n    if (n == 9) return 3;\n    if (n == 10) return 5;\n    if (n == 11) return 11;\n    if (n == 12) return 2;\n    if (n == 13) return 13;\n    if (n == 14) return 2;\n    if (n == 15) return 3;\n    if (n == 16) return 2;\n    if (n == 17) return 17;\n    if (n == 18) return 2;\n    if (n == 19) return 19;\n    if (n == 20) return 2;\n    if (n == 21) return 3;\n    if (n == 22) return 2;\n    if (n == 23) return 23;\n    if (n == 24) return 2;\n    if (n == 25) return 5;\n    if (n == 26) return 2;\n    if (n == 27) return 3;\n    if (n == 28) return 2;\n    if (n == 29) return 29;\n    if (n == 30) return 2;\n    if (n == 31) return 31;\n    if (n == 32) return 2;\n    if (\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "/tmp/tmpzn3us9vh.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpzn3us9vh.cpp:62:1: error: expected primary-expression before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmpzn3us9vh.cpp:61:9: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   61 |     if (\n      |        ~^\n      |         )\n   62 | }\n      | ~        \n/tmp/tmpzn3us9vh.cpp:62:1: error: expected primary-expression before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmpzn3us9vh.cpp:62:1: warning: control reaches end of non-void function [-Wreturn-type]\n   62 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (n % i == 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmp7olzvcem: /tmp/tmp7olzvcem.cpp:18: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long max_factor = 2;\n    for (i = 3; i <= n; i += 2) {\n        if (n % i == 0) {\n            max_factor = i;\n            break;\n        }\n    }\n    if (max_factor == 2) return max_factor;\n    for (i = max_factor; i <= n; i += 2) {\n        if (n % i == 0) {\n            for (j = i; j <= n; j += 2) {\n                if (n % j == 0) {\n                    max_factor = j;\n                    break;\n                }\n            }\n            break;\n        }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "tmp7ku9_rcd: /tmp/tmp7ku9_rcd.cpp:33: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, m, p, q;\n    if (n == 1) return 1;\n    for (i = 2; i < n; i++) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) n /= i;\n            return p;\n        }\n    }\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    for (i = 5; i < n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) n /= i;\n            return p;\n        }\n    }\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    for (i = 5; i < n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) n /= i;\n            return p;\n        }\n    }\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    for (i = 5; i < n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) n /= i;\n            return p;\n        }\n    }\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    for (i = 5; i < n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while (n % i == 0) n /= i;\n            return p;\n        }\n    }\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    for (i = 5; i < n; i += 2) {\n        if (n % i == 0) {\n            p = i;\n            while\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293487,
      "stdout": "",
      "stderr": "/tmp/tmpc4ms8216.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpc4ms8216.cpp:62:1: error: expected \u2018(\u2019 before \u2018}\u2019 token\n   62 | }\n      | ^\n      | (\n/tmp/tmpc4ms8216.cpp:62:1: error: expected primary-expression before \u2018}\u2019 token\n/tmp/tmpc4ms8216.cpp:61:18: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   61 |             while\n      |                  ^\n      |                  )\n   62 | }\n      | ~                 \n/tmp/tmpc4ms8216.cpp:62:1: error: expected primary-expression before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmpc4ms8216.cpp:63:12: error: a function-definition is not allowed here before \u2018{\u2019 token\n   63 | int main() {\n      |            ^\n/tmp/tmpc4ms8216.cpp:70:1: error: expected \u2018}\u2019 at end of input\n   70 | }\n      | ^\n/tmp/tmpc4ms8216.cpp:58:32: note: to match this \u2018{\u2019\n   58 |     for (i = 5; i < n; i += 2) {\n      |                                ^\n/tmp/tmpc4ms8216.cpp:70:1: error: expected \u2018}\u2019 at end of input\n   70 | }\n      | ^\n/tmp/tmpc4ms8216.cpp:8:35: note: to match this \u2018{\u2019\n    8 | long largest_prime_factor(long n) {\n      |                                   ^\n/tmp/tmpc4ms8216.cpp:70:1: warning: control reaches end of non-void function [-Wreturn-type]\n   70 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long max_factor = 0;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            max_factor = i;\n            for (j = i; j <= n / i; j++) {\n                n /= i;\n            }\n            break;\n        }\n    }\n    if (n > 1) {\n        for (i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                max_factor = i;\n                for (j = i; j <= n / i; j++) {\n                    n /= i;\n                }\n                break;\n            }\n        }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "tmpzr4iqmjt: /tmp/tmpzr4iqmjt.cpp:38: int main(): Assertion `candidate((330)) == (11)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m;\n    long n;\n    long o;\n    long p;\n    long q;\n    long r;\n    long s;\n    long t;\n    long u;\n    long v;\n    long w;\n    long x;\n    long y;\n    long z;\n    long a;\n    long b;\n    long c;\n    long d;\n    long e;\n    long f;\n    long g;\n    long h;\n    long i;\n    long j;\n    long k;\n    long l;\n    long m\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293478,
      "stdout": "",
      "stderr": "/tmp/tmp3sd9mbqn.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmp3sd9mbqn.cpp:26:10: error: redeclaration of \u2018long int i\u2019\n   26 |     long i;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:10: note: \u2018long int i\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:27:10: error: redeclaration of \u2018long int j\u2019\n   27 |     long j;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:13: note: \u2018long int j\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |             ^\n/tmp/tmp3sd9mbqn.cpp:28:10: error: redeclaration of \u2018long int k\u2019\n   28 |     long k;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:16: note: \u2018long int k\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |                ^\n/tmp/tmp3sd9mbqn.cpp:29:10: error: redeclaration of \u2018long int l\u2019\n   29 |     long l;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:19: note: \u2018long int l\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |                   ^\n/tmp/tmp3sd9mbqn.cpp:30:10: error: redeclaration of \u2018long int m\u2019\n   30 |     long m;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:22: note: \u2018long int m\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |                      ^\n/tmp/tmp3sd9mbqn.cpp:31:10: error: declaration of \u2018long int n\u2019 shadows a parameter\n   31 |     long n;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:33:10: error: redeclaration of \u2018long int p\u2019\n   33 |     long p;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:25: note: \u2018long int p\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |                         ^\n/tmp/tmp3sd9mbqn.cpp:34:10: error: redeclaration of \u2018long int q\u2019\n   34 |     long q;\n      |          ^\n/tmp/tmp3sd9mbqn.cpp:9:28: note: \u2018long int q\u2019 previously declared here\n    9 |     long i, j, k, l, m, p, q, r;\n      |                            ^\n/tmp/tmp3sd9mbqn.cpp:35:10: error: redeclaration of \u2018long int r\u2019\n   35 | ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    assert(n > 1);\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) {\n                n /= i;\n            }\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        return n;\n    } else {\n        return i;\n    }\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293481,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) n /= i;\n        } else {\n            i++;\n        }\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpbvvsrbo7: /tmp/tmpbvvsrbo7.cpp:23: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n < 2) return n;\n    long i = 2;\n    while (n % i == 0) {\n        n /= i;\n        i++;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmp_5swd91y: /tmp/tmp_5swd91y.cpp:19: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 2) return 2;\n    if (n == 3) return 3;\n    if (n % 2 == 0) return 2;\n    if (n % 3 == 0) return 3;\n    long i = 5;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            return i;\n        }\n        i += 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpsa9dx01d: /tmp/tmpsa9dx01d.cpp:24: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            while (n % i == 0) n /= i;\n        } else {\n            i++;\n        }\n    }\n    if (n > 1) return n;\n    else return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i = 2;\n    while (n % i == 0) {\n        n /= i;\n        i = 2;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "tmphsa9vsnh: /tmp/tmphsa9vsnh.cpp:18: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k, l, m, p, q, r, s, t, u, v, w, x, y, z;\n    long max_factor = 0;\n    for (i = 2; i <= n; i++) {\n        if (n % i == 0) {\n            if (i > max_factor) {\n                max_factor = i;\n            }\n            for (j = i; j <= n / i; j++) {\n                n /= i;\n            }\n        }\n    }\n    return max_factor;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "tmp51i7fb3f: /tmp/tmp51i7fb3f.cpp:26: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n <= 1) return 1;\n    long i, j, k, l, m;\n    for (i = 2; i <= n / 2; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 2 == 0) return 2;\n    for (i = 3; i <= n / 3; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 3 == 0) return 3;\n    for (i = 5; i <= n / 5; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 5 == 0) return 5;\n    for (i = 7; i <= n / 7; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 7 == 0) return 7;\n    for (i = 11; i <= n / 11; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 11 == 0) return 11;\n    for (i = 13; i <= n / 13; i++) {\n        if (n % i == 0) {\n            m = i;\n            while (n % i == 0) {\n                n /= i;\n            }\n            return m;\n        }\n    }\n    if (n % 13 == 0) return 13;\n    for (i = 17; i <= n / 17; i\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "/tmp/tmpw_0hg4oa.cpp: In function \u2018long int largest_prime_factor(long int)\u2019:\n/tmp/tmpw_0hg4oa.cpp:71:32: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   71 |     for (i = 17; i <= n / 17; i\n      |         ~                      ^\n      |                                )\n   72 | }\n      | ~                               \n/tmp/tmpw_0hg4oa.cpp:72:1: error: expected primary-expression before \u2018}\u2019 token\n   72 | }\n      | ^\n/tmp/tmpw_0hg4oa.cpp:72:1: warning: control reaches end of non-void function [-Wreturn-type]\n   72 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    long m = n;\n    for (i = 2; i < m; i++) {\n        if (m % i == 0) {\n            m /= i;\n            j = 2;\n            while (m % i == 0) {\n                m /= i;\n                j++;\n            }\n            k = i;\n            while (m % i == 0) {\n                m /= i;\n                k++;\n            }\n            if (j > k) {\n                k = j;\n            }\n            if (k > 1) {\n                return k;\n            }\n        }\n    }\n    return m;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293489,
      "stdout": "",
      "stderr": "tmps3h_uyne: /tmp/tmps3h_uyne.cpp:36: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    if (n == 1) return 1;\n    long p = 2;\n    while (n % p == 0) {\n        n /= p;\n        p = 2;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 3;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 5;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 7;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 11;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 13;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 17;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 19;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 23;\n    }\n    while (n % p == 0) {\n        n /= p;\n        p = 29;\n    }\n    return n;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293477,
      "stdout": "",
      "stderr": "tmpvo47sv79: /tmp/tmpvo47sv79.cpp:55: int main(): Assertion `candidate((15)) == (5)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n// 2\nlong largest_prime_factor(long n) {\n    long i, j, k;\n    for (i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n            j = i;\n            while (n % j == 0) {\n                n /= j;\n                j = i;\n            }\n            i = j;\n        }\n    }\n    if (n > 1) return n;\n    return i;\n}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15)) == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n}\n",
      "timestamp": 1664293484,
      "stdout": "",
      "stderr": "tmpswma82pa: /tmp/tmpswma82pa.cpp:26: int main(): Assertion `candidate((27)) == (3)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}