{
  "name": "HumanEval_79_decimal_to_binary",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n",
  "tests": "}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpiqc7w0ur: /tmp/tmpiqc7w0ur.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpzufl22og: /tmp/tmpzufl22og.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal != 0) {\n        binary = (decimal % 2) + binary;\n        decimal /= 2;\n    }\n    binary = \"db\" + binary;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "/tmp/tmpm9fd3fny.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpm9fd3fny.cpp:16:32: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         binary = (decimal % 2) + binary;\n      |                  ~~~~~~~~~~~~~ ^ ~~~~~~\n      |                           |      |\n      |                           |      std::string {aka std::__cxx11::basic_string<char>}\n      |                           long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpm9fd3fny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpm9fd3fny.cpp:16:34: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         binary = (decimal % 2) + binary;\n      |                                  ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /share",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    result += '0';\n    result += '0';\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp1ke60dbl: /tmp/tmp1ke60dbl.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpzufl22og: /tmp/tmpzufl22og.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    if (decimal == 0) {\n        result = \"0\";\n        return result;\n    }\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    result = \"db\" + result;\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "/tmp/tmp5chpkv34.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmp5chpkv34.cpp:20:32: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   20 |         result = (decimal % 2) + result;\n      |                  ~~~~~~~~~~~~~ ^ ~~~~~~\n      |                           |      |\n      |                           |      std::string {aka std::__cxx11::basic_string<char>}\n      |                           long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmp5chpkv34.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmp5chpkv34.cpp:20:34: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   20 |         result = (decimal % 2) + result;\n      |                                  ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /share",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpe3lqbs2d: /tmp/tmpe3lqbs2d.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpxqjewfka: /tmp/tmpxqjewfka.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back('0' + (decimal & 1));\n        decimal >>= 1;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpbrn8z9qt: /tmp/tmpbrn8z9qt.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string = \"\";\n    while (decimal != 0) {\n        binary_string += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    binary_string += \"db\";\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp2d7i5f8f: /tmp/tmp2d7i5f8f.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal & 1) + '0');\n        decimal >>= 1;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpvhqqlxc0: /tmp/tmpvhqqlxc0.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpzufl22og: /tmp/tmpzufl22og.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(32);\n    binary.append(\"db\");\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.append(\"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpl7yftp7v: /tmp/tmpl7yftp7v.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpzufl22og: /tmp/tmpzufl22og.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    std::stringstream ss;\n    ss << decimal;\n    std::string str;\n    ss >> str;\n    for (int i = str.size() - 1; i >= 0; i--) {\n        binary.push_back(str[i]);\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpco_7g_7_: /tmp/tmpco_7g_7_.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal * 2 + 2);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpiagdnrbd: /tmp/tmpiagdnrbd.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str = \"\";\n    while (decimal != 0) {\n        binary_str = (decimal % 2) + binary_str;\n        decimal /= 2;\n    }\n    binary_str = \"db\" + binary_str;\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "/tmp/tmpf8mxfnx1.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpf8mxfnx1.cpp:16:36: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         binary_str = (decimal % 2) + binary_str;\n      |                      ~~~~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                               |      |\n      |                               |      std::string {aka std::__cxx11::basic_string<char>}\n      |                               long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpf8mxfnx1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpf8mxfnx1.cpp:16:38: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         binary_str = (decimal % 2) + binary_str;\n      |                                      ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal > 0) {\n        binary.insert(binary.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), '0');\n    binary.insert(binary.end(), '1');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp12klx43h: /tmp/tmp12klx43h.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    ss << decimal;\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpza_1p6vi: /tmp/tmpza_1p6vi.cpp:21: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back((decimal & 1) + '0');\n        decimal >>= 1;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpvsspqje1: /tmp/tmpvsspqje1.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal * 2 + 2);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpmhjb6b__: /tmp/tmpmhjb6b__.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpezjzemoe: /tmp/tmpezjzemoe.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmprhfhtgyk: /tmp/tmprhfhtgyk.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    ss << decimal;\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpza_1p6vi: /tmp/tmpza_1p6vi.cpp:21: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(0, \"db\");\n    binary.push_back('0');\n    binary.push_back('0');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpnf_cx9pm: /tmp/tmpnf_cx9pm.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp9qfr1k2p: /tmp/tmp9qfr1k2p.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmprhfhtgyk: /tmp/tmprhfhtgyk.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal * 2 + 2);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpj2pvp6ox: /tmp/tmpj2pvp6ox.cpp:27: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    result = \"db\" + result;\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "/tmp/tmpttd75db7.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpttd75db7.cpp:16:32: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         result = (decimal % 2) + result;\n      |                  ~~~~~~~~~~~~~ ^ ~~~~~~\n      |                           |      |\n      |                           |      std::string {aka std::__cxx11::basic_string<char>}\n      |                           long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpttd75db7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpttd75db7.cpp:16:34: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         result = (decimal % 2) + result;\n      |                                  ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /share",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpsgf33pjd: /tmp/tmpsgf33pjd.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpxqjewfka: /tmp/tmpxqjewfka.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmprhfhtgyk: /tmp/tmprhfhtgyk.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string = \"\";\n    while (decimal > 0) {\n        binary_string = (decimal % 2) + binary_string;\n        decimal /= 2;\n    }\n    binary_string = \"db\" + binary_string;\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "/tmp/tmpn6_u_3c1.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpn6_u_3c1.cpp:16:39: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         binary_string = (decimal % 2) + binary_string;\n      |                         ~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~\n      |                                  |      |\n      |                                  |      std::string {aka std::__cxx11::basic_string<char>}\n      |                                  long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpn6_u_3c1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpn6_u_3c1.cpp:16:41: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         binary_string = (decimal % 2) + binary_string;\n      |                                         ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string;\n    binary_string.reserve(decimal);\n    binary_string.insert(binary_string.begin(), 'd');\n    binary_string.insert(binary_string.end(), 'b');\n    while (decimal) {\n        binary_string.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpkcfyg9nu: /tmp/tmpkcfyg9nu.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpjbku2b1v: /tmp/tmpjbku2b1v.cpp:21: int main(): Assertion `candidate((32)) == (\"db100000db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << std::hex << decimal;\n    std::string s = ss.str();\n    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == '0') {\n            result += \"0\";\n        } else if (s[i] == '1') {\n            result += \"1\";\n        } else {\n            assert(false);\n        }\n    }\n    result = \"db\" + result + \"db\";\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpqg36dhd3: /tmp/tmpqg36dhd3.cpp:24: std::string decimal_to_binary(long int): Assertion `false' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal != 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpybb_8e0b: /tmp/tmpybb_8e0b.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpino097ha: /tmp/tmpino097ha.cpp:27: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal != 0) {\n        binary = (decimal % 2) + binary;\n        decimal /= 2;\n    }\n    binary = \"db\" + binary;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "/tmp/tmpm9fd3fny.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpm9fd3fny.cpp:16:32: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         binary = (decimal % 2) + binary;\n      |                  ~~~~~~~~~~~~~ ^ ~~~~~~\n      |                           |      |\n      |                           |      std::string {aka std::__cxx11::basic_string<char>}\n      |                           long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpm9fd3fny.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpm9fd3fny.cpp:16:34: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         binary = (decimal % 2) + binary;\n      |                                  ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /share",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str = \"db\";\n    while (decimal != 0) {\n        binary_str.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary_str.push_back('0');\n    binary_str.push_back('0');\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpswmof8sy: /tmp/tmpswmof8sy.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back('0' + (decimal & 1));\n        decimal >>= 1;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpk80m46xr: /tmp/tmpk80m46xr.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    ss << std::hex << decimal;\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpmabm_jfr: /tmp/tmpmabm_jfr.cpp:21: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal > 0) {\n        binary.insert(binary.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), '0');\n    binary.insert(binary.end(), '1');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp12klx43h: /tmp/tmp12klx43h.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp9qfr1k2p: /tmp/tmp9qfr1k2p.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal != 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmppzdp326x: /tmp/tmppzdp326x.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    long remainder = decimal;\n    while (remainder != 0) {\n        result.push_back(remainder % 2 + '0');\n        remainder = remainder / 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpan4rhjz1: /tmp/tmpan4rhjz1.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpxn1fw625: /tmp/tmpxn1fw625.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str = \"\";\n    while (decimal > 0) {\n        binary_str = (decimal % 2) + binary_str;\n        decimal /= 2;\n    }\n    binary_str = \"db\" + binary_str;\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "/tmp/tmpou_7z78r.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpou_7z78r.cpp:16:36: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         binary_str = (decimal % 2) + binary_str;\n      |                      ~~~~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                               |      |\n      |                               |      std::string {aka std::__cxx11::basic_string<char>}\n      |                               long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpou_7z78r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpou_7z78r.cpp:16:38: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         binary_str = (decimal % 2) + binary_str;\n      |                                      ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal != 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmppzdp326x: /tmp/tmppzdp326x.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpjbku2b1v: /tmp/tmpjbku2b1v.cpp:21: int main(): Assertion `candidate((32)) == (\"db100000db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    while (decimal != 0) {\n        result.insert(result.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.insert(result.begin(), '0');\n    result.insert(result.end(), '1');\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmp9vjf7xxw: /tmp/tmp9vjf7xxw.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    return \"db\" + result + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "/tmp/tmp2gzbtgf5.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmp2gzbtgf5.cpp:16:32: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         result = (decimal % 2) + result;\n      |                  ~~~~~~~~~~~~~ ^ ~~~~~~\n      |                           |      |\n      |                           |      std::string {aka std::__cxx11::basic_string<char>}\n      |                           long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmp2gzbtgf5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmp2gzbtgf5.cpp:16:34: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         result = (decimal % 2) + result;\n      |                                  ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /share",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    while (decimal > 0) {\n        ss << (decimal % 2);\n        decimal /= 2;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpu5a2rwqy: /tmp/tmpu5a2rwqy.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpxlx8an66: /tmp/tmpxlx8an66.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str = \"\";\n    while (decimal > 0) {\n        binary_str = (decimal % 2) + binary_str;\n        decimal /= 2;\n    }\n    binary_str = \"db\" + binary_str;\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "/tmp/tmpou_7z78r.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpou_7z78r.cpp:16:36: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         binary_str = (decimal % 2) + binary_str;\n      |                      ~~~~~~~~~~~~~ ^ ~~~~~~~~~~\n      |                               |      |\n      |                               |      std::string {aka std::__cxx11::basic_string<char>}\n      |                               long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpou_7z78r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpou_7z78r.cpp:16:38: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         binary_str = (decimal % 2) + binary_str;\n      |                                      ^~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpe3lqbs2d: /tmp/tmpe3lqbs2d.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmp1_89l07e: /tmp/tmp1_89l07e.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    result = \"db\" + result;\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "/tmp/tmpttd75db7.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpttd75db7.cpp:16:32: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         result = (decimal % 2) + result;\n      |                  ~~~~~~~~~~~~~ ^ ~~~~~~\n      |                           |      |\n      |                           |      std::string {aka std::__cxx11::basic_string<char>}\n      |                           long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpttd75db7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpttd75db7.cpp:16:34: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         result = (decimal % 2) + result;\n      |                                  ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /share",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string;\n    binary_string.reserve(decimal * 2 + 2);\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal) {\n        binary_string.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpwah0w4tw: /tmp/tmpwah0w4tw.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpiqc7w0ur: /tmp/tmpiqc7w0ur.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpbbkydacr: /tmp/tmpbbkydacr.cpp:27: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal != 0) {\n        binary.insert(binary.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), '0');\n    binary.insert(binary.end(), '0');\n    binary.insert(binary.end(), '0');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpl1bugqnj: /tmp/tmpl1bugqnj.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpsgf33pjd: /tmp/tmpsgf33pjd.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpjbku2b1v: /tmp/tmpjbku2b1v.cpp:21: int main(): Assertion `candidate((32)) == (\"db100000db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string = \"\";\n    while (decimal > 0) {\n        binary_string += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    binary_string += \"db\";\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpjmgey1yf: /tmp/tmpjmgey1yf.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal != 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmppzdp326x: /tmp/tmppzdp326x.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    return \"db\" + result + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "/tmp/tmp2gzbtgf5.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmp2gzbtgf5.cpp:16:32: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         result = (decimal % 2) + result;\n      |                  ~~~~~~~~~~~~~ ^ ~~~~~~\n      |                           |      |\n      |                           |      std::string {aka std::__cxx11::basic_string<char>}\n      |                           long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmp2gzbtgf5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmp2gzbtgf5.cpp:16:34: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         result = (decimal % 2) + result;\n      |                                  ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /share",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal != 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpl7mrkvsp: /tmp/tmpl7mrkvsp.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpsgf33pjd: /tmp/tmpsgf33pjd.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpj6n99ozp: /tmp/tmpj6n99ozp.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpxn1fw625: /tmp/tmpxn1fw625.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpbbkydacr: /tmp/tmpbbkydacr.cpp:27: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpiqc7w0ur: /tmp/tmpiqc7w0ur.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpe3lqbs2d: /tmp/tmpe3lqbs2d.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string;\n    binary_string.reserve(decimal * 2 + 2);\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal != 0) {\n        binary_string.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpmsvlok6b: /tmp/tmpmsvlok6b.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string = \"\";\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal != 0) {\n        binary_string.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmp0dedjf4a: /tmp/tmp0dedjf4a.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal != 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmppzdp326x: /tmp/tmppzdp326x.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string;\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    std::stringstream ss;\n    ss << decimal;\n    std::string s;\n    ss >> s;\n    for (int i = s.size() - 1; i >= 0; i--) {\n        binary_string.push_back(s[i]);\n    }\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpu1q7xv_c: /tmp/tmpu1q7xv_c.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str = \"db\";\n    long decimal_copy = decimal;\n    while (decimal_copy > 0) {\n        binary_str.push_back(decimal_copy % 2 + '0');\n        decimal_copy /= 2;\n    }\n    binary_str.push_back('0');\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpi603ey2h: /tmp/tmpi603ey2h.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    while (decimal > 0) {\n        ss << (decimal % 2);\n        decimal /= 2;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpu5a2rwqy: /tmp/tmpu5a2rwqy.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal * 2 + 2);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpiagdnrbd: /tmp/tmpiagdnrbd.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string;\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    long decimal_copy = decimal;\n    while (decimal_copy > 0) {\n        int remainder = decimal_copy % 2;\n        decimal_copy = decimal_copy / 2;\n        binary_string.push_back(remainder + '0');\n    }\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpq5s66drt: /tmp/tmpq5s66drt.cpp:27: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    std::string s = ss.str();\n    return s;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpgvv8aabr: /tmp/tmpgvv8aabr.cpp:22: int main(): Assertion `candidate((32)) == (\"db100000db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpe3lqbs2d: /tmp/tmpe3lqbs2d.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    result = \"db\" + result;\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "/tmp/tmpttd75db7.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpttd75db7.cpp:16:32: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         result = (decimal % 2) + result;\n      |                  ~~~~~~~~~~~~~ ^ ~~~~~~\n      |                           |      |\n      |                           |      std::string {aka std::__cxx11::basic_string<char>}\n      |                           long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpttd75db7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpttd75db7.cpp:16:34: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         result = (decimal % 2) + result;\n      |                                  ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /share",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    ss << std::hex << decimal;\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpmabm_jfr: /tmp/tmpmabm_jfr.cpp:21: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpiqc7w0ur: /tmp/tmpiqc7w0ur.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    while (decimal > 0) {\n        ss << (decimal % 2);\n        decimal /= 2;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpu5a2rwqy: /tmp/tmpu5a2rwqy.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back('0' + (decimal & 1));\n        decimal >>= 1;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpk80m46xr: /tmp/tmpk80m46xr.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    std::stringstream ss;\n    ss << decimal;\n    ss >> binary;\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpde21f2zs: /tmp/tmpde21f2zs.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"\";\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    result = \"db\" + result;\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "/tmp/tmpttd75db7.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpttd75db7.cpp:16:32: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         result = (decimal % 2) + result;\n      |                  ~~~~~~~~~~~~~ ^ ~~~~~~\n      |                           |      |\n      |                           |      std::string {aka std::__cxx11::basic_string<char>}\n      |                           long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpttd75db7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpttd75db7.cpp:16:34: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         result = (decimal % 2) + result;\n      |                                  ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /share",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"\";\n    if (decimal == 0) {\n        result = \"0\";\n    } else {\n        while (decimal != 0) {\n            result = (decimal % 2) + result;\n            decimal /= 2;\n        }\n    }\n    result = \"db\" + result;\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "/tmp/tmp8hf3i68g.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmp8hf3i68g.cpp:19:36: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   19 |             result = (decimal % 2) + result;\n      |                      ~~~~~~~~~~~~~ ^ ~~~~~~\n      |                               |      |\n      |                               |      std::string {aka std::__cxx11::basic_string<char>}\n      |                               long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmp8hf3i68g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmp8hf3i68g.cpp:19:38: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   19 |             result = (decimal % 2) + result;\n      |                                      ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpjbku2b1v: /tmp/tmpjbku2b1v.cpp:21: int main(): Assertion `candidate((32)) == (\"db100000db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back((decimal & 1) + '0');\n        decimal >>= 1;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpsq8g89l2: /tmp/tmpsq8g89l2.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(0, \"db\");\n    binary.push_back('0');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmp99slweoi: /tmp/tmp99slweoi.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string;\n    binary_string.reserve(decimal);\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal != 0) {\n        binary_string.push_back((decimal & 1) + '0');\n        decimal = decimal >> 1;\n    }\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpk5iio3h8: /tmp/tmpk5iio3h8.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    while (decimal != 0) {\n        binary.insert(binary.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.insert(binary.begin(), '0');\n    binary.insert(binary.end(), '0');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmp0ywdhq8w: /tmp/tmp0ywdhq8w.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str = \"\";\n    binary_str.insert(binary_str.begin(), 'd');\n    binary_str.insert(binary_str.end(), 'b');\n    while (decimal != 0) {\n        binary_str.insert(binary_str.begin(), decimal % 2);\n        decimal /= 2;\n    }\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmp4n5nai3e: /tmp/tmp4n5nai3e.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    ss << std::hex << decimal;\n    std::string s = ss.str();\n    s.erase(s.begin(), s.begin() + 2);\n    s.erase(s.end() - 2, s.end());\n    return s;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpl48jnprt: /tmp/tmpl48jnprt.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpiqc7w0ur: /tmp/tmpiqc7w0ur.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpe3lqbs2d: /tmp/tmpe3lqbs2d.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    while (decimal > 0) {\n        ss << (decimal & 1);\n        decimal >>= 1;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpukdwljmy: /tmp/tmpukdwljmy.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp9qfr1k2p: /tmp/tmp9qfr1k2p.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    ss << decimal;\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpza_1p6vi: /tmp/tmpza_1p6vi.cpp:21: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpaq7v3i7a: /tmp/tmpaq7v3i7a.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpaq7v3i7a: /tmp/tmpaq7v3i7a.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmprhfhtgyk: /tmp/tmprhfhtgyk.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpjbku2b1v: /tmp/tmpjbku2b1v.cpp:21: int main(): Assertion `candidate((32)) == (\"db100000db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    while (decimal > 0) {\n        result = (decimal % 2) + result;\n        decimal /= 2;\n    }\n    return \"db\" + result + \"db\";\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "/tmp/tmpxawc0nw4.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpxawc0nw4.cpp:16:32: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         result = (decimal % 2) + result;\n      |                  ~~~~~~~~~~~~~ ^ ~~~~~~\n      |                           |      |\n      |                           |      std::string {aka std::__cxx11::basic_string<char>}\n      |                           long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpxawc0nw4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpxawc0nw4.cpp:16:34: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         result = (decimal % 2) + result;\n      |                                  ^~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /share",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    while (decimal > 0) {\n        ss << (decimal % 2);\n        decimal /= 2;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpu5a2rwqy: /tmp/tmpu5a2rwqy.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpmn57g5ci: /tmp/tmpmn57g5ci.cpp:27: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string = \"\";\n    while (decimal > 0) {\n        binary_string += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    binary_string += '0';\n    binary_string += '0';\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpi3hqtdni: /tmp/tmpi3hqtdni.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string = \"\";\n    while (decimal != 0) {\n        binary_string = (decimal % 2) + binary_string;\n        decimal /= 2;\n    }\n    binary_string = \"db\" + binary_string + \"db\";\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292773,
      "stdout": "",
      "stderr": "/tmp/tmpb5x7om37.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpb5x7om37.cpp:16:39: error: no match for \u2018operator+\u2019 (operand types are \u2018long int\u2019 and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019})\n   16 |         binary_string = (decimal % 2) + binary_string;\n      |                         ~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~\n      |                                  |      |\n      |                                  |      std::string {aka std::__cxx11::basic_string<char>}\n      |                                  long int\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/cmath:1927,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:41,\n                 from /tmp/tmpb5x7om37.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator> std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type __n,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:423:5: note:   template argument deduction/substitution failed:\n/tmp/tmpb5x7om37.cpp:16:41: note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   16 |         binary_string = (decimal % 2) + binary_string;\n      |                                         ^~~~~~~~~~~~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/specfun.h:45,\n                 from /shared/centos7",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    while (decimal) {\n        ss << (decimal % 2);\n        decimal /= 2;\n    }\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292773,
      "stdout": "",
      "stderr": "tmpb9pmka7a: /tmp/tmpb9pmka7a.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpj6n99ozp: /tmp/tmpj6n99ozp.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmp4yjq9h07: /tmp/tmp4yjq9h07.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp9qfr1k2p: /tmp/tmp9qfr1k2p.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str = \"\";\n    binary_str += 'd';\n    binary_str += std::to_string(decimal);\n    binary_str += 'b';\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmpi1sbsxcy: /tmp/tmpi1sbsxcy.cpp:22: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp9qfr1k2p: /tmp/tmp9qfr1k2p.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmprhfhtgyk: /tmp/tmprhfhtgyk.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(32);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back('0' + (decimal & 1));\n        decimal >>= 1;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpbrn8z9qt: /tmp/tmpbrn8z9qt.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str = \"\";\n    binary_str.append(\"db\");\n    while (decimal > 0) {\n        binary_str.append(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary_str.append(\"db\");\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292773,
      "stdout": "",
      "stderr": "/tmp/tmp_ue12zdi.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmp_ue12zdi.cpp:17:44: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::append(long int)\u2019\n   17 |         binary_str.append(decimal % 2 + '0');\n      |                                            ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmp_ue12zdi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019 <near match>\n 1263 |       append(const _CharT* __s)\n      |       ^~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7: note:   conversion of argument 1 would be ill-formed:\n/tmp/tmp_ue12zdi.cpp:17:39: error: invalid conversion from \u2018long int\u2019 to \u2018const char*\u2019 [-fpermissive]\n   17 |         binary_str.append(decimal % 2 + '0');\n      |                           ~~~~~~~~~~~~^~~~~\n      |                                       |\n      |                                       long int\nIn file included from /shar",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string;\n    binary_string.append(\"db\");\n    while (decimal != 0) {\n        binary_string.append(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292773,
      "stdout": "",
      "stderr": "/tmp/tmpnger61y5.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpnger61y5.cpp:17:47: error: no matching function for call to \u2018std::__cxx11::basic_string<char>::append(long int)\u2019\n   17 |         binary_string.append(decimal % 2 + '0');\n      |                                               ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/string:55,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/locale_classes.h:40,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/ios_base.h:41,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:42,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n                 from /tmp/tmpnger61y5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7: note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019 <near match>\n 1263 |       append(const _CharT* __s)\n      |       ^~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/basic_string.h:1263:7: note:   conversion of argument 1 would be ill-formed:\n/tmp/tmpnger61y5.cpp:17:42: error: invalid conversion from \u2018long int\u2019 to \u2018const char*\u2019 [-fpermissive]\n   17 |         binary_string.append(decimal % 2 + '0');\n      |                              ~~~~~~~~~~~~^~~~~\n      |                                          |\n      |                                          long int\nIn file i",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpxqjewfka: /tmp/tmpxqjewfka.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str = \"\";\n    binary_str.insert(binary_str.begin(), 'd');\n    binary_str.insert(binary_str.end(), 'b');\n    std::stringstream ss;\n    ss << decimal;\n    std::string str;\n    ss >> str;\n    std::reverse(str.begin(), str.end());\n    for (int i = 0; i < str.size(); i++) {\n        binary_str.push_back(str[i]);\n    }\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmper1v0rr8: /tmp/tmper1v0rr8.cpp:29: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    reverse(binary.begin(), binary.end());\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmptspwv6_c: /tmp/tmptspwv6_c.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str;\n    binary_str.push_back('d');\n    binary_str.push_back('b');\n    std::stringstream ss;\n    ss << decimal;\n    std::string str;\n    ss >> str;\n    for (int i = str.length() - 1; i >= 0; i--) {\n        binary_str.push_back(str[i]);\n    }\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmpea6ypu6_: /tmp/tmpea6ypu6_.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmp4yjq9h07: /tmp/tmp4yjq9h07.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string;\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    std::stringstream ss;\n    ss << decimal;\n    for (int i = 0; i < ss.str().length(); i++) {\n        binary_string.push_back(ss.str().at(i) - '0');\n    }\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmpitizyo__: /tmp/tmpitizyo__.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    ss << decimal;\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpza_1p6vi: /tmp/tmpza_1p6vi.cpp:21: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back('0' + (decimal & 1));\n        decimal >>= 1;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmp_ljlwwzb: /tmp/tmp_ljlwwzb.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string;\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal != 0) {\n        binary_string.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmpjauwz_1b: /tmp/tmpjauwz_1b.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(32);\n    binary.append(\"db\");\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.append(\"db\");\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmpthrtzivb: /tmp/tmpthrtzivb.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str;\n    binary_str.reserve(decimal);\n    binary_str.push_back('d');\n    binary_str.push_back('b');\n    while (decimal > 0) {\n        binary_str.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmpbh124dhx: /tmp/tmpbh124dhx.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal != 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292772,
      "stdout": "",
      "stderr": "tmpl7mrkvsp: /tmp/tmpl7mrkvsp.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpxqjewfka: /tmp/tmpxqjewfka.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp9qfr1k2p: /tmp/tmp9qfr1k2p.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\" << std::hex << decimal << \"db\";\n    return ss.str();\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpjbku2b1v: /tmp/tmpjbku2b1v.cpp:21: int main(): Assertion `candidate((32)) == (\"db100000db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    while (decimal > 0) {\n        result.insert(result.begin(), decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.insert(result.begin(), '0');\n    result.insert(result.end(), '1');\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmpiideo5vb: /tmp/tmpiideo5vb.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpsgf33pjd: /tmp/tmpsgf33pjd.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpe3lqbs2d: /tmp/tmpe3lqbs2d.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::stringstream ss;\n    ss << \"db\";\n    ss << std::hex << decimal;\n    std::string str = ss.str();\n    str.erase(str.begin(), str.begin() + 2);\n    str.erase(str.end() - 2, str.end());\n    return str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmpsrcinrmy: /tmp/tmpsrcinrmy.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp9qfr1k2p: /tmp/tmp9qfr1k2p.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal * 2);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmp1mqimf3n: /tmp/tmp1mqimf3n.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back((decimal & 1) + '0');\n        decimal >>= 1;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmplxgfjksp: /tmp/tmplxgfjksp.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpe3lqbs2d: /tmp/tmpe3lqbs2d.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpxqjewfka: /tmp/tmpxqjewfka.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str = \"db\";\n    long temp = decimal;\n    while (temp > 0) {\n        binary_str.push_back(temp % 2 + '0');\n        temp /= 2;\n    }\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmpe9pzgs57: /tmp/tmpe9pzgs57.cpp:24: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.push_back('d');\n    binary.push_back('b');\n    long temp = decimal;\n    while (temp > 0) {\n        binary.push_back(temp % 2 + '0');\n        temp /= 2;\n    }\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmpcqk89u16: /tmp/tmpcqk89u16.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string;\n    binary_string.reserve(decimal);\n    binary_string.push_back('d');\n    binary_string.push_back('b');\n    while (decimal > 0) {\n        binary_string.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmpsw9fnd30: /tmp/tmpsw9fnd30.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_string = \"\";\n    binary_string += 'd';\n    binary_string += 'b';\n    int decimal_length = decimal_to_binary_length(decimal);\n    for (int i = decimal_length - 1; i >= 0; i--) {\n        binary_string += decimal_to_binary_digit(decimal, i);\n    }\n    return binary_string;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "/tmp/tmpv4q6pxof.cpp: In function \u2018std::string decimal_to_binary(long int)\u2019:\n/tmp/tmpv4q6pxof.cpp:17:26: error: \u2018decimal_to_binary_length\u2019 was not declared in this scope; did you mean \u2018decimal_to_binary\u2019?\n   17 |     int decimal_length = decimal_to_binary_length(decimal);\n      |                          ^~~~~~~~~~~~~~~~~~~~~~~~\n      |                          decimal_to_binary\n/tmp/tmpv4q6pxof.cpp:19:26: error: \u2018decimal_to_binary_digit\u2019 was not declared in this scope; did you mean \u2018decimal_to_binary\u2019?\n   19 |         binary_string += decimal_to_binary_digit(decimal, i);\n      |                          ^~~~~~~~~~~~~~~~~~~~~~~\n      |                          decimal_to_binary\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal > 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmp9qfr1k2p: /tmp/tmp9qfr1k2p.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary_str = \"db\";\n    while (decimal > 0) {\n        binary_str += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return binary_str;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292774,
      "stdout": "",
      "stderr": "tmp4qc58rql: /tmp/tmp4qc58rql.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.push_back('d');\n    result.push_back('b');\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmpsgf33pjd: /tmp/tmpsgf33pjd.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292775,
      "stdout": "",
      "stderr": "tmpiw2iyrt_: /tmp/tmpiw2iyrt_.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    result.reserve(decimal);\n    result.push_back('d');\n    result.push_back('b');\n    while (decimal > 0) {\n        result.push_back((decimal % 2) + '0');\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292775,
      "stdout": "",
      "stderr": "tmpzga453ie: /tmp/tmpzga453ie.cpp:26: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal != 0) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpiqc7w0ur: /tmp/tmpiqc7w0ur.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result;\n    while (decimal > 0) {\n        result.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    result.insert(0, \"db\");\n    result.push_back('0');\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292775,
      "stdout": "",
      "stderr": "tmpgwkzp8oe: /tmp/tmpgwkzp8oe.cpp:25: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal != 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292770,
      "stdout": "",
      "stderr": "tmppzdp326x: /tmp/tmppzdp326x.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string result = \"db\";\n    while (decimal > 0) {\n        result += (decimal % 2) + '0';\n        decimal /= 2;\n    }\n    return result;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpxqjewfka: /tmp/tmpxqjewfka.cpp:23: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given a number in decimal form and your task is to convert it to\n// binary format. The function should return a string, with each character representing a binary\n// number. Each character in the string will be '0' or '1'.\n// There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n// The extra characters are there to help with the format.\n// Examples:\n// >>> decimal_to_binary(15)\n// \"db1111db\"\n// >>> decimal_to_binary(32)\n// \"db100000db\"\nstd::string decimal_to_binary(long decimal) {\n    std::string binary;\n    binary.reserve(decimal);\n    binary.push_back('d');\n    binary.push_back('b');\n    while (decimal) {\n        binary.push_back(decimal % 2 + '0');\n        decimal /= 2;\n    }\n    binary.push_back('d');\n    binary.push_back('b');\n    return binary;\n}\nint main() {\n    auto candidate = decimal_to_binary;\n    assert(candidate((0)) == (\"db0db\"));\n    assert(candidate((32)) == (\"db100000db\"));\n    assert(candidate((103)) == (\"db1100111db\"));\n    assert(candidate((15)) == (\"db1111db\"));\n}\n",
      "timestamp": 1664292768,
      "stdout": "",
      "stderr": "tmpv_p5kfh7: /tmp/tmpv_p5kfh7.cpp:28: int main(): Assertion `candidate((0)) == (\"db0db\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}