{
  "name": "HumanEval_69_search",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a non-empty vector of positive integers. Return the greatest integer that is greater than \n// zero, and has a frequency greater than or equal to the value of the integer itself. \n// The frequency of an integer is the number of times it appears in the vector.\n// If no such a value exist, return -1.\n// Examples:\n// >>> search([4, 1, 2, 2, 3, 1])\n// 2\n// >>>  search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n// 3\n// >>> search([5, 5, 4, 4, 4])\n// -1\nlong search(std::vector<long> lst) {\n",
  "tests": "}\nint main() {\n    auto candidate = search;\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)5, (long)5, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)4, (long)1, (long)4, (long)1, (long)4, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)3, (long)3}))) == (-1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8, (long)8}))) == (8));\n    assert(candidate((std::vector<long>({(long)2, (long)3, (long)3, (long)2, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)2, (long)7, (long)8, (long)8, (long)4, (long)8, (long)7, (long)3, (long)9, (long)6, (long)5, (long)10, (long)4, (long)3, (long)6, (long)7, (long)1, (long)7, (long)4, (long)10, (long)8, (long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)8, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)6, (long)7, (long)1, (long)8, (long)8, (long)10, (long)5, (long)8, (long)5, (long)3, (long)10}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)3, (long)6, (long)5, (long)6, (long)4}))) == (-1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)6, (long)7, (long)1, (long)4, (long)7, (long)1, (long)8, (long)8, (long)9, (long)8, (long)10, (long)10, (long)8, (long)4, (long)10, (long)4, (long)10, (long)1, (long)2, (long)9, (long)5, (long)7, (long)9}))) == (1));\n    assert(candidate((std::vector<long>({(long)1, (long)9, (long)10, (long)1, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)6, (long)9, (long)7, (long)5, (long)8, (long)7, (long)5, (long)3, (long)7, (long)5, (long)10, (long)10, (long)3, (long)6, (long)10, (long)2, (long)8, (long)6, (long)5, (long)4, (long)9, (long)5, (long)3, (long)10}))) == (5));\n    assert(candidate((std::vector<long>({(long)1}))) == (1));\n    assert(candidate((std::vector<long>({(long)8, (long)8, (long)10, (long)6, (long)4, (long)3, (long)5, (long)8, (long)2, (long)4, (long)2, (long)8, (long)4, (long)6, (long)10, (long)4, (long)2, (long)1, (long)10, (long)2, (long)1, (long)1, (long)5}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)10, (long)4, (long)8, (long)2, (long)10, (long)5, (long)1, (long)2, (long)9, (long)5, (long)5, (long)6, (long)3, (long)8, (long)6, (long)4, (long)10}))) == (2));\n    assert(candidate((std::vector<long>({(long)1, (long)6, (long)10, (long)1, (long)6, (long)9, (long)10, (long)8, (long)6, (long)8, (long)7, (long)3}))) == (1));\n    assert(candidate((std::vector<long>({(long)9, (long)2, (long)4, (long)1, (long)5, (long)1, (long)5, (long)2, (long)5, (long)7, (long)7, (long)7, (long)3, (long)10, (long)1, (long)5, (long)4, (long)2, (long)8, (long)4, (long)1, (long)9, (long)10, (long)7, (long)10, (long)2, (long)8, (long)10, (long)9, (long)4}))) == (4));\n    assert(candidate((std::vector<long>({(long)2, (long)6, (long)4, (long)2, (long)8, (long)7, (long)5, (long)6, (long)4, (long)10, (long)4, (long)6, (long)3, (long)7, (long)8, (long)8, (long)3, (long)1, (long)4, (long)2, (long)2, (long)10, (long)7}))) == (4));\n    assert(candidate((std::vector<long>({(long)9, (long)8, (long)6, (long)10, (long)2, (long)6, (long)10, (long)2, (long)7, (long)8, (long)10, (long)3, (long)8, (long)2, (long)6, (long)2, (long)3, (long)1}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)5, (long)3, (long)9, (long)5, (long)6, (long)3, (long)2, (long)8, (long)5, (long)6, (long)10, (long)10, (long)6, (long)8, (long)4, (long)10, (long)7, (long)7, (long)10, (long)8}))) == (-1));\n    assert(candidate((std::vector<long>({(long)10}))) == (-1));\n    assert(candidate((std::vector<long>({(long)9, (long)7, (long)7, (long)2, (long)4, (long)7, (long)2, (long)10, (long)9, (long)7, (long)5, (long)7, (long)2}))) == (2));\n    assert(candidate((std::vector<long>({(long)5, (long)4, (long)10, (long)2, (long)1, (long)1, (long)10, (long)3, (long)6, (long)1, (long)8}))) == (1));\n    assert(candidate((std::vector<long>({(long)7, (long)9, (long)9, (long)9, (long)3, (long)4, (long)1, (long)5, (long)9, (long)1, (long)2, (long)1, (long)1, (long)10, (long)7, (long)5, (long)6, (long)7, (long)6, (long)7, (long)7, (long)6}))) == (1));\n    assert(candidate((std::vector<long>({(long)3, (long)10, (long)10, (long)9, (long)2}))) == (-1));\n}\n",
  "completions": [
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        } else if (lst[i] == max) {\n            freq++;\n        }\n    }\n    if (freq >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> map;\n    for (auto i : lst) {\n        map[i]++;\n    }\n    for (auto i : map) {\n        if (i.second >= max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size())\n        return -1;\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        }\n        else if (i == max) {\n            count++;\n        }\n    }\n    if (count < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long result = -1;\n    std::map<long, long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq.find(lst[i]) == freq.end()) {\n            freq[lst[i]] = 1;\n        } else {\n            freq[lst[i]]++;\n        }\n    }\n    for (std::map<long, long>::iterator it = freq.begin(); it != freq.end(); it++) {\n        if (it->second >= it->first) {\n            result = it->first;\n            break;\n        }\n    }\n    return result;",
    "    long max = 0;\n    long max_freq = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            max_freq = 1;\n        } else if (lst[i] == max) {\n            max_freq++;\n        }\n    }\n    if (max_freq < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second >= i.first) {\n            max = i.first;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        } else if (lst[i] == max) {\n            freq++;\n        }\n    }\n    if (freq >= max) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    std::map<long, int> m;\n    for (int i = 0; i < lst.size(); i++) {\n        if (m.find(lst[i]) == m.end()) {\n            m[lst[i]] = 1;\n        } else {\n            m[lst[i]]++;\n        }\n    }\n    for (std::map<long, int>::iterator it = m.begin(); it != m.end(); it++) {\n        if (it->second >= max) {\n            max = it->second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size())\n        return -1;\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        }\n        else if(lst[i] == max) {\n            freq++;\n        }\n    }\n    if(freq >= max)\n        return max;\n    else\n        return -1;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        }\n        else if (lst[i] == max) {\n            freq++;\n        }\n    }\n    if (freq < lst.size()) {\n        return -1;\n    }\n    else {\n        return max;\n    }",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == lst[i + 1]) {\n            lst[i] = 0;\n        } else {\n            lst[i] = lst[i] + 1;\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long max_freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            max_freq = 1;\n        } else if (lst[i] == max) {\n            max_freq++;\n        }\n    }\n    if (max_freq >= max) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count > 1)\n        return max;\n    else\n        return -1;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size())\n        return -1;\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size())\n        return -1;\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size())\n        return -1;\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        count += i;\n        if (count > max) {\n            max = count;\n        }\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        }\n        else if(lst[i] == max) {\n            freq++;\n        }\n    }\n    if(freq < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long result = -1;\n    long freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > result) {\n            result = lst[i];\n            freq = 1;\n        } else if (lst[i] == result) {\n            freq++;\n        }\n    }\n    if (freq >= result) {\n        return result;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        count += i;\n        if (count > max) {\n            max = count;\n        }\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] >= max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, int> m;\n    for (int i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second >= it->first) {\n            max = it->first;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        } else if (lst[i] == max) {\n            freq++;\n        }\n    }\n    if (freq >= max) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for(auto i : lst) {\n        if(i > max) {\n            max = i;\n            count = 1;\n        }\n        else if(i == max) {\n            count++;\n        }\n    }\n    if(count >= lst.size()) {\n        return -1;\n    }\n    else {\n        return max;\n    }",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max && lst[i] >= lst[i]) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size())\n        return -1;\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        }\n        else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            freq = 1;\n        }\n        else if (i == max) {\n            freq++;\n        }\n    }\n    if (freq < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (auto i : lst) {\n        if (freq.find(i) == freq.end()) {\n            freq[i] = 1;\n        } else {\n            freq[i] += 1;\n        }\n    }\n    for (auto i : freq) {\n        if (i.second >= max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = -1;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] >= lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (long i = 0; i < lst.size(); ++i) {\n        if (freq.find(lst[i]) == freq.end()) {\n            freq[lst[i]] = 1;\n        } else {\n            freq[lst[i]]++;\n        }\n    }\n    for (auto it = freq.begin(); it != freq.end(); ++it) {\n        if (it->second >= max) {\n            max = it->second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        }\n        else if(lst[i] == max) {\n            count++;\n        }\n    }\n    if(count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (auto i : lst) {\n        if (freq.find(i) == freq.end()) {\n            freq[i] = 1;\n        } else {\n            freq[i]++;\n        }\n    }\n    for (auto i : freq) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] >= lst[i]) {\n            max = lst[i];\n            break;\n        }\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for(auto i : lst) {\n        if(i > max) {\n            max = i;\n            freq = 1;\n        } else if(i == max) {\n            freq++;\n        }\n    }\n    if(freq >= lst.size()) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    long max_freq = 0;\n    for(auto i = lst.begin(); i != lst.end(); i++) {\n        if(*i > max) {\n            max = *i;\n            max_freq = 1;\n        }\n        else if(*i == max) {\n            max_freq++;\n        }\n    }\n    if(max_freq < max)\n        return -1;\n    else\n        return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (auto i : lst) {\n        if (freq.find(i) == freq.end()) {\n            freq[i] = 1;\n        } else {\n            freq[i] += 1;\n        }\n    }\n    for (auto i : freq) {\n        if (i.second >= max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for(auto i : lst) {\n        if(i > max) {\n            max = i;\n            count = 1;\n        } else if(i == max) {\n            count++;\n        }\n    }\n    if(count >= lst.size())\n        return max;\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long max_freq = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            max_freq = 1;\n        } else if (lst[i] == max) {\n            max_freq++;\n        }\n    }\n    if (max_freq >= max) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        count += i;\n        if (count > max) {\n            max = count;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count > lst.size() / 2) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max && lst[i] >= lst[i]) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max && lst[i] >= lst[i]) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        }\n        else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    else {\n        return max;\n    }",
    "    long max = 0;\n    std::map<long, long> map;\n    for (auto i : lst) {\n        if (map.find(i) == map.end()) {\n            map[i] = 1;\n        } else {\n            map[i] += 1;\n        }\n    }\n    for (auto i : map) {\n        if (i.second >= max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long result = -1;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0 && lst[i] <= lst.size()) {\n            count++;\n            if (count > lst[i]) {\n                result = lst[i];\n            }\n        }\n    }\n    return result;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (auto i : lst) {\n        freq[i]++;\n    }\n    for (auto i : freq) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    if (max == 0) {\n        return -1;\n    }\n    for (auto i : lst) {\n        if (freq[i] >= i) {\n            return i;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long max_freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            max_freq = 1;\n        } else if (lst[i] == max) {\n            max_freq++;\n        }\n    }\n    if (max_freq >= max)\n        return max;\n    else\n        return -1;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        } else if (lst[i] == max) {\n            freq++;\n        }\n    }\n    if (freq > max)\n        return -1;\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        } else if (lst[i] == max) {\n            freq++;\n        }\n    }\n    if (freq >= max) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        } else if (lst[i] == max) {\n            freq++;\n        }\n    }\n    if (freq < lst.size())\n        return -1;\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size())\n        return -1;\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        } else if (lst[i] == max) {\n            freq++;\n        }\n    }\n    if (freq >= max) {\n        return max;\n    }\n    return -1;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max && lst[i] >= lst[i]) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size())\n        return -1;\n    return max;",
    "    long max = 0;\n    std::map<long, long> map;\n    for (auto i : lst) {\n        map[i]++;\n    }\n    for (auto i : map) {\n        if (i.second >= max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size())\n        return -1;\n    return max;",
    "    long max = 0;\n    std::map<long, int> m;\n    for (int i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second >= max) {\n            max = it->second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, int> m;\n    for (auto i : lst) {\n        if (m.find(i) == m.end()) {\n            m[i] = 1;\n        } else {\n            m[i]++;\n        }\n    }\n    for (auto i : m) {\n        if (i.second >= i.first) {\n            max = i.first;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    } else {\n        return max;\n    }",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> m;\n    for (long i = 0; i < lst.size(); i++) {\n        if (m.find(lst[i]) == m.end()) {\n            m[lst[i]] = 1;\n        } else {\n            m[lst[i]]++;\n        }\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second >= max) {\n            max = it->second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (auto i : lst) {\n        if (freq.find(i) == freq.end()) {\n            freq[i] = 1;\n        } else {\n            freq[i]++;\n        }\n    }\n    for (auto i : freq) {\n        if (i.second >= max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq.find(lst[i]) == freq.end()) {\n            freq[lst[i]] = 1;\n        } else {\n            freq[lst[i]]++;\n        }\n    }\n    for (std::map<long, long>::iterator it = freq.begin(); it != freq.end(); it++) {\n        if (it->second >= max) {\n            max = it->second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    std::map<long, long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second >= i.first) {\n            return i.first;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long max_freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            max_freq = 1;\n        }\n        else if (lst[i] == max) {\n            max_freq++;\n        }\n    }\n    if (max_freq < lst.size()) {\n        return -1;\n    }\n    else {\n        return max;\n    }",
    "    long max = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n        }\n    }\n    for (auto i : lst) {\n        if (i == max) {\n            return i;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    std::map<long, int> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long max_freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            max_freq = 1;\n        } else if (lst[i] == max) {\n            max_freq++;\n        }\n    }\n    if (max_freq >= max) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        }\n        else if(lst[i] == max) {\n            count++;\n        }\n    }\n    if(count >= lst.size()) {\n        return -1;\n    }\n    else {\n        return max;\n    }",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    } else {\n        return max;\n    }",
    "    long max = 0;\n    std::map<long, int> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second >= max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (auto i : lst) {\n        if (freq.find(i) == freq.end()) {\n            freq[i] = 1;\n        } else {\n            freq[i]++;\n        }\n    }\n    for (auto i : freq) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        }\n        else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size())\n        return -1;\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for(auto i : lst) {\n        if(i > max) {\n            max = i;\n            count = 1;\n        } else if(i == max) {\n            count++;\n        }\n    }\n    if(count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    std::map<long, int> m;\n    for (int i = 0; i < lst.size(); i++) {\n        m[lst[i]]++;\n    }\n    for (auto it = m.begin(); it != m.end(); it++) {\n        if (it->second >= it->first) {\n            max = it->first;\n            break;\n        }\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max && lst[i] >= lst[i]) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        }\n        else if (i == max) {\n            count++;\n        }\n    }\n    if (count < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size() / 2) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            freq = 1;\n        } else if (i == max) {\n            freq++;\n        }\n    }\n    if (freq < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        }\n        else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long result = -1;\n    std::map<long, long> map;\n    for (auto i : lst) {\n        map[i]++;\n    }\n    for (auto i : map) {\n        if (i.second >= i.first) {\n            result = i.first;\n            break;\n        }\n    }\n    return result;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == lst[i] && lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second >= max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size())\n        return -1;\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        } else if (lst[i] == max) {\n            freq++;\n        }\n    }\n    if (freq >= lst.size()) {\n        return -1;\n    } else {\n        return max;\n    }",
    "    long max = 0;\n    long max_freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            max_freq = 1;\n        } else if (lst[i] == max) {\n            max_freq++;\n        }\n    }\n    if (max_freq < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (auto i : lst) {\n        if (freq.find(i) == freq.end()) {\n            freq[i] = 1;\n        } else {\n            freq[i] += 1;\n        }\n    }\n    for (auto i : freq) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, int> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second > max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long max_freq = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            max_freq = 1;\n        } else if (lst[i] == max) {\n            max_freq++;\n        }\n    }\n    if (max_freq < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (auto i : lst) {\n        if (freq.find(i) == freq.end()) {\n            freq[i] = 1;\n        } else {\n            freq[i]++;\n        }\n    }\n    for (auto i : freq) {\n        if (i.second >= i.first) {\n            max = i.first;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> map;\n    for (auto i : lst) {\n        if (map.find(i) == map.end()) {\n            map[i] = 1;\n        } else {\n            map[i] += 1;\n        }\n    }\n    for (auto i : map) {\n        if (i.second >= max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second >= i.first) {\n            max = i.first;\n            break;\n        }\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for(auto i : lst) {\n        if(freq.count(i) == 0) {\n            freq[i] = 1;\n        } else {\n            freq[i]++;\n        }\n    }\n    for(auto i : freq) {\n        if(i.second > max) {\n            max = i.second;\n        }\n    }\n    if(max == 0) {\n        return -1;\n    }\n    for(auto i : lst) {\n        if(freq[i] == max) {\n            return i;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    std::map<long, int> map;\n    for (int i = 0; i < lst.size(); i++) {\n        map[lst[i]]++;\n    }\n    for (std::map<long, int>::iterator it = map.begin(); it != map.end(); it++) {\n        if (it->second >= max) {\n            max = it->second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max && lst[i] >= lst[i]) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        }\n        else if(lst[i] == max) {\n            count++;\n        }\n    }\n    if(count >= lst.size())\n        return -1;\n    else\n        return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count > 1) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    long count = 0;\n    for(auto i : lst) {\n        count += i;\n        if(count > max) {\n            max = count;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, int> m;\n    for (auto i : lst) {\n        m[i]++;\n    }\n    for (auto i : m) {\n        if (i.second >= max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count < lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n        }\n    }\n    for (auto i : lst) {\n        if (i == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (auto i : lst) {\n        if (freq.find(i) == freq.end()) {\n            freq[i] = 1;\n        } else {\n            freq[i]++;\n        }\n    }\n    for (auto i : freq) {\n        if (i.second >= max) {\n            max = i.second;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (auto i : lst) {\n        if (i > max) {\n            max = i;\n            count = 1;\n        } else if (i == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (auto i : lst) {\n        if (freq.find(i) == freq.end()) {\n            freq[i] = 1;\n        } else {\n            freq[i]++;\n        }\n    }\n    for (auto i : freq) {\n        if (i.second >= i.first) {\n            max = i.first;\n            break;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    std::sort(lst.begin(), lst.end());\n    long max = lst[0];\n    long count = 1;\n    for (int i = 1; i < lst.size(); i++) {\n        if (lst[i] == lst[i - 1]) {\n            count++;\n        } else {\n            if (count >= max) {\n                max = lst[i];\n            }\n            count = 1;\n        }\n    }\n    if (count >= max) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (long i = 0; i < lst.size(); i++) {\n        if (freq.find(lst[i]) == freq.end()) {\n            freq[lst[i]] = 1;\n        } else {\n            freq[lst[i]]++;\n        }\n    }\n    for (std::map<long, long>::iterator it = freq.begin(); it != freq.end(); it++) {\n        if (it->second >= it->first) {\n            max = it->first;\n            break;\n        }\n    }\n    return max;",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max && lst[i] >= lst[i]) {\n            max = lst[i];\n        }\n    }\n    return max;",
    "    long max = 0;\n    long freq = 0;\n    for(int i = 0; i < lst.size(); i++) {\n        if(lst[i] > max) {\n            max = lst[i];\n            freq = 1;\n        } else if(lst[i] == max) {\n            freq++;\n        }\n    }\n    if(freq >= max) {\n        return max;\n    } else {\n        return -1;\n    }",
    "    long max = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] == max) {\n            return max;\n        }\n    }\n    return -1;",
    "    long max = 0;\n    long count = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        } else if (lst[i] == max) {\n            count++;\n        }\n    }\n    if (count >= lst.size()) {\n        return -1;\n    }\n    return max;",
    "    long max = 0;\n    std::map<long, long> freq;\n    for (auto i : lst) {\n        if (freq.find(i) == freq.end()) {\n            freq[i] = 1;\n        } else {\n            freq[i] += 1;\n        }\n    }\n    for (auto i : freq) {\n        if (i.second >= i.first) {\n            max = i.first;\n            break;\n        }\n    }\n    return max;",
    "    long max = 0;\n    long count = 0;\n    for(long i = 0; i < lst.size(); i++) {\n        if(lst[i] > max) {\n            max = lst[i];\n            count = 1;\n        }\n        else if(lst[i] == max) {\n            count++;\n        }\n    }\n    if(count >= lst.size()) {\n        return -1;\n    }\n    return max;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}