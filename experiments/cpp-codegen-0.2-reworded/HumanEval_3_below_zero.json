{
  "name": "HumanEval_3_below_zero",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You're given a vector of deposit and withdrawal operations on a bank account that starts with\n// zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n// at that point function should return true. Otherwise it should return false.\n// >>> below_zero([1, 2, 3])\n// False\n// >>> below_zero([1, 2, -4, 5])\n// True\nbool below_zero(std::vector<long> operations) {\n",
  "tests": "}\nint main() {\n    auto candidate = below_zero;\n    assert(candidate((std::vector<long>())) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-3, (long)1, (long)2, (long)-3}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)-4, (long)5, (long)6}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)-1, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-5}))) == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)2, (long)-2, (long)5, (long)-5, (long)4, (long)-4}))) == (true));\n}\n",
  "completions": [
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (s.empty()) {\n                s.push(i);\n            } else {\n                s.pop();\n                s.push(i);\n            }\n        } else {\n            s.push(i);\n        }\n    }\n    return s.empty();",
    "    long sum = 0;\n    for (auto op : operations) {\n        sum += op;\n    }\n    return sum < 0;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() < 0) {\n                return true;\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::vector<long> balance(operations.size());\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] += balance[i - 1];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        if (balance[i] < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (!s.empty()) {\n                s.pop();\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(-op);\n        } else {\n            s.push(op);\n        }\n    }\n    while (!s.empty()) {\n        if (s.top() < 0) {\n            return true;\n        }\n        s.pop();\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty()) {\n                if (s.top() < 0) {\n                    return true;\n                }\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    long balance = 0;\n    for (auto op : operations) {\n        if (op < 0) {\n            balance += op;\n        } else {\n            balance -= op;\n        }\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::vector<long> balance = operations;\n    for (int i = 0; i < operations.size(); ++i) {\n        if (balance[i] < 0) {\n            balance[i] = 0;\n        }\n    }\n    return balance.back() < 0;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        }\n    }\n    return false;",
    "    std::vector<long> balance(operations.size());\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] += balance[i - 1];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        if (balance[i] < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= 0) {\n                return true;\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::vector<long> balance = operations;\n    for (int i = 0; i < operations.size(); i++) {\n        balance[i] = balance[i] + operations[i];\n    }\n    for (int i = 0; i < balance.size(); i++) {\n        if (balance[i] < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.push(s.top() - op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    if (operations.empty()) return false;\n    long balance = 0;\n    for (auto op : operations) {\n        if (op < 0) {\n            balance += op;\n        } else {\n            balance -= op;\n        }\n        if (balance < 0) return true;\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (!s.empty() && s.top() < 0) {\n                return true;\n            }\n            s.push(i);\n        } else {\n            s.push(i);\n        }\n    }\n    return false;",
    "    std::vector<long> balance = operations;\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = balance[i] + operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        if (balance[i] < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(-op);\n        } else {\n            s.push(op);\n        }\n    }\n    while (!s.empty()) {\n        if (s.top() < 0) {\n            return true;\n        }\n        s.pop();\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                return true;\n            }\n            s.push(-op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i > 0) {\n            s.push(i);\n        } else if (i < 0) {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (!s.empty()) {\n                s.pop();\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty()) {\n                if (s.top() < 0) {\n                    return true;\n                }\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (s.empty()) {\n                s.push(i);\n            } else {\n                s.pop();\n                s.push(i);\n            }\n        } else {\n            s.push(i);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= 0) {\n                return true;\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    long balance = 0;\n    for (auto op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    long balance = 0;\n    for (auto op : operations) {\n        if (op < 0) {\n            balance += op;\n        } else {\n            balance -= op;\n        }\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                return true;\n            }\n            s.push(-op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (!s.empty()) {\n                if (s.top() >= i) {\n                    s.pop();\n                } else {\n                    return true;\n                }\n            } else {\n                s.push(i);\n            }\n        } else {\n            s.push(i);\n        }\n    }\n    return false;",
    "    std::vector<long> balance(operations.size());\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] += balance[i + 1];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        if (balance[i] < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op > 0) {\n            s.push(op);\n        } else if (op < 0) {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.push(s.top() - op);\n            }\n        } else {\n            if (s.empty()) {\n                return false;\n            } else {\n                s.push(op);\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        } else {\n            s.push(i);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    long balance = 0;\n    for (auto op : operations) {\n        if (op < 0) {\n            balance += op;\n        } else {\n            balance -= op;\n        }\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        } else {\n            s.push(i);\n        }\n    }\n    return false;",
    "    long sum = 0;\n    for (auto op : operations) {\n        sum += op;\n    }\n    return sum < 0;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op > 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return true;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return true;\n            } else {\n                s.pop();\n            }\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return true;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() < 0) {\n                return true;\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() < -op) {\n                return true;\n            }\n            s.push(-op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= op) {\n                s.pop();\n            } else {\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(-op);\n        } else {\n            s.push(op);\n        }\n    }\n    while (!s.empty()) {\n        if (s.top() < 0) {\n            return true;\n        }\n        s.pop();\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(-op);\n        } else {\n            s.push(op);\n        }\n    }\n    while (!s.empty()) {\n        if (s.top() < 0) {\n            return true;\n        }\n        s.pop();\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op > 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        }\n    }\n    return false;",
    "    if (operations.size() == 0) return false;\n    std::vector<long> balance(operations.size(), 0);\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        if (balance[i] < 0) {\n            return true;\n        }\n        balance[i] += balance[i + 1];\n    }\n    return false;",
    "    if (operations.size() == 0) return false;\n    std::vector<long> balance(operations.size());\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        if (balance[i] < 0) {\n            return true;\n        }\n        balance[i] += balance[i];\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op > 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return true;\n            } else {\n                s.pop();\n            }\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty()) {\n                if (s.top() >= op) {\n                    s.pop();\n                } else {\n                    return true;\n                }\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty()) {\n                if (s.top() > op) {\n                    s.pop();\n                } else {\n                    return true;\n                }\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    long balance = 0;\n    for (auto op : operations) {\n        if (op < 0) {\n            balance += op;\n        } else {\n            balance -= op;\n        }\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.push(s.top() - op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::vector<long> balance(operations.size());\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        if (balance[i] < 0) {\n            return true;\n        }\n        balance[i] += balance[i];\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.push(s.top() - op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    long balance = 0;\n    for (auto op : operations) {\n        if (op < 0) {\n            balance += op;\n        } else {\n            balance -= op;\n        }\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(-op);\n        } else {\n            s.push(op);\n        }\n    }\n    while (!s.empty()) {\n        if (s.top() < 0) {\n            return true;\n        }\n        s.pop();\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    if (operations.size() == 0) return false;\n    std::vector<long> balance(operations.size());\n    std::vector<long>::iterator it = balance.begin();\n    for (std::vector<long>::iterator it = operations.begin(); it != operations.end(); it++) {\n        *it += *it < 0 ? -1 : 1;\n        balance[it - operations.begin()] = *it;\n    }\n    for (it = balance.begin(); it != balance.end(); it++) {\n        if (*it < 0) return true;\n    }\n    return false;",
    "    long sum = 0;\n    for (auto op : operations) {\n        sum += op;\n    }\n    return sum < 0;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (s.empty()) {\n                s.push(i);\n            } else {\n                s.pop();\n                s.push(i);\n            }\n        } else {\n            s.push(i);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty()) {\n                if (s.top() >= op) {\n                    s.pop();\n                } else {\n                    return true;\n                }\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    long sum = 0;\n    for (auto op : operations) {\n        sum += op;\n    }\n    return sum < 0;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.push(s.top() - op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return true;",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (s.empty()) {\n                s.push(i);\n            } else {\n                s.push(s.top() + i);\n            }\n        } else {\n            s.push(i);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= 0) {\n                return true;\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() < 0) {\n                return true;\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    if (operations.size() == 0) return false;\n    long balance = 0;\n    for (int i = 0; i < operations.size(); ++i) {\n        if (operations[i] < 0) {\n            balance += operations[i];\n        } else {\n            balance -= operations[i];\n        }\n        if (balance < 0) return true;\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            long tmp = s.top();\n            s.pop();\n            s.push(tmp - op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::vector<long> balance(operations.size());\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] += balance[i] < 0 ? 0 : balance[i];\n    }\n    return balance[0] < 0;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(-op);\n        } else {\n            s.push(op);\n        }\n    }\n    while (!s.empty()) {\n        if (s.top() < 0) {\n            return true;\n        }\n        s.pop();\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= op) {\n                s.pop();\n            } else {\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty()) {\n                if (s.top() >= op) {\n                    s.pop();\n                } else {\n                    return true;\n                }\n            } else {\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    long balance = 0;\n    for (auto op : operations) {\n        balance += op;\n    }\n    return balance < 0;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= op) {\n                return true;\n            }\n            s.push(op);\n        } else {\n            s.pop();\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= op) {\n                return true;\n            }\n            s.push(op);\n        } else {\n            s.pop();\n        }\n    }\n    return false;",
    "    if (operations.size() == 0) return false;\n    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (s.empty()) return true;\n            s.pop();\n        } else {\n            s.push(i);\n        }\n    }\n    return false;",
    "    if (operations.empty()) return false;\n    std::vector<long> balance(operations.size(), 0);\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i] > 0 ? operations[i] : 0;\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] += balance[i - 1];\n    }\n    for (int i = operations.size() - 1; i >= 0; --i) {\n        if (balance[i] < 0) return true;\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= -op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (!s.empty() && s.top() < 0) {\n                return true;\n            }\n            s.push(i);\n        } else {\n            s.push(i);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() < 0) {\n                return true;\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::vector<long> balance(operations.size());\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] += balance[i + 1];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        if (balance[i] < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= 0) {\n                return true;\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i > 0) {\n            s.push(i);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return true;",
    "    std::vector<long> balance(operations.size());\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] += balance[i] < 0 ? 0 : -balance[i];\n    }\n    return balance[0] < 0;",
    "    std::vector<long> balance(operations.size());\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] += balance[i] < 0 ? 0 : balance[i];\n    }\n    return balance[balance.size() - 1] < 0;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (!s.empty() && s.top() >= 0) {\n                return true;\n            }\n            s.push(i);\n        } else {\n            s.push(i);\n        }\n    }\n    return false;",
    "    long balance = 0;\n    for (auto op : operations) {\n        balance += op;\n        if (balance < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return true;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= op) {\n                return true;\n            }\n            s.push(op);\n        } else {\n            s.pop();\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(-op);\n        } else {\n            s.push(op);\n        }\n    }\n    while (!s.empty()) {\n        if (s.top() < 0) {\n            return true;\n        }\n        s.pop();\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    if (operations.empty()) return false;\n    std::vector<long> balance(operations.size(), 0);\n    for (int i = 0; i < operations.size(); ++i) {\n        balance[i] = operations[i];\n    }\n    for (int i = 0; i < operations.size(); ++i) {\n        if (balance[i] < 0) {\n            return true;\n        }\n        balance[i] += balance[i] < 0 ? -balance[i] : 0;\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.push(s.top() - op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::vector<long>::iterator it = operations.begin();\n    while (it != operations.end()) {\n        if (*it < 0) {\n            return true;\n        }\n        it++;\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (s.empty()) {\n                s.push(i);\n            } else {\n                s.push(s.top() - i);\n            }\n        } else {\n            s.push(i);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(-op);\n        } else {\n            s.push(op);\n        }\n    }\n    while (!s.empty()) {\n        if (s.top() < 0) {\n            return true;\n        }\n        s.pop();\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty() && s.top() >= op) {\n                s.pop();\n            } else {\n                return true;\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    if (operations.size() == 0) return false;\n    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (s.empty()) return true;\n            s.pop();\n        } else {\n            s.push(i);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        }\n    }\n    return false;",
    "    std::vector<long> balance(operations.size());\n    std::vector<long>::iterator it = balance.begin();\n    for (std::vector<long>::iterator it = operations.begin(); it != operations.end(); ++it) {\n        if (*it < 0) {\n            balance[it - operations.begin()] = 0;\n        } else {\n            balance[it - operations.begin()] += *it;\n        }\n    }\n    for (std::vector<long>::iterator it = balance.begin(); it != balance.end(); ++it) {\n        if (*it < 0) {\n            return true;\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty()) {\n                if (s.top() >= op) {\n                    s.pop();\n                } else {\n                    return true;\n                }\n            } else {\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return true;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op > 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            long tmp = s.top();\n            s.pop();\n            if (tmp > 0) {\n                s.push(tmp);\n            } else {\n                return true;\n            }\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty()) {\n                if (s.top() > op) {\n                    s.pop();\n                } else {\n                    return true;\n                }\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty()) {\n                if (s.top() < 0) {\n                    return true;\n                }\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.push(s.top() - op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    if (operations.size() == 0) {\n        return false;\n    }\n    long sum = 0;\n    for (auto op : operations) {\n        sum += op;\n    }\n    return sum < 0;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.push(s.top() - op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return true;\n            }\n            s.pop();\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return true;",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (s.empty()) {\n                s.push(i);\n            } else {\n                s.pop();\n                s.push(i);\n            }\n        } else {\n            s.push(i);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto i : operations) {\n        if (i < 0) {\n            if (!s.empty() && s.top() < 0) {\n                return true;\n            }\n            s.push(i);\n        } else {\n            s.push(i);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty()) {\n                if (s.top() < 0) {\n                    return true;\n                }\n                s.pop();\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            s.push(op);\n        } else {\n            if (s.empty()) {\n                return false;\n            }\n            s.pop();\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (s.empty()) {\n                s.push(op);\n            } else {\n                s.pop();\n                s.push(op);\n            }\n        } else {\n            s.push(op);\n        }\n    }\n    return s.empty();",
    "    std::stack<long> s;\n    for (auto op : operations) {\n        if (op < 0) {\n            if (!s.empty()) {\n                if (s.top() >= op) {\n                    s.pop();\n                } else {\n                    return true;\n                }\n            }\n            s.push(op);\n        } else {\n            s.push(op);\n        }\n    }\n    return false;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}