{
  "name": "HumanEval_161_solve",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n",
  "tests": "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpys00m0q2: /tmp/tmpys00m0q2.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res += toupper(s[i]);\n            else\n                res += tolower(s[i]);\n        } else\n            res += s[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmps64knxex: /tmp/tmps64knxex.cpp:31: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\n                res[i] = toupper(s[i]);\n            else\n                res[i] = tolower(s[i]);\n        }\n    }\n    if(res.empty())\n        res = \"\";\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpu1371ckd: /tmp/tmpu1371ckd.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for(int i=0;i<s.size();i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmp6ccn_p5z: /tmp/tmp6ccn_p5z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpv1qmdgbp: /tmp/tmpv1qmdgbp.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpy6mbjm9l: /tmp/tmpy6mbjm9l.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpl8sj_zpf: /tmp/tmpl8sj_zpf.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpo27rv2hs: /tmp/tmpo27rv2hs.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result += static_cast<char>(toupper(s[i]));\n            } else {\n                result += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpjty2qx4g: /tmp/tmpjty2qx4g.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpvixary0a: /tmp/tmpvixary0a.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for(int i=0;i<s.size();i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmp6ccn_p5z: /tmp/tmp6ccn_p5z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res[i] = toupper(s[i]);\n            } else {\n                res[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmp_rn9b5jv: /tmp/tmp_rn9b5jv.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res[i] = toupper(s[i]);\n            else\n                res[i] = tolower(s[i]);\n        }\n    }\n    if (res.empty())\n        res = \" \";\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpmca71awk: /tmp/tmpmca71awk.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpd_q2000a: /tmp/tmpd_q2000a.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res[i] = toupper(s[i]);\n            } else {\n                res[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmp_rn9b5jv: /tmp/tmp_rn9b5jv.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result[i] = toupper(s[i]);\n            } else {\n                result[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (result.size() == 0) {\n        result = \"\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpqxlf4mb4: /tmp/tmpqxlf4mb4.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpteu0ohf1: /tmp/tmpteu0ohf1.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpteu0ohf1: /tmp/tmpteu0ohf1.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmp57m9n5dr: /tmp/tmp57m9n5dr.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpy6mbjm9l: /tmp/tmpy6mbjm9l.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmprkv2q70p: /tmp/tmprkv2q70p.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpty9f7eru: /tmp/tmpty9f7eru.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = s;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result[i] = toupper(s[i]);\n            } else {\n                result[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (result.empty()) {\n        result = \"\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmps1o9ksv_: /tmp/tmps1o9ksv_.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res[i] = toupper(s[i]);\n            } else {\n                res[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmp_rn9b5jv: /tmp/tmp_rn9b5jv.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res += toupper(s[i]);\n            else\n                res += tolower(s[i]);\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpr67ieypq: /tmp/tmpr67ieypq.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpv06hufau: /tmp/tmpv06hufau.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp0p_eht97: /tmp/tmp0p_eht97.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpa9dpabh_: /tmp/tmpa9dpabh_.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmphuuj6zla: /tmp/tmphuuj6zla.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp0p_eht97: /tmp/tmp0p_eht97.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpteu0ohf1: /tmp/tmpteu0ohf1.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res[i] = toupper(s[i]);\n            else\n                res[i] = tolower(s[i]);\n        }\n    }\n    if (res.empty())\n        res = \" \";\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpmca71awk: /tmp/tmpmca71awk.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res += toupper(s[i]);\n            else\n                res += tolower(s[i]);\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpr67ieypq: /tmp/tmpr67ieypq.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res[i] = toupper(s[i]);\n            } else {\n                res[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpytt858by: /tmp/tmpytt858by.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res += static_cast<char>(toupper(s[i]));\n            else\n                res += static_cast<char>(tolower(s[i]));\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp79k0ad4q: /tmp/tmp79k0ad4q.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpepvvgt9o: /tmp/tmpepvvgt9o.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp3x7_k14_: /tmp/tmp3x7_k14_.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result[i] = toupper(s[i]);\n            } else {\n                result[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (result.empty()) {\n        return result;\n    }\n    return result.substr(0, 1) + result.substr(1, result.size() - 1);\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpngc_6hwv: /tmp/tmpngc_6hwv.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp33gkorqi: /tmp/tmp33gkorqi.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            }\n            else {\n                res.push_back(tolower(s[i]));\n            }\n        }\n        else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp5pah_9yl: /tmp/tmp5pah_9yl.cpp:35: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res += static_cast<char>(toupper(s[i]));\n            else\n                res += static_cast<char>(tolower(s[i]));\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmprcvrm6lz: /tmp/tmprcvrm6lz.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n            res.push_back(s[i]-'a'+'A');\n        }else if(s[i]>='A' && s[i]<='Z'){\n            res.push_back(s[i]-'A'+'a');\n        }else{\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmps612z1q2: /tmp/tmps612z1q2.cpp:31: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp7xa8si52: /tmp/tmp7xa8si52.cpp:36: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res += toupper(s[i]);\n            else\n                res += tolower(s[i]);\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp1uzp11ow: /tmp/tmp1uzp11ow.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp0p_eht97: /tmp/tmp0p_eht97.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpo27rv2hs: /tmp/tmpo27rv2hs.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpl8sj_zpf: /tmp/tmpl8sj_zpf.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp7xa8si52: /tmp/tmp7xa8si52.cpp:36: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpl8sj_zpf: /tmp/tmpl8sj_zpf.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result += static_cast<char>(toupper(s[i]));\n            } else {\n                result += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpkwaj4yqs: /tmp/tmpkwaj4yqs.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp33gkorqi: /tmp/tmp33gkorqi.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n            res.push_back(s[i]-'a'+'A');\n        }else{\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpa1pavyp3: /tmp/tmpa1pavyp3.cpp:28: int main(): Assertion `candidate((\"AsDf\")) == (\"aSdF\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result[i] = toupper(s[i]);\n            } else {\n                result[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (result.empty()) {\n        return \"\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpsxk6ybc0: /tmp/tmpsxk6ybc0.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpo27rv2hs: /tmp/tmpo27rv2hs.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result[i] = toupper(s[i]);\n            } else {\n                result[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (result.empty()) {\n        return \"\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpsxk6ybc0: /tmp/tmpsxk6ybc0.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result += static_cast<char>(toupper(s[i]));\n            } else {\n                result += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpkwaj4yqs: /tmp/tmpkwaj4yqs.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpc0p6niad: /tmp/tmpc0p6niad.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpys00m0q2: /tmp/tmpys00m0q2.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpa9dpabh_: /tmp/tmpa9dpabh_.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp0p_eht97: /tmp/tmp0p_eht97.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n            res.push_back(s[i]-'a'+'A');\n        }else if(s[i]>='A' && s[i]<='Z'){\n            res.push_back(s[i]-'A'+'a');\n        }else{\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmps612z1q2: /tmp/tmps612z1q2.cpp:31: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpa9dpabh_: /tmp/tmpa9dpabh_.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result += static_cast<char>(toupper(s[i]));\n            } else {\n                result += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpkwaj4yqs: /tmp/tmpkwaj4yqs.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpys00m0q2: /tmp/tmpys00m0q2.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpy6mbjm9l: /tmp/tmpy6mbjm9l.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpa9dpabh_: /tmp/tmpa9dpabh_.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmphuuj6zla: /tmp/tmphuuj6zla.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for(int i=0; i<s.size(); i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                result.push_back(toupper(s[i]));\n            else\n                result.push_back(tolower(s[i]));\n        }\n        else\n            result.push_back(s[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp7mz3gavi: /tmp/tmp7mz3gavi.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpa9dpabh_: /tmp/tmpa9dpabh_.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpo27rv2hs: /tmp/tmpo27rv2hs.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\n                res += toupper(s[i]);\n            else\n                res += tolower(s[i]);\n        }\n        else\n            res += s[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp639g4q_n: /tmp/tmp639g4q_n.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res += toupper(s[i]);\n            else\n                res += tolower(s[i]);\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpr67ieypq: /tmp/tmpr67ieypq.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for(int i=0; i<s.length(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmph4s7axsh: /tmp/tmph4s7axsh.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\n                res += toupper(s[i]);\n            else\n                res += tolower(s[i]);\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpbmnjgu03: /tmp/tmpbmnjgu03.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result[i] = toupper(s[i]);\n            } else {\n                result[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (result.empty()) {\n        result = \"\";\n        for (int i = 0; i < s.size(); i++) {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpmryysw19: /tmp/tmpmryysw19.cpp:37: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res[i] = toupper(s[i]);\n            } else {\n                res[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n        for (int i = 0; i < s.size(); i++) {\n            if (isalpha(s[i])) {\n                res += s[i];\n            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpap8dimgx: /tmp/tmpap8dimgx.cpp:39: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpl8sj_zpf: /tmp/tmpl8sj_zpf.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res[i] = toupper(s[i]);\n            } else {\n                res[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmp_rn9b5jv: /tmp/tmp_rn9b5jv.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpy6mbjm9l: /tmp/tmpy6mbjm9l.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res[i] = toupper(s[i]);\n            } else {\n                res[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n        for (int i = 0; i < s.size(); ++i) {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpsplipyfk: /tmp/tmpsplipyfk.cpp:37: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpa9dpabh_: /tmp/tmpa9dpabh_.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n            res+=s[i]-'a'+'A';\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n            res+=s[i]-'A'+'a';\n        }\n        else{\n            res+=s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpnpx3wasv: /tmp/tmpnpx3wasv.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpa9dpabh_: /tmp/tmpa9dpabh_.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpty9f7eru: /tmp/tmpty9f7eru.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n        for (int i = 0; i < s.size(); i++) {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpx4txrdph: /tmp/tmpx4txrdph.cpp:39: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpteu0ohf1: /tmp/tmpteu0ohf1.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res[i] = toupper(s[i]);\n            } else {\n                res[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (isalpha(s[i])) {\n                res += s[i];\n            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpz9abu54k: /tmp/tmpz9abu54k.cpp:39: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmphlzc98ix: /tmp/tmphlzc98ix.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\";\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpd783oo0_: /tmp/tmpd783oo0_.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    if (result.empty()) {\n        result = \"\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpyjywj12m: /tmp/tmpyjywj12m.cpp:36: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp0p_eht97: /tmp/tmp0p_eht97.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpo27rv2hs: /tmp/tmpo27rv2hs.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res += static_cast<char>(toupper(s[i]));\n            else\n                res += static_cast<char>(tolower(s[i]));\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp79k0ad4q: /tmp/tmp79k0ad4q.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpys00m0q2: /tmp/tmpys00m0q2.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmphuuj6zla: /tmp/tmphuuj6zla.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpue02j6yq: /tmp/tmpue02j6yq.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmp36jq86a_: /tmp/tmp36jq86a_.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp0p_eht97: /tmp/tmp0p_eht97.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result += static_cast<char>(toupper(s[i]));\n            } else {\n                result += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpkwaj4yqs: /tmp/tmpkwaj4yqs.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmphuuj6zla: /tmp/tmphuuj6zla.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmphuuj6zla: /tmp/tmphuuj6zla.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmphuuj6zla: /tmp/tmphuuj6zla.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmphuuj6zla: /tmp/tmphuuj6zla.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpc0p6niad: /tmp/tmpc0p6niad.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\n                res += toupper(s[i]);\n            else\n                res += tolower(s[i]);\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpbmnjgu03: /tmp/tmpbmnjgu03.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpys00m0q2: /tmp/tmpys00m0q2.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res[i] = toupper(s[i]);\n            else\n                res[i] = tolower(s[i]);\n        }\n    }\n    if (res.empty())\n        res = \" \";\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpj0j52e1u: /tmp/tmpj0j52e1u.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpty9f7eru: /tmp/tmpty9f7eru.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpvq0rjjxj: /tmp/tmpvq0rjjxj.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for(int i=0;i<s.size();i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmp6ccn_p5z: /tmp/tmp6ccn_p5z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for(int i=0; i<s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpqbxa1s5n: /tmp/tmpqbxa1s5n.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res += static_cast<char>(toupper(s[i]));\n            else\n                res += static_cast<char>(tolower(s[i]));\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp79k0ad4q: /tmp/tmp79k0ad4q.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpc0p6niad: /tmp/tmpc0p6niad.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmp57m9n5dr: /tmp/tmp57m9n5dr.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpy6mbjm9l: /tmp/tmpy6mbjm9l.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = \"\";\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmprkv2q70p: /tmp/tmprkv2q70p.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpo27rv2hs: /tmp/tmpo27rv2hs.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmp9v0j99t4: /tmp/tmp9v0j99t4.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result += static_cast<char>(toupper(s[i]));\n            } else {\n                result += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpkwaj4yqs: /tmp/tmpkwaj4yqs.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res[i] = toupper(s[i]);\n            } else {\n                res[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n        for (int i = 0; i < s.length(); i++) {\n            if (isalpha(s[i])) {\n                res += s[i];\n            }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpz9abu54k: /tmp/tmpz9abu54k.cpp:39: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmp57m9n5dr: /tmp/tmp57m9n5dr.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++) {\n        if(s[i]>='a' && s[i]<='z') {\n            res.push_back(s[i]-'a'+'A');\n        } else if(s[i]>='A' && s[i]<='Z') {\n            res.push_back(s[i]-'A'+'a');\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpjlicygl8: /tmp/tmpjlicygl8.cpp:31: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result[i] = toupper(s[i]);\n            } else {\n                result[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (result.empty()) {\n        result = \"\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpyp6f4ysa: /tmp/tmpyp6f4ysa.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp0p_eht97: /tmp/tmp0p_eht97.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp3x7_k14_: /tmp/tmp3x7_k14_.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp0p_eht97: /tmp/tmp0p_eht97.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i])){\n                res.push_back(toupper(s[i]));\n            }else{\n                res.push_back(tolower(s[i]));\n            }\n        }else{\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmplfo_h310: /tmp/tmplfo_h310.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmp57m9n5dr: /tmp/tmp57m9n5dr.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result.push_back(toupper(s[i]));\n            } else {\n                result.push_back(tolower(s[i]));\n            }\n        } else {\n            result.push_back(s[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpl8sj_zpf: /tmp/tmpl8sj_zpf.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = \"\";\n    for(int i=0;i<s.size();i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                result += toupper(s[i]);\n            } else {\n                result += tolower(s[i]);\n            }\n        } else {\n            result += s[i];\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmp_1qr4hi1: /tmp/tmp_1qr4hi1.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                result[i] = toupper(s[i]);\n            } else {\n                result[i] = tolower(s[i]);\n            }\n        }\n    }\n    if(result.length() == 0) {\n        result = \"\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmp0m0raxgm: /tmp/tmp0m0raxgm.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string result = s;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                result[i] = toupper(s[i]);\n            } else {\n                result[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (result.length() == 0) {\n        result = \"\";\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpacb5_33o: /tmp/tmpacb5_33o.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res[i] = toupper(s[i]);\n            } else {\n                res[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (res.empty()) {\n        res = \"\";\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpre6udwzt: /tmp/tmpre6udwzt.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmph7fx8aqn: /tmp/tmph7fx8aqn.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += toupper(s[i]);\n            } else {\n                res += tolower(s[i]);\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptx89f77z: /tmp/tmptx89f77z.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpa9dpabh_: /tmp/tmpa9dpabh_.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmptv4vnt8f: /tmp/tmptv4vnt8f.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            if(islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmpa9dpabh_: /tmp/tmpa9dpabh_.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res = s;\n    for (int i = 0; i < s.length(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res[i] = toupper(s[i]);\n            } else {\n                res[i] = tolower(s[i]);\n            }\n        }\n    }\n    if (res.empty()) {\n        res = \" \";\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292669,
      "stdout": "",
      "stderr": "tmpgys8c4vk: /tmp/tmpgys8c4vk.cpp:34: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            if (islower(s[i]))\n                res.push_back(toupper(s[i]));\n            else\n                res.push_back(tolower(s[i]));\n        }\n        else\n            res.push_back(s[i]);\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292670,
      "stdout": "",
      "stderr": "tmpj_an7h1m: /tmp/tmpj_an7h1m.cpp:32: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            if(islower(s[i])) {\n                res.push_back(toupper(s[i]));\n            } else {\n                res.push_back(tolower(s[i]));\n            }\n        } else {\n            res.push_back(s[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292665,
      "stdout": "",
      "stderr": "tmpvixary0a: /tmp/tmpvixary0a.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z')\n            res+=s[i]-'a'+'A';\n        else\n            res+=s[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292670,
      "stdout": "",
      "stderr": "tmp4kirwltu: /tmp/tmp4kirwltu.cpp:27: int main(): Assertion `candidate((\"AsDf\")) == (\"aSdF\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string contains no letters, reverse the string.\n// The function should return the resulted string.\n// Examples\n// >>> solve(\"1234\") \n// \"4321\"\n// >>> solve(\"ab\") \n// \"AB\"\n// >>> solve(\"#a@C\") \n// \"#A@c\"\nstd::string solve(std::string s) {\n    std::string res;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            if (islower(s[i])) {\n                res += static_cast<char>(toupper(s[i]));\n            } else {\n                res += static_cast<char>(tolower(s[i]));\n            }\n        } else {\n            res += s[i];\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n",
      "timestamp": 1664292667,
      "stdout": "",
      "stderr": "tmp0p_eht97: /tmp/tmp0p_eht97.cpp:33: int main(): Assertion `candidate((\"1234\")) == (\"4321\")' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}