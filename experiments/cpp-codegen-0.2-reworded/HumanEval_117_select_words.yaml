name: HumanEval_117_select_words
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural\
  \ number n, you have been tasked to implement \n// a function that returns a vector\
  \ of all words from string s that contain exactly \n// n consonants, in order these\
  \ words appear in the string s.\n// If the string s is empty then the function should\
  \ return an empty vector.\n// Note: you may assume the input string contains only\
  \ letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\"\
  , 4)\n// [\"little\"]\n// >>> select_words(\"Mary had a little lamb\", 3)\n// [\"\
  Mary\", \"lamb\"]\n// >>> select_words(\"simple white space\", 2)\n// []\n// >>>\
  \ select_words(\"Hello world\", 4)\n// [\"world\"]\n// >>> select_words(\"Uncle\
  \ sam\", 3)\n// [\"Uncle\"]\nstd::vector<std::string> select_words(std::string s,\
  \ long n) {\n"
tests: "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
  Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
  })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
  Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
  ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
  ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
  Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n \
  \   assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
  a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
  c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
completions: ["    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (auto c : s) {\n        if (c == ' ') {\n    \
    \        if (!word.empty()) {\n                res.push_back(word);\n        \
    \        word.clear();\n            }\n        } else {\n            word += c;\n\
    \        }\n    }\n    if (!word.empty()) res.push_back(word);\n    if (res.size()\
    \ < n) return res;\n    std::sort(res.begin(), res.end());\n    std::vector<std::string>\
    \ res2;\n    for (auto i = 0; i < n; ++i) {\n        res2.push_back(res[i]);\n\
    \    }\n    return res2;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] == ' ') {\n            if (word.size() == n) {\n           \
    \     res.push_back(word);\n                word.clear();\n            }\n   \
    \     } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    if (s.empty()) return result;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                result.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (!word.empty()) {\n        result.push_back(word);\n    }\n    return\
    \ result;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string str = s;\n    std::string word;\n    std::string::size_type\
    \ pos = 0;\n    while (pos < str.size()) {\n        if (str[pos] == ' ') {\n \
    \           pos++;\n            continue;\n        }\n        word = \"\";\n \
    \       while (pos < str.size() && str[pos] != ' ') {\n            word += str[pos];\n\
    \            pos++;\n        }\n        if (word.size() == n) {\n            res.push_back(word);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> words;\n  \
    \  if (s.empty()) return words;\n    std::string word;\n    for (int i = 0; i\
    \ < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                words.push_back(word);\n                word.clear();\n \
    \           }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (!word.empty()) {\n        words.push_back(word);\n    }\n    std::vector<std::string>\
    \ ans;\n    for (int i = 0; i < words.size(); i++) {\n        std::string temp\
    \ = words[i];\n        int count = 0;\n        for (int j = 0; j < temp.size();\
    \ j++) {\n            if (temp[j] == ' ') {\n                count++;\n      \
    \          if (count == n) {\n                    ans.push_back(temp.substr(0,\
    \ j));\n                    break;\n                }\n            }\n       \
    \ }\n    }\n    return ans;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (!word.empty()) {\n              \
    \  res.push_back(word);\n                word.clear();\n            }\n      \
    \  } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ res.push_back(word);\n    std::sort(res.begin(), res.end());\n    std::vector<std::string>::iterator\
    \ it = res.begin();\n    while (it != res.end() && n > 0) {\n        if (it->size()\
    \ == n) {\n            n--;\n        } else {\n            it++;\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> words;\n    if (s.empty())\
    \ return words;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i)\
    \ {\n        if (s[i] == ' ') {\n            if (!word.empty()) {\n          \
    \      words.push_back(word);\n                word.clear();\n            }\n\
    \        } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ words.push_back(word);\n    std::sort(words.begin(), words.end());\n    words.erase(std::unique(words.begin(),\
    \ words.end()), words.end());\n    std::vector<std::string> ans;\n    for (int\
    \ i = 0; i < words.size(); ++i) {\n        if (words[i].size() == n) ans.push_back(words[i]);\n\
    \    }\n    return ans;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string cur = \"\";\n    for (int i = 0; i < s.size();\
    \ ++i) {\n        if (s[i] == ' ') {\n            if (cur.size() == n) {\n   \
    \             res.push_back(cur);\n                cur = \"\";\n            }\n\
    \        } else {\n            cur += s[i];\n        }\n    }\n    if (cur.size()\
    \ == n) {\n        res.push_back(cur);\n    }\n    return res;", "    std::vector<std::string>\
    \ ans;\n    if (s.empty()) return ans;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                ans.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word.push_back(s[i]);\n        }\n\
    \    }\n    if (word.size() == n) {\n        ans.push_back(word);\n    }\n   \
    \ return ans;", "    std::vector<std::string> ans;\n    if (s.empty()) return\
    \ ans;\n    std::string cur;\n    for (int i = 0; i < s.size(); ++i) {\n     \
    \   if (s[i] == ' ') {\n            if (!cur.empty()) {\n                ans.push_back(cur);\n\
    \                cur.clear();\n            }\n        } else {\n            cur.push_back(s[i]);\n\
    \        }\n    }\n    if (!cur.empty()) ans.push_back(cur);\n    if (ans.size()\
    \ == n) return ans;\n    std::vector<std::string> res;\n    for (int i = 0; i\
    \ < ans.size(); ++i) {\n        std::string cur = ans[i];\n        for (int j\
    \ = 0; j < cur.size(); ++j) {\n            if (cur[j] == ' ') {\n            \
    \    std::string tmp = cur.substr(j + 1);\n                if (tmp.size() == n)\
    \ res.push_back(cur.substr(0, j));\n            }\n        }\n    }\n    return\
    \ res;", "    std::vector<std::string> ans;\n    if (s.empty()) return ans;\n\
    \    std::string word;\n    std::stringstream ss(s);\n    while (ss >> word) {\n\
    \        if (word.size() == n) ans.push_back(word);\n    }\n    return ans;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ word;\n    std::stringstream ss(s);\n    while (ss >> word) {\n        if (word.size()\
    \ == n) {\n            res.push_back(word);\n        }\n    }\n    return res;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ word;\n    std::stringstream ss(s);\n    while (ss >> word) {\n        if (word.size()\
    \ == n) {\n            res.push_back(word);\n        }\n    }\n    return res;",
  "    std::vector<std::string> words;\n    if (s.empty()) return words;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n\
    \            if (!word.empty()) {\n                words.push_back(word);\n  \
    \              word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) words.push_back(word);\n\
    \    if (words.size() < n) return words;\n    std::sort(words.begin(), words.end());\n\
    \    std::vector<std::string> result;\n    for (int i = 0; i < words.size(); ++i)\
    \ {\n        if (words[i].size() == n) result.push_back(words[i]);\n    }\n  \
    \  return result;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string word;\n    std::stringstream ss(s);\n    while (ss >>\
    \ word) {\n        if (word.size() == n) {\n            res.push_back(word);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> res;\n    if\
    \ (s.empty()) return res;\n    std::string word;\n    for (int i = 0; i < s.size();\
    \ ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty()) {\n     \
    \           res.push_back(word);\n                word.clear();\n            }\n\
    \        } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ {\n        res.push_back(word);\n    }\n    if (res.size() == n) return res;\n\
    \    std::vector<std::string> res2;\n    for (auto &str : res) {\n        std::stringstream\
    \ ss(str);\n        while (ss >> word) {\n            if (word.size() == n) {\n\
    \                res2.push_back(word);\n            }\n        }\n    }\n    return\
    \ res2;", "    std::vector<std::string> result;\n    if (s.empty()) return result;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                result.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        result.push_back(word);\n\
    \    }\n    return result;", "    std::vector<std::string> words;\n    if (s.empty())\
    \ return words;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i)\
    \ {\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') {\n        \
    \    if (word.size() == n) {\n                words.push_back(word);\n       \
    \         word.clear();\n            }\n            continue;\n        }\n   \
    \     word += s[i];\n    }\n    if (word.size() == n) {\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> words;\n    if (s.empty())\
    \ return words;\n    std::string word;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] == ' ') {\n            if (!word.empty()) {\n          \
    \      words.push_back(word);\n                word.clear();\n            }\n\
    \        } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ {\n        words.push_back(word);\n    }\n    std::vector<std::string> result;\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].size() ==\
    \ n) {\n            result.push_back(words[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> ans;\n    if (s.empty()) return ans;\n\
    \    std::string word;\n    std::stringstream ss(s);\n    while (ss >> word) {\n\
    \        if (word.size() == n) {\n            ans.push_back(word);\n        }\n\
    \    }\n    return ans;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (word.size() == n) {\n           \
    \     res.push_back(word);\n                word.clear();\n            }\n   \
    \     } else {\n            word.push_back(s[i]);\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) return words;\n    std::string word;\n    for (auto\
    \ c : s) {\n        if (c == ' ') {\n            if (word.size() == n) {\n   \
    \             words.push_back(word);\n                word.clear();\n        \
    \    }\n        } else {\n            word += c;\n        }\n    }\n    if (word.size()\
    \ == n) {\n        words.push_back(word);\n    }\n    return words;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                res.push_back(word);\n                word.clear();\n   \
    \         }\n        } else {\n            word += s[i];\n        }\n    }\n \
    \   if (!word.empty()) res.push_back(word);\n    return res;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) return words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                words.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        words.push_back(word);\n    }\n    return\
    \ words;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    std::stringstream ss(s);\n    while (ss >> word) {\n\
    \        if (word.size() == n) {\n            res.push_back(word);\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> ans;\n    if (s.empty())\
    \ return ans;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (word.size() == n) {\n           \
    \     ans.push_back(word);\n                word.clear();\n            }\n   \
    \     } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        ans.push_back(word);\n    }\n    return ans;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) return words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                words.push_back(word);\n                word.clear();\n \
    \           }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (!word.empty()) words.push_back(word);\n    std::sort(words.begin(), words.end());\n\
    \    std::vector<std::string> result;\n    for (int i = 0; i < words.size(); ++i)\
    \ {\n        if (words[i].size() == n) {\n            result.push_back(words[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> words;\n\
    \    if (s.empty()) return words;\n    std::string word;\n    for (int i = 0;\
    \ i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                words.push_back(word);\n                word.clear();\n \
    \           }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (!word.empty()) {\n        words.push_back(word);\n    }\n    std::sort(words.begin(),\
    \ words.end());\n    std::vector<std::string> result;\n    for (int i = 0; i <\
    \ words.size(); ++i) {\n        if (words[i].size() == n) {\n            result.push_back(words[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    if (s.empty()) return result;\n    std::string word;\n    for (int i = 0;\
    \ i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                result.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        result.push_back(word);\n    }\n    return\
    \ result;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    std::stringstream ss(s);\n    while (ss >> word) {\n\
    \        if (word.size() == n) {\n            res.push_back(word);\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> words;\n    if (s.empty())\
    \ return words;\n    std::string word;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] == ' ') {\n            if (!word.empty()) {\n          \
    \      words.push_back(word);\n                word.clear();\n            }\n\
    \        } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ {\n        words.push_back(word);\n        word.clear();\n    }\n    if (words.size()\
    \ == 0) return words;\n    std::sort(words.begin(), words.end());\n    std::vector<std::string>\
    \ res;\n    for (int i = 0; i < words.size(); i++) {\n        if (words[i].size()\
    \ == n) {\n            res.push_back(words[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<std::string> result;\n    if (s.empty()) return result;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                result.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        result.push_back(word);\n\
    \    }\n    return result;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (auto i = 0; i < s.size(); ++i)\
    \ {\n        if (s[i] == ' ') {\n            if (word.size() == n) {\n       \
    \         res.push_back(word);\n                word.clear();\n            }\n\
    \        } else {\n            word.push_back(s[i]);\n        }\n    }\n    if\
    \ (word.size() == n) {\n        res.push_back(word);\n    }\n    return res;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ word;\n    for (auto c : s) {\n        if (c == ' ') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n            }\n            word.clear();\n\
    \        } else {\n            word.push_back(c);\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string cur;\n    for (int i =\
    \ 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!cur.empty())\
    \ {\n                res.push_back(cur);\n                cur.clear();\n     \
    \       }\n        } else {\n            cur.push_back(s[i]);\n        }\n   \
    \ }\n    if (!cur.empty()) res.push_back(cur);\n    return res;", "    std::vector<std::string>\
    \ result;\n    if (s.empty()) return result;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                result.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        result.push_back(word);\n    }\n    return\
    \ result;", "    std::vector<std::string> ans;\n    if (s.empty()) return ans;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') continue;\n        if (i + 1 < s.size() && s[i] == s[i + 1]) {\n   \
    \         word.push_back(s[i]);\n            ++i;\n        }\n        else {\n\
    \            if (word.size() == n) {\n                ans.push_back(word);\n \
    \               word.clear();\n            }\n            else if (word.size()\
    \ > n) {\n                word.pop_back();\n            }\n            else {\n\
    \                word.push_back(s[i]);\n            }\n        }\n    }\n    if\
    \ (word.size() == n) ans.push_back(word);\n    return ans;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) return words;\n    std::string word;\n    for (auto\
    \ c : s) {\n        if (c == ' ') {\n            if (word.size() == n) {\n   \
    \             words.push_back(word);\n                word.clear();\n        \
    \    }\n        } else {\n            word.push_back(c);\n        }\n    }\n \
    \   if (word.size() == n) {\n        words.push_back(word);\n    }\n    return\
    \ words;", "    std::vector<std::string> result;\n    if (s.empty()) return result;\n\
    \    std::string word;\n    std::stringstream ss(s);\n    while (ss >> word) {\n\
    \        if (word.size() == n) {\n            result.push_back(word);\n      \
    \  }\n    }\n    return result;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] == ' ') {\n            if (!word.empty()) {\n              \
    \  res.push_back(word);\n                word.clear();\n            }\n      \
    \  } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ res.push_back(word);\n    std::sort(res.begin(), res.end());\n    res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n    return res;", "    std::vector<std::string> res;\n\
    \    if (s.empty()) return res;\n    std::string cur;\n    for (int i = 0; i <\
    \ s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!cur.empty())\
    \ {\n                res.push_back(cur);\n                cur.clear();\n     \
    \       }\n        } else {\n            cur.push_back(s[i]);\n        }\n   \
    \ }\n    if (!cur.empty()) res.push_back(cur);\n    std::sort(res.begin(), res.end());\n\
    \    std::vector<std::string>::iterator it = std::unique(res.begin(), res.end());\n\
    \    res.resize(std::distance(res.begin(), it));\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') continue;\n        if (n\
    \ == 0) {\n            res.push_back(word);\n            word.clear();\n     \
    \       continue;\n        }\n        word += s[i];\n        --n;\n        if\
    \ (n == 0) {\n            res.push_back(word);\n            word.clear();\n  \
    \          n = 0;\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        res.push_back(word);\n    }\n    return\
    \ res;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    std::stringstream ss(s);\n    while (ss >> word) {\n\
    \        if (word.size() == n) {\n            res.push_back(word);\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string str = s;\n    std::string word;\n    std::stringstream\
    \ ss(str);\n    while (ss >> word) {\n        if (word.size() == n) {\n      \
    \      res.push_back(word);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    if (s.empty()) return result;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                result.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (!word.empty()) result.push_back(word);\n    return result;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                res.push_back(word);\n                word.clear();\n   \
    \         }\n        } else {\n            word += s[i];\n        }\n    }\n \
    \   if (!word.empty()) res.push_back(word);\n    std::sort(res.begin(), res.end());\n\
    \    res.erase(std::unique(res.begin(), res.end()), res.end());\n    if (n ==\
    \ 0) return res;\n    std::vector<std::string>::iterator it = res.begin();\n \
    \   while (n > 0) {\n        if (*it == \"\") {\n            it = res.erase(it);\n\
    \            n--;\n        } else {\n            it++;\n            n--;\n   \
    \     }\n    }\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (!word.empty()) {\n              \
    \  res.push_back(word);\n                word.clear();\n            }\n      \
    \  } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ res.push_back(word);\n    std::sort(res.begin(), res.end());\n    std::vector<std::string>::iterator\
    \ it = std::unique(res.begin(), res.end());\n    res.resize(std::distance(res.begin(),\
    \ it));\n    return res;", "    std::vector<std::string> words;\n    if (s.empty())\
    \ return words;\n    std::string word;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] == ' ') {\n            if (word.size() == n) {\n       \
    \         words.push_back(word);\n                word.clear();\n            }\n\
    \        } else {\n            word.push_back(s[i]);\n        }\n    }\n    if\
    \ (word.size() == n) {\n        words.push_back(word);\n    }\n    return words;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') continue;\n\
    \        if (n == 0) {\n            res.push_back(word);\n            word.clear();\n\
    \            continue;\n        }\n        word += s[i];\n        --n;\n     \
    \   if (n == 0) {\n            res.push_back(word);\n            word.clear();\n\
    \            n = 0;\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                res.push_back(word);\n                word.clear();\n   \
    \         }\n        } else {\n            word += s[i];\n        }\n    }\n \
    \   if (!word.empty()) res.push_back(word);\n    if (res.size() == n) return res;\n\
    \    for (int i = 0; i < res.size(); ++i) {\n        std::string tmp = res[i];\n\
    \        res.erase(res.begin() + i);\n        std::vector<std::string> tmp_res\
    \ = select_words(tmp, n);\n        res.insert(res.begin() + i, tmp_res.begin(),\
    \ tmp_res.end());\n    }\n    return res;", "    std::vector<std::string> res;\n\
    \    if (s.empty()) return res;\n    std::string word;\n    for (int i = 0; i\
    \ < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word.push_back(s[i]);\n        }\n\
    \    }\n    if (word.size() == n) {\n        res.push_back(word);\n    }\n   \
    \ return res;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string word;\n    std::stringstream ss(s);\n    while (ss >>\
    \ word) {\n        if (word.size() == n) {\n            res.push_back(word);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> words;\n  \
    \  if (s.empty()) return words;\n    std::string word;\n    for (int i = 0; i\
    \ < s.size(); ++i) {\n        if (s[i] == ' ') continue;\n        word.push_back(s[i]);\n\
    \        if (word.size() == n) {\n            words.push_back(word);\n       \
    \     word.clear();\n        }\n    }\n    return words;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string str = s;\n    std::string\
    \ word;\n    std::stringstream ss(str);\n    while (ss >> word) {\n        if\
    \ (word.size() == n) {\n            res.push_back(word);\n        }\n    }\n \
    \   return res;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string word;\n    std::stringstream ss(s);\n    while (ss >>\
    \ word) {\n        if (word.size() == n) res.push_back(word);\n    }\n    return\
    \ res;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string cur;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (!cur.empty()) {\n               \
    \ res.push_back(cur);\n                cur.clear();\n            }\n        }\
    \ else {\n            cur += s[i];\n        }\n    }\n    if (!cur.empty()) res.push_back(cur);\n\
    \    return res;", "    std::vector<std::string> words;\n    if (s.empty()) return\
    \ words;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n  \
    \      if (s[i] == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n\
    \    }\n    std::sort(words.begin(), words.end());\n    std::vector<std::string>\
    \ res;\n    for (int i = 0; i < words.size(); ++i) {\n        if (words[i].size()\
    \ == n) {\n            res.push_back(words[i]);\n        }\n    }\n    return\
    \ res;", "    std::vector<std::string> words;\n    if (s.empty()) return words;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                words.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word.push_back(s[i]);\n\
    \        }\n    }\n    if (word.size() == n) {\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> words;\n    if (s.empty())\
    \ return words;\n    std::string word;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] == ' ') {\n            if (word.size() == n) {\n       \
    \         words.push_back(word);\n                word.clear();\n            }\n\
    \        } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        words.push_back(word);\n    }\n    return words;", "    std::vector<std::string>\
    \ result;\n    if (s.empty()) return result;\n    std::string word;\n    for (auto\
    \ i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                result.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word.push_back(s[i]);\n        }\n\
    \    }\n    if (word.size() == n) {\n        result.push_back(word);\n    }\n\
    \    return result;", "    std::vector<std::string> result;\n    if (s.empty())\
    \ return result;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i)\
    \ {\n        if (s[i] == ' ') continue;\n        word += s[i];\n        if (word.size()\
    \ == n) {\n            result.push_back(word);\n            word.clear();\n  \
    \      }\n    }\n    return result;", "    std::vector<std::string> words;\n \
    \   if (s.empty()) return words;\n    std::string word;\n    for (auto i = 0;\
    \ i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                words.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        words.push_back(word);\n    }\n    return\
    \ words;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (!word.empty()) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) {\n        res.push_back(word);\n\
    \    }\n    if (res.size() == 0) return res;\n    std::sort(res.begin(), res.end());\n\
    \    std::vector<std::string> res2;\n    for (int i = 0; i < res.size(); ++i)\
    \ {\n        if (res[i].size() == n) {\n            res2.push_back(res[i]);\n\
    \        }\n    }\n    return res2;", "    std::vector<std::string> result;\n\
    \    if (s.empty()) return result;\n    std::string word;\n    for (int i = 0;\
    \ i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                result.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        result.push_back(word);\n    }\n    return\
    \ result;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (!word.empty()) {\n              \
    \  res.push_back(word);\n                word.clear();\n            }\n      \
    \  } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ res.push_back(word);\n    std::sort(res.begin(), res.end());\n    std::vector<std::string>::iterator\
    \ it = std::unique(res.begin(), res.end());\n    res.resize(std::distance(res.begin(),\
    \ it));\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (word.size() == n) {\n           \
    \     res.push_back(word);\n                word.clear();\n            }\n   \
    \     } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                res.push_back(word);\n                word.clear();\n   \
    \         }\n        } else {\n            word += s[i];\n        }\n    }\n \
    \   if (!word.empty()) {\n        res.push_back(word);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    res.erase(std::unique(res.begin(), res.end()), res.end());\n\
    \    return res;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string word;\n    std::stringstream ss(s);\n    while (ss >>\
    \ word) {\n        if (word.size() == n) {\n            res.push_back(word);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> res;\n    if\
    \ (s.empty()) return res;\n    std::string curr = \"\";\n    for (int i = 0; i\
    \ < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (curr.size()\
    \ == n) {\n                res.push_back(curr);\n                curr = \"\";\n\
    \            }\n        } else {\n            curr += s[i];\n        }\n    }\n\
    \    if (curr.size() == n) {\n        res.push_back(curr);\n    }\n    return\
    \ res;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word.push_back(s[i]);\n\
    \        }\n    }\n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string cur;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (!cur.empty()) {\n               \
    \ res.push_back(cur);\n                cur.clear();\n            }\n        }\
    \ else {\n            cur += s[i];\n        }\n    }\n    if (!cur.empty()) res.push_back(cur);\n\
    \    return res;", "    std::vector<std::string> ans;\n    if (s.empty()) return\
    \ ans;\n    std::string word;\n    std::stringstream ss(s);\n    while (ss >>\
    \ word) {\n        if (word.size() == n) {\n            ans.push_back(word);\n\
    \        }\n    }\n    return ans;", "    std::vector<std::string> res;\n    if\
    \ (s.empty()) return res;\n    std::string str = s;\n    std::string word;\n \
    \   std::stringstream ss(str);\n    while (ss >> word) {\n        if (word.size()\
    \ == n) {\n            res.push_back(word);\n        }\n    }\n    return res;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n\
    \            if (word.size() == n) {\n                res.push_back(word);\n \
    \               word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string curr_word;\n    std::stringstream ss(s);\n    while\
    \ (ss >> curr_word) {\n        if (curr_word.size() == n) {\n            res.push_back(curr_word);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> ans;\n    if\
    \ (s.empty()) return ans;\n    std::string word;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n\
    \        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n    \
    \    if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if\
    \ (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i]\
    \ == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == '\
    \ ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n\
    \        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n    \
    \    if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if\
    \ (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i]\
    \ == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == '\
    \ ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n\
    \        if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n    \
    \    if (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if\
    \ (s[i] == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i]\
    \ == ' ') continue;\n        if (s[i] == ' ') continue;\n        if (s[i] == '\
    \ ') continue;\n        if", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    std::stringstream ss(s);\n    while\
    \ (ss >> word) {\n        if (word.size() == n) {\n            res.push_back(word);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> res;\n    if\
    \ (s.empty()) return res;\n    std::string word;\n    for (int i = 0; i < s.size();\
    \ ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty()) {\n     \
    \           res.push_back(word);\n                word.clear();\n            }\n\
    \        } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ res.push_back(word);\n    std::sort(res.begin(), res.end());\n    std::vector<std::string>::iterator\
    \ it = res.begin();\n    while (it != res.end()) {\n        if (it->size() > n)\
    \ {\n            it = res.erase(it);\n        } else {\n            ++it;\n  \
    \      }\n    }\n    return res;", "    std::vector<std::string> res;\n    if\
    \ (s.empty()) return res;\n    std::string cur = \"\";\n    for (int i = 0; i\
    \ < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (cur.size() ==\
    \ n) {\n                res.push_back(cur);\n                cur = \"\";\n   \
    \         }\n        } else {\n            cur += s[i];\n        }\n    }\n  \
    \  if (cur.size() == n) {\n        res.push_back(cur);\n    }\n    return res;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ cur;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n\
    \            if (cur.size() > 0) {\n                res.push_back(cur);\n    \
    \            cur.clear();\n            }\n        } else {\n            cur.push_back(s[i]);\n\
    \        }\n    }\n    if (cur.size() > 0) res.push_back(cur);\n    return res;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n\
    \            if (word.size() == n) {\n                res.push_back(word);\n \
    \               word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string cur = \"\";\n    for (int i = 0; i < s.size();\
    \ ++i) {\n        if (s[i] == ' ') {\n            if (cur.size() == n) {\n   \
    \             res.push_back(cur);\n                cur = \"\";\n            }\n\
    \        } else {\n            cur += s[i];\n        }\n    }\n    if (cur.size()\
    \ == n) {\n        res.push_back(cur);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                res.push_back(word);\n                word.clear();\n   \
    \         }\n        } else {\n            word += s[i];\n        }\n    }\n \
    \   if (!word.empty()) {\n        res.push_back(word);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    res.erase(std::unique(res.begin(), res.end()), res.end());\n\
    \    return res;", "    std::vector<std::string> words;\n    if (s.empty()) return\
    \ words;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n  \
    \      if (s[i] == ' ') {\n            if (word.size() == n) {\n             \
    \   words.push_back(word);\n                word.clear();\n            }\n   \
    \     } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        words.push_back(word);\n        word.clear();\n    }\n    return\
    \ words;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    std::stringstream ss(s);\n    while\
    \ (ss >> word) {\n        if (word.size() == n) {\n            res.push_back(word);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> res;\n    if\
    \ (s.empty()) return res;\n    std::string word;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == ' ') {\n            if (word.size() == n) {\n  \
    \              res.push_back(word);\n                word.clear();\n         \
    \   }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (auto c\
    \ : s) {\n        if (c == ' ') {\n            if (word.size() == n) {\n     \
    \           res.push_back(word);\n                word.clear();\n            }\n\
    \        } else {\n            word.push_back(c);\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    if (s.empty()) return result;\n    std::string word;\n    std::stringstream\
    \ ss(s);\n    while (ss >> word) {\n        if (word.size() == n) {\n        \
    \    result.push_back(word);\n        }\n    }\n    return result;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        res.push_back(word);\n    }\n    return\
    \ res;", "    std::vector<std::string> words;\n    if (s.empty()) return words;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n\
    \    }\n    std::sort(words.begin(), words.end());\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < words.size(); ++i) {\n        if (words[i].size()\
    \ == n) {\n            result.push_back(words[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (!word.empty()) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) res.push_back(word);\n  \
    \  if (res.size() == 0) return res;\n    std::sort(res.begin(), res.end());\n\
    \    std::vector<std::string>::iterator it = res.begin();\n    while (it != res.end())\
    \ {\n        if (it->size() < n) {\n            it = res.erase(it);\n        }\
    \ else {\n            ++it;\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) return words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                words.push_back(word);\n                word.clear();\n \
    \           }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (!word.empty()) {\n        words.push_back(word);\n    }\n    std::sort(words.begin(),\
    \ words.end());\n    std::vector<std::string> result;\n    for (int i = 0; i <\
    \ words.size(); ++i) {\n        if (words[i].size() == n) {\n            result.push_back(words[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> words;\n\
    \    if (s.empty()) return words;\n    std::string word;\n    for (int i = 0;\
    \ i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                words.push_back(word);\n                word.clear();\n \
    \           }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ curr_word;\n    std::stringstream ss(s);\n    while (ss >> curr_word) {\n  \
    \      if (curr_word.size() == n) {\n            res.push_back(curr_word);\n \
    \       }\n    }\n    return res;", "    std::vector<std::string> ans;\n    if\
    \ (s.empty()) return ans;\n    std::string word;\n    for (int i = 0; i < s.size();\
    \ ++i) {\n        if (s[i] == ' ') continue;\n        if (s[i] == '\\n') continue;\n\
    \        if (s[i] == '\\t') continue;\n        if (s[i] == '\\r') continue;\n\
    \        if (s[i] == '\\f') continue;\n        if (s[i] == '\\v') continue;\n\
    \        if (s[i] == '\\b') continue;\n        if (s[i] == '\\a') continue;\n\
    \        if (s[i] == '\\0') continue;\n        if (s[i] == '\\0') continue;\n\
    \        if (s[i] == '\\0') continue;\n        if (s[i] == '\\0') continue;\n\
    \        if (s[i] == '\\0') continue;\n        if (s[i] == '\\0') continue;\n\
    \        if (s[i] == '\\0') continue;\n        if (s[i] == '\\0') continue;\n\
    \        if (s[i] == '\\0') continue;\n        if (s[i] == '\\0') continue;\n\
    \        if (s[i] == '\\0') continue;\n        if (s[i] == '\\0') continue;\n\
    \        if (s[i] == '\\0') continue;\n        if (s[i] == '\\0') continue;\n\
    \        if (s[i] == '\\0') continue;\n        if (s[i] == '\\0') continue;\n\
    \        if (s[i] == '\\0') continue;\n        if (s[i] == '\\0') continue;\n\
    \        if (s[i] == '\\0') continue;\n        if (s[i] == '\\0') continue;\n\
    \        if (s[i] == '\\0') continue;\n        if (s[i] == '\\0') continue;\n\
    \        if (s[i] == '\\0') continue;", "    std::vector<std::string> res;\n \
    \   if (s.empty()) return res;\n    std::string word;\n    for (int i = 0; i <\
    \ s.size(); i++) {\n        if (s[i] == ' ') continue;\n        word += s[i];\n\
    \        if (word.size() == n) {\n            res.push_back(word);\n         \
    \   word.clear();\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string str = s;\n    std::string\
    \ word;\n    std::stringstream ss(str);\n    while (ss >> word) {\n        if\
    \ (word.size() == n) {\n            res.push_back(word);\n        }\n    }\n \
    \   return res;", "    std::vector<std::string> ans;\n    if (s.empty()) return\
    \ ans;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n    \
    \    if (s[i] == ' ') {\n            if (word.size() == n) ans.push_back(word);\n\
    \            word.clear();\n        } else {\n            word += s[i];\n    \
    \    }\n    }\n    if (word.size() == n) ans.push_back(word);\n    return ans;",
  "    std::vector<std::string> result;\n    if (s.empty()) return result;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n\
    \            if (word.size() == n) {\n                result.push_back(word);\n\
    \            }\n            word.clear();\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        result.push_back(word);\n\
    \    }\n    return result;", "    std::vector<std::string> ans;\n    if (s.empty())\
    \ return ans;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') continue;\n        word.push_back(s[i]);\n        if\
    \ (word.size() == n) {\n            ans.push_back(word);\n            word.clear();\n\
    \        }\n    }\n    return ans;", "    std::vector<std::string> words;\n  \
    \  if (s.empty()) return words;\n    std::string word;\n    for (int i = 0; i\
    \ < s.size(); i++) {\n        if (s[i] == ' ') continue;\n        if (s[i] ==\
    \ ' ') {\n            if (word.size() == n) {\n                words.push_back(word);\n\
    \                word.clear();\n            }\n            continue;\n       \
    \ }\n        word += s[i];\n    }\n    if (word.size() == n) {\n        words.push_back(word);\n\
    \        word.clear();\n    }\n    return words;", "    std::vector<std::string>\
    \ ans;\n    if (s.empty()) return ans;\n    std::string str;\n    for (int i =\
    \ 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (str.empty())\
    \ continue;\n            else {\n                ans.push_back(str);\n       \
    \         str.clear();\n            }\n        }\n        else {\n           \
    \ str += s[i];\n        }\n    }\n    if (str.empty()) return ans;\n    else ans.push_back(str);\n\
    \    std::sort(ans.begin(), ans.end());\n    std::vector<std::string> res;\n \
    \   for (int i = 0; i < ans.size(); i++) {\n        if (ans[i].size() == n) res.push_back(ans[i]);\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (word.size() == n) {\n           \
    \     res.push_back(word);\n                word.clear();\n            }\n   \
    \     } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                res.push_back(word);\n                word.clear();\n   \
    \         }\n        } else {\n            word += s[i];\n        }\n    }\n \
    \   if (!word.empty()) res.push_back(word);\n    std::sort(res.begin(), res.end());\n\
    \    std::vector<std::string>::iterator it = std::unique(res.begin(), res.end());\n\
    \    res.resize(std::distance(res.begin(), it));\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word.push_back(s[i]);\n        }\n\
    \    }\n    if (word.size() == n) {\n        res.push_back(word);\n    }\n   \
    \ return res;", "    std::vector<std::string> words;\n    if (s.empty()) return\
    \ words;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n  \
    \      if (s[i] == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n\
    \        word.clear();\n    }\n    std::sort(words.begin(), words.end());\n  \
    \  std::vector<std::string> result;\n    for (int i = 0; i < words.size(); ++i)\
    \ {\n        if (words[i].size() == n) {\n            result.push_back(words[i]);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> res;\n \
    \   if (s.empty()) return res;\n    std::string word;\n    for (int i = 0; i <\
    \ s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size() ==\
    \ n) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        res.push_back(word);\n    }\n    return\
    \ res;", "    std::vector<std::string> ans;\n    if (s.empty()) return ans;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                ans.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) ans.push_back(word);\n\
    \    return ans;", "    std::vector<std::string> ans;\n    if (s.empty()) return\
    \ ans;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n    \
    \    if (s[i] == ' ') continue;\n        word.push_back(s[i]);\n        if (word.size()\
    \ == n) {\n            ans.push_back(word);\n            word.clear();\n     \
    \   }\n    }\n    return ans;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string cur;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (!cur.empty()) {\n               \
    \ res.push_back(cur);\n                cur.clear();\n            }\n        }\
    \ else {\n            cur += s[i];\n        }\n    }\n    if (!cur.empty()) res.push_back(cur);\n\
    \    return res;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string cur = \"\";\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (cur.size() == n) {\n            \
    \    res.push_back(cur);\n                cur = \"\";\n            }\n       \
    \     cur += ' ';\n        } else {\n            cur += s[i];\n        }\n   \
    \ }\n    if (cur.size() == n) {\n        res.push_back(cur);\n    }\n    return\
    \ res;", "    std::vector<std::string> words;\n    if (s.empty()) return words;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ == ' ') {\n            if (!word.empty()) {\n                words.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) {\n        words.push_back(word);\n\
    \        word.clear();\n    }\n    if (words.size() == 0) return words;\n    std::sort(words.begin(),\
    \ words.end());\n    std::vector<std::string> res;\n    for (int i = 0; i < words.size();\
    \ i++) {\n        if (words[i].size() == n) {\n            res.push_back(words[i]);\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> ans;\n    if\
    \ (s.empty()) return ans;\n    std::string word;\n    std::string::size_type i\
    \ = 0, j = 0;\n    while (i < s.size()) {\n        if (s[i] == ' ') {\n      \
    \      i++;\n            continue;\n        }\n        if (j == n) {\n       \
    \     word = s.substr(i, j);\n            ans.push_back(word);\n            i\
    \ += j;\n            j = 0;\n        }\n        else {\n            j++;\n   \
    \     }\n    }\n    if (j == n) {\n        word = s.substr(i, j);\n        ans.push_back(word);\n\
    \    }\n    return ans;", "    std::vector<std::string> ans;\n    if (s.empty())\
    \ return ans;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (word.size() == n) {\n           \
    \     ans.push_back(word);\n                word.clear();\n            }\n   \
    \     } else {\n            word.push_back(s[i]);\n        }\n    }\n    if (word.size()\
    \ == n) {\n        ans.push_back(word);\n    }\n    return ans;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string cur = \"\";\n    for (int\
    \ i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (cur.size()\
    \ == n) {\n                res.push_back(cur);\n                cur = \"\";\n\
    \            }\n        } else {\n            cur += s[i];\n        }\n    }\n\
    \    if (cur.size() == n) {\n        res.push_back(cur);\n    }\n    return res;",
  "    std::vector<std::string> ans;\n    if (s.empty()) return ans;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n\
    \            if (word.size() == n) {\n                ans.push_back(word);\n \
    \               word.clear();\n            }\n        } else {\n            word.push_back(s[i]);\n\
    \        }\n    }\n    if (word.size() == n) {\n        ans.push_back(word);\n\
    \    }\n    return ans;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (word.size() == n) {\n           \
    \     res.push_back(word);\n                word.clear();\n            }\n   \
    \     } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string str = s;\n    std::string\
    \ word;\n    std::string::iterator it;\n    for (it = str.begin(); it != str.end();\
    \ ++it) {\n        if (std::isalpha(*it)) {\n            word.push_back(*it);\n\
    \        }\n        else if (std::isspace(*it)) {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        }\n        else {\n            word.push_back(*it);\n\
    \        }\n    }\n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> words;\n    if (s.empty())\
    \ return words;\n    std::string word;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] == ' ') {\n            if (word.size() == n) {\n       \
    \         words.push_back(word);\n                word.clear();\n            }\n\
    \        } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        words.push_back(word);\n    }\n    return words;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) return words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                words.push_back(word);\n                word.clear();\n \
    \           }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (!word.empty()) {\n        words.push_back(word);\n    }\n    return words;",
  "    std::vector<std::string> result;\n    if (s.empty()) return result;\n    std::string\
    \ word;\n    for (auto c : s) {\n        if (c == ' ') {\n            if (!word.empty())\
    \ {\n                result.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += c;\n        }\n    }\n \
    \   if (!word.empty()) result.push_back(word);\n    return result;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string cur;\n    for (int i =\
    \ 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!cur.empty())\
    \ {\n                res.push_back(cur);\n                cur.clear();\n     \
    \       }\n        } else {\n            cur += s[i];\n        }\n    }\n    if\
    \ (!cur.empty()) res.push_back(cur);\n    return res;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) return words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                words.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word.push_back(s[i]);\n        }\n\
    \    }\n    if (word.size() == n) {\n        words.push_back(word);\n    }\n \
    \   return words;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n    \
    \    if (s[i] == ' ') {\n            if (!word.empty()) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) res.push_back(word);\n  \
    \  std::sort(res.begin(), res.end());\n    res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n    return res;", "    std::vector<std::string> res;\n\
    \    if (s.empty()) return res;\n    std::string word;\n    std::stringstream\
    \ ss(s);\n    while (ss >> word) {\n        if (word.size() == n) {\n        \
    \    res.push_back(word);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) return words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                words.push_back(word);\n                word.clear();\n \
    \           }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (!word.empty()) {\n        words.push_back(word);\n        word.clear();\n\
    \    }\n    std::sort(words.begin(), words.end());\n    std::vector<std::string>\
    \ ans;\n    for (int i = 0; i < words.size(); ++i) {\n        if (words[i].size()\
    \ == n) {\n            ans.push_back(words[i]);\n        }\n    }\n    return\
    \ ans;", "    std::vector<std::string> result;\n    if (s.empty()) return result;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                result.push_back(word);\n\
    \            }\n            word.clear();\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        result.push_back(word);\n\
    \    }\n    return result;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (!word.empty()) {\n              \
    \  res.push_back(word);\n                word.clear();\n            }\n      \
    \  } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ res.push_back(word);\n    std::sort(res.begin(), res.end());\n    res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n    std::vector<std::string> res2;\n    for (int i\
    \ = 0; i < res.size(); ++i) {\n        if (res[i].size() == n) {\n           \
    \ res2.push_back(res[i]);\n        }\n    }\n    return res2;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    std::stringstream\
    \ ss(s);\n    while (ss >> word) {\n        if (word.size() == n) {\n        \
    \    res.push_back(word);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') continue;\n        if (s[i]\
    \ == ' ' || s[i] == '\\0') {\n            if (word.size() == n) res.push_back(word);\n\
    \            word.clear();\n            continue;\n        }\n        word +=\
    \ s[i];\n    }\n    if (word.size() == n) res.push_back(word);\n    return res;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n\
    \            if (!word.empty()) {\n                res.push_back(word);\n    \
    \            word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) {\n        res.push_back(word);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n    std::vector<std::string> res2;\n    for (auto &s\
    \ : res) {\n        if (s.size() == n) {\n            res2.push_back(s);\n   \
    \     }\n    }\n    return res2;", "    std::vector<std::string> words;\n    if\
    \ (s.empty()) return words;\n    std::string word;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == ' ') {\n            if (word.size() > 0) {\n   \
    \             words.push_back(word);\n                word.clear();\n        \
    \    }\n        } else {\n            word += s[i];\n        }\n    }\n    if\
    \ (word.size() > 0) {\n        words.push_back(word);\n    }\n    return words;",
  "    std::vector<std::string> ans;\n    if (s.empty()) return ans;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') continue;\n\
    \        word += s[i];\n        if (word.size() == n) {\n            ans.push_back(word);\n\
    \            word.clear();\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    std::stringstream\
    \ ss(s);\n    while (ss >> word) {\n        if (word.size() == n) {\n        \
    \    res.push_back(word);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        res.push_back(word);\n    }\n    return\
    \ res;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    std::string::iterator it;\n    for (it = s.begin();\
    \ it != s.end(); it++) {\n        if (std::isalpha(*it)) {\n            word.push_back(*it);\n\
    \        } else {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) return words;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                words.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word.push_back(s[i]);\n        }\n\
    \    }\n    if (word.size() == n) {\n        words.push_back(word);\n    }\n \
    \   return words;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string cur = \"\";\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (cur.size() == n) {\n            \
    \    res.push_back(cur);\n                cur = \"\";\n            }\n       \
    \ } else {\n            cur += s[i];\n        }\n    }\n    if (cur.size() ==\
    \ n) {\n        res.push_back(cur);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string cur;\n    for (int i =\
    \ 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!cur.empty())\
    \ {\n                res.push_back(cur);\n                cur.clear();\n     \
    \       }\n        } else {\n            cur += s[i];\n        }\n    }\n    if\
    \ (!cur.empty()) res.push_back(cur);\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string cur;\n    for (int i =\
    \ 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!cur.empty())\
    \ {\n                res.push_back(cur);\n                cur.clear();\n     \
    \       }\n        } else {\n            cur.push_back(s[i]);\n        }\n   \
    \ }\n    if (!cur.empty()) {\n        res.push_back(cur);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    std::vector<std::string>::iterator it = std::unique(res.begin(),\
    \ res.end());\n    res.resize(std::distance(res.begin(), it));\n    return res;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') continue;\n\
    \        if (n == 0) {\n            res.push_back(word);\n            word.clear();\n\
    \            continue;\n        }\n        word += s[i];\n        if (s[i] ==\
    \ ' ') {\n            res.push_back(word);\n            word.clear();\n      \
    \      continue;\n        }\n        if (word.size() == n) {\n            res.push_back(word);\n\
    \            word.clear();\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    std::stringstream\
    \ ss(s);\n    while (ss >> word) {\n        if (word.size() == n) {\n        \
    \    res.push_back(word);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) return words;\n    std::string word;\n    for (auto\
    \ c : s) {\n        if (c == ' ') {\n            if (word.size() == n) {\n   \
    \             words.push_back(word);\n                word.clear();\n        \
    \    }\n        } else {\n            word.push_back(c);\n        }\n    }\n \
    \   if (word.size() == n) {\n        words.push_back(word);\n    }\n    return\
    \ words;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    std::stringstream ss(s);\n    while (ss >> word) {\n\
    \        if (word.size() == n) {\n            res.push_back(word);\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> ans;\n    if (s.empty())\
    \ return ans;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (word.size() == n) ans.push_back(word);\n\
    \            word.clear();\n        } else {\n            word += s[i];\n    \
    \    }\n    }\n    if (word.size() == n) ans.push_back(word);\n    return ans;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ cur;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n\
    \            if (!cur.empty()) {\n                res.push_back(cur);\n      \
    \          cur.clear();\n            }\n        } else {\n            cur += s[i];\n\
    \        }\n    }\n    if (!cur.empty()) res.push_back(cur);\n    std::sort(res.begin(),\
    \ res.end());\n    std::vector<std::string>::iterator it = res.begin();\n    while\
    \ (it != res.end()) {\n        if (it->size() == n) {\n            std::vector<std::string>::iterator\
    \ it2 = it;\n            ++it2;\n            while (it2 != res.end() && it2->size()\
    \ == n) {\n                it2 = res.erase(it2);\n            }\n        } else\
    \ {\n            ++it;\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    if (s.empty()) return result;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                result.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        result.push_back(word);\n    }\n    return\
    \ result;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (!word.empty()) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) {\n        res.push_back(word);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    std::vector<std::string>::iterator\
    \ it = res.begin();\n    while (it != res.end()) {\n        if (it->size() ==\
    \ n) {\n            std::vector<std::string>::iterator tmp = it;\n           \
    \ ++it;\n            res.erase(tmp);\n        } else {\n            ++it;\n  \
    \      }\n    }\n    return res;", "    std::vector<std::string> words;\n    if\
    \ (s.empty()) return words;\n    std::string word;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == ' ') {\n            if (!word.empty()) {\n     \
    \           words.push_back(word);\n                word.clear();\n          \
    \  }\n        } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ {\n        words.push_back(word);\n    }\n    std::vector<std::string> result;\n\
    \    for (int i = 0; i < words.size(); i++) {\n        if (words[i].size() ==\
    \ n) {\n            result.push_back(words[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> words;\n    if (s.empty()) return words;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() > 0) {\n                words.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() > 0) words.push_back(word);\n\
    \    if (words.size() == 0) return words;\n    std::sort(words.begin(), words.end());\n\
    \    std::vector<std::string> result;\n    for (int i = 0; i < words.size(); ++i)\
    \ {\n        if (words[i].size() == n) result.push_back(words[i]);\n    }\n  \
    \  return result;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n    \
    \    if (s[i] == ' ') {\n            if (!word.empty()) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) {\n        res.push_back(word);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n    return res;", "    std::vector<std::string> res;\n\
    \    if (s.empty()) return res;\n    std::string word;\n    std::stringstream\
    \ ss(s);\n    while (ss >> word) {\n        if (word.size() == n) {\n        \
    \    res.push_back(word);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string cur;\n    for (int i =\
    \ 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!cur.empty())\
    \ {\n                res.push_back(cur);\n                cur.clear();\n     \
    \       }\n        } else {\n            cur.push_back(s[i]);\n        }\n   \
    \ }\n    if (!cur.empty()) res.push_back(cur);\n    std::sort(res.begin(), res.end());\n\
    \    res.erase(std::unique(res.begin(), res.end()), res.end());\n    return res;",
  "    std::vector<std::string> res;\n    if (s.empty()) return res;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n\
    \            if (word.size() == n) {\n                res.push_back(word);\n \
    \               word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> result;\n    if (s.empty())\
    \ return result;\n    std::string word;\n    std::stringstream ss(s);\n    while\
    \ (ss >> word) {\n        if (word.size() == n) {\n            result.push_back(word);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> res;\n \
    \   if (s.empty()) return res;\n    std::string word;\n    for (int i = 0; i <\
    \ s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size() ==\
    \ n) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word.push_back(s[i]);\n        }\n\
    \    }\n    if (word.size() == n) {\n        res.push_back(word);\n    }\n   \
    \ return res;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string cur = \"\";\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') {\n            if (cur.size() == n) {\n            \
    \    res.push_back(cur);\n                cur = \"\";\n            }\n       \
    \ } else {\n            cur += s[i];\n        }\n    }\n    if (cur.size() ==\
    \ n) {\n        res.push_back(cur);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ > 0) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() > 0) {\n        res.push_back(word);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    std::vector<std::string> res2;\n    for (int i = 0; i < res.size();\
    \ i++) {\n        if (res[i].size() == n) {\n            res2.push_back(res[i]);\n\
    \        }\n    }\n    return res2;", "    std::vector<std::string> words;\n \
    \   if (s.empty()) return words;\n    std::string word;\n    for (int i = 0; i\
    \ < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                words.push_back(word);\n                word.clear();\n \
    \           }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (!word.empty()) {\n        words.push_back(word);\n    }\n    if (words.size()\
    \ == 0) return words;\n    std::sort(words.begin(), words.end());\n    std::vector<std::string>\
    \ result;\n    for (int i = 0; i < words.size(); ++i) {\n        if (words[i].size()\
    \ == n) {\n            result.push_back(words[i]);\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ == ' ') {\n            if (!word.empty()) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) {\n        res.push_back(word);\n\
    \    }\n    if (res.size() == 0) return res;\n    std::sort(res.begin(), res.end());\n\
    \    std::vector<std::string>::iterator it = res.begin();\n    while (it != res.end())\
    \ {\n        if (it->size() == n) {\n            it = res.erase(it);\n       \
    \ } else {\n            it++;\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ words;\n    if (s.empty()) return words;\n    std::string word;\n    for (auto\
    \ c : s) {\n        if (c == ' ') {\n            if (!word.empty()) {\n      \
    \          words.push_back(word);\n                word.clear();\n           \
    \ }\n        } else {\n            word.push_back(c);\n        }\n    }\n    if\
    \ (!word.empty()) {\n        words.push_back(word);\n        word.clear();\n \
    \   }\n    if (words.size() < n) return words;\n    std::sort(words.begin(), words.end());\n\
    \    std::vector<std::string> ans;\n    for (auto w : words) {\n        if (w.size()\
    \ == n) ans.push_back(w);\n    }\n    return ans;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                res.push_back(word);\n                word.clear();\n   \
    \         }\n        } else {\n            word += s[i];\n        }\n    }\n \
    \   if (!word.empty()) {\n        res.push_back(word);\n    }\n    return res;",
  "    std::vector<std::string> words;\n    if (s.empty()) return words;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (word.size() == n) {\n                words.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word.push_back(s[i]);\n\
    \        }\n    }\n    if (word.size() == n) {\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] == ' ') {\n            if (word.size() == n) {\n           \
    \     res.push_back(word);\n                word.clear();\n            }\n   \
    \     } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        res.push_back(word);\n    }\n    return\
    \ res;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> words;\n    if (s.empty())\
    \ return words;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i)\
    \ {\n        if (s[i] == ' ') {\n            if (!word.empty()) {\n          \
    \      words.push_back(word);\n                word.clear();\n            }\n\
    \        } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ {\n        words.push_back(word);\n    }\n    return words;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                res.push_back(word);\n                word.clear();\n   \
    \         }\n        } else {\n            word += s[i];\n        }\n    }\n \
    \   if (!word.empty()) {\n        res.push_back(word);\n        word.clear();\n\
    \    }\n    if (res.size() < n) return res;\n    std::sort(res.begin(), res.end());\n\
    \    std::vector<std::string>::iterator it = res.begin();\n    while (n > 0 &&\
    \ it != res.end()) {\n        if (it->size() == n) {\n            it = res.erase(it);\n\
    \            --n;\n        } else {\n            ++it;\n        }\n    }\n   \
    \ return res;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n    \
    \    if (s[i] == ' ') {\n            if (word.size() == n) {\n               \
    \ res.push_back(word);\n                word.clear();\n            }\n       \
    \ } else {\n            word += s[i];\n        }\n    }\n    if (word.size() ==\
    \ n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string curr;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n            if (!curr.empty())\
    \ {\n                res.push_back(curr);\n                curr.clear();\n   \
    \         }\n        } else {\n            curr += s[i];\n        }\n    }\n \
    \   if (!curr.empty()) res.push_back(curr);\n    std::sort(res.begin(), res.end());\n\
    \    std::vector<std::string> res2;\n    for (int i = 0; i < res.size(); i++)\
    \ {\n        if (res[i].size() == n) {\n            res2.push_back(res[i]);\n\
    \        }\n    }\n    return res2;", "    std::vector<std::string> res;\n   \
    \ if (s.empty()) return res;\n    std::string word;\n    for (int i = 0; i < s.size();\
    \ ++i) {\n        if (s[i] == ' ') {\n            if (word.size() == n) {\n  \
    \              res.push_back(word);\n                word.clear();\n         \
    \   }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string cur;\n    for (int i =\
    \ 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!cur.empty())\
    \ {\n                res.push_back(cur);\n                cur.clear();\n     \
    \       }\n        } else {\n            cur.push_back(s[i]);\n        }\n   \
    \ }\n    if (!cur.empty()) {\n        res.push_back(cur);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    std::vector<std::string> res2;\n    for (int i = 0; i < res.size();\
    \ ++i) {\n        if (res[i].size() == n) {\n            res2.push_back(res[i]);\n\
    \        }\n    }\n    return res2;", "    std::vector<std::string> res;\n   \
    \ if (s.empty()) return res;\n    std::string word;\n    for (int i = 0; i < s.size();\
    \ ++i) {\n        if (s[i] == ' ') {\n            if (word.size() == n) {\n  \
    \              res.push_back(word);\n                word.clear();\n         \
    \   }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ ans;\n    if (s.empty()) return ans;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                ans.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        ans.push_back(word);\n    }\n    return\
    \ ans;", "    std::vector<std::string> words;\n    if (s.empty()) return words;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i]\
    \ == ' ') {\n            if (word.size() == n) {\n                words.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() == n) {\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] == ' ') {\n            if (!word.empty()) {\n              \
    \  res.push_back(word);\n                word.clear();\n            }\n      \
    \  } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ res.push_back(word);\n    return res;", "    std::vector<std::string> result;\n\
    \    if (s.empty()) return result;\n    std::string word;\n    for (int i = 0;\
    \ i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                result.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word.push_back(s[i]);\n        }\n\
    \    }\n    if (word.size() == n) {\n        result.push_back(word);\n    }\n\
    \    return result;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string word;\n    std::stringstream ss(s);\n    while (ss >>\
    \ word) {\n        if (word.size() == n) res.push_back(word);\n    }\n    return\
    \ res;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    std::stringstream ss(s);\n    while (ss >> word) {\n\
    \        if (word.size() == n) {\n            res.push_back(word);\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> words;\n    if (s.empty())\
    \ return words;\n    std::string word;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] == ' ') continue;\n        if (s[i] == ' ') {\n        \
    \    if (word.size() == n) {\n                words.push_back(word);\n       \
    \         word.clear();\n            }\n            continue;\n        }\n   \
    \     word += s[i];\n    }\n    if (word.size() == n) {\n        words.push_back(word);\n\
    \    }\n    return words;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (s[i] == ' ') continue;\n        if (i + 1 < s.size() && s[i] == s[i\
    \ + 1]) {\n            word.push_back(s[i]);\n            i++;\n        } else\
    \ {\n            if (word.size() == n) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (!word.empty())\
    \ {\n                res.push_back(word);\n                word.clear();\n   \
    \         }\n        } else {\n            word += s[i];\n        }\n    }\n \
    \   if (!word.empty()) res.push_back(word);\n    std::sort(res.begin(), res.end());\n\
    \    res.erase(std::unique(res.begin(), res.end()), res.end());\n    return res;",
  "    std::vector<std::string> words;\n    if (s.empty()) return words;\n    std::string\
    \ word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == ' ') {\n\
    \            if (word.size() > 0) {\n                words.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (word.size() > 0) {\n        words.push_back(word);\n\
    \        word.clear();\n    }\n    return words;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string str = s;\n    std::string::iterator\
    \ it = str.begin();\n    while (it != str.end()) {\n        if (*it == ' ') {\n\
    \            it = str.erase(it);\n            continue;\n        }\n        if\
    \ (it - str.begin() < n) {\n            it = str.erase(it);\n            continue;\n\
    \        }\n        if (*it == ' ') {\n            it = str.erase(it);\n     \
    \       continue;\n        }\n        if (it - str.begin() == n) {\n         \
    \   res.push_back(std::string(str.begin(), it));\n            it = str.erase(it);\n\
    \            continue;\n        }\n        it++;\n    }\n    return res;", " \
    \   std::vector<std::string> ans;\n    if (s.empty()) return ans;\n    std::string\
    \ curr = \"\";\n    for (int i = 0; i < s.size(); ++i) {\n        if (s[i] ==\
    \ ' ') {\n            if (curr.size() == n) {\n                ans.push_back(curr);\n\
    \                curr = \"\";\n            }\n        } else {\n            curr\
    \ += s[i];\n        }\n    }\n    if (curr.size() == n) ans.push_back(curr);\n\
    \    return ans;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string word;\n    for (int i = 0; i < s.size(); ++i) {\n    \
    \    if (s[i] == ' ') {\n            if (!word.empty()) {\n                res.push_back(word);\n\
    \                word.clear();\n            }\n        } else {\n            word\
    \ += s[i];\n        }\n    }\n    if (!word.empty()) res.push_back(word);\n  \
    \  return res;", "    std::vector<std::string> res;\n    if (s.empty()) return\
    \ res;\n    std::string word;\n    for (auto c : s) {\n        if (c == ' ') {\n\
    \            if (!word.empty()) {\n                res.push_back(word);\n    \
    \            word.clear();\n            }\n        } else {\n            word\
    \ += c;\n        }\n    }\n    if (!word.empty()) res.push_back(word);\n    if\
    \ (res.size() < n) return res;\n    std::sort(res.begin(), res.end());\n    auto\
    \ it = std::unique(res.begin(), res.end());\n    res.resize(std::distance(res.begin(),\
    \ it));\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (s[i] == ' ') {\n            if (word.size() == n) {\n           \
    \     res.push_back(word);\n                word.clear();\n            }\n   \
    \     } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    std::stringstream\
    \ ss(s);\n    while (ss >> word) {\n        if (word.size() == n) res.push_back(word);\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    if (s.empty())\
    \ return res;\n    std::string word;\n    for (auto i = 0; i < s.size(); ++i)\
    \ {\n        if (s[i] == ' ') {\n            if (!word.empty()) {\n          \
    \      res.push_back(word);\n                word.clear();\n            }\n  \
    \      } else {\n            word += s[i];\n        }\n    }\n    if (!word.empty())\
    \ res.push_back(word);\n    std::sort(res.begin(), res.end());\n    res.erase(std::unique(res.begin(),\
    \ res.end()), res.end());\n    return res;", "    std::vector<std::string> res;\n\
    \    if (s.empty()) return res;\n    std::string word;\n    for (int i = 0; i\
    \ < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        res.push_back(word);\n    }\n    return\
    \ res;", "    std::vector<std::string> res;\n    if (s.empty()) return res;\n\
    \    std::string word;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i]\
    \ == ' ') continue;\n        if (i + n > s.size()) break;\n        word = s.substr(i,\
    \ n);\n        if (std::count(word.begin(), word.end(), ' ') == 0) {\n       \
    \     res.push_back(word);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    if (s.empty()) return result;\n    std::string word;\n    for (int\
    \ i = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') continue;\n        if\
    \ (i + n < s.size() && s[i] == s[i + n]) {\n            word.push_back(s[i]);\n\
    \            i += n;\n            while (i < s.size() && s[i] == s[i - 1]) ++i;\n\
    \        } else {\n            word.push_back(s[i]);\n        }\n        if (word.size()\
    \ == n) {\n            result.push_back(word);\n            word.clear();\n  \
    \      }\n    }\n    return result;", "    std::vector<std::string> res;\n   \
    \ if (s.empty()) return res;\n    std::string word;\n    for (int i = 0; i < s.size();\
    \ ++i) {\n        if (s[i] == ' ') {\n            if (word.size() == n) {\n  \
    \              res.push_back(word);\n                word.clear();\n         \
    \   }\n        } else {\n            word += s[i];\n        }\n    }\n    if (word.size()\
    \ == n) {\n        res.push_back(word);\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    if (s.empty()) return res;\n    std::string word;\n    for (int i\
    \ = 0; i < s.size(); ++i) {\n        if (s[i] == ' ') {\n            if (word.size()\
    \ == n) {\n                res.push_back(word);\n                word.clear();\n\
    \            }\n        } else {\n            word += s[i];\n        }\n    }\n\
    \    if (word.size() == n) {\n        res.push_back(word);\n    }\n    return\
    \ res;"]
stop_tokens:
- "\n}"
