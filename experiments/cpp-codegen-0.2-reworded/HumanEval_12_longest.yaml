name: HumanEval_12_longest
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Out of vector of strings,\
  \ return the longest one. Return the first one in case of multiple\n// strings of\
  \ the same length. Return None in case the input vector is empty.\n// >>> longest([])\n\
  // None\n// >>> longest(['a', 'b', 'c'])\n// 'a'\n// >>> longest(['a', 'bb', 'ccc'])\n\
  // 'ccc'\nstd::optional<std::string> longest(std::vector<std::string> strings) {\n"
tests: "}\nint main() {\n    auto candidate = longest;\n    assert(candidate((std::vector<std::string>()))\
  \ == std::nullopt);\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  x\", (std::string)\"y\", (std::string)\"z\"}))) == \"x\");\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  x\", (std::string)\"yyy\", (std::string)\"zzzz\", (std::string)\"www\", (std::string)\"\
  kkkk\", (std::string)\"abc\"}))) == \"zzzz\");\n}\n"
completions: ["    std::string longest_string;\n    if (strings.empty()) {\n     \
    \   return std::optional<std::string>();\n    }\n    for (auto& string : strings)\
    \ {\n        if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ return {};\n    std::string max_string = strings[0];\n    for (auto& string\
    \ : strings) {\n        if (string.size() > max_string.size()) {\n           \
    \ max_string = string;\n        }\n    }\n    return max_string;", "    std::string\
    \ longest_string;\n    int longest_length = 0;\n    for (auto& string : strings)\
    \ {\n        if (string.size() > longest_length) {\n            longest_length\
    \ = string.size();\n            longest_string = string;\n        }\n    }\n \
    \   return longest_string;", "    std::string longest_string;\n    for (auto string\
    \ : strings) {\n        if (string.size() > longest_string.size()) {\n       \
    \     longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) return {};\n    std::string longest_string = strings[0];\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    if (strings.empty()) return\
    \ {};\n    std::string longest_string = strings[0];\n    for (auto& string : strings)\
    \ {\n        if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    int longest_length = 0;\n    for (auto& string : strings) {\n        if (string.size()\
    \ > longest_length) {\n            longest_string = string;\n            longest_length\
    \ = string.size();\n        }\n    }\n    return longest_string;", "    std::string\
    \ longest_string;\n    int longest_length = 0;\n    for (const auto& string :\
    \ strings) {\n        if (string.size() > longest_length) {\n            longest_length\
    \ = string.size();\n            longest_string = string;\n        }\n    }\n \
    \   return longest_string;", "  if (strings.empty()) return {};\n  std::string\
    \ longest_string = strings[0];\n  for (auto& string : strings) {\n    if (string.size()\
    \ > longest_string.size()) {\n      longest_string = string;\n    }\n  }\n  return\
    \ longest_string;", "    std::string longest_string;\n    for (auto& string :\
    \ strings) {\n        if (string.size() > longest_string.size()) {\n         \
    \   longest_string = string;\n        }\n    }\n    return longest_string;", " \
    \ std::string longest_string;\n  for (auto& string : strings) {\n    if (string.size()\
    \ > longest_string.size()) {\n      longest_string = string;\n    }\n  }\n  return\
    \ longest_string;", "    std::string longest_string;\n    int longest_length =\
    \ 0;\n    for (auto string : strings) {\n        if (string.length() > longest_length)\
    \ {\n            longest_length = string.length();\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "  if (strings.empty())\
    \ return std::nullopt;\n  std::string longest_string = strings[0];\n  for (auto&\
    \ string : strings) {\n    if (string.size() > longest_string.size()) {\n    \
    \  longest_string = string;\n    }\n  }\n  return longest_string;", "  std::string\
    \ longest_string;\n  for (auto string : strings) {\n    if (string.size() > longest_string.size())\
    \ {\n      longest_string = string;\n    }\n  }\n  return longest_string;", " \
    \   std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    std::size_t longest_length = 0;\n    for (auto &s : strings) {\n        if\
    \ (s.size() > longest_length) {\n            longest_length = s.size();\n    \
    \        longest_string = s;\n        }\n    }\n    return longest_string;", " \
    \   if (strings.empty()) return std::nullopt;\n    std::string max_string = strings[0];\n\
    \    for (auto &s : strings) {\n        if (s.size() > max_string.size()) max_string\
    \ = s;\n    }\n    return max_string;", "    std::string longest_string;\n   \
    \ for (auto &str : strings) {\n        if (str.size() > longest_string.size())\
    \ {\n            longest_string = str;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    int longest_length = 0;\n    for (auto& string\
    \ : strings) {\n        if (string.size() > longest_length) {\n            longest_length\
    \ = string.size();\n            longest_string = string;\n        }\n    }\n \
    \   return longest_string;", "    std::string max_string;\n    int max_length\
    \ = 0;\n    for (auto& string : strings) {\n        if (string.size() > max_length)\
    \ {\n            max_string = string;\n            max_length = string.size();\n\
    \        }\n    }\n    return max_string;", "    std::string longest_string;\n\
    \    std::size_t longest_length = 0;\n    for (const auto& string : strings) {\n\
    \        if (string.size() > longest_length) {\n            longest_string = string;\n\
    \            longest_length = string.size();\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) return std::nullopt;\n    std::string longest_string =\
    \ strings[0];\n    for (auto& string : strings) {\n        if (string.size() >\
    \ longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    if (strings.empty()) return std::nullopt;\n\
    \    std::string longest_string = strings[0];\n    for (const auto& string : strings)\
    \ {\n        if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (auto &string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    int longest_string_length = 0;\n    for (auto string : strings) {\n     \
    \   if (string.size() > longest_string_length) {\n            longest_string =\
    \ string;\n            longest_string_length = string.size();\n        }\n   \
    \ }\n    if (longest_string_length == 0) {\n        return std::optional<std::string>();\n\
    \    }\n    return longest_string;", "  if (strings.empty()) return {};\n  std::string\
    \ max_string = strings[0];\n  for (auto& string : strings) {\n    if (string.size()\
    \ > max_string.size()) max_string = string;\n  }\n  return max_string;", "   \
    \ std::string longest_string;\n    for (const auto& string : strings) {\n    \
    \    if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string max_string = strings[0];\n    for (auto& string : strings) {\n\
    \        if (string.size() > max_string.size()) {\n            max_string = string;\n\
    \        }\n    }\n    return max_string;", "    std::string longest_string;\n\
    \    int longest_length = 0;\n    for (const auto& string : strings) {\n     \
    \   if (string.length() > longest_length) {\n            longest_length = string.length();\n\
    \            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    if (strings.empty()) return\
    \ {};\n    std::string longest_string = strings[0];\n    for (auto& string : strings)\
    \ {\n        if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ return std::nullopt;\n    std::string max = strings[0];\n    for (auto& s :\
    \ strings) {\n        if (s.size() > max.size()) max = s;\n    }\n    return max;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string;\n    for (auto& string : strings) {\n        if (string.size()\
    \ > longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    if (strings.empty()) {\n        return\
    \ std::nullopt;\n    }\n    std::string longest_string = strings[0];\n    for\
    \ (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (std::string s : strings) {\n        if\
    \ (s.size() > longest_string.size()) {\n            longest_string = s;\n    \
    \    }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    if (strings.empty()) {\n        return std::optional<std::string>();\n  \
    \  }\n    for (const auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    if (strings.empty()) {\n        return std::optional<std::string>();\n\
    \    }\n    for (const auto& string : strings) {\n        if (string.size() >\
    \ longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    if (strings.empty()) {\n        return\
    \ std::nullopt;\n    }\n    std::string longest_string = strings[0];\n    for\
    \ (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (const auto& string : strings) {\n   \
    \     if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ return {};\n    std::string max_string = strings[0];\n    for (auto& string\
    \ : strings) {\n        if (string.size() > max_string.size()) max_string = string;\n\
    \    }\n    return max_string;", "  if (strings.empty()) return std::nullopt;\n\
    \  std::string max_string = strings[0];\n  for (const auto& string : strings)\
    \ {\n    if (string.size() > max_string.size()) max_string = string;\n  }\n  return\
    \ max_string;", "    std::string longest_string;\n    for (auto &string : strings)\
    \ {\n        if (longest_string.size() < string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ return std::nullopt;\n    std::string max_string = strings[0];\n    for (const\
    \ auto& string : strings) {\n        if (string.size() > max_string.size()) {\n\
    \            max_string = string;\n        }\n    }\n    return max_string;",
  "    if (strings.empty()) return std::nullopt;\n    std::string max_string = strings[0];\n\
    \    for (auto& str : strings) {\n        if (str.length() > max_string.length())\
    \ max_string = str;\n    }\n    return max_string;", "    if (strings.empty())\
    \ return std::nullopt;\n    std::string longest_string = strings[0];\n    for\
    \ (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (auto& string : strings) {\n        if\
    \ (string.length() > longest_string.length()) {\n            longest_string =\
    \ string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (const auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    if (strings.empty()) {\n\
    \        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) return std::nullopt;\n    std::string longest_string =\
    \ strings[0];\n    for (auto& string : strings) {\n        if (string.length()\
    \ > longest_string.length()) {\n            longest_string = string;\n       \
    \ }\n    }\n    return longest_string;", "    if (strings.empty()) return std::nullopt;\n\
    \    std::string longest_string = strings[0];\n    for (auto& string : strings)\
    \ {\n        if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    int longest_length = 0;\n    for (auto& string\
    \ : strings) {\n        if (string.length() > longest_length) {\n            longest_string\
    \ = string;\n            longest_length = string.length();\n        }\n    }\n\
    \    return longest_string;", "    std::string longest_string;\n    int longest_length\
    \ = 0;\n    for (auto& string : strings) {\n        if (string.length() > longest_length)\
    \ {\n            longest_length = string.length();\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    int longest_string_length = 0;\n    for (auto string : strings) {\n     \
    \   if (string.length() > longest_string_length) {\n            longest_string\
    \ = string;\n            longest_string_length = string.length();\n        }\n\
    \    }\n    return longest_string;", "  if (strings.empty()) {\n    return std::nullopt;\n\
    \  }\n  std::string max_string = strings[0];\n  for (const auto& string : strings)\
    \ {\n    if (string.size() > max_string.size()) {\n      max_string = string;\n\
    \    }\n  }\n  return max_string;", "  if (strings.empty()) return std::nullopt;\n\
    \  std::string longest_string = strings[0];\n  for (auto& string : strings) {\n\
    \    if (string.size() > longest_string.size()) {\n      longest_string = string;\n\
    \    }\n  }\n  return longest_string;", "    if (strings.empty()) return std::nullopt;\n\
    \    std::string longest_string = strings[0];\n    for (auto& string : strings)\
    \ {\n        if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    std::size_t max_length = 0;\n    for (auto& string : strings) {\n       \
    \ if (string.size() > max_length) {\n            longest_string = string;\n  \
    \          max_length = string.size();\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    if (strings.empty()) {\n        return std::optional<std::string>();\n\
    \    }\n    for (const auto& string : strings) {\n        if (string.size() >\
    \ longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    std::string longest_string;\n    int\
    \ longest_length = 0;\n    for (auto &str : strings) {\n        if (str.size()\
    \ > longest_length) {\n            longest_length = str.size();\n            longest_string\
    \ = str;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "  if (strings.empty()) {\n    return std::nullopt;\n  }\n  std::string longest_string\
    \ = strings[0];\n  for (auto& string : strings) {\n    if (string.size() > longest_string.size())\
    \ {\n      longest_string = string;\n    }\n  }\n  return longest_string;", " \
    \   std::string longest_string;\n    for (auto &str : strings) {\n        if (str.size()\
    \ > longest_string.size()) {\n            longest_string = str;\n        }\n \
    \   }\n    return longest_string;", "    std::string longest_string;\n    for\
    \ (const auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    std::size_t max_length = 0;\n    for (const\
    \ auto& string : strings) {\n        if (string.size() > max_length) {\n     \
    \       max_length = string.size();\n            longest_string = string;\n  \
    \      }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    std::size_t longest_length = 0;\n    for (const auto& string : strings) {\n\
    \        if (string.length() > longest_length) {\n            longest_length =\
    \ string.length();\n            longest_string = string;\n        }\n    }\n \
    \   return longest_string;", "    if (strings.empty()) {\n        return std::nullopt;\n\
    \    }\n    std::string max_string = strings[0];\n    for (const auto& string\
    \ : strings) {\n        if (string.length() > max_string.length()) {\n       \
    \     max_string = string;\n        }\n    }\n    return max_string;", "    std::string\
    \ longest_string;\n    if (strings.empty()) {\n        return std::nullopt;\n\
    \    }\n    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string;\n    for (auto& string : strings) {\n        if (string.size()\
    \ > longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    std::string longest_string;\n    for\
    \ (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (const auto& string : strings) {\n   \
    \     if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string max_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > max_string.size())\
    \ {\n            max_string = string;\n        }\n    }\n    return max_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string;\n    for (const auto& string : strings) {\n        if (string.size()\
    \ > longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    std::string longest_string;\n    for\
    \ (const auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string max_string;\n\
    \    std::string max_length;\n    for (auto& s : strings) {\n        if (s.size()\
    \ > max_length.size()) {\n            max_length = s;\n        }\n    }\n    if\
    \ (max_length.size() == 0) {\n        return std::nullopt;\n    }\n    return\
    \ max_length;", "    std::string longest_string;\n    for (auto& string : strings)\
    \ {\n        if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ return {};\n    std::string max_string = strings[0];\n    for (auto& string\
    \ : strings) {\n        if (string.size() > max_string.size()) {\n           \
    \ max_string = string;\n        }\n    }\n    return max_string;", "    std::string\
    \ longest_string;\n    for (auto& string : strings) {\n        if (string.size()\
    \ > longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    if (strings.empty()) return std::nullopt;\n\
    \    std::string longest_string = strings[0];\n    for (auto& string : strings)\
    \ {\n        if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ return std::nullopt;\n    std::string longest_string = strings.front();\n  \
    \  for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    std::size_t longest_length = 0;\n    for (auto &s : strings) {\n        if\
    \ (s.size() > longest_length) {\n            longest_length = s.size();\n    \
    \        longest_string = s;\n        }\n    }\n    return longest_string;", " \
    \   if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (auto &string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    std::size_t longest_length = 0;\n    for (auto string : strings) {\n    \
    \    if (string.size() > longest_length) {\n            longest_length = string.size();\n\
    \            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) return std::optional<std::string>();\n    std::string\
    \ longest_string = strings[0];\n    for (auto &s : strings) {\n        if (s.size()\
    \ > longest_string.size()) {\n            longest_string = s;\n        }\n   \
    \ }\n    return longest_string;", "    std::string longest_string;\n    for (auto&\
    \ string : strings) {\n        if (string.size() > longest_string.size()) {\n\
    \            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (const auto& string : strings) {\n   \
    \     if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (longest_string.size() < string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string max_string;\n    std::string cur_string;\n    for (auto &str :\
    \ strings) {\n        if (str.size() > max_string.size()) {\n            max_string\
    \ = str;\n        }\n        if (str.size() == max_string.size()) {\n        \
    \    if (str > max_string) {\n                max_string = str;\n            }\n\
    \        }\n    }\n    return max_string;", "    std::string longest_string;\n\
    \    std::size_t max_length = 0;\n    for (const auto& string : strings) {\n \
    \       if (string.size() > max_length) {\n            longest_string = string;\n\
    \            max_length = string.size();\n        }\n    }\n    return longest_string;",
  "    std::string max_string = strings[0];\n    for (auto& string : strings) {\n\
    \        if (string.size() > max_string.size()) {\n            max_string = string;\n\
    \        }\n    }\n    return max_string;", "    if (strings.empty()) {\n    \
    \    return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (const auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    int longest_length = 0;\n    for (auto& string\
    \ : strings) {\n        if (string.size() > longest_length) {\n            longest_length\
    \ = string.size();\n            longest_string = string;\n        }\n    }\n \
    \   return longest_string;", "    std::string longest_string;\n    int longest_length\
    \ = 0;\n    for (auto& string : strings) {\n        if (string.size() > longest_length)\
    \ {\n            longest_string = string;\n            longest_length = string.size();\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    int longest_len = 0;\n    for (auto& string : strings) {\n        if (string.size()\
    \ > longest_len) {\n            longest_len = string.size();\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    std::size_t longest_length = 0;\n    for (const auto& string : strings) {\n\
    \        if (string.size() > longest_length) {\n            longest_length = string.size();\n\
    \            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    if (strings.empty()) {\n        return std::nullopt;\n\
    \    }\n    for (auto& string : strings) {\n        if (string.length() > longest_string.length())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) return {};\n    std::string longest_string = strings[0];\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string max_string = strings[0];\n    for (auto& str : strings) {\n   \
    \     if (str.size() > max_string.size()) {\n            max_string = str;\n \
    \       }\n    }\n    return max_string;", "    std::string longest_string;\n\
    \    for (auto string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ max_string = strings.front();\n    for (auto& string : strings) {\n        if\
    \ (string.size() > max_string.size()) {\n            max_string = string;\n  \
    \      }\n    }\n    return max_string;", "    std::string longest_string;\n \
    \   for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "  if (strings.empty()) {\n  \
    \  return std::nullopt;\n  }\n  std::string longest_string = strings[0];\n  for\
    \ (auto& string : strings) {\n    if (string.size() > longest_string.size()) {\n\
    \      longest_string = string;\n    }\n  }\n  return longest_string;", "    std::string\
    \ longest_string;\n    for (const auto& string : strings) {\n        if (string.size()\
    \ > longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    if (strings.empty()) {\n        return\
    \ std::nullopt;\n    }\n    std::string longest_string = strings[0];\n    for\
    \ (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (const auto& string : strings) {\n   \
    \     if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "  if (strings.empty()) return\
    \ {};\n  std::string max_string = strings[0];\n  for (auto& string : strings)\
    \ {\n    if (string.size() > max_string.size()) {\n      max_string = string;\n\
    \    }\n  }\n  return max_string;", "    std::string longest_string;\n    for\
    \ (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    if (strings.empty()) {\n        return std::nullopt;\n\
    \    }\n    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto &s : strings) {\n        if (s.size()\
    \ > longest_string.size()) {\n            longest_string = s;\n        }\n   \
    \ }\n    return longest_string;", "  std::string longest_string;\n  for (auto&\
    \ string : strings) {\n    if (string.size() > longest_string.size()) {\n    \
    \  longest_string = string;\n    }\n  }\n  return longest_string;", "    if (strings.empty())\
    \ {\n        return std::nullopt;\n    }\n    std::string longest_string;\n  \
    \  for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (longest_string.size() < string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    int longest_length = 0;\n    for (const auto&\
    \ string : strings) {\n        if (string.size() > longest_length) {\n       \
    \     longest_length = string.size();\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    if (strings.empty()) {\n\
    \        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    int longest_length = 0;\n    for (auto& string\
    \ : strings) {\n        if (string.length() > longest_length) {\n            longest_length\
    \ = string.length();\n            longest_string = string;\n        }\n    }\n\
    \    return longest_string;", "    std::string longest_string;\n    if (strings.empty())\
    \ {\n        return std::optional<std::string>();\n    }\n    for (auto& string\
    \ : strings) {\n        if (string.size() > longest_string.size()) {\n       \
    \     longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) return std::nullopt;\n    std::string max_string = strings[0];\n\
    \    for (auto &s : strings) {\n        if (s.size() > max_string.size()) {\n\
    \            max_string = s;\n        }\n    }\n    return max_string;", "   \
    \ std::string longest_string;\n    for (auto string : strings) {\n        if (string.size()\
    \ > longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    std::string longest_string;\n    if\
    \ (strings.empty()) {\n        return std::optional<std::string>();\n    }\n \
    \   for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    int longest_length = 0;\n    for (auto& string\
    \ : strings) {\n        if (string.size() > longest_length) {\n            longest_length\
    \ = string.size();\n            longest_string = string;\n        }\n    }\n \
    \   return longest_string;", "    std::string longest_string;\n    int longest_length\
    \ = 0;\n    for (auto& string : strings) {\n        if (string.size() > longest_length)\
    \ {\n            longest_length = string.size();\n            longest_string =\
    \ string;\n        }\n    }\n    return longest_string;", "  std::string longest_string;\n\
    \  for (auto string : strings) {\n    if (string.size() > longest_string.size())\
    \ {\n      longest_string = string;\n    }\n  }\n  return longest_string;", " \
    \   std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    if (strings.empty()) {\n\
    \        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "  if (strings.empty()) {\n    return std::nullopt;\n  }\n  std::string longest_string\
    \ = strings[0];\n  for (auto& string : strings) {\n    if (string.size() > longest_string.size())\
    \ {\n      longest_string = string;\n    }\n  }\n  return longest_string;", " \
    \ if (strings.empty()) return std::nullopt;\n  std::string longest_string = strings[0];\n\
    \  for (const auto& string : strings) {\n    if (string.size() > longest_string.size())\
    \ longest_string = string;\n  }\n  return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string max_string;\n    int max_length = 0;\n    for (auto& string : strings)\
    \ {\n        if (string.size() > max_length) {\n            max_length = string.size();\n\
    \            max_string = string;\n        }\n    }\n    return max_string;",
  "    std::string max_string;\n    std::string curr_string;\n    for (auto string\
    \ : strings) {\n        if (string.size() > max_string.size()) {\n           \
    \ max_string = string;\n        }\n    }\n    return max_string;", "    std::string\
    \ longest_string;\n    for (const auto& string : strings) {\n        if (string.size()\
    \ > longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    if (strings.empty()) {\n        return\
    \ std::nullopt;\n    }\n    std::string max_string = strings.front();\n    for\
    \ (const auto& string : strings) {\n        if (string.size() > max_string.size())\
    \ {\n            max_string = string;\n        }\n    }\n    return max_string;",
  "    std::string max_string;\n    for (const auto& s : strings) {\n        if (s.size()\
    \ > max_string.size()) {\n            max_string = s;\n        }\n    }\n    return\
    \ max_string;", "    std::string longest_string;\n    for (auto& string : strings)\
    \ {\n        if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ return {};\n    std::string max_string = strings[0];\n    for (auto& string\
    \ : strings) {\n        if (string.size() > max_string.size()) max_string = string;\n\
    \    }\n    return max_string;", "    std::string longest_string;\n    if (strings.empty())\
    \ {\n        return std::optional<std::string>();\n    }\n    for (auto& string\
    \ : strings) {\n        if (string.size() > longest_string.size()) {\n       \
    \     longest_string = string;\n        }\n    }\n    return longest_string;",
  "  if (strings.empty()) {\n    return std::nullopt;\n  }\n  std::string longest_string\
    \ = strings.front();\n  for (auto& string : strings) {\n    if (string.size()\
    \ > longest_string.size()) {\n      longest_string = string;\n    }\n  }\n  return\
    \ longest_string;", "    std::string longest_string;\n    for (auto string : strings)\
    \ {\n        if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ max_string = strings[0];\n    for (const auto& string : strings) {\n       \
    \ if (string.size() > max_string.size()) {\n            max_string = string;\n\
    \        }\n    }\n    return max_string;", "    if (strings.empty()) return {};\n\
    \    std::string max_string = strings[0];\n    for (auto& string : strings) {\n\
    \        if (string.size() > max_string.size()) {\n            max_string = string;\n\
    \        }\n    }\n    return max_string;", "    std::string longest_string;\n\
    \    for (const auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    if (strings.empty()) return\
    \ {};\n    std::string max = strings[0];\n    for (auto& s : strings) {\n    \
    \    if (s.size() > max.size()) max = s;\n    }\n    return max;", "    std::string\
    \ max_string;\n    std::string max_length_string;\n    for (auto string : strings)\
    \ {\n        if (string.length() > max_length_string.length()) {\n           \
    \ max_length_string = string;\n        }\n        if (string.length() > max_string.length())\
    \ {\n            max_string = string;\n        }\n    }\n    return max_string;",
  "    if (strings.empty()) {\n        return std::nullopt;\n    }\n    std::string\
    \ longest_string = strings[0];\n    for (auto &string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    if (strings.empty()) {\n\
    \        return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (const auto& string : strings) {\n   \
    \     if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ return std::nullopt;\n    std::string max_string = strings.front();\n    for\
    \ (auto& string : strings) {\n        if (string.size() > max_string.size()) max_string\
    \ = string;\n    }\n    return max_string;", "    if (strings.empty()) {\n   \
    \     return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (const auto& string : strings) {\n   \
    \     if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    for (auto& string : strings) {\n        if\
    \ (string.size() > longest_string.size()) {\n            longest_string = string;\n\
    \        }\n    }\n    return longest_string;", "    std::string max_string =\
    \ \"\";\n    for (auto& string : strings) {\n        if (string.size() > max_string.size())\
    \ {\n            max_string = string;\n        }\n    }\n    return max_string;",
  "  if (strings.empty()) {\n    return std::nullopt;\n  }\n  std::string longest_string\
    \ = strings[0];\n  for (const auto& string : strings) {\n    if (string.size()\
    \ > longest_string.size()) {\n      longest_string = string;\n    }\n  }\n  return\
    \ longest_string;", "    std::string longest_string;\n    for (auto& string :\
    \ strings) {\n        if (string.size() > longest_string.size()) {\n         \
    \   longest_string = string;\n        }\n    }\n    return longest_string;", " \
    \ std::string longest_string;\n  for (auto string : strings) {\n    if (string.size()\
    \ > longest_string.size()) {\n      longest_string = string;\n    }\n  }\n  return\
    \ longest_string;", "    std::string longest_string;\n    int longest_length =\
    \ 0;\n    for (auto &s : strings) {\n        if (s.size() > longest_length) {\n\
    \            longest_string = s;\n            longest_length = s.size();\n   \
    \     }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) return {};\n    std::string longest_string = strings[0];\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) return std::nullopt;\n    std::string longest_string =\
    \ strings[0];\n    for (auto& string : strings) {\n        if (string.size() >\
    \ longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    if (strings.empty()) return {};\n  \
    \  std::string longest_string = strings[0];\n    for (auto& string : strings)\
    \ {\n        if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    if (strings.empty())\
    \ return std::nullopt;\n    std::string max = strings[0];\n    for (auto& s :\
    \ strings) {\n        if (s.size() > max.size()) max = s;\n    }\n    return max;",
  "    std::string longest_string;\n    for (const auto& string : strings) {\n   \
    \     if (string.size() > longest_string.size()) {\n            longest_string\
    \ = string;\n        }\n    }\n    return longest_string;", "    std::string longest_string;\n\
    \    int longest_length = 0;\n    for (auto& string : strings) {\n        if (string.length()\
    \ > longest_length) {\n            longest_length = string.length();\n       \
    \     longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    if (strings.empty()) {\n        return std::nullopt;\n\
    \    }\n    for (const auto& string : strings) {\n        if (string.size() >\
    \ longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    std::string max_string;\n    for (auto&\
    \ s : strings) {\n        if (s.size() > max_string.size()) {\n            max_string\
    \ = s;\n        }\n    }\n    return max_string;", "    std::string max_string;\n\
    \    for (auto &str : strings) {\n        if (str.size() > max_string.size())\
    \ {\n            max_string = str;\n        }\n    }\n    return max_string;",
  "  std::string longest_string;\n  for (auto string : strings) {\n    if (string.size()\
    \ > longest_string.size()) {\n      longest_string = string;\n    }\n  }\n  return\
    \ longest_string;", "    std::string longest_string;\n    for (auto& string :\
    \ strings) {\n        if (string.size() > longest_string.size()) {\n         \
    \   longest_string = string;\n        }\n    }\n    return longest_string;", " \
    \   std::string max_string;\n    for (const auto& string : strings) {\n      \
    \  if (string.size() > max_string.size()) {\n            max_string = string;\n\
    \        }\n    }\n    return max_string;", "    if (strings.empty()) {\n    \
    \    return std::nullopt;\n    }\n    std::string longest_string = strings[0];\n\
    \    for (std::string string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    if (strings.empty()) {\n        return std::optional<std::string>();\n\
    \    }\n    for (const auto& string : strings) {\n        if (string.size() >\
    \ longest_string.size()) {\n            longest_string = string;\n        }\n\
    \    }\n    return longest_string;", "    std::string longest_string;\n    int\
    \ longest_string_length = 0;\n    for (auto string : strings) {\n        if (string.length()\
    \ > longest_string_length) {\n            longest_string = string;\n         \
    \   longest_string_length = string.length();\n        }\n    }\n    return longest_string;",
  "  if (strings.empty()) {\n    return std::nullopt;\n  }\n  std::string longest_string\
    \ = strings[0];\n  for (auto& string : strings) {\n    if (string.size() > longest_string.size())\
    \ {\n      longest_string = string;\n    }\n  }\n  return longest_string;", " \
    \   if (strings.empty()) return std::nullopt;\n    std::string longest_string;\n\
    \    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    if (strings.empty()) {\n        return std::optional<std::string>();\n\
    \    }\n    for (auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    if (strings.empty()) return std::nullopt;\n    std::string longest_string;\n\
    \    for (const auto& string : strings) {\n        if (string.size() > longest_string.size())\
    \ {\n            longest_string = string;\n        }\n    }\n    return longest_string;",
  "    std::string longest_string;\n    int longest_length = 0;\n    for (auto& string\
    \ : strings) {\n        if (string.size() > longest_length) {\n            longest_length\
    \ = string.size();\n            longest_string = string;\n        }\n    }\n \
    \   return longest_string;"]
stop_tokens:
- "\n}"
