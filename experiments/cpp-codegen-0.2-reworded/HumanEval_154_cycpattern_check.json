{
  "name": "HumanEval_154_cycpattern_check",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n// >>> cycpattern_check(\"abcd\",\"abd\") \n// False\n// >>> cycpattern_check(\"hello\",\"ell\") \n// True\n// >>> cycpattern_check(\"whassup\",\"psus\") \n// False\n// >>> cycpattern_check(\"abab\",\"baa\") \n// True\n// >>> cycpattern_check(\"efef\",\"eeff\") \n// False\n// >>> cycpattern_check(\"himenss\",\"simen\") \n// True\nbool cycpattern_check(std::string a, std::string b) {\n",
  "tests": "}\nint main() {\n    auto candidate = cycpattern_check;\n    assert(candidate((\"xyzw\"), (\"xyw\")) == (false));\n    assert(candidate((\"yello\"), (\"ell\")) == (true));\n    assert(candidate((\"whattup\"), (\"ptut\")) == (false));\n    assert(candidate((\"efef\"), (\"fee\")) == (true));\n    assert(candidate((\"abab\"), (\"aabb\")) == (false));\n    assert(candidate((\"winemtt\"), (\"tinem\")) == (true));\n}\n",
  "completions": [
    "    int lena = a.length();\n    int lenb = b.length();\n    int lena_min = lena;\n    int lenb_min = lenb;\n    if (lena < lenb) {\n        lena_min = lenb;\n        lenb_min = lena;\n    }\n    for (int i = 0; i < lena_min; i++) {\n        if (a[i] == b[0]) {\n            for (int j = 1; j < lenb_min; j++) {\n                if (a[i + j] != b[j]) {\n                    break;\n                }\n                if (j == lenb_min - 1) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
    "    if (a.length() < b.length()) return false;\n    int l = a.length();\n    int r = b.length();\n    int i = 0;\n    int j = 0;\n    while (i < l && j < r) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == r) return true;\n    else return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        bool found = true;\n        for (int j = 0; j < lenb; ++j) {\n            if (a[i + j] != b[j]) {\n                found = false;\n                break;\n            }\n        }\n        if (found) return true;\n        i++;\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else if (a[i] > b[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lenb == 0) return true;\n    int i = 0;\n    while (i < lena) {\n        int j = 0;\n        while (j < lenb) {\n            if (a[i] == b[j]) {\n                i++;\n                j++;\n                if (i == lena && j == lenb) return true;\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return false;",
    "    int len_a = a.length();\n    int len_b = b.length();\n    int i = 0;\n    int j = 0;\n    while (i < len_a && j < len_b) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (i == len_a && j == len_b) {\n        return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        if (b == a.substr(i, lenb)) return true;\n        i++;\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    if(a.size() < b.size()) return false;\n    std::string c = a;\n    for(int i = 0; i < b.size(); i++) {\n        c.erase(c.begin() + i);\n        if(c == b) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        if (a.substr(i, lenb) == b) return true;\n        i++;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string s = a;\n    for(int i = 0; i < b.size(); i++) {\n        if(s.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    std::string t = a;\n    for(int i = 0; i < b.length(); i++) {\n        t.erase(t.begin() + i);\n        if(t == b) return true;\n    }\n    return false;",
    "    if (a.length() < b.length()) return false;\n    std::string temp = a;\n    for (int i = 0; i < b.length(); i++) {\n        if (temp.find(b.substr(i, b.length())) != std::string::npos) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    std::string s = a;\n    for (int i = 0; i < lenb; ++i) {\n        if (s.find(b.substr(i, lenb)) != std::string::npos) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        int j = 0;\n        while (j < lenb) {\n            if (a[i + j] != b[j]) break;\n            j++;\n        }\n        if (j == lenb) return true;\n        i++;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    int l = a.length();\n    int r = b.length();\n    int i = 0;\n    int j = 0;\n    while(i < l && j < r) {\n        if(a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == l && j == r;",
    "    if(a.size() < b.size()) return false;\n    std::string s = a;\n    for(int i = 0; i < b.size(); i++) {\n        if(s.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if(lena < lenb) return false;\n    int i = 0;\n    while(i < lena - lenb + 1) {\n        if(a.substr(i, lenb) == b) return true;\n        i++;\n    }\n    return false;",
    "    std::string s = a;\n    std::string t = b;\n    int l = s.length();\n    int r = t.length();\n    int i = 0;\n    while (i < r) {\n        if (s.substr(i, r - i) == t.substr(0, r - i)) {\n            return true;\n        }\n        i++;\n    }\n    return false;",
    "    if (a.length() < b.length()) return false;\n    int l = a.length();\n    int r = b.length();\n    int m = l / r;\n    int i = 0;\n    while (i < m) {\n        if (a.substr(i * r, r) == b) return true;\n        i++;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    if(a.size() == b.size()) return a == b;\n    for(int i = 0; i < a.size(); i++) {\n        if(a.substr(i, b.size()) == b) return true;\n    }\n    return false;",
    "    if (a.length() < b.length()) return false;\n    std::string s = a;\n    for (int i = 0; i < b.length(); i++) {\n        s.replace(i, b.length(), b);\n        if (s.find(b) != std::string::npos) return true;\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    if(a.length() < b.length()) return false;\n    int n = a.length();\n    int m = b.length();\n    int i = 0, j = 0;\n    while(i < n && j < m) {\n        if(a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(i == n && j == m) return true;\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int lena_half = lena/2;\n    int lenb_half = lenb/2;\n    for (int i = 0; i < lena_half; i++) {\n        if (a.substr(i, lenb_half) == b) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string s = a;\n    for(int i = 0; i < b.size(); i++) {\n        s = s.substr(0, s.size() - b.size() + 1) + b.substr(i, b.size() - i);\n        if(s == b) return true;\n    }\n    return false;",
    "    std::string::size_type i, j;\n    for (i = 0; i < a.size(); i++) {\n        for (j = 0; j < b.size(); j++) {\n            if (a[i] == b[j]) {\n                if (i + j == b.size() - 1) {\n                    return true;\n                }\n                if (i + j + 1 == a.size()) {\n                    return true;\n                }\n                if (a[i + j + 1] == b[j + 1]) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lenb) {\n        if (a.find(b, i) != std::string::npos) return true;\n        i++;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string b_rotated = b;\n    for(int i = 0; i < b.size(); ++i) {\n        b_rotated[i] = b[b.size() - 1 - i];\n    }\n    for(int i = 0; i < a.size(); ++i) {\n        if(a[i] == b[0] || a[i] == b_rotated[0]) return true;\n    }\n    return false;",
    "    int len_a = a.length();\n    int len_b = b.length();\n    int i = 0;\n    while(i < len_b) {\n        if(a.find(b.substr(i,len_b)) != std::string::npos) {\n            return true;\n        }\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    std::string s = a;\n    for (int i = 0; i < lena - lenb + 1; i++) {\n        s.erase(0, lenb);\n        if (s == b) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    std::string s = a;\n    for (int i = 0; i < lenb; ++i) {\n        if (s.find(b.substr(i, lenb)) != std::string::npos) return true;\n    }\n    return false;",
    "    int n = a.size();\n    int m = b.size();\n    if (n < m) return false;\n    int i = 0;\n    while (i < n - m + 1) {\n        bool found = true;\n        for (int j = 0; j < m; j++) {\n            if (a[i + j] != b[j]) {\n                found = false;\n                break;\n            }\n        }\n        if (found) return true;\n        i++;\n    }\n    return false;",
    "    if (a.size() < b.size()) return false;\n    std::string s = a;\n    for (int i = 0; i < b.size(); ++i) {\n        if (s.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else if (a[i] == b[j + 1]) {\n            i++;\n            j++;\n        } else if (a[i + 1] == b[j]) {\n            i++;\n            j++;\n        } else if (a[i + 1] == b[j + 1]) {\n            i++;\n            j++;\n        } else {\n            i++;\n            j = 0;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    std::string::iterator ita = a.begin();\n    std::string::iterator itb = b.begin();\n    std::string::iterator ita_end = a.end();\n    std::string::iterator itb_end = b.end();\n    while(ita != ita_end && itb != itb_end) {\n        if(*ita == *itb) {\n            ita++;\n            itb++;\n        } else {\n            break;\n        }\n    }\n    if(ita == ita_end && itb == itb_end) {\n        return true;\n    }\n    return false;",
    "    std::string::iterator ita = a.begin();\n    std::string::iterator itb = b.begin();\n    while(ita != a.end() && itb != b.end()) {\n        if(*ita != *itb) return false;\n        ita++;\n        itb++;\n    }\n    return true;",
    "    if(a.length() < b.length()) return false;\n    int i = 0;\n    while(i < b.length()) {\n        if(a.find(b, i) != std::string::npos) return true;\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lena == lenb) {\n        if (a == b) return true;\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < lena && j < lenb) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == lenb) return true;\n    return false;",
    "    if (a.size() < b.size()) return false;\n    std::string t = a;\n    for (int i = 0; i < b.size(); i++) {\n        if (t.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    std::string s = a;\n    std::string t = b;\n    int l1 = a.length();\n    int l2 = b.length();\n    int i = 0;\n    int j = 0;\n    while (i < l1 && j < l2) {\n        if (s[i] == t[j]) {\n            i++;\n            j++;\n        } else if (s[i] > t[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    if (i == l1 && j == l2) {\n        return true;\n    } else {\n        return false;\n    }",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        if (b == a.substr(i, lenb)) return true;\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        bool found = true;\n        for (int j = 0; j < lenb; j++) {\n            if (a[i + j] != b[j]) {\n                found = false;\n                break;\n            }\n        }\n        if (found) return true;\n        i++;\n    }\n    return false;",
    "    int len_a = a.length();\n    int len_b = b.length();\n    if (len_a < len_b) return false;\n    int i = 0;\n    while (i < len_b) {\n        if (a.find(b.substr(i, len_b)) != std::string::npos) return true;\n        i++;\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    int lena = a.length();\n    int lenb = b.length();\n    if(lena < lenb) return false;\n    std::string s = a;\n    std::string t = b;\n    std::string s1,s2;\n    s1 = s;\n    s2 = t;\n    for(int i = 0; i < lenb; i++) {\n        s1.erase(s1.begin()+i);\n        s2.erase(s2.begin()+i);\n        if(s1 == s2) return true;\n    }\n    return false;",
    "    std::string s = a;\n    std::string t = b;\n    int l = s.length();\n    int m = t.length();\n    int i = 0;\n    while (i < m) {\n        int j = i;\n        while (j < m && t[j] == t[i]) {\n            j++;\n        }\n        if (j - i >= l) {\n            return true;\n        }\n        i = j;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if(lena < lenb) return false;\n    int i = 0;\n    while(i < lena - lenb + 1) {\n        if(b == a.substr(i, lenb)) return true;\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    int j = 0;\n    while (i < lena && j < lenb) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == lenb) return true;\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    if(a.size() < b.size()) return false;\n    std::string s = a;\n    std::string t = b;\n    std::reverse(s.begin(), s.end());\n    std::reverse(t.begin(), t.end());\n    for(int i = 0; i < s.size(); i++) {\n        if(s.substr(i, t.size()) == t) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    for(int i = 0; i < b.size(); i++) {\n        if(a.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    std::string b_rotated = b;\n    for(int i = 0; i < b.length(); i++) {\n        b_rotated[i] = b[b.length() - 1 - i];\n    }\n    for(int i = 0; i < a.length(); i++) {\n        if(a.substr(i, b.length()) == b) return true;\n        if(a.substr(i, b.length()) == b_rotated) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lena == lenb) {\n        if (a == b) return true;\n        return false;\n    }\n    int l = lena - lenb;\n    for (int i = 0; i <= l; i++) {\n        if (a.substr(i, lenb) == b) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lena == lenb) {\n        if (a == b) return true;\n        return false;\n    }\n    int l = lena - lenb;\n    for (int i = 0; i <= l; i++) {\n        if (a.substr(i, lenb) == b) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if(lena < lenb) return false;\n    int i = 0;\n    while(i < lena - lenb + 1) {\n        if(b == a.substr(i, lenb)) return true;\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lenb == 0) return true;\n    if (lena == 0) return false;\n    int i = 0;\n    int j = 0;\n    while (i < lena && j < lenb) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == lenb) return true;\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size();",
    "    int lena = a.length();\n    int lenb = b.length();\n    int i = 0;\n    while (i < lena && i < lenb) {\n        if (a[i] == b[i]) {\n            i++;\n        } else {\n            i = 0;\n        }\n    }\n    if (i == lenb) {\n        return true;\n    }\n    for (int j = i; j < lena; j++) {\n        if (a[j] == b[i]) {\n            return true;\n        }\n    }\n    return false;",
    "    if (a.length() < b.length()) return false;\n    int n = a.length();\n    int m = b.length();\n    int i = 0;\n    int j = 0;\n    while (i < n && j < m) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == m) return true;\n    else return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else if (a[i] > b[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    int lena = a.length();\n    int lenb = b.length();\n    if(lena < lenb) return false;\n    std::string s = a;\n    for(int i = 0; i < lena - lenb + 1; i++) {\n        s = s.substr(i, lenb);\n        if(b == s) return true;\n    }\n    return false;",
    "    std::string::iterator it;\n    for (it = b.begin(); it != b.end(); it++) {\n        std::string s = a;\n        while (s.length() > 0 && s.length() >= b.length()) {\n            if (s.substr(0, b.length()) == b) {\n                return true;\n            }\n            s.erase(0, 1);\n        }\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size();",
    "    if(a.size() < b.size()) return false;\n    std::string s = a;\n    std::string t = b;\n    std::reverse(s.begin(), s.end());\n    std::reverse(t.begin(), t.end());\n    if(s.find(t) != std::string::npos) return true;\n    for(int i = 0; i < s.size(); i++) {\n        std::string temp = s.substr(i, s.size() - i);\n        if(t.find(temp) != std::string::npos) return true;\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.length() && j < b.length()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else if (a[i] > b[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return (i == a.length() && j == b.length());",
    "    std::string::iterator ita = a.begin();\n    std::string::iterator itb = b.begin();\n    while (ita != a.end() && itb != b.end()) {\n        if (*ita != *itb) {\n            return false;\n        }\n        ita++;\n        itb++;\n    }\n    if (ita == a.end() && itb == b.end()) {\n        return true;\n    }\n    return false;",
    "    std::string a_rotated = a;\n    std::string b_rotated = b;\n    std::string::iterator it;\n    for(it = a_rotated.begin(); it != a_rotated.end(); it++) {\n        a_rotated[it] = *it;\n    }\n    for(it = b_rotated.begin(); it != b_rotated.end(); it++) {\n        b_rotated[it] = *it;\n    }\n    std::string::iterator it_a = a_rotated.begin();\n    std::string::iterator it_b = b_rotated.begin();\n    while(it_a != a_rotated.end() && it_b != b_rotated.end()) {\n        if(*it_a == *it_b) {\n            it_a++;\n            it_b++;\n        } else {\n            break;\n        }\n    }\n    return it_a == a_rotated.end() || it_b == b_rotated.end();",
    "    int lena = a.length();\n    int lenb = b.length();\n    if(lena < lenb) return false;\n    std::string s = a;\n    for(int i = 0; i < lenb; i++) {\n        s.replace(i,1,b);\n        if(s.find(a) != std::string::npos) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        if (b == a.substr(i, lenb)) return true;\n        i++;\n    }\n    return false;",
    "    std::string::iterator ita = a.begin();\n    std::string::iterator itb = b.begin();\n    while (ita != a.end() && itb != b.end()) {\n        if (*ita != *itb) {\n            return false;\n        }\n        ita++;\n        itb++;\n    }\n    if (ita == a.end() && itb == b.end()) {\n        return true;\n    }\n    return false;",
    "    if(a.size()<b.size()) return false;\n    std::string c = a;\n    for(int i=0;i<b.size();i++) {\n        c.erase(c.begin()+i);\n        if(c==b) return true;\n    }\n    return false;",
    "    if (a.length() < b.length()) return false;\n    if (a.length() == b.length()) return a == b;\n    int l = a.length();\n    for (int i = 0; i < l; i++) {\n        if (a.substr(i, l) == b) return true;\n    }\n    return false;",
    "    if (a.length() < b.length()) return false;\n    int l = a.length();\n    int r = b.length();\n    int i = 0;\n    while (i < l) {\n        if (a[i] == b[0]) {\n            if (r == 1) return true;\n            int j = i;\n            while (j < l && a[j] == b[j]) j++;\n            if (j - i == r) return true;\n        }\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    int i = 0;\n    while (i < lena) {\n        int j = 0;\n        while (j < lenb) {\n            if (a[i] == b[j]) {\n                i++;\n                j++;\n                if (i == lena && j == lenb) {\n                    return true;\n                }\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return false;",
    "    if (a.length() < b.length()) return false;\n    int i = 0, j = 0;\n    while (i < a.length()) {\n        if (j < b.length() && a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return j == b.length();",
    "    if(a.size() < b.size()) return false;\n    for(int i = 0; i < b.size(); i++) {\n        if(a.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    std::string t = b;\n    int n = a.length();\n    int m = t.length();\n    for (int i = 0; i < m; i++) {\n        if (a.find(t.substr(i)) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (i == a.size()) return true;\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    std::string t = b;\n    for (int i = 0; i < b.length(); i++) {\n        t = t.substr(1, t.length() - 1);\n        if (a.find(t) != std::string::npos) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    int i = 0;\n    while (i < lena) {\n        int j = 0;\n        while (j < lenb) {\n            if (a[i] == b[j]) {\n                i++;\n                j++;\n                if (i == lena && j == lenb) {\n                    return true;\n                }\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string s = a;\n    for(int i = 0; i < b.size(); ++i) {\n        s.erase(s.begin() + i, s.begin() + i + b.size());\n        if(s == b) return true;\n    }\n    return false;",
    "    std::string::iterator it;\n    for(it=b.begin(); it!=b.end(); it++) {\n        std::string temp(a);\n        std::string::iterator it2;\n        for(it2=temp.begin(); it2!=temp.end(); it2++) {\n            if(*it2 == *it) {\n                if(temp.find(b) != std::string::npos) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;",
    "    if(a.length()<b.length()) return false;\n    int l=a.length();\n    int r=b.length();\n    int i=0;\n    while(i<r) {\n        if(a.substr(i,r)==b) return true;\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    int i = 0;\n    while (i < lena) {\n        int j = 0;\n        while (j < lenb) {\n            if (a[i] == b[j]) {\n                i++;\n                j++;\n                if (i == lena) {\n                    return true;\n                }\n            } else {\n                j = 0;\n            }\n        }\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        if (b == a.substr(i, lenb)) return true;\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        if (b == a.substr(i, lenb)) return true;\n        i++;\n    }\n    return false;",
    "    std::string::iterator it;\n    for (it = b.begin(); it != b.end(); ++it) {\n        std::string temp = b;\n        std::reverse(temp.begin(), temp.end());\n        if (a.find(temp) != std::string::npos) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string b_rotated = b;\n    std::reverse(b_rotated.begin(), b_rotated.end());\n    for(int i = 0; i < a.size(); i++) {\n        if(a.substr(i, b.size()) == b || a.substr(i, b_rotated.size()) == b_rotated) return true;\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    if (a.size() < b.size()) return false;\n    std::string s = a;\n    std::string t = b;\n    for (int i = 0; i < s.size(); i++) {\n        if (s.substr(i, b.size()) == b) return true;\n        if (s.substr(i, b.size()) != b) break;\n        s.erase(i, 1);\n        t.erase(0, 1);\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    int i = 0;\n    while(i < b.size()) {\n        if(a.find(b.substr(i)) != std::string::npos) return true;\n        i++;\n    }\n    return false;",
    "    if (a.length() < b.length()) return false;\n    int l = a.length();\n    int r = b.length();\n    for (int i = 0; i < l; i++) {\n        if (a.substr(i, r) == b) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    for(int i = 0; i < b.size(); i++) {\n        if(a.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    std::string::iterator ita = a.begin();\n    std::string::iterator itb = b.begin();\n    std::string::iterator ita_end = a.end();\n    std::string::iterator itb_end = b.end();\n    while (ita != ita_end && itb != itb_end) {\n        if (*ita != *itb) {\n            return false;\n        }\n        ita++;\n        itb++;\n    }\n    if (ita == ita_end && itb == itb_end) {\n        return true;\n    }\n    if (ita == ita_end) {\n        return false;\n    }\n    if (itb == itb_end) {\n        return false;\n    }\n    std::string::iterator itb_rot = itb;\n    while (itb_rot != itb_end) {\n        if (*itb_rot != *ita) {\n            return false;\n        }\n        itb_rot++;\n    }\n    return true;",
    "    std::string::size_type lena = a.length(), lenb = b.length();\n    if (lena < lenb) return false;\n    for (std::string::size_type i = 0; i < lenb; ++i) {\n        if (a.substr(i, lenb) == b) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lena == lenb) {\n        if (a == b) return true;\n        return false;\n    }\n    int l = lena - lenb;\n    int i = 0;\n    while (i < l) {\n        if (a[i] == b[0]) {\n            for (int j = 1; j < lenb; j++) {\n                if (a[i + j] != b[j]) {\n                    break;\n                }\n                if (j == lenb - 1) return true;\n            }\n        }\n        i++;\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return (i == a.size() && j == b.size());",
    "    if(a.size() < b.size()) return false;\n    if(a.size() == b.size()) return a == b;\n    std::string s = a;\n    for(int i = 0; i < b.size(); i++) {\n        s = s.substr(i) + s.substr(0, i);\n        if(s == b) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    for(int i = 0; i < b.size(); i++) {\n        if(a.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else if (a[i] > b[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    if(a.size()<b.size()) return false;\n    std::string temp = a;\n    for(int i=0;i<b.size();i++) {\n        if(temp.find(b.substr(i))!=std::string::npos) return true;\n        temp = temp.substr(0,temp.size()-1);\n    }\n    return false;",
    "    std::string::size_type lena = a.size(), lenb = b.size();\n    if (lena < lenb) return false;\n    std::string::size_type i = 0, j = 0;\n    while (i < lena && j < lenb) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (i == lena) return true;\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        bool found = false;\n        for (int j = 0; j < lenb; ++j) {\n            if (a[i + j] != b[j]) {\n                found = false;\n                break;\n            }\n            found = true;\n        }\n        if (found) return true;\n        i++;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    std::string s = a;\n    for(int i = 0; i < b.length(); i++) {\n        s.erase(s.begin() + i, s.begin() + i + b.length());\n        if(s == b) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    for(int i = 0; i < b.size(); i++) {\n        if(a.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    if (a.size() < b.size()) return false;\n    std::string s = a;\n    for (int i = 0; i < b.size(); i++) {\n        if (s.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if(lena < lenb) return false;\n    if(lena == lenb) {\n        if(a == b) return true;\n        return false;\n    }\n    int i = 0;\n    while(i < lena - lenb + 1) {\n        if(a.substr(i, lenb) == b) return true;\n        i++;\n    }\n    return false;",
    "    std::string s = a;\n    std::string t = b;\n    int l = s.length();\n    int m = t.length();\n    if (l < m) return false;\n    for (int i = 0; i < m; i++) {\n        if (s.find(t.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    for(int i = 0; i < b.size(); i++) {\n        if(a.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    for(int i = 0; i < b.size(); i++) {\n        if(a.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        bool found = false;\n        for (int j = 0; j < lenb; j++) {\n            if (a[i + j] == b[j]) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) return false;\n        i++;\n    }\n    return true;",
    "    if(a.size() < b.size()) return false;\n    std::string s = a;\n    for(int i = 0; i < b.size(); i++) {\n        s.erase(s.begin()+i,s.begin()+i+b.size());\n        if(s == b) return true;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    std::string temp = a;\n    for(int i = 0; i < b.length(); i++) {\n        if(temp.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    if(a.length()<b.length()) return false;\n    int i=0,j=0;\n    while(i<a.length() && j<b.length()) {\n        if(a[i]==b[j]) {\n            i++;\n            j++;\n        } else {\n            i=i-j+1;\n            j=0;\n        }\n    }\n    return i==a.length() && j==b.length();",
    "    if (a.length() < b.length()) return false;\n    if (a.length() == b.length()) return a == b;\n    std::string c = a;\n    for (int i = 0; i < b.length(); i++) {\n        c = c.substr(i) + c.substr(0, i);\n        if (c == b) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string b_rotated = b;\n    for(int i = 0; i < b.size(); i++) {\n        b_rotated[i] = b[b.size() - 1 - i];\n    }\n    for(int i = 0; i < a.size(); i++) {\n        if(a.substr(i, b.size()) == b) return true;\n        if(a.substr(i, b_rotated.size()) == b_rotated) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lenb) {\n        if (a.find(b.substr(i, lenb)) != std::string::npos) return true;\n        i++;\n    }\n    return false;",
    "    if (a.size() < b.size()) return false;\n    std::string s = a;\n    for (int i = 0; i < b.size(); ++i) {\n        if (s.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    int i = 0;\n    int j = 0;\n    while (i < lena && j < lenb) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == lenb) return true;\n    else return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    int lena = a.length();\n    int lenb = b.length();\n    if(lena < lenb) return false;\n    if(lenb == 0) return true;\n    int i = 0;\n    while(i < lena) {\n        if(b.find(a.substr(i, lenb)) != std::string::npos) return true;\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lena == lenb) {\n        if (a == b) return true;\n        return false;\n    }\n    int i = 0;\n    while (i < lena) {\n        if (a[i] == b[0]) {\n            int j = 0;\n            while (j < lenb) {\n                if (a[i + j] != b[j]) {\n                    break;\n                }\n                j++;\n            }\n            if (j == lenb) return true;\n        }\n        i++;\n    }\n    return false;",
    "    if (a.length() < b.length()) return false;\n    std::string c = b;\n    for (int i = 0; i < b.length(); i++) {\n        c = c.substr(1);\n        if (a.find(c) != std::string::npos) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string temp = a;\n    for(int i = 0; i < b.size(); i++) {\n        if(temp.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    std::string s = a;\n    std::string t = b;\n    std::transform(s.begin(), s.end(), s.begin(), ::tolower);\n    std::transform(t.begin(), t.end(), t.begin(), ::tolower);\n    int l = s.length();\n    int m = t.length();\n    int i = 0, j = 0;\n    while (i < l && j < m) {\n        if (s[i] == t[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (i == l && j == m) return true;\n    else return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int lena_rot = lena - lenb;\n    for (int i = 0; i < lena_rot; i++) {\n        if (a.substr(i, lenb) == b) return true;\n    }\n    return false;",
    "    std::string::size_type i = 0;\n    while (i < b.size()) {\n        if (a.size() < i + b.size()) {\n            return false;\n        }\n        if (a.substr(i, b.size()) == b) {\n            return true;\n        }\n        i++;\n    }\n    return false;",
    "    std::string s = a + b;\n    std::string t = b + a;\n    if (s.size() < t.size()) {\n        return false;\n    }\n    std::string::iterator it = s.begin();\n    while (it != s.end()) {\n        if (std::search(a.begin(), a.end(), it, it + b.size()) != a.end()) {\n            return true;\n        }\n        it++;\n    }\n    return false;",
    "    if (a.length() < b.length()) return false;\n    std::string b_rotated = b;\n    for (int i = 0; i < b.length(); ++i) {\n        b_rotated[i] = b[b.length() - 1 - i];\n    }\n    for (int i = 0; i < a.length(); ++i) {\n        if (a[i] == b[0] || a[i] == b_rotated[0]) return true;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    int n = a.length();\n    int m = b.length();\n    std::string s = a;\n    for(int i = 0; i < n; i++) {\n        if(s.find(b) != std::string::npos) return true;\n        s = s.substr(1);\n    }\n    return false;",
    "    int n = a.size();\n    int m = b.size();\n    if (n < m) return false;\n    std::vector<int> dp(n + 1, 0);\n    for (int i = 0; i <= n; ++i) {\n        for (int j = 0; j <= m; ++j) {\n            if (i == 0 && j == 0) {\n                dp[i] = 1;\n            } else if (i == 0) {\n                dp[i] = dp[i - 1];\n            } else if (j == 0) {\n                dp[i] = dp[i - 1];\n            } else {\n                if (a[i - 1] == b[j - 1]) {\n                    dp[i] = dp[i - 1] + 1;\n                } else {\n                    dp[i] = 0;\n                }\n            }\n        }\n    }\n    return dp[n] > 0;",
    "    if (a.size() < b.size()) return false;\n    int i = 0;\n    while (i < b.size()) {\n        if (a.find(b, i) != std::string::npos) {\n            return true;\n        }\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lena == lenb) {\n        if (a == b) return true;\n        return false;\n    }\n    int i = 0;\n    while (i < lena) {\n        if (b.find(a.substr(i, lena)) != std::string::npos) return true;\n        i++;\n    }\n    return false;",
    "    std::string s = a;\n    std::string t = b;\n    std::reverse(t.begin(), t.end());\n    int l = t.length();\n    for (int i = 0; i < l; ++i) {\n        if (s.find(t.substr(i, l)) != std::string::npos) {\n            return true;\n        }\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if(lena < lenb) return false;\n    int i = 0;\n    while(i < lena - lenb + 1) {\n        if(a.substr(i, lenb) == b) return true;\n        i++;\n    }\n    return false;",
    "    if(a.size()<b.size()) return false;\n    std::string s = a;\n    for(int i=0;i<b.size();i++) {\n        s.erase(s.begin()+i);\n        if(s.find(b) != std::string::npos) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lena == lenb) {\n        if (a == b) return true;\n        return false;\n    }\n    int i = 0;\n    int j = 0;\n    while (i < lena && j < lenb) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == lenb) return true;\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        if (b == a.substr(i, lenb)) return true;\n        i++;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    int l = a.length();\n    int r = b.length();\n    int i = 0;\n    int j = 0;\n    while(i < l && j < r) {\n        if(a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == r) return true;\n    for(int k = 0; k < l - r + 1; k++) {\n        if(a[k] == b[0]) {\n            if(cycpattern_check(a.substr(k+1),b)) return true;\n        }\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (i == a.size()) return true;\n    else return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size();",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int lena_half = lena/2;\n    int lenb_half = lenb/2;\n    std::string a_half = a.substr(0,lena_half);\n    std::string b_half = b.substr(0,lenb_half);\n    if (a_half == b_half) return true;\n    std::string a_half_rot = a_half;\n    std::string b_half_rot = b_half;\n    for (int i = 0; i < lena_half; i++) {\n        a_half_rot[i] = a[lena - 1 - i];\n        b_half_rot[i] = b[lenb - 1 - i];\n    }\n    if (a_half_rot == b_half_rot) return true;\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        if (b == a.substr(i, lenb)) return true;\n        i++;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string b_rotated = b;\n    for(int i = 0; i < b.size(); i++) {\n        b_rotated[i] = b[b.size() - 1 - i];\n    }\n    for(int i = 0; i < a.size(); i++) {\n        if(a[i] == b_rotated[0]) {\n            if(cycpattern_check(a.substr(i + 1), b)) return true;\n        }\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    int i = 0;\n    int j = 0;\n    while (i < lena && j < lenb) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == lenb) return true;\n    else return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    int lena = a.length();\n    int lenb = b.length();\n    int i = 0;\n    int j = 0;\n    while (i < lena && j < lenb) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (i == lena && j == lenb) {\n        return true;\n    }\n    return false;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else if (a[i] > b[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return i == a.size() && j == b.size();",
    "    if(a.size() < b.size()) return false;\n    std::string s = a;\n    std::string t = b;\n    std::reverse(t.begin(), t.end());\n    std::string r = t;\n    std::reverse(r.begin(), r.end());\n    std::string c = r;\n    std::reverse(c.begin(), c.end());\n    std::string d = c;\n    std::reverse(d.begin(), d.end());\n    std::string e = d;\n    std::reverse(e.begin(), e.end());\n    std::string f = e;\n    std::reverse(f.begin(), f.end());\n    std::string g = f;\n    std::reverse(g.begin(), g.end());\n    std::string h = g;\n    std::reverse(h.begin(), h.end());\n    std::string i = h;\n    std::reverse(i.begin(), i.end());\n    std::string j = i;\n    std::reverse(j.begin(), j.end());\n    std::string k = j;\n    std::reverse(k.begin(), k.end());\n    std::string l = k;\n    std::reverse(l.begin(), l.end());\n    std::string m = l;\n    std::reverse(m.begin(), m.end());\n    std::string n = m;\n    std::reverse(n.begin(), n.end());\n    std::string o = n;\n    std::reverse(o.begin(), o.end());\n    std::string p = o;\n    std::reverse(p.begin(), p.end());\n    std::string q = p;\n    std::reverse(q.begin(), q.end());\n    std::string r = q;\n    std::reverse(r.begin(), r.end());\n    std::string s = r;\n    std::reverse(s.begin(), s.end());\n    std::string t = s;\n    std::reverse(t.begin(), t.end());\n    std::string u = t;\n    std::reverse(u.begin(), u.end());\n    std::string",
    "    int lena = a.length();\n    int lenb = b.length();\n    int i = 0;\n    int j = 0;\n    while (i < lena && j < lenb) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (i == lena && j == lenb) {\n        return true;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    std::string s = a;\n    for(int i = 0; i < b.length(); i++) {\n        s.erase(s.begin() + i);\n        if(s.find(b) != std::string::npos) return true;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    int l = a.length();\n    int r = b.length();\n    int i = 0;\n    while(i < l && i < r) {\n        if(a[i] != b[i]) return false;\n        i++;\n    }\n    if(i == l) return true;\n    int j = i;\n    while(j < l) {\n        if(a[j] != b[i]) return false;\n        j++;\n    }\n    return true;",
    "    if(a.size() < b.size()) return false;\n    std::string s = a;\n    for(int i = 0; i < b.size(); i++) {\n        if(s.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    if (a.size() < b.size()) return false;\n    int i = 0;\n    while (i < b.size()) {\n        if (a.find(b.substr(i, b.size())) != std::string::npos) return true;\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    int i = 0;\n    int j = 0;\n    while (i < lena && j < lenb) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == lena && j == lenb;",
    "    int len_a = a.length();\n    int len_b = b.length();\n    if (len_a < len_b) return false;\n    if (len_a == len_b) {\n        for (int i = 0; i < len_a; i++) {\n            if (a[i] != b[i]) return false;\n        }\n        return true;\n    }\n    int len_a_rot = len_a;\n    int len_b_rot = len_b;\n    while (len_a_rot > len_b) {\n        len_a_rot--;\n        len_b_rot--;\n        for (int i = 0; i < len_a_rot; i++) {\n            if (a[i] != b[i]) return false;\n        }\n    }\n    while (len_a_rot < len_b) {\n        len_a_rot++;\n        len_b_rot++;\n        for (int i = 0; i < len_b_rot; i++) {\n            if (a[i] != b[i]) return false;\n        }\n    }\n    return true;",
    "    std::string::iterator ita = a.begin();\n    std::string::iterator itb = b.begin();\n    while (ita != a.end() && itb != b.end()) {\n        if (*ita != *itb) {\n            return false;\n        }\n        ita++;\n        itb++;\n    }\n    return true;",
    "    if(a.length() < b.length()) return false;\n    for(int i = 0; i < a.length(); i++) {\n        if(a.substr(i, b.length()) == b) return true;\n    }\n    return false;",
    "    if (a.size() < b.size()) return false;\n    std::string temp = a;\n    std::reverse(temp.begin(), temp.end());\n    std::string temp2 = b;\n    std::reverse(temp2.begin(), temp2.end());\n    if (temp.find(temp2) != std::string::npos) return true;\n    for (int i = 1; i < temp.size(); i++) {\n        temp = temp.substr(i);\n        temp2 = temp2.substr(i);\n        if (temp.find(temp2) != std::string::npos) return true;\n    }\n    return false;",
    "    if (a.size() < b.size()) return false;\n    int i = 0;\n    for (i = 0; i < b.size(); i++) {\n        if (a.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    for(int i = 0; i < b.size(); i++) {\n        if(a.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    std::string::iterator ita = a.begin();\n    std::string::iterator itb = b.begin();\n    while (ita != a.end() && itb != b.end()) {\n        if (*ita != *itb) {\n            return false;\n        }\n        ita++;\n        itb++;\n    }\n    return true;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lena == lenb) {\n        for (int i = 0; i < lena; i++) {\n            if (a[i] == b[i]) continue;\n            if (a[i] == b[i + 1]) return true;\n            if (a[i] == b[i - 1]) return true;\n        }\n        return false;\n    }\n    for (int i = 0; i < lena; i++) {\n        if (a[i] == b[i]) continue;\n        if (a[i] == b[i + 1]) return true;\n        if (a[i] == b[i - 1]) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string temp = a;\n    for(int i = 0; i < b.size(); i++) {\n        if(temp.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    std::string::size_type i = 0;\n    while (i < a.length() && i < b.length()) {\n        if (a[i] != b[i]) {\n            return false;\n        }\n        i++;\n    }\n    return true;",
    "    std::string::size_type i = 0, j = 0;\n    while (i < a.size() && j < b.size()) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else if (a[i] == b[j + 1]) {\n            i++;\n            j++;\n        } else if (a[i + 1] == b[j]) {\n            i++;\n            j++;\n        } else if (a[i + 1] == b[j + 1]) {\n            i++;\n            j++;\n        } else {\n            return false;\n        }\n    }\n    return true;",
    "    int n = a.length();\n    int m = b.length();\n    int i = 0, j = 0;\n    while (i < n && j < m) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    return i == n && j == m;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lena == lenb) {\n        if (a == b) return true;\n        return false;\n    }\n    int i = 0;\n    while (i < lenb) {\n        if (a.substr(i, lenb) == b) return true;\n        i++;\n    }\n    return false;",
    "    if(a.size()<b.size()) return false;\n    int i=0;\n    for(i=0;i<b.size();i++) {\n        if(a.find(b.substr(i))!=std::string::npos) return true;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    int l = a.length();\n    int r = b.length();\n    int i = 0;\n    while(i < l) {\n        if(a[i] == b[0]) {\n            if(r == 1) return true;\n            if(a[i+r-1] == b[r-1]) {\n                i += r;\n                r--;\n            } else {\n                i++;\n            }\n        } else {\n            i++;\n        }\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    std::string s = a;\n    std::string t = b;\n    std::reverse(s.begin(), s.end());\n    std::reverse(t.begin(), t.end());\n    for (int i = 0; i < lenb; i++) {\n        if (s.find(t.substr(i, lenb - i)) != std::string::npos) return true;\n    }\n    return false;",
    "    if (a.size() < b.size()) return false;\n    for (int i = 0; i < b.size(); i++) {\n        if (a.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string s = a;\n    std::string t = b;\n    for(int i = 0; i < s.size(); i++) {\n        if(s.substr(i,b.size()) == t) return true;\n    }\n    return false;",
    "    if(a.size()<b.size()) return false;\n    int l=a.size();\n    for(int i=0;i<l;i++) {\n        if(a[i]==b[0]) {\n            for(int j=0;j<l;j++) {\n                if(a[j]==b[j]) {\n                    if(j==l-1) return true;\n                    else {\n                        for(int k=j+1;k<l;k++) {\n                            if(a[k]==b[k]) return true;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        if (a.substr(i, lenb) == b) return true;\n        i++;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    int n = a.size();\n    int m = b.size();\n    std::vector<std::string> v(n);\n    for(int i = 0; i < n; i++) {\n        v[i] = a.substr(i, m);\n    }\n    for(int i = 0; i < n; i++) {\n        if(std::find(v.begin(), v.end(), b) != v.end()) return true;\n        for(int j = 0; j < n; j++) {\n            if(std::find(v.begin(), v.end(), v[j].substr(i, m)) != v.end()) return true;\n        }\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        bool found = false;\n        for (int j = 0; j < lenb; j++) {\n            if (a[i + j] != b[j]) {\n                found = false;\n                break;\n            }\n            found = true;\n        }\n        if (found) return true;\n        i++;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    std::string s = a;\n    for(int i = 0; i < b.length(); i++) {\n        if(s.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    std::string::iterator itr_a = a.begin();\n    std::string::iterator itr_b = b.begin();\n    while (itr_a != a.end() && itr_b != b.end()) {\n        if (*itr_a != *itr_b) {\n            return false;\n        }\n        ++itr_a;\n        ++itr_b;\n    }\n    return true;",
    "    if(a.length() < b.length()) return false;\n    int l = a.length();\n    int r = b.length();\n    int i = 0;\n    int j = 0;\n    while(i < l && j < r) {\n        if(a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if(j == r) return true;\n    else return false;",
    "    std::string::size_type l1 = a.length();\n    std::string::size_type l2 = b.length();\n    if (l1 < l2) return false;\n    std::string::size_type i = 0;\n    while (i < l2) {\n        std::string::size_type j = i;\n        while (j < l2 && a[j] == b[j]) j++;\n        if (j - i < l2 - i) return false;\n        i = j;\n        while (i < l2 && a[i] != b[i]) i++;\n        i++;\n    }\n    return true;",
    "    if(a.size()<b.size()) return false;\n    if(b.size()==0) return true;\n    int i=0,j=0;\n    while(i<a.size() && j<b.size()) {\n        if(a[i]==b[j]) {\n            i++;\n            j++;\n        } else {\n            i=i-j+1;\n            j=0;\n        }\n    }\n    return i==a.size();",
    "    if(a.size() < b.size()) return false;\n    int i = 0;\n    while(i < b.size()) {\n        if(a.find(b.substr(i, b.size())) != std::string::npos) return true;\n        i++;\n    }\n    return false;",
    "    if (a.size() < b.size()) return false;\n    int i = 0;\n    while (i < b.size()) {\n        if (a.find(b.substr(i, b.size())) != std::string::npos) return true;\n        i++;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    if(a.length() == b.length()) return a == b;\n    if(a.length() > b.length()) return false;\n    std::string c = a;\n    for(int i = 0; i < b.length(); i++) {\n        c.erase(c.begin() + i);\n        if(c == b) return true;\n        c.insert(c.begin() + i, b.begin() + i, b.begin() + i + 1);\n        if(c == b) return true;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    int l = a.length();\n    int r = b.length();\n    int i = 0;\n    while(i < l && i < r) {\n        if(a[i] != b[i]) return false;\n        i++;\n    }\n    if(i == r) return true;\n    i = 0;\n    while(i < l && i < r) {\n        if(a[l-i-1] != b[r-i-1]) return false;\n        i++;\n    }\n    return true;",
    "    int n = a.length();\n    int m = b.length();\n    if (n < m) return false;\n    std::vector<int> dp(n, 0);\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (a[i] == b[j]) {\n                dp[i + j] = 1;\n            }\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            if (dp[i + j] == 1) {\n                for (int k = 0; k < m; k++) {\n                    if (dp[i + k] == 1) {\n                        for (int l = 0; l < m; l++) {\n                            if (dp[i + l + k] == 1) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    int i = 0;\n    int j = 0;\n    while (i < lena && j < lenb) {\n        if (a[i] == b[j]) {\n            i++;\n            j++;\n        } else {\n            i = i - j + 1;\n            j = 0;\n        }\n    }\n    if (j == lenb) {\n        return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string s = a;\n    for(int i = 0; i < b.size(); i++) {\n        if(s.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    if(a.length() < b.length()) return false;\n    if(a == b) return true;\n    for(int i = 0; i < a.length(); i++) {\n        if(a.substr(i, b.length()) == b) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string temp = a;\n    for(int i = 0; i < b.size(); i++) {\n        if(temp.find(b.substr(i)) != std::string::npos) return true;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lena == lenb) {\n        if (a == b) return true;\n        return false;\n    }\n    int lena_half = lena / 2;\n    int lenb_half = lenb / 2;\n    std::string a_half = a.substr(0, lena_half);\n    std::string b_half = b.substr(0, lenb_half);\n    if (a_half == b_half) {\n        return cycpattern_check(a.substr(lena_half, lena - lena_half), b.substr(lenb_half, lenb - lenb_half));\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    if (lena == lenb) {\n        if (a == b) return true;\n        return false;\n    }\n    int l = lena - lenb;\n    for (int i = 0; i <= l; i++) {\n        if (a.substr(i, lenb) == b) return true;\n    }\n    return false;",
    "    if(a.size() < b.size()) return false;\n    std::string c = b;\n    for(int i = 0; i < b.size(); i++) {\n        c[i] = c[i] - 'a' + 'A';\n    }\n    for(int i = 0; i < a.size(); i++) {\n        if(c.find(a.substr(i, b.size())) != std::string::npos) return true;\n    }\n    return false;",
    "    int n = a.length();\n    int m = b.length();\n    if (n < m) return false;\n    int i = 0;\n    while (i < m) {\n        if (a.find(b.substr(i)) != std::string::npos) {\n            return true;\n        }\n        i++;\n    }\n    return false;",
    "    int lena = a.length();\n    int lenb = b.length();\n    if (lena < lenb) return false;\n    int i = 0;\n    while (i < lena - lenb + 1) {\n        bool found = false;\n        for (int j = 0; j < lenb; j++) {\n            if (a[i + j] != b[j]) {\n                found = false;\n                break;\n            }\n            found = true;\n        }\n        if (found) return true;\n        i++;\n    }\n    return false;"
  ],
  "stop_tokens": [
    "\n}"
  ]
}