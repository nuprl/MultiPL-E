name: HumanEval_26_remove_duplicates
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// From a vector of integers,\
  \ remove all elements that occur more than once.\n// Keep order of elements left\
  \ the same as in the input.\n// >>> remove_duplicates([1, 2, 3, 2, 4])\n// [1, 3,\
  \ 4]\nstd::vector<long> remove_duplicates(std::vector<long> numbers) {\n"
tests: "}\nint main() {\n    auto candidate = remove_duplicates;\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)4})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
  \ (long)2, (long)4, (long)3, (long)5}))) == (std::vector<long>({(long)1, (long)4,\
  \ (long)5})));\n}\n"
completions: ["    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ result;\n    for (std::vector<long>::iterator it = numbers.begin(); it != numbers.end();\
    \ ++it) {\n        if (result.empty() || *it != result.back()) {\n           \
    \ result.push_back(*it);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (auto i = numbers.begin();\
    \ i != numbers.end(); ++i) {\n        if (i != numbers.begin() && *i == *(i -\
    \ 1)) {\n            continue;\n        }\n        result.push_back(*i);\n   \
    \ }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n  \
    \  std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (result.empty() || *result.rbegin() != *i) {\n          \
    \  result.push_back(*i);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (auto i = numbers.begin();\
    \ i != numbers.end(); ++i) {\n        if (result.empty() || *result.rbegin() !=\
    \ *i) {\n            result.push_back(*i);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); ++i) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (result.empty() || *result.rbegin() != *i) {\n          \
    \  result.push_back(*i);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (result.empty() || *result.rbegin() != *i) {\n          \
    \  result.push_back(*i);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (std::vector<long>::iterator it = numbers.begin(); it != numbers.end();\
    \ ++it) {\n        if (result.empty() || *it != result.back()) {\n           \
    \ result.push_back(*it);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1)) continue;\n    \
    \    result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (auto i = numbers.begin();\
    \ i != numbers.end(); ++i) {\n        if (result.empty() || *result.rbegin() !=\
    \ *i) {\n            result.push_back(*i);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    std::unique_copy(numbers.begin(), numbers.end(), std::back_inserter(result));\n\
    \    return result;", "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < numbers.size(); ++i) {\n        if (i == 0\
    \ || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1)) {\n            continue;\n\
    \        }\n        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ ++i) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    std::unique_copy(numbers.begin(), numbers.end(),\
    \ std::back_inserter(result));\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ ++i) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1))\n            continue;\n\
    \        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (auto i = numbers.begin();\
    \ i != numbers.end(); ++i) {\n        if (i == numbers.begin() || *i != *(i -\
    \ 1)) {\n            result.push_back(*i);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (auto i = numbers.begin(); i != numbers.end(); ++i) {\n        if (result.empty()\
    \ || *result.rbegin() != *i) {\n            result.push_back(*i);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1)) {\n            continue;\n\
    \        }\n        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto it = numbers.begin(); it != numbers.end();\
    \ ++it) {\n        if (result.empty() || *result.rbegin() != *it) {\n        \
    \    result.push_back(*it);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ ++i) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i == numbers.begin() || *i != *(i - 1)) {\n            result.push_back(*i);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1)) {\n            continue;\n\
    \        }\n        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (std::vector<long>::iterator\
    \ it = numbers.begin(); it != numbers.end(); ++it) {\n        if (result.empty()\
    \ || *it != result.back()) {\n            result.push_back(*it);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1))\n            continue;\n\
    \        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ ++i) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    std::unique_copy(numbers.begin(), numbers.end(),\
    \ std::back_inserter(result));\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ ++i) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1))\n            continue;\n\
    \        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (result.empty() || *result.rbegin() != *i) {\n          \
    \  result.push_back(*i);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i == numbers.begin() || *i != *(i - 1)) {\n            result.push_back(*i);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); ++i) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (result.empty() || *result.rbegin() != *i) {\n          \
    \  result.push_back(*i);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1)) continue;\n    \
    \    result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (std::vector<long>::iterator\
    \ it = numbers.begin(); it != numbers.end(); ++it) {\n        if (result.empty()\
    \ || *it != result.back()) {\n            result.push_back(*it);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (auto it = numbers.begin(); it != numbers.end(); ++it) {\n        if\
    \ (result.empty() || *it != result.back()) {\n            result.push_back(*it);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long>::iterator it = numbers.begin();\n    while (it != numbers.end())\
    \ {\n        if (*it != *(it - 1)) {\n            it++;\n        } else {\n  \
    \          it = numbers.erase(it);\n        }\n    }\n    return numbers;", " \
    \   std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (auto i = numbers.begin(); i != numbers.end(); ++i) {\n        if (i\
    \ != numbers.begin() && *i == *(i - 1)) {\n            continue;\n        }\n\
    \        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ ++i) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (auto i = numbers.begin(); i != numbers.end(); ++i) {\n        if (i\
    \ != numbers.begin() && *i == *(i - 1)) {\n            continue;\n        }\n\
    \        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ ++i) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); it++) {\n        if (result.size() == 0 || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long>::iterator\
    \ it = numbers.begin();\n    while (it != numbers.end()) {\n        if (*it ==\
    \ *(it + 1)) {\n            it = numbers.erase(it);\n        } else {\n      \
    \      it++;\n        }\n    }\n    return numbers;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i == numbers.begin() || *i != *(i - 1)) {\n            result.push_back(*i);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    std::unique_copy(numbers.begin(), numbers.end(),\
    \ std::back_inserter(result));\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); it++) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); ++i) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    std::unique_copy(numbers.begin(), numbers.end(),\
    \ std::back_inserter(result));\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); ++i) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1))\n            continue;\n\
    \        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1))\n            continue;\n\
    \        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ ++i) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1))\n            continue;\n\
    \        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (auto i = numbers.begin();\
    \ i != numbers.end(); ++i) {\n        if (i == numbers.begin() || *i != *(i -\
    \ 1)) {\n            result.push_back(*i);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (auto i = numbers.begin(); i != numbers.end(); ++i) {\n        if (i\
    \ == numbers.begin() || *i != *(i - 1)) {\n            result.push_back(*i);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    std::unique_copy(numbers.begin(), numbers.end(),\
    \ std::back_inserter(result));\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    std::unique_copy(numbers.begin(), numbers.end(),\
    \ std::back_inserter(result));\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (std::vector<long>::iterator it = numbers.begin(); it != numbers.end();\
    \ ++it) {\n        if (result.empty() || *it != result.back()) {\n           \
    \ result.push_back(*it);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto it = numbers.begin(); it != numbers.end();\
    \ ++it) {\n        if (result.empty() || *result.rbegin() != *it) {\n        \
    \    result.push_back(*it);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    std::unique_copy(numbers.begin(),\
    \ numbers.end(), std::back_inserter(result));\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (std::vector<long>::iterator it = numbers.begin();\
    \ it != numbers.end(); ++it) {\n        if (result.empty() || *it != result.back())\
    \ {\n            result.push_back(*it);\n        }\n    }\n    return result;",
  "    std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (std::vector<long>::iterator it = numbers.begin(); it != numbers.end();\
    \ ++it) {\n        if (result.empty() || *it != result.back()) {\n           \
    \ result.push_back(*it);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    std::unique_copy(numbers.begin(), numbers.end(),\
    \ std::back_inserter(result));\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ ++i) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); ++i) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1)) {\n            continue;\n\
    \        }\n        result.push_back(*i);\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ i++) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (result.empty() || *result.rbegin() != *i) {\n          \
    \  result.push_back(*i);\n        }\n    }\n    return result;", "    std::sort(numbers.begin(),\
    \ numbers.end());\n    std::vector<long> result;\n    for (int i = 0; i < numbers.size();\
    \ ++i) {\n        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long>::iterator it = numbers.begin();\n    while (it != numbers.end())\
    \ {\n        if (*it == *(it - 1)) {\n            it = numbers.erase(it);\n  \
    \      } else {\n            it++;\n        }\n    }\n    return numbers;", " \
    \   std::sort(numbers.begin(), numbers.end());\n    std::vector<long> result;\n\
    \    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0 || numbers[i]\
    \ != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n        }\n\
    \    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (int i = 0; i < numbers.size(); i++) {\n\
    \        if (i == 0 || numbers[i] != numbers[i - 1]) {\n            result.push_back(numbers[i]);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i == numbers.begin() || *i != *(i - 1)) {\n            result.push_back(*i);\n\
    \        }\n    }\n    return result;", "    std::sort(numbers.begin(), numbers.end());\n\
    \    std::vector<long> result;\n    for (auto i = numbers.begin(); i != numbers.end();\
    \ ++i) {\n        if (i != numbers.begin() && *i == *(i - 1))\n            continue;\n\
    \        result.push_back(*i);\n    }\n    return result;"]
stop_tokens:
- "\n}"
