name: HumanEval_159_eat
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You're a hungry rabbit, and\
  \ you already have eaten a certain number of carrots,\n// but now you need to eat\
  \ more carrots to complete the day's meals.\n// you should return a vector of [\
  \ total number of eaten carrots after your meals,\n// the number of carrots left\
  \ after your meals ]\n// if there are not enough remaining carrots, you will eat\
  \ all remaining carrots, but will still be hungry.\n// Example:\n// >>> eat(5, 6,\
  \ 10)\n// [11, 4]\n// >>> eat(4, 8, 9)\n// [12, 1]\n// >>> eat(1, 10, 10)\n// [11,\
  \ 0]\n// >>> eat(2, 11, 5)\n// [7, 0]\n// Variables:\n// @number : integer\n// the\
  \ number of carrots that you have eaten.\n// @need : integer\n// the number of carrots\
  \ that you need to eat.\n// @remaining : integer\n// the number of remaining carrots\
  \ thet exist in stock\n// Constrain:\n// * 0 <= number <= 1000\n// * 0 <= need <=\
  \ 1000\n// * 0 <= remaining <= 1000\n// Have fun :)\nstd::vector<long> eat(long\
  \ number, long need, long remaining) {\n"
tests: "}\nint main() {\n    auto candidate = eat;\n    assert(candidate((5), (6),\
  \ (10)) == (std::vector<long>({(long)11, (long)4})));\n    assert(candidate((4),\
  \ (8), (9)) == (std::vector<long>({(long)12, (long)1})));\n    assert(candidate((1),\
  \ (10), (10)) == (std::vector<long>({(long)11, (long)0})));\n    assert(candidate((2),\
  \ (11), (5)) == (std::vector<long>({(long)7, (long)0})));\n    assert(candidate((4),\
  \ (5), (7)) == (std::vector<long>({(long)9, (long)2})));\n    assert(candidate((4),\
  \ (5), (1)) == (std::vector<long>({(long)5, (long)0})));\n}\n"
completions: ["    std::vector<long> ans;\n    if (number >= need) {\n        ans.push_back(number\
    \ - need);\n        ans.push_back(remaining);\n        return ans;\n    }\n  \
    \  if (number < need) {\n        ans.push_back(number);\n        ans.push_back(need\
    \ - number);\n        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(need);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (number >= need) {\n  \
    \      ans.push_back(number - need);\n        ans.push_back(remaining);\n    }\
    \ else {\n        ans.push_back(0);\n        ans.push_back(remaining);\n    }\n\
    \    return ans;", "    std::vector<long> ans;\n    long eaten = 0;\n    while\
    \ (need > 0) {\n        if (need > remaining) {\n            ans.push_back(number\
    \ + eaten);\n            ans.push_back(0);\n            break;\n        }\n  \
    \      ans.push_back(number + eaten);\n        ans.push_back(need);\n        eaten\
    \ += need;\n        need -= remaining;\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need > remaining) {\n        ans.push_back(number);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    if (need == remaining) {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n        return ans;\n    }\n    ans.push_back(number\
    \ + need);\n    ans.push_back(remaining - need);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n        return ans;\n    }\n    if (remaining\
    \ == 0) {\n        ans.push_back(number);\n        ans.push_back(0);\n       \
    \ return ans;\n    }\n    if (number == 0) {\n        ans.push_back(0);\n    \
    \    ans.push_back(remaining);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(remaining - number);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n     \
    \   ans.push_back(0);\n        return ans;\n    }\n    if (number < need) {\n\
    \        ans.push_back(number);\n        ans.push_back(need - number);\n     \
    \   return ans;\n    }\n    if (number == need) {\n        ans.push_back(need);\n\
    \        ans.push_back(0);\n        return ans;\n    }\n    ans.push_back(need);\n\
    \    ans.push_back(0);\n    return ans;", "    std::vector<long> ans;\n    if\
    \ (need <= remaining) {\n        ans.push_back(number + need);\n        ans.push_back(remaining\
    \ - need);\n    } else {\n        ans.push_back(number + remaining);\n       \
    \ ans.push_back(0);\n    }\n    return ans;", "    std::vector<long> ans;\n  \
    \  if (need <= remaining) {\n        ans.push_back(number + need);\n        ans.push_back(remaining\
    \ - need);\n    } else {\n        ans.push_back(number + remaining);\n       \
    \ ans.push_back(0);\n    }\n    return ans;", "    std::vector<long> ans;\n  \
    \  if (need <= remaining) {\n        ans.push_back(number + need);\n        ans.push_back(remaining\
    \ - need);\n    } else {\n        ans.push_back(number + remaining);\n       \
    \ ans.push_back(0);\n    }\n    return ans;", "    std::vector<long> ans;\n  \
    \  if (remaining < need) {\n        ans.push_back(remaining);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    if (number < need) {\n        ans.push_back(number);\n\
    \        ans.push_back(need - number);\n        return ans;\n    }\n    ans.push_back(need);\n\
    \    ans.push_back(0);\n    return ans;", "    std::vector<long> ans;\n    long\
    \ eaten = 0;\n    while (need > 0) {\n        if (need > remaining) {\n      \
    \      ans.push_back(number + eaten);\n            ans.push_back(need - remaining);\n\
    \            break;\n        } else {\n            ans.push_back(number + eaten);\n\
    \            ans.push_back(need);\n            eaten += need;\n            need\
    \ = 0;\n        }\n    }\n    return ans;", "    std::vector<long> ans;\n    if\
    \ (number < need) {\n        ans.push_back(number);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    long eat_count = 0;\n    while (number >= need)\
    \ {\n        number -= need;\n        eat_count++;\n    }\n    ans.push_back(eat_count);\n\
    \    ans.push_back(remaining - eat_count);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (need <= remaining) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> ans;\n    if (need <= remaining) {\n        ans.push_back(number\
    \ + need);\n        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    long eat = 0;\n    while (number > 0 && need > 0) {\n        if (number\
    \ >= need) {\n            eat += need;\n            number -= need;\n        \
    \    need = 0;\n        } else {\n            eat += number;\n            need\
    \ -= number;\n            number = 0;\n        }\n    }\n    ans.push_back(eat);\n\
    \    ans.push_back(remaining - eat);\n    return ans;", "    std::vector<long>\
    \ ans;\n    long eat_count = 0;\n    long eat_remaining = 0;\n    while (remaining\
    \ > 0) {\n        if (need <= eat_remaining) {\n            eat_count += need;\n\
    \            eat_remaining -= need;\n            need = 0;\n        } else {\n\
    \            eat_count += eat_remaining;\n            need -= eat_remaining;\n\
    \            eat_remaining = 0;\n        }\n    }\n    ans.push_back(eat_count);\n\
    \    ans.push_back(need);\n    return ans;", "    std::vector<long> ans;\n   \
    \ long eaten = 0;\n    while (need > 0) {\n        if (need > remaining) {\n \
    \           ans.push_back(number + eaten);\n            ans.push_back(0);\n  \
    \          break;\n        } else {\n            ans.push_back(number + eaten);\n\
    \            ans.push_back(need);\n            eaten += need;\n            need\
    \ -= remaining;\n        }\n    }\n    return ans;", "    std::vector<long> result;\n\
    \    if (need <= remaining) {\n        result.push_back(number + need);\n    \
    \    result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> ans;\n    if (number >= need) {\n        ans.push_back(number\
    \ - need);\n        ans.push_back(remaining);\n        return ans;\n    }\n  \
    \  if (remaining == 0) {\n        ans.push_back(number);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (need <= remaining) {\n\
    \        ans.push_back(number + need);\n        ans.push_back(remaining - need);\n\
    \    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> result;\n    if (need <= remaining)\
    \ {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (remaining < need) {\n        result.push_back(remaining);\n\
    \        result.push_back(0);\n        return result;\n    }\n    result.push_back(number\
    \ + need);\n    result.push_back(remaining - need);\n    return result;", "  \
    \  std::vector<long> ans;\n    if (need > remaining) {\n        ans.push_back(number);\n\
    \        ans.push_back(0);\n        return ans;\n    }\n    if (need == remaining)\
    \ {\n        ans.push_back(number + need);\n        ans.push_back(0);\n      \
    \  return ans;\n    }\n    ans.push_back(number + need);\n    ans.push_back(remaining\
    \ - need);\n    return ans;", "    std::vector<long> ans;\n    if (need <= remaining)\
    \ {\n        ans.push_back(number + need);\n        ans.push_back(remaining -\
    \ need);\n    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    if (need <= remaining)\
    \ {\n        ans.push_back(number + need);\n        ans.push_back(remaining -\
    \ need);\n    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> result;\n    if (remaining <\
    \ need) {\n        result.push_back(remaining);\n        result.push_back(0);\n\
    \        return result;\n    }\n    result.push_back(number + need);\n    result.push_back(remaining\
    \ - need);\n    return result;", "    std::vector<long> ans;\n    long eaten =\
    \ 0;\n    while (need > 0) {\n        if (need > remaining) {\n            ans.push_back(eaten\
    \ + remaining);\n            eaten += remaining;\n            ans.push_back(0);\n\
    \            break;\n        } else {\n            ans.push_back(eaten + need);\n\
    \            eaten += need;\n            remaining -= need;\n        }\n    }\n\
    \    return ans;", "    std::vector<long> result;\n    if (number >= need) {\n\
    \        result.push_back(number - need);\n        result.push_back(remaining);\n\
    \        return result;\n    }\n    if (number < need) {\n        result.push_back(number);\n\
    \        result.push_back(remaining);\n        return result;\n    }\n    result.push_back(number);\n\
    \    result.push_back(remaining);\n    return result;", "    std::vector<long>\
    \ result;\n    if (number >= need) {\n        result.push_back(number - need);\n\
    \        result.push_back(remaining);\n        return result;\n    }\n    result.push_back(number);\n\
    \    result.push_back(remaining - number);\n    return result;", "    std::vector<long>\
    \ ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n     \
    \   ans.push_back(0);\n        return ans;\n    }\n    long eat_num = std::min(number,\
    \ need);\n    ans.push_back(eat_num);\n    number -= eat_num;\n    need -= eat_num;\n\
    \    remaining -= eat_num;\n    if (need > 0) {\n        ans.push_back(remaining);\n\
    \        ans.push_back(need);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n     \
    \   ans.push_back(0);\n        return ans;\n    }\n    if (number >= need) {\n\
    \        ans.push_back(number - need);\n        ans.push_back(remaining - need);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(need\
    \ - number);\n    return ans;", "    std::vector<long> ans;\n    if (number <\
    \ need) {\n        ans.push_back(number);\n        ans.push_back(need - number);\n\
    \    } else {\n        ans.push_back(number - need);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    long eat = 0;\n   \
    \ while (number >= need) {\n        eat += need;\n        number -= need;\n  \
    \  }\n    if (number > 0) {\n        eat += number;\n    }\n    ans.push_back(eat);\n\
    \    ans.push_back(remaining - eat);\n    return ans;", "    std::vector<long>\
    \ ans;\n    long eaten = 0;\n    while (need > 0) {\n        if (need > remaining)\
    \ {\n            eaten += remaining;\n            ans.push_back(eaten);\n    \
    \        ans.push_back(need - remaining);\n            break;\n        } else\
    \ {\n            eaten += need;\n            ans.push_back(eaten);\n         \
    \   ans.push_back(need);\n            break;\n        }\n    }\n    return ans;",
  "    std::vector<long> ans;\n    if (number >= need) {\n        ans.push_back(number\
    \ - need);\n        ans.push_back(remaining);\n    } else {\n        ans.push_back(number);\n\
    \        ans.push_back(remaining - number);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (need <= remaining) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> ans;\n    long eat = 0;\n    while (eat < need) {\n    \
    \    if (remaining > 0) {\n            eat += remaining;\n            remaining\
    \ = 0;\n        } else {\n            eat += number;\n        }\n        ans.push_back(eat);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    if (number < need)\
    \ {\n        ans.push_back(number);\n        ans.push_back(remaining);\n     \
    \   return ans;\n    }\n    long eat = number / need;\n    long left = number\
    \ % need;\n    ans.push_back(eat + left);\n    ans.push_back(remaining - eat);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (number >= need) {\n  \
    \      ans.push_back(number - need);\n        ans.push_back(remaining);\n    \
    \    return ans;\n    }\n    if (number == 0) {\n        ans.push_back(0);\n \
    \       ans.push_back(remaining);\n        return ans;\n    }\n    ans.push_back(0);\n\
    \    ans.push_back(remaining);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (need <= remaining) {\n        ans.push_back(number + need);\n       \
    \ ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    long eaten = 0;\n    while (need > 0) {\n        if (need > remaining)\
    \ {\n            ans.push_back(need);\n            ans.push_back(0);\n       \
    \     break;\n        }\n        ans.push_back(need);\n        ans.push_back(remaining);\n\
    \        remaining -= need;\n        need -= need;\n        eaten += need;\n \
    \   }\n    ans.push_back(eaten);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (need <= remaining) {\n        ans.push_back(number + need);\n       \
    \ ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (need <= remaining) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> ans;\n    long eaten = 0;\n    while (need > 0) {\n    \
    \    if (need <= remaining) {\n            eaten += need;\n            remaining\
    \ -= need;\n            need = 0;\n        } else {\n            eaten += remaining;\n\
    \            remaining = 0;\n        }\n        ans.push_back(eaten);\n    }\n\
    \    ans.push_back(remaining);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (need <= remaining) {\n        ans.push_back(number + need);\n       \
    \ ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n     \
    \   ans.push_back(0);\n        return ans;\n    }\n    if (number >= need) {\n\
    \        ans.push_back(number - need);\n        ans.push_back(remaining - need);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(need\
    \ - number);\n    return ans;", "    std::vector<long> ans;\n    if (remaining\
    \ == 0) {\n        ans.push_back(number);\n        ans.push_back(0);\n       \
    \ return ans;\n    }\n    if (number >= need) {\n        ans.push_back(number\
    \ - need);\n        ans.push_back(remaining);\n        return ans;\n    }\n  \
    \  ans.push_back(number);\n    ans.push_back(remaining - number);\n    return\
    \ ans;", "    std::vector<long> result;\n    if (remaining < need) {\n       \
    \ result.push_back(remaining);\n        result.push_back(0);\n    } else {\n \
    \       result.push_back(need);\n        result.push_back(remaining - need);\n\
    \    }\n    return result;", "    std::vector<long> ans;\n    if (remaining ==\
    \ 0) {\n        ans.push_back(number);\n        ans.push_back(0);\n        return\
    \ ans;\n    }\n    if (number >= need) {\n        ans.push_back(number - need);\n\
    \        ans.push_back(remaining);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(remaining - number);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need > remaining) {\n        ans.push_back(number);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    if (need == remaining) {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n        return ans;\n    }\n    long\
    \ eaten = 0;\n    while (need > 0) {\n        if (need > remaining) {\n      \
    \      ans.push_back(number + eaten);\n            ans.push_back(0);\n       \
    \     return ans;\n        }\n        ans.push_back(number + eaten);\n       \
    \ ans.push_back(need - remaining);\n        eaten += remaining;\n        remaining\
    \ = 0;\n    }\n    return ans;", "    std::vector<long> ans;\n    long eaten =\
    \ 0;\n    while (need > 0) {\n        if (need > remaining) {\n            eaten\
    \ += remaining;\n            remaining = 0;\n        } else {\n            eaten\
    \ += need;\n            remaining -= need;\n        }\n        ans.push_back(eaten);\n\
    \        need = need - eaten;\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n        return ans;\n    }\n    if (number <\
    \ need) {\n        ans.push_back(number);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining\
    \ - number);\n    return ans;", "    std::vector<long> result;\n    if (remaining\
    \ < need) {\n        result.push_back(remaining);\n        result.push_back(0);\n\
    \        return result;\n    }\n    long eaten = 0;\n    while (need > 0) {\n\
    \        if (need > remaining) {\n            eaten += remaining;\n          \
    \  result.push_back(eaten);\n            result.push_back(0);\n            return\
    \ result;\n        }\n        eaten += need;\n        result.push_back(eaten);\n\
    \        result.push_back(remaining - need);\n        need = 0;\n    }\n    return\
    \ result;", "    std::vector<long> ans;\n    long eaten = 0;\n    while (need\
    \ > 0) {\n        if (need > remaining) {\n            eaten += remaining;\n \
    \           remaining = 0;\n        } else {\n            eaten += need;\n   \
    \         remaining -= need;\n        }\n        ans.push_back(eaten);\n     \
    \   need -= eaten;\n    }\n    return ans;", "    std::vector<long> ans;\n   \
    \ if (need <= remaining) {\n        ans.push_back(number + need);\n        ans.push_back(remaining\
    \ - need);\n    } else {\n        ans.push_back(number + remaining);\n       \
    \ ans.push_back(0);\n    }\n    return ans;", "    std::vector<long> ans;\n  \
    \  long eat = 0;\n    while (number >= need) {\n        eat += need;\n       \
    \ number -= need;\n        ans.push_back(eat);\n    }\n    if (number > 0) {\n\
    \        eat += number;\n        ans.push_back(eat);\n    }\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (remaining < need) {\n\
    \        ans.push_back(remaining);\n        ans.push_back(0);\n        return\
    \ ans;\n    }\n    long eaten = 0;\n    while (need > 0) {\n        if (need >\
    \ remaining) {\n            ans.push_back(remaining);\n            ans.push_back(0);\n\
    \            return ans;\n        }\n        ans.push_back(remaining);\n     \
    \   ans.push_back(need);\n        eaten += need;\n        remaining -= need;\n\
    \        need -= remaining;\n    }\n    ans.push_back(eaten);\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (need <= remaining) {\n\
    \        ans.push_back(number + need);\n        ans.push_back(remaining - need);\n\
    \    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    if (number >= need)\
    \ {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining\
    \ - number);\n    return ans;", "    std::vector<long> ans;\n    if (remaining\
    \ < need) {\n        ans.push_back(remaining);\n        ans.push_back(0);\n  \
    \      return ans;\n    }\n    if (number >= need) {\n        ans.push_back(number\
    \ - need);\n        ans.push_back(remaining - need);\n        return ans;\n  \
    \  }\n    ans.push_back(number);\n    ans.push_back(need - number);\n    return\
    \ ans;", "    std::vector<long> ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n\
    \        ans.push_back(0);\n        return ans;\n    }\n    if (number < need)\
    \ {\n        ans.push_back(number);\n        ans.push_back(need - number);\n \
    \       return ans;\n    }\n    if (number == need) {\n        ans.push_back(number);\n\
    \        ans.push_back(0);\n        return ans;\n    }\n    if (number > need)\
    \ {\n        ans.push_back(number - need);\n        ans.push_back(need);\n   \
    \     return ans;\n    }\n    return ans;", "    std::vector<long> ans;\n    if\
    \ (number >= need) {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining\
    \ - number);\n    return ans;", "    std::vector<long> ans;\n    long eaten =\
    \ 0;\n    while (need > 0) {\n        if (need > remaining) {\n            ans.push_back(need);\n\
    \            ans.push_back(0);\n            break;\n        }\n        ans.push_back(need);\n\
    \        ans.push_back(remaining - need);\n        eaten += need;\n        need\
    \ = 0;\n    }\n    ans.push_back(eaten);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n        return ans;\n    }\n    if (number <\
    \ need) {\n        ans.push_back(number);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (need <= remaining) {\n\
    \        ans.push_back(number + need);\n        ans.push_back(remaining - need);\n\
    \    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> result;\n    if (need <= remaining)\
    \ {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n        return ans;\n    }\n    if (number <\
    \ need) {\n        ans.push_back(number);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (need <= remaining) {\n\
    \        ans.push_back(number + need);\n        ans.push_back(remaining - need);\n\
    \    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    long eaten = 0;\n \
    \   while (number > 0) {\n        if (need <= remaining) {\n            ans.push_back(need);\n\
    \            remaining -= need;\n            eaten += need;\n            need\
    \ = 0;\n        } else {\n            ans.push_back(remaining);\n            remaining\
    \ = 0;\n            eaten += remaining;\n        }\n        number--;\n    }\n\
    \    ans.push_back(eaten);\n    return ans;", "    std::vector<long> ans;\n  \
    \  if (number >= need) {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \    } else {\n        ans.push_back(0);\n        ans.push_back(remaining);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    long eaten = 0;\n \
    \   while (need > 0) {\n        if (need > remaining) {\n            ans.push_back(number\
    \ + eaten);\n            ans.push_back(0);\n            break;\n        }\n  \
    \      ans.push_back(number + eaten);\n        ans.push_back(need - remaining);\n\
    \        eaten += remaining;\n        remaining = 0;\n    }\n    return ans;",
  "    std::vector<long> ans;\n    long eaten = 0;\n    while (need > 0) {\n     \
    \   if (remaining > 0) {\n            if (need > remaining) {\n              \
    \  eaten += remaining;\n                remaining = 0;\n            } else {\n\
    \                eaten += need;\n                remaining -= need;\n        \
    \        need = 0;\n            }\n        } else {\n            eaten += need;\n\
    \            need = 0;\n        }\n        ans.push_back(eaten);\n    }\n    return\
    \ ans;", "    std::vector<long> ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n\
    \        ans.push_back(0);\n        return ans;\n    }\n    long total = 0;\n\
    \    while (number > 0) {\n        if (number >= need) {\n            number -=\
    \ need;\n            total += need;\n            need = 0;\n        } else {\n\
    \            need -= number;\n            total += number;\n            number\
    \ = 0;\n        }\n    }\n    ans.push_back(total);\n    ans.push_back(need);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (need <= remaining) {\n\
    \        ans.push_back(number + need);\n        ans.push_back(remaining - need);\n\
    \    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    long eaten = 0;\n \
    \   long left = 0;\n    if (number < need) {\n        ans.push_back(number);\n\
    \        ans.push_back(need - number);\n        return ans;\n    }\n    while\
    \ (need > 0) {\n        if (number - eaten >= need) {\n            ans.push_back(number\
    \ - eaten);\n            left = need - (number - eaten);\n            break;\n\
    \        } else {\n            ans.push_back(need);\n            eaten += need;\n\
    \            left = need - eaten;\n        }\n    }\n    ans.push_back(left);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (need <= remaining) {\n\
    \        ans.push_back(number + need);\n        ans.push_back(remaining - need);\n\
    \    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> result;\n    if (need <= remaining)\
    \ {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    if (number >= need) {\n        result.push_back(number - need);\n\
    \        result.push_back(remaining);\n        return result;\n    }\n    result.push_back(number);\n\
    \    result.push_back(remaining);\n    return result;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n    } else {\n        ans.push_back(number);\n\
    \        ans.push_back(remaining - number);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (need <= remaining) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> ans;\n    if (number >= need) {\n        ans.push_back(number\
    \ - need);\n        ans.push_back(remaining);\n    } else {\n        ans.push_back(0);\n\
    \        ans.push_back(remaining);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n    } else {\n        ans.push_back(0);\n   \
    \     ans.push_back(remaining);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    long eaten = 0;\n    while (need > 0) {\n        if (need <= remaining)\
    \ {\n            ans.push_back(need);\n            remaining -= need;\n      \
    \      need = 0;\n        } else {\n            ans.push_back(remaining);\n  \
    \          eaten += remaining;\n            remaining = 0;\n        }\n    }\n\
    \    ans.push_back(eaten);\n    return ans;", "    std::vector<long> ans;\n  \
    \  if (remaining < need) {\n        ans.push_back(remaining);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    if (number < need) {\n        ans.push_back(number);\n\
    \        ans.push_back(need - number);\n        return ans;\n    }\n    long eat_num\
    \ = need / 2;\n    long eat_remain = need % 2;\n    ans.push_back(number + eat_num);\n\
    \    ans.push_back(remaining - eat_num - eat_remain);\n    return ans;", "   \
    \ std::vector<long> result;\n    if (number >= need) {\n        result.push_back(number\
    \ - need);\n        result.push_back(remaining);\n        return result;\n   \
    \ }\n    result.push_back(number);\n    result.push_back(remaining - number);\n\
    \    return result;", "    std::vector<long> ans;\n    if (remaining < need) {\n\
    \        ans.push_back(remaining);\n        ans.push_back(0);\n        return\
    \ ans;\n    }\n    if (number >= need) {\n        ans.push_back(number - need);\n\
    \        ans.push_back(remaining - need);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(need - number);\n    return ans;", "    std::vector<long> result;\n\
    \    if (number >= need) {\n        result.push_back(number - need);\n       \
    \ result.push_back(remaining);\n        return result;\n    }\n    result.push_back(number);\n\
    \    result.push_back(remaining);\n    return result;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n        return ans;\n    }\n    if (number <\
    \ need) {\n        ans.push_back(number);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (number >= need) {\n  \
    \      ans.push_back(number - need);\n        ans.push_back(remaining);\n    \
    \    return ans;\n    }\n    if (number == 0) {\n        ans.push_back(0);\n \
    \       ans.push_back(remaining);\n        return ans;\n    }\n    if (need ==\
    \ 0) {\n        ans.push_back(number);\n        ans.push_back(0);\n        return\
    \ ans;\n    }\n    if (remaining == 0) {\n        ans.push_back(number);\n   \
    \     ans.push_back(0);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(remaining);\n    return ans;", "    std::vector<long> result;\n\
    \    if (remaining < need) {\n        result.push_back(remaining);\n        result.push_back(0);\n\
    \        return result;\n    }\n    result.push_back(number + need);\n    result.push_back(remaining\
    \ - need);\n    return result;", "    std::vector<long> ans;\n    if (need > remaining)\
    \ {\n        ans.push_back(number);\n        ans.push_back(0);\n        return\
    \ ans;\n    }\n    if (need == remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(0);\n        return ans;\n    }\n    if (need < remaining)\
    \ {\n        ans.push_back(number + need);\n        ans.push_back(remaining -\
    \ need);\n        return ans;\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n        return ans;\n    }\n    if (number ==\
    \ 0) {\n        ans.push_back(0);\n        ans.push_back(remaining);\n       \
    \ return ans;\n    }\n    ans.push_back(0);\n    ans.push_back(remaining);\n \
    \   return ans;", "    std::vector<long> ans;\n    if (number >= need) {\n   \
    \     ans.push_back(number - need);\n        ans.push_back(remaining);\n     \
    \   return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (remaining == 0) {\n  \
    \      ans.push_back(number);\n        ans.push_back(0);\n        return ans;\n\
    \    }\n    if (need > remaining) {\n        ans.push_back(number + remaining);\n\
    \        ans.push_back(0);\n        return ans;\n    }\n    ans.push_back(number\
    \ + need);\n    ans.push_back(remaining - need);\n    return ans;", "    std::vector<long>\
    \ result;\n    if (number >= need) {\n        result.push_back(number - need);\n\
    \        result.push_back(remaining);\n        return result;\n    }\n    if (number\
    \ == 0) {\n        result.push_back(0);\n        result.push_back(remaining);\n\
    \        return result;\n    }\n    if (need == 0) {\n        result.push_back(number);\n\
    \        result.push_back(0);\n        return result;\n    }\n    if (remaining\
    \ == 0) {\n        result.push_back(number);\n        result.push_back(0);\n \
    \       return result;\n    }\n    result.push_back(number);\n    result.push_back(remaining);\n\
    \    return result;", "    std::vector<long> ans;\n    if (remaining < need) {\n\
    \        ans.push_back(remaining);\n        ans.push_back(0);\n        return\
    \ ans;\n    }\n    if (number < need) {\n        ans.push_back(number);\n    \
    \    ans.push_back(need - number);\n        return ans;\n    }\n    ans.push_back(need);\n\
    \    ans.push_back(0);\n    return ans;", "    std::vector<long> ans;\n    if\
    \ (number >= need) {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    if (number == 0) {\n        ans.push_back(0);\n\
    \        ans.push_back(remaining);\n        return ans;\n    }\n    if (need ==\
    \ 0) {\n        ans.push_back(0);\n        ans.push_back(0);\n        return ans;\n\
    \    }\n    if (remaining == 0) {\n        ans.push_back(0);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    if (number == 1) {\n        ans.push_back(1);\n\
    \        ans.push_back(remaining - 1);\n        return ans;\n    }\n    if (need\
    \ == 1) {\n        ans.push_back(1);\n        ans.push_back(remaining - 1);\n\
    \        return ans;\n    }\n    if (number == 2) {\n        ans.push_back(2);\n\
    \        ans.push_back(remaining - 2);\n        return ans;\n    }\n    if (need\
    \ == 2) {\n        ans.push_back(2);\n        ans.push_back(remaining - 2);\n\
    \        return ans;\n    }\n    if (number == 3) {\n        ans.push_back(3);\n\
    \        ans.push_back(remaining - 3);\n        return ans;\n    }\n    if (need\
    \ == 3) {\n        ans.push_back(3);\n        ans.push_back(remaining - 3);\n\
    \        return ans;\n    }\n    if (number == 4) {\n        ans.push_back(4);\n\
    \        ans.push_back(remaining - 4);\n        return ans;\n    }\n    if (need\
    \ == 4) {\n        ans.push_back(4);\n        ans.push_back(remaining - 4);\n\
    \        return ans;\n    }\n    if (number == 5) {\n        ans.push_back(5);\n\
    \        ans.push_back(remaining -", "    std::vector<long> ans;\n    if (number\
    \ >= need) {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    if (number < need) {\n        ans.push_back(number);\n\
    \        ans.push_back(need - number);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(need);\n    return ans;", "    std::vector<long> ans;\n   \
    \ long eaten = 0;\n    while (need > 0) {\n        if (need > remaining) {\n \
    \           eaten += remaining;\n            remaining = 0;\n        } else {\n\
    \            eaten += need;\n            remaining -= need;\n        }\n     \
    \   ans.push_back(eaten);\n        need = need - eaten;\n    }\n    return ans;",
  "    std::vector<long> ans;\n    if (need <= remaining) {\n        ans.push_back(number\
    \ + need);\n        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (number >= need) {\n        result.push_back(number - need);\n\
    \        result.push_back(remaining);\n    } else {\n        result.push_back(need\
    \ - number);\n        result.push_back(remaining);\n    }\n    return result;",
  "    std::vector<long> ans;\n    if (number >= need) {\n        ans.push_back(number\
    \ - need);\n        ans.push_back(remaining);\n        return ans;\n    }\n  \
    \  if (number < need) {\n        ans.push_back(number);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> result;\n    if (need <= remaining)\
    \ {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    long eaten = 0;\n    while (need > 0) {\n        if (need > remaining)\
    \ {\n            eaten += remaining;\n            ans.push_back(eaten);\n    \
    \        ans.push_back(need - remaining);\n            break;\n        } else\
    \ {\n            eaten += need;\n            ans.push_back(eaten);\n         \
    \   ans.push_back(need);\n            break;\n        }\n    }\n    return ans;",
  "    std::vector<long> ans;\n    if (need <= remaining) {\n        ans.push_back(number\
    \ + need);\n        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (number < need) {\n        result.push_back(number);\n     \
    \   result.push_back(need - number);\n    } else {\n        result.push_back(need);\n\
    \        result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n        return ans;\n    }\n    if (number <\
    \ need) {\n        ans.push_back(number);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (need <= remaining) {\n\
    \        ans.push_back(number + need);\n        ans.push_back(remaining - need);\n\
    \    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    if (need > remaining)\
    \ {\n        ans.push_back(number);\n        ans.push_back(0);\n        return\
    \ ans;\n    }\n    if (need == remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(0);\n        return ans;\n    }\n    if (need < remaining)\
    \ {\n        ans.push_back(number + need);\n        ans.push_back(remaining -\
    \ need);\n        return ans;\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(remaining);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (need <= remaining) {\n        ans.push_back(number + need);\n       \
    \ ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (remaining < need) {\n        result.push_back(remaining);\n\
    \        result.push_back(0);\n        return result;\n    }\n    long eaten =\
    \ 0;\n    while (need > 0) {\n        if (need > remaining) {\n            eaten\
    \ += remaining;\n            result.push_back(eaten);\n            result.push_back(0);\n\
    \            return result;\n        } else {\n            eaten += need;\n  \
    \          result.push_back(eaten);\n            result.push_back(remaining -\
    \ need);\n            return result;\n        }\n    }\n    result.push_back(eaten);\n\
    \    result.push_back(remaining - need);\n    return result;", "    std::vector<long>\
    \ result;\n    long eaten = 0;\n    while (need > 0) {\n        if (need > remaining)\
    \ {\n            eaten += remaining;\n            result.push_back(eaten);\n \
    \           result.push_back(need - remaining);\n            break;\n        }\
    \ else {\n            eaten += need;\n            result.push_back(eaten);\n \
    \           result.push_back(need);\n            remaining -= need;\n        }\n\
    \    }\n    return result;", "    std::vector<long> ans;\n    if (need <= remaining)\
    \ {\n        ans.push_back(number + need);\n        ans.push_back(remaining -\
    \ need);\n    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    if (number < need)\
    \ {\n        ans.push_back(number);\n        ans.push_back(remaining);\n     \
    \   return ans;\n    }\n    long left = need - number;\n    long eat = left /\
    \ 2;\n    if (eat > remaining) eat = remaining;\n    ans.push_back(number + eat);\n\
    \    ans.push_back(remaining - eat);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n     \
    \   ans.push_back(0);\n        return ans;\n    }\n    if (number >= need) {\n\
    \        ans.push_back(number - need);\n        ans.push_back(remaining - need);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining\
    \ - number);\n    return ans;", "    std::vector<long> result;\n    if (need <=\
    \ remaining) {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n     \
    \   ans.push_back(0);\n        return ans;\n    }\n    long eat_num = number -\
    \ need;\n    if (eat_num > 0) {\n        ans.push_back(eat_num);\n        ans.push_back(remaining\
    \ - eat_num);\n        return ans;\n    }\n    ans.push_back(0);\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> result;\n    if (number >= need) {\n\
    \        result.push_back(number - need);\n        result.push_back(remaining);\n\
    \    } else {\n        result.push_back(number);\n        result.push_back(remaining\
    \ - number);\n    }\n    return result;", "    std::vector<long> ans;\n    if\
    \ (need <= remaining) {\n        ans.push_back(number + need);\n        ans.push_back(remaining\
    \ - need);\n    } else {\n        ans.push_back(number + remaining);\n       \
    \ ans.push_back(0);\n    }\n    return ans;", "    std::vector<long> ans;\n  \
    \  if (need <= remaining) {\n        ans.push_back(number + need);\n        ans.push_back(remaining\
    \ - need);\n    } else {\n        ans.push_back(number + remaining);\n       \
    \ ans.push_back(0);\n    }\n    return ans;", "    std::vector<long> ans;\n  \
    \  long eaten = 0;\n    while (need > 0) {\n        if (need > remaining) {\n\
    \            ans.push_back(eaten + remaining);\n            ans.push_back(need\
    \ - remaining);\n            break;\n        } else {\n            ans.push_back(eaten\
    \ + need);\n            ans.push_back(remaining - need);\n            break;\n\
    \        }\n    }\n    return ans;", "    std::vector<long> ans;\n    if (remaining\
    \ < need) {\n        ans.push_back(remaining);\n        ans.push_back(0);\n  \
    \      return ans;\n    }\n    long eaten = 0;\n    while (need > 0) {\n     \
    \   if (need > remaining) {\n            eaten += remaining;\n            ans.push_back(eaten);\n\
    \            ans.push_back(0);\n            return ans;\n        }\n        eaten\
    \ += need;\n        ans.push_back(eaten);\n        ans.push_back(remaining - need);\n\
    \        need = 0;\n    }\n    return ans;", "    std::vector<long> ans;\n   \
    \ long eaten = 0;\n    while (number > 0 && need > 0) {\n        if (number >=\
    \ need) {\n            number -= need;\n            eaten += need;\n         \
    \   need = 0;\n        } else {\n            need -= number;\n            eaten\
    \ += number;\n            number = 0;\n        }\n    }\n    ans.push_back(eaten);\n\
    \    ans.push_back(remaining - need);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (number < need) {\n        ans.push_back(number);\n        ans.push_back(need\
    \ - number);\n    } else {\n        ans.push_back(need);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    long eaten = 0;\n \
    \   while (need > 0) {\n        if (remaining > 0) {\n            if (need > remaining)\
    \ {\n                eaten += remaining;\n                remaining = 0;\n   \
    \         } else {\n                eaten += need;\n                remaining\
    \ -= need;\n                need = 0;\n            }\n        } else {\n     \
    \       eaten += need;\n            need = 0;\n        }\n        ans.push_back(eaten);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    if (number >= need)\
    \ {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    if (number < need) {\n        ans.push_back(number);\n\
    \        ans.push_back(remaining);\n        return ans;\n    }\n    if (number\
    \ == need) {\n        ans.push_back(number);\n        ans.push_back(remaining\
    \ - need);\n        return ans;\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (number >= need) {\n        result.push_back(number - need);\n\
    \        result.push_back(remaining);\n        return result;\n    }\n    result.push_back(number);\n\
    \    result.push_back(remaining - number);\n    return result;", "    std::vector<long>\
    \ ans;\n    long eat = 0;\n    while (number > eat) {\n        if (need > remaining)\
    \ {\n            eat = remaining;\n        } else {\n            eat = need;\n\
    \        }\n        ans.push_back(eat);\n        remaining -= eat;\n    }\n  \
    \  ans.push_back(remaining);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (need > remaining) {\n        ans.push_back(number);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    if (need == remaining) {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n        return ans;\n    }\n    if\
    \ (need < remaining) {\n        ans.push_back(number + remaining - need);\n  \
    \      ans.push_back(need);\n        return ans;\n    }\n    return ans;", " \
    \   std::vector<long> ans;\n    if (number >= need) {\n        ans.push_back(number\
    \ - need);\n        ans.push_back(remaining);\n        return ans;\n    }\n  \
    \  ans.push_back(number);\n    ans.push_back(remaining);\n    return ans;", " \
    \   std::vector<long> ans;\n    if (need <= remaining) {\n        ans.push_back(number\
    \ + need);\n        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(remaining - number);\n    return ans;", "    std::vector<long>\
    \ result;\n    if (number >= need) {\n        result.push_back(number - need);\n\
    \        result.push_back(remaining);\n        return result;\n    }\n    if (number\
    \ < need) {\n        result.push_back(number);\n        result.push_back(remaining);\n\
    \        return result;\n    }\n    result.push_back(number);\n    result.push_back(remaining);\n\
    \    return result;", "    std::vector<long> ans;\n    long eaten = 0;\n    while\
    \ (need > 0) {\n        if (need <= remaining) {\n            ans.push_back(need);\n\
    \            remaining -= need;\n            need = 0;\n        } else {\n   \
    \         ans.push_back(remaining);\n            need -= remaining;\n        \
    \    remaining = 0;\n        }\n    }\n    ans.push_back(number - eaten);\n  \
    \  return ans;", "    std::vector<long> ans;\n    long eaten = 0;\n    while (need\
    \ > 0) {\n        if (need > remaining) {\n            ans.push_back(number +\
    \ eaten);\n            ans.push_back(remaining);\n            break;\n       \
    \ } else {\n            ans.push_back(number + eaten);\n            ans.push_back(need);\n\
    \            eaten += need;\n            need -= remaining;\n        }\n    }\n\
    \    return ans;", "    std::vector<long> ans;\n    long eat = 0;\n    while (eat\
    \ < need) {\n        if (remaining > 0) {\n            eat += remaining;\n   \
    \         remaining = 0;\n        } else {\n            remaining--;\n       \
    \ }\n        ans.push_back(eat);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (remaining < need) {\n        result.push_back(remaining);\n\
    \        result.push_back(0);\n        return result;\n    }\n    result.push_back(number\
    \ + need);\n    result.push_back(remaining - need);\n    return result;", "  \
    \  std::vector<long> ans;\n    if (need <= remaining) {\n        ans.push_back(number\
    \ + need);\n        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n     \
    \   ans.push_back(0);\n        return ans;\n    }\n    if (number >= need) {\n\
    \        ans.push_back(number - need);\n        ans.push_back(remaining - need);\n\
    \        return ans;\n    }\n    if (number == 0) {\n        ans.push_back(0);\n\
    \        ans.push_back(remaining);\n        return ans;\n    }\n    ans.push_back(0);\n\
    \    ans.push_back(remaining);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (remaining < need) {\n        ans.push_back(remaining);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    long eaten = 0;\n    while (need > 0) {\n   \
    \     if (need > remaining) {\n            eaten += remaining;\n            ans.push_back(eaten);\n\
    \            ans.push_back(0);\n            return ans;\n        }\n        else\
    \ {\n            eaten += need;\n            ans.push_back(eaten);\n         \
    \   remaining -= need;\n            need = 0;\n        }\n    }\n    ans.push_back(eaten);\n\
    \    ans.push_back(remaining);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (need <= remaining) {\n        ans.push_back(number + need);\n       \
    \ ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    long eaten = 0;\n    while (need > 0) {\n        if (need > remaining)\
    \ {\n            eaten += remaining;\n            remaining = 0;\n        } else\
    \ {\n            eaten += need;\n            remaining -= need;\n        }\n \
    \       ans.push_back(eaten);\n        need = number - eaten;\n    }\n    return\
    \ ans;", "    std::vector<long> ans;\n    if (need <= remaining) {\n        ans.push_back(number\
    \ + need);\n        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n     \
    \   ans.push_back(0);\n        return ans;\n    }\n    long eat = std::min(remaining,\
    \ need);\n    ans.push_back(eat);\n    remaining -= eat;\n    if (remaining >\
    \ 0) {\n        ans.push_back(remaining);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (number >= need) {\n        result.push_back(number - need);\n\
    \        result.push_back(remaining);\n        return result;\n    }\n    if (number\
    \ > 0) {\n        result.push_back(number);\n        result.push_back(remaining);\n\
    \        return result;\n    }\n    result.push_back(0);\n    result.push_back(remaining);\n\
    \    return result;", "    std::vector<long> ans;\n    if (need <= remaining)\
    \ {\n        ans.push_back(number + need);\n        ans.push_back(remaining -\
    \ need);\n    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    if (number >= need)\
    \ {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \    } else {\n        ans.push_back(need);\n        ans.push_back(0);\n    }\n\
    \    return ans;", "    std::vector<long> ans;\n    if (remaining < need) {\n\
    \        ans.push_back(remaining);\n        ans.push_back(0);\n        return\
    \ ans;\n    }\n    if (number >= need) {\n        ans.push_back(number - need);\n\
    \        ans.push_back(remaining - need);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(need - number);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (need <= remaining) {\n        ans.push_back(number + need);\n       \
    \ ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n     \
    \   ans.push_back(0);\n        return ans;\n    }\n    long eaten = 0;\n    while\
    \ (need > 0) {\n        if (need > remaining) {\n            eaten += remaining;\n\
    \            ans.push_back(eaten);\n            ans.push_back(0);\n          \
    \  return ans;\n        } else {\n            eaten += need;\n            ans.push_back(eaten);\n\
    \            ans.push_back(remaining - need);\n            return ans;\n     \
    \   }\n    }\n    return ans;", "    std::vector<long> ans;\n    if (number >=\
    \ need) {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    if (number < need) {\n        ans.push_back(number);\n\
    \        ans.push_back(remaining);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(remaining);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (need > remaining) {\n        ans.push_back(number);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    if (need == remaining) {\n        ans.push_back(number\
    \ + need);\n        ans.push_back(0);\n        return ans;\n    }\n    ans.push_back(number\
    \ + need);\n    ans.push_back(remaining - need);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (remaining == 0) {\n        ans.push_back(number);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    if (number >= need) {\n        ans.push_back(number\
    \ - need);\n        ans.push_back(0);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(need - number);\n    return ans;", "    std::vector<long> ans;\n\
    \    long eaten = 0;\n    while (need > 0) {\n        if (need > remaining) {\n\
    \            ans.push_back(number + eaten);\n            ans.push_back(0);\n \
    \           return ans;\n        }\n        ans.push_back(number + eaten);\n \
    \       ans.push_back(need);\n        eaten += need;\n        need -= remaining;\n\
    \        remaining -= need;\n    }\n    ans.push_back(number + eaten);\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (need <= remaining) {\n\
    \        ans.push_back(number + need);\n        ans.push_back(remaining - need);\n\
    \    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    if (need <= remaining)\
    \ {\n        ans.push_back(number + need);\n        ans.push_back(remaining -\
    \ need);\n    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    long eaten = 0;\n \
    \   while (need > 0) {\n        if (need > remaining) {\n            eaten +=\
    \ remaining;\n            ans.push_back(eaten);\n            ans.push_back(0);\n\
    \            break;\n        } else {\n            eaten += need;\n          \
    \  ans.push_back(eaten);\n            ans.push_back(remaining - need);\n     \
    \       remaining = 0;\n        }\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    long eat = 0;\n    if (need <= remaining) {\n        eat = need;\n\
    \        remaining -= eat;\n        ans.push_back(eat);\n        ans.push_back(remaining);\n\
    \    } else {\n        eat = remaining;\n        remaining = 0;\n        ans.push_back(eat);\n\
    \        ans.push_back(remaining);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n     \
    \   ans.push_back(0);\n        return ans;\n    }\n    if (number >= need) {\n\
    \        ans.push_back(number - need);\n        ans.push_back(remaining - need);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining\
    \ - number);\n    return ans;", "    std::vector<long> ans;\n    if (need <= remaining)\
    \ {\n        ans.push_back(number + need);\n        ans.push_back(remaining -\
    \ need);\n    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    if (remaining < need)\
    \ {\n        ans.push_back(remaining);\n        ans.push_back(0);\n        return\
    \ ans;\n    }\n    long eat = 0;\n    while (need > eat) {\n        if (remaining\
    \ > 0) {\n            eat += remaining;\n            remaining = 0;\n        }\
    \ else {\n            eat += number;\n            number = 0;\n        }\n   \
    \ }\n    ans.push_back(eat);\n    ans.push_back(remaining);\n    return ans;",
  "    std::vector<long> ans;\n    if (need <= remaining) {\n        ans.push_back(number\
    \ + need);\n        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n        return ans;\n    }\n    if (number <\
    \ need) {\n        ans.push_back(number);\n        ans.push_back(0);\n       \
    \ return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (number < need) {\n   \
    \     ans.push_back(number);\n        ans.push_back(remaining);\n        return\
    \ ans;\n    }\n    long eaten = 0;\n    while (need > 0) {\n        if (need >\
    \ remaining) {\n            ans.push_back(number + eaten);\n            ans.push_back(remaining);\n\
    \            return ans;\n        }\n        ans.push_back(number + eaten);\n\
    \        ans.push_back(need);\n        eaten += need;\n        need -= remaining;\n\
    \        remaining -= need;\n    }\n    return ans;", "    std::vector<long> ans;\n\
    \    if (remaining == 0) {\n        ans.push_back(number);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    if (number >= need) {\n        ans.push_back(number\
    \ - need);\n        ans.push_back(0);\n        return ans;\n    }\n    if (number\
    \ + remaining >= need) {\n        ans.push_back(number + remaining - need);\n\
    \        ans.push_back(0);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(need - number);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (remaining < need) {\n        ans.push_back(remaining);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    long eaten = 0;\n    while (need > 0) {\n   \
    \     if (need > remaining) {\n            eaten += remaining;\n            need\
    \ -= remaining;\n        } else {\n            eaten += need;\n            need\
    \ = 0;\n        }\n    }\n    ans.push_back(eaten);\n    ans.push_back(remaining\
    \ - eaten);\n    return ans;", "    std::vector<long> ans;\n    if (number >=\
    \ need) {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    if (number == 0) {\n        ans.push_back(0);\n\
    \        ans.push_back(remaining);\n        return ans;\n    }\n    ans.push_back(number);\n\
    \    ans.push_back(remaining - number);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n     \
    \   ans.push_back(0);\n        return ans;\n    }\n    if (number >= need) {\n\
    \        ans.push_back(number - need);\n        ans.push_back(remaining - need);\n\
    \        return ans;\n    }\n    long left = need - number;\n    long right =\
    \ remaining - left;\n    ans.push_back(left);\n    ans.push_back(right);\n   \
    \ return ans;", "    std::vector<long> ans;\n    if (need <= remaining) {\n  \
    \      ans.push_back(number + need);\n        ans.push_back(remaining - need);\n\
    \    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    long eaten = 0;\n \
    \   while (need > 0) {\n        if (need > remaining) {\n            eaten +=\
    \ remaining;\n            ans.push_back(eaten);\n            need -= remaining;\n\
    \            remaining = 0;\n        } else {\n            eaten += need;\n  \
    \          ans.push_back(eaten);\n            remaining -= need;\n           \
    \ need = 0;\n        }\n    }\n    ans.push_back(eaten);\n    return ans;", " \
    \   std::vector<long> ans;\n    long eaten = 0;\n    while (need > 0) {\n    \
    \    if (need > remaining) {\n            eaten += remaining;\n            ans.push_back(eaten);\n\
    \            need -= remaining;\n            remaining = 0;\n        } else {\n\
    \            eaten += need;\n            ans.push_back(eaten);\n            remaining\
    \ -= need;\n            need = 0;\n        }\n    }\n    ans.push_back(eaten);\n\
    \    return ans;", "    std::vector<long> ans;\n    if (remaining < need) {\n\
    \        ans.push_back(remaining);\n        ans.push_back(0);\n        return\
    \ ans;\n    }\n    if (number >= need) {\n        ans.push_back(number - need);\n\
    \        ans.push_back(remaining - need);\n        return ans;\n    }\n    long\
    \ left = need - number;\n    long right = remaining - left;\n    ans.push_back(left);\n\
    \    ans.push_back(right);\n    return ans;", "    std::vector<long> ans;\n  \
    \  if (need <= remaining) {\n        ans.push_back(number + need);\n        ans.push_back(remaining\
    \ - need);\n    } else {\n        ans.push_back(number + remaining);\n       \
    \ ans.push_back(0);\n    }\n    return ans;", "    std::vector<long> ans;\n  \
    \  if (remaining < need) {\n        ans.push_back(remaining);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    if (number >= need) {\n        ans.push_back(number\
    \ - need);\n        ans.push_back(remaining - need);\n        return ans;\n  \
    \  }\n    ans.push_back(number);\n    ans.push_back(need - number);\n    return\
    \ ans;", "    std::vector<long> ans;\n    if (remaining < need) {\n        ans.push_back(remaining);\n\
    \        ans.push_back(0);\n        return ans;\n    }\n    if (number >= need)\
    \ {\n        ans.push_back(number - need);\n        ans.push_back(remaining -\
    \ need);\n        return ans;\n    }\n    if (number == 0) {\n        ans.push_back(0);\n\
    \        ans.push_back(remaining);\n        return ans;\n    }\n    ans.push_back(0);\n\
    \    ans.push_back(remaining);\n    return ans;", "    std::vector<long> ans;\n\
    \    if (remaining < need) {\n        ans.push_back(remaining);\n        ans.push_back(0);\n\
    \        return ans;\n    }\n    if (number < need) {\n        ans.push_back(number);\n\
    \        ans.push_back(need - number);\n        return ans;\n    }\n    if (number\
    \ == need) {\n        ans.push_back(number);\n        ans.push_back(0);\n    \
    \    return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(need -\
    \ number);\n    return ans;", "    std::vector<long> ans;\n    if (need <= remaining)\
    \ {\n        ans.push_back(number + need);\n        ans.push_back(remaining -\
    \ need);\n    } else {\n        ans.push_back(number + remaining);\n        ans.push_back(0);\n\
    \    }\n    return ans;", "    std::vector<long> ans;\n    if (number >= need)\
    \ {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \    } else {\n        ans.push_back(number);\n        ans.push_back(remaining\
    \ - number);\n    }\n    return ans;", "    std::vector<long> ans;\n    long eaten\
    \ = 0;\n    while (need > 0) {\n        if (need > remaining) {\n            eaten\
    \ += remaining;\n            ans.push_back(eaten);\n            ans.push_back(0);\n\
    \            break;\n        } else {\n            eaten += need;\n          \
    \  ans.push_back(eaten);\n            ans.push_back(remaining - need);\n     \
    \       break;\n        }\n    }\n    return ans;", "    std::vector<long> ans;\n\
    \    if (number >= need) {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \    } else {\n        ans.push_back(need);\n        ans.push_back(0);\n    }\n\
    \    return ans;", "    std::vector<long> result;\n    if (need <= remaining)\
    \ {\n        result.push_back(number + need);\n        result.push_back(remaining\
    \ - need);\n    } else {\n        result.push_back(number + remaining);\n    \
    \    result.push_back(0);\n    }\n    return result;", "    std::vector<long>\
    \ ans;\n    if (number >= need) {\n        ans.push_back(number - need);\n   \
    \     ans.push_back(remaining);\n        return ans;\n    }\n    if (number <\
    \ need) {\n        ans.push_back(number);\n        ans.push_back(need - number);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(need);\n\
    \    return ans;", "    std::vector<long> ans;\n    long eaten = 0;\n    while\
    \ (need > 0) {\n        if (need > remaining) {\n            eaten += remaining;\n\
    \            ans.push_back(eaten);\n            need -= remaining;\n         \
    \   remaining = 0;\n        } else {\n            eaten += need;\n           \
    \ ans.push_back(eaten);\n            remaining -= need;\n            need = 0;\n\
    \        }\n    }\n    ans.push_back(eaten);\n    return ans;", "    std::vector<long>\
    \ ans;\n    if (need <= remaining) {\n        ans.push_back(number + need);\n\
    \        ans.push_back(remaining - need);\n    } else {\n        ans.push_back(number\
    \ + remaining);\n        ans.push_back(0);\n    }\n    return ans;", "    std::vector<long>\
    \ result;\n    if (need <= remaining) {\n        result.push_back(number + need);\n\
    \        result.push_back(remaining - need);\n    } else {\n        result.push_back(number\
    \ + remaining);\n        result.push_back(0);\n    }\n    return result;", " \
    \   std::vector<long> ans;\n    if (remaining == 0) {\n        ans.push_back(number);\n\
    \        ans.push_back(0);\n        return ans;\n    }\n    if (number >= need)\
    \ {\n        ans.push_back(number - need);\n        ans.push_back(remaining);\n\
    \        return ans;\n    }\n    ans.push_back(number);\n    ans.push_back(remaining\
    \ - number);\n    return ans;"]
stop_tokens:
- "\n}"
