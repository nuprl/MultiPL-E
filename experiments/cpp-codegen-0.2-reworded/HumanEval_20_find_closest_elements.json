{
  "name": "HumanEval_20_find_closest_elements",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// From a supplied vector of numbers (of length at least two) select and return two that are the closest to each\n// other and return them in order (smaller number, larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n// (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n// (2.0, 2.0)\nstd::tuple<float, float> find_closest_elements(std::vector<float> numbers) {\n",
  "tests": "}\nint main() {\n    auto candidate = find_closest_elements;\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.9, (float)4.0, (float)5.0, (float)2.2}))) == (std::make_tuple(3.9, 4.0)));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)5.9, (float)4.0, (float)5.0}))) == (std::make_tuple(5.0, 5.9)));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0, (float)5.0, (float)2.2}))) == (std::make_tuple(2.0, 2.2)));\n    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0, (float)4.0, (float)5.0, (float)2.0}))) == (std::make_tuple(2.0, 2.0)));\n    assert(candidate((std::vector<float>({(float)1.1, (float)2.2, (float)3.1, (float)4.1, (float)5.1}))) == (std::make_tuple(2.2, 3.1)));\n}\n",
  "completions": [
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float diff = max - min;\n    float diff2 = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        diff2 = numbers[i] - min;\n        if (diff2 < diff) {\n            diff = diff2;\n        }\n    }\n    return std::make_tuple(min + diff, max - diff);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = std::numeric_limits<float>::min();\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float min_diff_index = 0;\n    for (int i = 1; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[min_diff_index + 1]);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = numbers[0] - numbers[1];\n    float min_diff_index = 0;\n    for (int i = 1; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[(min_diff_index + 1) % numbers.size()]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = std::numeric_limits<float>::min();\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0.0;\n    float max_val = 0.0;\n    for (int i = 0; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_val = numbers[i];\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_val = numbers[i];\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = std::numeric_limits<float>::min();\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = std::numeric_limits<float>::max();\n    float max_num = std::numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > max_num) {\n            max_num = diff;\n        }\n    }\n    float diff = numbers[0] - numbers[1];\n    if (diff < min_diff) {\n        min_diff = diff;\n        min_num = numbers[0];\n    }\n    if (diff > max_num) {\n        max_num = diff;\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0.0;\n    float max_val = 0.0;\n    for (int i = 0; i < numbers.size(); ++i) {\n        for (int j = i + 1; j < numbers.size(); ++j) {\n            float diff = std::abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                min_val = numbers[i];\n                max_val = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0;\n    float max_num = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > min_diff) {\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[numbers.size() - 1] - numbers[numbers.size() - 2];\n    float diff = std::min(min_diff, max_diff);\n    float closest_number = numbers[0] + diff;\n    return std::make_tuple(closest_number, numbers[0]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = std::numeric_limits<float>::max();\n    float max_num = std::numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n            max_num = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float first = numbers[0];\n    float second = numbers[1];\n    float min_diff = std::abs(first - second);\n    for (int i = 2; i < numbers.size(); i++) {\n        float diff = std::abs(numbers[i] - first);\n        if (diff < min_diff) {\n            min_diff = diff;\n            first = numbers[i];\n        }\n        diff = std::abs(numbers[i] - second);\n        if (diff < min_diff) {\n            min_diff = diff;\n            second = numbers[i];\n        }\n    }\n    return std::make_tuple(first, second);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = std::numeric_limits<float>::max();\n    float max_num = std::numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > max_num) {\n            max_num = diff;\n        }\n    }\n    float diff = numbers[1] - numbers[0];\n    if (diff < min_diff) {\n        min_diff = diff;\n        min_num = numbers[1];\n    }\n    if (diff > max_num) {\n        max_num = diff;\n    }\n    return std::make_tuple(min_num, max_num);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[1];\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[1];\n        if (diff < 0) diff = -diff;\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[1];\n        if (diff < 0) diff = -diff;\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0.0;\n    float max_val = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_val = numbers[i];\n            max_val = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0;\n    float max_val = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_val = numbers[i];\n            max_val = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float diff = max - min;\n    float closest_min = min + diff / 2;\n    float closest_max = max - diff / 2;\n    return std::make_tuple(closest_min, closest_max);",
    "    std::sort(numbers.begin(), numbers.end());\n    float first = numbers[0];\n    float second = numbers[1];\n    float diff = std::abs(first - second);\n    for (int i = 2; i < numbers.size(); i++) {\n        float current = numbers[i];\n        float diff_current = std::abs(current - first);\n        if (diff_current < diff) {\n            diff = diff_current;\n            first = current;\n        } else if (diff_current > diff) {\n            diff = diff_current;\n            second = current;\n        }\n    }\n    return std::make_tuple(first, second);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::abs(numbers[0] - numbers[1]);\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for (auto num : numbers) {\n        float diff = std::abs(num - min_num);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = num;\n        }\n        diff = std::abs(num - max_num);\n        if (diff > min_diff) {\n            max_num = num;\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[1];\n        if (diff < 0) diff = -diff;\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > min_diff) {\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = std::numeric_limits<float>::max();\n    float max_num = std::numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            float diff = std::abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                min_num = numbers[i];\n                max_num = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > min_diff) {\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float diff = max - min;\n    float mid = min + diff / 2;\n    std::tuple<float, float> result;\n    for (auto number : numbers) {\n        if (number < mid) {\n            result = std::make_tuple(number, min);\n        } else {\n            result = std::make_tuple(max, number);\n        }\n    }\n    return result;",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0.0;\n    float max_val = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) {\n            diff = -diff;\n        }\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_val = numbers[i];\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_val = numbers[i];\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n            max_num = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = numbers[0] - numbers[1];\n    float min_diff_index = 0;\n    for (int i = 1; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[(min_diff_index + 1) % numbers.size()]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_num = 0;\n    float max_diff = 0;\n    float max_diff_num = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) {\n            diff = -diff;\n        }\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_num = numbers[i];\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_diff_num, max_diff_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = numbers[0] - numbers[1];\n    std::pair<float, float> closest_pair(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = std::make_pair(numbers[i], numbers[i + 1]);\n        }\n    }\n    return closest_pair;",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n            max_num = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = std::numeric_limits<float>::max();\n    float max_num = std::numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            float diff = std::abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                min_num = numbers[i];\n                max_num = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0;\n    float max_num = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n            max_num = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > min_diff) {\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[1];\n        if (diff < 0) diff = -diff;\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0.0;\n    float max_val = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_val = numbers[i];\n            max_val = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < 0) {\n            diff = -diff;\n        }\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff *= -1;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > min_diff) {\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float diff = max - min;\n    float closest_min = min + diff / 2;\n    float closest_max = max - diff / 2;\n    return std::make_tuple(closest_min, closest_max);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (auto num : numbers) {\n        float diff = std::abs(num - numbers[0]);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = num;\n        }\n        if (diff > min_diff) {\n            max_num = num;\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[1] - numbers[0];\n    for (int i = 1; i < numbers.size() - 1; i++) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n        }\n    }\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > 0) {\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff *= -1;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = std::numeric_limits<float>::max();\n    float max_num = std::numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n            max_num = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > 0) {\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0;\n    float max_num = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > min_diff) {\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[1];\n        if (diff < 0) diff = -diff;\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float min_num = numbers[0];\n    float max_num = numbers[0];\n    for (int i = 1; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0.0;\n    float max_val = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_val = numbers[i];\n            max_val = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_num = std::numeric_limits<float>::max();\n    float max_num = std::numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > max_num) {\n            max_num = diff;\n        }\n    }\n    for (int i = 1; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > max_num) {\n            max_num = diff;\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float min_diff_index = 0;\n    for (int i = 1; i < numbers.size() - 1; ++i) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[min_diff_index + 1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float min_diff_index = 0;\n    for (int i = 1; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[min_diff_index + 1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0;\n    float max_val = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_val = numbers[i];\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_val = numbers[i];\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    assert(numbers.size() >= 2);\n    float min_diff = numbers[0] - numbers[1];\n    float min_diff_index = 0;\n    for (int i = 1; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[(min_diff_index + 1) % numbers.size()]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = numbers[0] - numbers[1];\n    std::pair<float, float> closest_pair = std::make_pair(numbers[0], numbers[1]);\n    for (int i = 2; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = std::make_pair(numbers[i], numbers[i - 1]);\n        }\n    }\n    return closest_pair;",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_num = 0.0;\n    float max_diff = 0.0;\n    float max_diff_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            float diff = std::abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                min_diff_num = numbers[i];\n                max_diff = diff;\n                max_diff_num = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(min_diff_num, max_diff_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0.0;\n    float max_val = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff *= -1;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_val = numbers[i];\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_val = numbers[i];\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = std::numeric_limits<float>::max();\n    float max_num = std::numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            float diff = numbers[i] - numbers[j];\n            if (diff < min_diff) {\n                min_diff = diff;\n                min_num = numbers[i];\n                max_num = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0.0;\n    float max_val = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_val = numbers[i];\n            max_val = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float mid = (min + max) / 2.0;\n    float diff = std::abs(numbers[0] - mid);\n    float diff2 = std::abs(numbers[numbers.size() - 1] - mid);\n    return std::make_tuple(mid, diff < diff2 ? mid : diff2);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_num = 0;\n    float max_diff = 0;\n    float max_diff_num = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_num = numbers[i];\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_diff_num, max_diff_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float mid = (min + max) / 2.0;\n    float closest_min = numbers[0];\n    float closest_max = numbers[numbers.size() - 1];\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < mid) {\n            closest_min = numbers[i];\n        }\n        if (numbers[i] > mid) {\n            closest_max = numbers[i];\n        }\n    }\n    return std::make_tuple(closest_min, closest_max);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float diff = max - min;\n    float closest = (max + min) / 2.0;\n    return std::make_tuple(closest, closest + diff);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (auto num : numbers) {\n        float diff = std::abs(num - min_num);\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = num;\n        }\n        diff = std::abs(num - max_num);\n        if (diff < min_diff) {\n            min_diff = diff;\n            max_num = num;\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float mid = (min + max) / 2;\n    float min_diff = std::abs(numbers[0] - mid);\n    float max_diff = std::abs(numbers[numbers.size() - 1] - mid);\n    float diff = std::min(min_diff, max_diff);\n    return std::make_tuple(mid, diff);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float diff = max - min;\n    float closest_min = min;\n    float closest_max = max;\n    for (auto& number : numbers) {\n        if (number < min) {\n            closest_min = number;\n        }\n        if (number > max) {\n            closest_max = number;\n        }\n    }\n    return std::make_tuple(closest_min, closest_max);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) {\n            diff = -diff;\n        }\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); ++i) {\n        for (int j = i + 1; j < numbers.size(); ++j) {\n            float diff = numbers[i] - numbers[j];\n            if (diff < min_diff) {\n                min_diff = diff;\n                min_num = numbers[i];\n                max_num = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = std::numeric_limits<float>::max();\n    float max_num = std::numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size(); ++i) {\n        for (int j = i + 1; j < numbers.size(); ++j) {\n            float diff = numbers[i] - numbers[j];\n            if (diff < min_diff) {\n                min_diff = diff;\n                min_num = numbers[i];\n                max_num = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[2];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[3];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[4];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[5];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[6];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[7];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[8];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[9];\n        if (diff < min_diff) {",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_num = std::numeric_limits<float>::max();\n    float max_num = std::numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size(); ++i) {\n        for (int j = i + 1; j < numbers.size(); ++j) {\n            float diff = std::abs(numbers[i] - numbers[j]);\n            if (diff < min_diff) {\n                min_diff = diff;\n                min_num = numbers[i];\n                max_num = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float min_diff = std::abs(numbers[0] - numbers[1]);\n    float max_diff = std::abs(numbers[numbers.size() - 1] - numbers[numbers.size() - 2]);\n    float min_diff_2 = std::abs(numbers[0] - numbers[2]);\n    float max_diff_2 = std::abs(numbers[numbers.size() - 1] - numbers[numbers.size() - 3]);\n    if (min_diff < max_diff) {\n        return std::make_tuple(min, max);\n    } else if (min_diff_2 < max_diff_2) {\n        return std::make_tuple(min, min);\n    } else {\n        return std::make_tuple(max, min);\n    }",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) {\n            diff = -diff;\n        }\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float diff = max - min;\n    float closest = (max + min) / 2;\n    float closest_diff = abs(closest - min);\n    for (auto number : numbers) {\n        float diff = abs(number - closest);\n        if (diff < closest_diff) {\n            closest = number;\n            closest_diff = diff;\n        }\n    }\n    return std::make_tuple(closest, closest_diff);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > min_diff) {\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff *= -1;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        diff = numbers[i] - numbers[1];\n        if (diff < 0) diff = -diff;\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float diff = max - min;\n    float mid = (max + min) / 2.0;\n    float closest_min = mid - diff / 2.0;\n    float closest_max = mid + diff / 2.0;\n    return std::make_tuple(closest_min, closest_max);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = numbers[0] - numbers[1];\n    float min_diff_index = 0;\n    for (int i = 1; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[(min_diff_index + 1) % numbers.size()]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0.0;\n    float max_val = 0.0;\n    for (int i = 0; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_val = numbers[i];\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_val = numbers[i];\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    assert(numbers.size() >= 2);\n    float min_diff = numbers[0] - numbers[1];\n    float max_diff = numbers[0] - numbers[1];\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n        }\n    }\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float diff = max - min;\n    float mid = (max + min) / 2;\n    std::tuple<float, float> closest = std::make_tuple(mid, mid);\n    for (auto num : numbers) {\n        if (num < mid) {\n            if (num - mid < diff) {\n                diff = num - mid;\n                closest = std::make_tuple(num, mid);\n            }\n        } else {\n            if (mid - num < diff) {\n                diff = mid - num;\n                closest = std::make_tuple(mid, num);\n            }\n        }\n    }\n    return closest;",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_val = 0.0;\n    float max_val = 0.0;\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_val = numbers[i];\n            max_val = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_val, max_val);",
    "    assert(numbers.size() >= 2);\n    float min_diff = numbers[0] - numbers[1];\n    float max_diff = numbers[0] - numbers[1];\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n        }\n    }\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float diff = numbers[i + 1] - numbers[i];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n            max_num = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = numbers[0] - numbers[1];\n    float min_diff_index = 0;\n    for (int i = 1; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[(min_diff_index + 1) % numbers.size()]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > 0) {\n            max_num = numbers[i];\n        }\n    }\n    float diff = max_num - min_num;\n    if (diff < 0.00001) {\n        return std::make_tuple(min_num, max_num);\n    }\n    return std::make_tuple(min_num, min_num + diff);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = numbers[0] - numbers[1];\n    float min_diff_index = 0;\n    for (int i = 1; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[(min_diff_index + 1) % numbers.size()]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) {\n            diff = -diff;\n        }\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_num = numbers[i];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n            max_num = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = std::numeric_limits<float>::min();\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); ++i) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float diff = max - min;\n    float diff2 = diff / 2;\n    float min2 = min + diff2;\n    float max2 = max - diff2;\n    return std::make_tuple(min2, max2);",
    "    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff *= -1;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0.0;\n    float max_num = 0.0;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            float diff = numbers[i] - numbers[j];\n            if (diff < 0) diff *= -1;\n            if (diff < min_diff) {\n                min_diff = diff;\n                min_num = numbers[i];\n                max_num = numbers[j];\n            }\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    float min_diff = numbers[0] - numbers[1];\n    std::pair<float, float> closest_pair = std::make_pair(numbers[0], numbers[1]);\n    for (int i = 0; i < numbers.size() - 1; i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            closest_pair = std::make_pair(numbers[i], numbers[i + 1]);\n        }\n    }\n    return closest_pair;",
    "    assert(numbers.size() >= 2);\n    float min_diff = std::numeric_limits<float>::max();\n    float min_diff_index = 0;\n    float max_diff = 0;\n    float max_diff_index = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[0];\n        if (diff < 0) diff = -diff;\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n        if (diff > max_diff) {\n            max_diff = diff;\n            max_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[max_diff_index]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float min_diff_index = 0;\n    for (int i = 1; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i - 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_diff_index = i;\n        }\n    }\n    return std::make_tuple(numbers[min_diff_index], numbers[(min_diff_index + 1) % numbers.size()]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = numbers[1] - numbers[0];\n    float max_diff = numbers[numbers.size() - 1] - numbers[numbers.size() - 2];\n    float diff = std::min(min_diff, max_diff);\n    float min_num = numbers[0] + diff;\n    float max_num = numbers[numbers.size() - 1] - diff;\n    return std::make_tuple(min_num, max_num);",
    "    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);",
    "    std::sort(numbers.begin(), numbers.end());\n    float min = numbers[0];\n    float max = numbers[numbers.size() - 1];\n    float diff = max - min;\n    float mid = min + diff / 2;\n    std::tuple<float, float> result;\n    for (float number : numbers) {\n        if (std::abs(number - mid) < std::abs(result.get<1>() - mid)) {\n            result = std::make_tuple(number, number);\n        }\n    }\n    return result;",
    "    std::sort(numbers.begin(), numbers.end());\n    float min_diff = std::numeric_limits<float>::max();\n    float min_num = 0;\n    float max_num = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        float diff = numbers[i] - numbers[i + 1];\n        if (diff < min_diff) {\n            min_diff = diff;\n            min_num = numbers[i];\n            max_num = numbers[i + 1];\n        }\n    }\n    return std::make_tuple(min_num, max_num);",
    "    assert(numbers.size() >= 2);\n    std::sort(numbers.begin(), numbers.end());\n    return std::make_tuple(numbers[0], numbers[1]);"
  ],
  "stop_tokens": [
    "\n}"
  ]
}