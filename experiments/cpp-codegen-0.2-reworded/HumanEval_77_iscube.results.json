{
  "name": "HumanEval_77_iscube",
  "language": "cpp",
  "prompt": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n",
  "tests": "}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmppuk_lp6m: /tmp/tmppuk_lp6m.cpp:28: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp330sjkbc: /tmp/tmp330sjkbc.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp7ph7kc5e: /tmp/tmp7ph7kc5e.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp0ltwzacj: /tmp/tmp0ltwzacj.cpp:30: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp095ie0rb: /tmp/tmp095ie0rb.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpa_00j2v1: /tmp/tmpa_00j2v1.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp8tubt7pr: /tmp/tmp8tubt7pr.cpp:28: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoqqziqq6: /tmp/tmpoqqziqq6.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpvbsxj5n1: /tmp/tmpvbsxj5n1.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmply5s8841: /tmp/tmply5s8841.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp669xxrec: /tmp/tmp669xxrec.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpvbsxj5n1: /tmp/tmpvbsxj5n1.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpihl2ekat: /tmp/tmpihl2ekat.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmply5s8841: /tmp/tmply5s8841.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp095ie0rb: /tmp/tmp095ie0rb.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpa_00j2v1: /tmp/tmpa_00j2v1.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a==0) return true;\n    if(a==1) return true;\n    if(a==2) return false;\n    if(a==3) return true;\n    if(a==4) return false;\n    if(a==5) return true;\n    if(a==6) return false;\n    if(a==7) return true;\n    if(a==8) return false;\n    if(a==9) return true;\n    if(a==10) return false;\n    if(a==11) return true;\n    if(a==12) return false;\n    if(a==13) return true;\n    if(a==14) return false;\n    if(a==15) return true;\n    if(a==16) return false;\n    if(a==17) return true;\n    if(a==18) return false;\n    if(a==19) return true;\n    if(a==20) return false;\n    if(a==21) return true;\n    if(a==22) return false;\n    if(a==23) return true;\n    if(a==24) return false;\n    if(a==25) return true;\n    if(a==26) return false;\n    if(a==27) return true;\n    if(a==28) return false;\n    if(a==29) return true;\n    if(a==30) return false;\n    if(a==31) return true;\n    if(a==32) return false;\n    if(a==33) return true;\n    if(a==34) return false;\n    if(a==35) return true;\n    if(a==36) return false;\n    if(a==37) return true;\n    if(a==38) return false;\n    if(a==39) return true;\n    if(a==40) return false;\n    if(a==41) return true;\n    if(a==42) return false;\n    if(a==43) return true;\n    if(a==44) return false;\n    if(a==45) return true;\n    if(a==46\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "/tmp/tmpy45rxcik.cpp: In function \u2018bool iscube(long int)\u2019:\n/tmp/tmpy45rxcik.cpp:66:13: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   66 |     if(a==46\n      |       ~     ^\n      |             )\n   67 | }\n      | ~            \n/tmp/tmpy45rxcik.cpp:67:1: error: expected primary-expression before \u2018}\u2019 token\n   67 | }\n      | ^\n/tmp/tmpy45rxcik.cpp:67:1: warning: control reaches end of non-void function [-Wreturn-type]\n   67 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp330sjkbc: /tmp/tmp330sjkbc.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpa_00j2v1: /tmp/tmpa_00j2v1.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return iscube(a / 3);\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpmw59dswm: /tmp/tmpmw59dswm.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 27 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpdjjmgye5: /tmp/tmpdjjmgye5.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp330sjkbc: /tmp/tmp330sjkbc.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoqqziqq6: /tmp/tmpoqqziqq6.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a < 0) return false;\n    if(a == 0) return true;\n    if(a % 3 == 0) return false;\n    if(a % 9 == 0) return false;\n    if(a % 27 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpkkgjlgt4: /tmp/tmpkkgjlgt4.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp7ph7kc5e: /tmp/tmp7ph7kc5e.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a%3==0) return false;\n    if(a%4==0) return false;\n    if(a%5==0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoauh22da: /tmp/tmpoauh22da.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 5 == 0) return false;\n    if(a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpt2a5widn: /tmp/tmpt2a5widn.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    long b = a;\n    while (b > 0) {\n        b /= 10;\n    }\n    return a == b * b * b;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpewyzaulw: /tmp/tmpewyzaulw.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a < 0) return false;\n    long b = a;\n    while(b) {\n        b /= 10;\n        a /= 10;\n    }\n    return a == 1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp8uinbr5i: /tmp/tmp8uinbr5i.cpp:30: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a%3==0) return false;\n    if(a%4==0) return false;\n    if(a%5==0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoauh22da: /tmp/tmpoauh22da.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp7ph7kc5e: /tmp/tmp7ph7kc5e.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a%3==0) return false;\n    if(a%4==0) return false;\n    if(a%5==0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoauh22da: /tmp/tmpoauh22da.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp330sjkbc: /tmp/tmp330sjkbc.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 2 == 0) return false;\n    return iscube(a / 3);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpi_rqd1vs: /tmp/tmpi_rqd1vs.cpp:30: int main(): Assertion `candidate((-1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpk93a0_d_: /tmp/tmpk93a0_d_.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp44czleq1: /tmp/tmp44czleq1.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 9 == 0) return false;\n    if(a % 27 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpyj4jjjet: /tmp/tmpyj4jjjet.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a%3==0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpg8ancb1h: /tmp/tmpg8ancb1h.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 9 == 0) return false;\n    if(a % 27 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpyj4jjjet: /tmp/tmpyj4jjjet.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 4 == 0) return true;\n    if(a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpk1yx0jdt: /tmp/tmpk1yx0jdt.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp330sjkbc: /tmp/tmp330sjkbc.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp9s8f2_or: /tmp/tmp9s8f2_or.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp669xxrec: /tmp/tmp669xxrec.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return iscube(a / 3);\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpmw59dswm: /tmp/tmpmw59dswm.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp095ie0rb: /tmp/tmp095ie0rb.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 9 == 0) return false;\n    if(a % 27 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpyj4jjjet: /tmp/tmpyj4jjjet.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpa_00j2v1: /tmp/tmpa_00j2v1.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoqqziqq6: /tmp/tmpoqqziqq6.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a < 0) return false;\n    if(a == 0) return true;\n    if(a % 3 == 0) return true;\n    if(a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpfqzqbvmc: /tmp/tmpfqzqbvmc.cpp:28: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 != 0) return false;\n    long n = a / 3;\n    while(n) {\n        if(n % 2 != 0) return false;\n        n /= 2;\n    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpeui93bxj: /tmp/tmpeui93bxj.cpp:32: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp44czleq1: /tmp/tmp44czleq1.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 9 == 0) return false;\n    if(a % 27 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpyj4jjjet: /tmp/tmpyj4jjjet.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoqqziqq6: /tmp/tmpoqqziqq6.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp44czleq1: /tmp/tmp44czleq1.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a==0) return true;\n    if(a%3==0) return false;\n    if(a%4==0) return false;\n    if(a%5==0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpzkho0_eb: /tmp/tmpzkho0_eb.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 2 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp329dtqbi: /tmp/tmp329dtqbi.cpp:30: int main(): Assertion `candidate((64)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp669xxrec: /tmp/tmp669xxrec.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpdh0bvfms: /tmp/tmpdh0bvfms.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoqqziqq6: /tmp/tmpoqqziqq6.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 4 == 0) return true;\n    if(a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpk1yx0jdt: /tmp/tmpk1yx0jdt.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 9 == 0) return false;\n    if(a % 27 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpyj4jjjet: /tmp/tmpyj4jjjet.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a < 0)\n        return false;\n    if(a == 0)\n        return true;\n    if(a % 3 == 0)\n        return false;\n    if(a % 4 == 0)\n        return false;\n    if(a % 5 == 0)\n        return false;\n    if(a % 6 == 0)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp8p2bhq5t: /tmp/tmp8p2bhq5t.cpp:37: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return false;\n    if(a % 9 == 0)\n        return false;\n    if(a % 27 == 0)\n        return false;\n    if(a % 27 == 0)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpncdl8ksa: /tmp/tmpncdl8ksa.cpp:37: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0)\n        return false;\n    if (a == 0)\n        return true;\n    if (a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp7obpq17l: /tmp/tmp7obpq17l.cpp:30: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 4 == 0) return true;\n    if(a % 5 == 0) return true;\n    if(a % 6 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpryfjarjy: /tmp/tmpryfjarjy.cpp:30: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpvbsxj5n1: /tmp/tmpvbsxj5n1.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a%3==0) return false;\n    if(a%4==0) return false;\n    if(a%5==0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoauh22da: /tmp/tmpoauh22da.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp7ph7kc5e: /tmp/tmp7ph7kc5e.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp330sjkbc: /tmp/tmp330sjkbc.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoqqziqq6: /tmp/tmpoqqziqq6.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoqqziqq6: /tmp/tmpoqqziqq6.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 9 == 0) return false;\n    if(a % 10 == 0) return false;\n    if(a % 12 == 0) return false;\n    if(a % 15 == 0) return false;\n    if(a % 16 == 0) return false;\n    if(a % 18 == 0) return false;\n    if(a % 20 == 0) return false;\n    if(a % 24 == 0) return false;\n    if(a % 25 == 0) return false;\n    if(a % 27 == 0) return false;\n    if(a % 30 == 0) return false;\n    if(a % 32 == 0) return false;\n    if(a % 36 == 0) return false;\n    if(a % 40 == 0) return false;\n    if(a % 48 == 0) return false;\n    if(a % 50 == 0) return false;\n    if(a % 54 == 0) return false;\n    if(a % 60 == 0) return false;\n    if(a % 64 == 0) return false;\n    if(a % 72 == 0) return false;\n    if(a % 75 == 0) return false;\n    if(a % 81 == 0) return false;\n    if(a % 90 == 0) return false;\n    if(a % 96 == 0) return false;\n    if(a % 100 == 0) return false;\n    if(a % 108 == 0) return false;\n    if(a % 120 == 0) return false;\n    if(a % 125 == 0) return false;\n    if(a % 128 == 0) return false;\n    if(a % 135 == 0) return false;\n    if(a % 144 == 0) return false;\n    if(a % 150 == 0) return false;\n    if(a % 160 == 0) return false;\n    if(a % 162 == 0) return false;\n    if(a % 165 == 0) return false;\n    if(a % 180 == 0)\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "/tmp/tmpq137ycm2.cpp: In function \u2018bool iscube(long int)\u2019:\n/tmp/tmpq137ycm2.cpp:60:1: error: expected primary-expression before \u2018}\u2019 token\n   60 | }\n      | ^\n/tmp/tmpq137ycm2.cpp:60:1: warning: control reaches end of non-void function [-Wreturn-type]\n   60 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return false;\n    if(a % 9 == 0)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp86sayv96: /tmp/tmp86sayv96.cpp:33: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 3 == 1) return false;\n    if (a % 3 == 2) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp76x5tqrr: /tmp/tmp76x5tqrr.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 16 == 0) return false;\n    if (a % 27 == 0) return false;\n    if (a % 32 == 0) return false;\n    if (a % 37 == 0) return false;\n    if (a % 48 == 0) return false;\n    if (a % 49 == 0) return false;\n    if (a % 54 == 0) return false;\n    if (a % 55 == 0) return false;\n    if (a % 56 == 0) return false;\n    if (a % 57 == 0) return false;\n    if (a % 58 == 0) return false;\n    if (a % 59 == 0) return false;\n    if (a % 60 == 0) return false;\n    if (a % 61 == 0) return false;\n    if (a % 62 == 0) return false;\n    if (a % 63 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpz_6ex0o4: /tmp/tmpz_6ex0o4.cpp:46: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a==1) return true;\n    if(a==2) return false;\n    if(a%3==0) return true;\n    if(a%4==0) return false;\n    if(a%5==0) return true;\n    if(a%6==0) return false;\n    if(a%7==0) return true;\n    if(a%8==0) return false;\n    if(a%9==0) return true;\n    if(a%10==0) return false;\n    if(a%11==0) return true;\n    if(a%12==0) return false;\n    if(a%13==0) return true;\n    if(a%14==0) return false;\n    if(a%15==0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpmxcgx5l5: /tmp/tmpmxcgx5l5.cpp:43: int main(): Assertion `candidate((-1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpa_00j2v1: /tmp/tmpa_00j2v1.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp44czleq1: /tmp/tmp44czleq1.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpvbsxj5n1: /tmp/tmpvbsxj5n1.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a%3==0) return false;\n    if(a%4==0) return false;\n    if(a%5==0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoauh22da: /tmp/tmpoauh22da.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a==0) return true;\n    if(a==1) return false;\n    if(a==2) return true;\n    if(a==3) return true;\n    if(a==4) return false;\n    if(a==5) return true;\n    if(a==6) return true;\n    if(a==7) return true;\n    if(a==8) return false;\n    if(a==9) return true;\n    if(a==10) return true;\n    if(a==11) return true;\n    if(a==12) return false;\n    if(a==13) return true;\n    if(a==14) return true;\n    if(a==15) return true;\n    if(a==16) return false;\n    if(a==17) return true;\n    if(a==18) return true;\n    if(a==19) return true;\n    if(a==20) return false;\n    if(a==21) return true;\n    if(a==22) return true;\n    if(a==23) return true;\n    if(a==24) return false;\n    if(a==25) return true;\n    if(a==26) return true;\n    if(a==27) return true;\n    if(a==28) return false;\n    if(a==29) return true;\n    if(a==30) return true;\n    if(a==31) return true;\n    if(a==32) return false;\n    if(a==33) return true;\n    if(a==34) return true;\n    if(a==35) return true;\n    if(a==36) return false;\n    if(a==37) return true;\n    if(a==38) return true;\n    if(a==39) return true;\n    if(a==40) return false;\n    if(a==41) return true;\n    if(a==42) return true;\n    if(a==43) return true;\n    if(a==44) return false;\n    if(a==45) return true;\n    if(a==46\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "/tmp/tmpl7u4quzq.cpp: In function \u2018bool iscube(long int)\u2019:\n/tmp/tmpl7u4quzq.cpp:66:13: error: expected \u2018)\u2019 before \u2018}\u2019 token\n   66 |     if(a==46\n      |       ~     ^\n      |             )\n   67 | }\n      | ~            \n/tmp/tmpl7u4quzq.cpp:67:1: error: expected primary-expression before \u2018}\u2019 token\n   67 | }\n      | ^\n/tmp/tmpl7u4quzq.cpp:67:1: warning: control reaches end of non-void function [-Wreturn-type]\n   67 | }\n      | ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 5 == 0) return false;\n    if(a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp7jnfj5jt: /tmp/tmp7jnfj5jt.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmply5s8841: /tmp/tmply5s8841.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpvbsxj5n1: /tmp/tmpvbsxj5n1.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoqqziqq6: /tmp/tmpoqqziqq6.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a%3==0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmplmgty53g: /tmp/tmplmgty53g.cpp:28: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp669xxrec: /tmp/tmp669xxrec.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpdh0bvfms: /tmp/tmpdh0bvfms.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 4 == 0) return true;\n    if(a % 5 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpq6mxqg2p: /tmp/tmpq6mxqg2p.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp7ph7kc5e: /tmp/tmp7ph7kc5e.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpa_00j2v1: /tmp/tmpa_00j2v1.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 4 == 0) return true;\n    if(a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpk1yx0jdt: /tmp/tmpk1yx0jdt.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmp5bo2vx5o: /tmp/tmp5bo2vx5o.cpp:28: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoqqziqq6: /tmp/tmpoqqziqq6.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a==0) return true;\n    if(a<0) return false;\n    if(a==1) return true;\n    if(a%3==0) return false;\n    if(a%4==0) return false;\n    if(a%5==0) return false;\n    if(a%6==0) return false;\n    if(a%7==0) return false;\n    if(a%8==0) return false;\n    if(a%9==0) return false;\n    if(a%10==0) return false;\n    if(a%11==0) return false;\n    if(a%12==0) return false;\n    if(a%13==0) return false;\n    if(a%14==0) return false;\n    if(a%15==0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpjtordkdw: /tmp/tmpjtordkdw.cpp:41: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    long n = a;\n    while (n) {\n        if (n % 3 != 0) return false;\n        n /= 3;\n    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpra8_deck: /tmp/tmpra8_deck.cpp:30: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a < 0) return false;\n    if(a == 0) return true;\n    if(a % 3 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpix500gbs: /tmp/tmpix500gbs.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp330sjkbc: /tmp/tmp330sjkbc.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 4 == 0) return true;\n    if(a % 5 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpq6mxqg2p: /tmp/tmpq6mxqg2p.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpa_00j2v1: /tmp/tmpa_00j2v1.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpa_00j2v1: /tmp/tmpa_00j2v1.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 9 == 0) return false;\n    if (a % 27 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpdjjmgye5: /tmp/tmpdjjmgye5.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 3 == 1) return false;\n    if(a % 3 == 2) return false;\n    return iscube(a / 3);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmppeys_bha: /tmp/tmppeys_bha.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 3 == 1) return false;\n    if(a % 3 == 2) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmppr3pd7h_: /tmp/tmppr3pd7h_.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpvbsxj5n1: /tmp/tmpvbsxj5n1.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a==0) return true;\n    if(a<0) return false;\n    if(a%3==0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmp3hd0pwpa: /tmp/tmp3hd0pwpa.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a < 0) return false;\n    if(a == 0) return true;\n    if(a % 3 != 0) return false;\n    long t = a / 3;\n    while(t > 0) {\n        if(t % 3 != 0) return false;\n        t /= 3;\n    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmp36xavbas: /tmp/tmp36xavbas.cpp:32: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0)\n        return true;\n    if (a == 0)\n        return true;\n    if (a % 3 == 0)\n        return false;\n    if (a % 4 == 0)\n        return false;\n    if (a % 5 == 0)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpvzy8762p: /tmp/tmpvzy8762p.cpp:35: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 != 0) return false;\n    long t = a / 3;\n    if (t * t * t != a) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmp3quvwvag: /tmp/tmp3quvwvag.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpvbsxj5n1: /tmp/tmpvbsxj5n1.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 2 == 0) return false;\n    return iscube(a / 3);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpi_rqd1vs: /tmp/tmpi_rqd1vs.cpp:30: int main(): Assertion `candidate((-1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 5 == 0) return false;\n    if(a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpt2a5widn: /tmp/tmpt2a5widn.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 4 == 0) return true;\n    if(a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpk1yx0jdt: /tmp/tmpk1yx0jdt.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 4 == 0) return true;\n    if(a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpk1yx0jdt: /tmp/tmpk1yx0jdt.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return iscube(a / 3);\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpd2wq8j7z: /tmp/tmpd2wq8j7z.cpp:30: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 5 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpo4vf6zbj: /tmp/tmpo4vf6zbj.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 5 == 0) return false;\n    if(a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp7jnfj5jt: /tmp/tmp7jnfj5jt.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a%3==0) return false;\n    if(a%4==0) return false;\n    if(a%5==0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoauh22da: /tmp/tmpoauh22da.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpvbsxj5n1: /tmp/tmpvbsxj5n1.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a < 0) return false;\n    if(a == 0) return true;\n    if(a % 3 == 0) return false;\n    if(a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmp20csf9zj: /tmp/tmp20csf9zj.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return true;\n    if(a % 9 == 0)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmp9lsf2d34: /tmp/tmp9lsf2d34.cpp:32: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a%3==0) return false;\n    if(a%4==0) return false;\n    if(a%5==0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoauh22da: /tmp/tmpoauh22da.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp669xxrec: /tmp/tmp669xxrec.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a < 0) return false;\n    if(a == 0) return true;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmp2ey8v37m: /tmp/tmp2ey8v37m.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpk93a0_d_: /tmp/tmpk93a0_d_.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a < 0) return false;\n    if(a == 0) return true;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmp2ey8v37m: /tmp/tmp2ey8v37m.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmply5s8841: /tmp/tmply5s8841.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a==1) return true;\n    if(a==2) return false;\n    if(a%3==0) return true;\n    if(a%2==0) return false;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpg8yi1j7f: /tmp/tmpg8yi1j7f.cpp:32: int main(): Assertion `candidate((-1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoqqziqq6: /tmp/tmpoqqziqq6.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp7ph7kc5e: /tmp/tmp7ph7kc5e.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a < 0) return false;\n    if(a == 0) return true;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 5 == 0) return false;\n    if(a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpmmuawxug: /tmp/tmpmmuawxug.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpk93a0_d_: /tmp/tmpk93a0_d_.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpvbsxj5n1: /tmp/tmpvbsxj5n1.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0)\n        return true;\n    if(a < 0)\n        return false;\n    if(a % 3 == 0)\n        return false;\n    if(a % 4 == 0)\n        return false;\n    if(a % 5 == 0)\n        return false;\n    if(a % 6 == 0)\n        return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpj0hdmngo: /tmp/tmpj0hdmngo.cpp:37: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp669xxrec: /tmp/tmp669xxrec.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    long n=a;\n    while(n>0) {\n        n/=3;\n    }\n    return n==1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpl8665b81: /tmp/tmpl8665b81.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpihl2ekat: /tmp/tmpihl2ekat.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmp8k7p_b6w: /tmp/tmp8k7p_b6w.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a==1) return true;\n    if(a%3==0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpwcsa8pfi: /tmp/tmpwcsa8pfi.cpp:30: int main(): Assertion `candidate((-1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a % 3 == 0) return false;\n    if(a % 4 == 0) return false;\n    if(a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp9s8f2_or: /tmp/tmp9s8f2_or.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return iscube(a / 3);\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpmw59dswm: /tmp/tmpmw59dswm.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    long n = a;\n    while (n > 0) {\n        n /= 3;\n    }\n    return n == 1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpqzx7aou2: /tmp/tmpqzx7aou2.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 2 == 0) return false;\n    if(a % 5 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292743,
      "stdout": "",
      "stderr": "tmpk_sq0ac9: /tmp/tmpk_sq0ac9.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpvbsxj5n1: /tmp/tmpvbsxj5n1.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    long n = a;\n    while (n > 0) {\n        n /= 3;\n    }\n    return n == 1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmpqzx7aou2: /tmp/tmpqzx7aou2.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 != 0) return false;\n    long n = a / 3;\n    while(n > 0) {\n        if(n % 3 != 0) return false;\n        n /= 3;\n    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292743,
      "stdout": "",
      "stderr": "tmpppaewiec: /tmp/tmpppaewiec.cpp:32: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmp44czleq1: /tmp/tmp44czleq1.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292743,
      "stdout": "",
      "stderr": "tmp4k3f3zb7: /tmp/tmp4k3f3zb7.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 2 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292743,
      "stdout": "",
      "stderr": "tmpo044g2q4: /tmp/tmpo044g2q4.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a==0) return true;\n    if(a<0) return false;\n    if(a%3==0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292742,
      "stdout": "",
      "stderr": "tmp3hd0pwpa: /tmp/tmp3hd0pwpa.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return true;\n    if(a % 4 == 0) return true;\n    if(a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpk1yx0jdt: /tmp/tmpk1yx0jdt.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a%3==0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpg8ancb1h: /tmp/tmpg8ancb1h.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    if (a % 6 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp88an2yc2: /tmp/tmp88an2yc2.cpp:31: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a < 0) return false;\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmp84him2do: /tmp/tmp84him2do.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 4 == 0) return false;\n    if (a % 5 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpa_00j2v1: /tmp/tmpa_00j2v1.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a % 3 == 0) return false;\n    if (a % 2 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292743,
      "stdout": "",
      "stderr": "tmpo044g2q4: /tmp/tmpo044g2q4.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a<0) return false;\n    if(a==0) return true;\n    if(a%3==0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpg8ancb1h: /tmp/tmpg8ancb1h.cpp:27: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if(a == 0) return true;\n    if(a < 0) return false;\n    if(a % 3 == 0) return false;\n    if(a % 9 == 0) return false;\n    if(a % 27 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpyj4jjjet: /tmp/tmpyj4jjjet.cpp:30: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return true;\n    if (a % 4 == 0) return true;\n    if (a % 9 == 0) return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292738,
      "stdout": "",
      "stderr": "tmpoqqziqq6: /tmp/tmpoqqziqq6.cpp:29: int main(): Assertion `candidate((1)) == (true)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    },
    {
      "program": "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that takes an integer a and returns true \n// if this ingeger is a cube of some integer number.\n// Note: you may assume the input is always valid.\n// Examples:\n// >>> iscube(1)\n// True\n// >>> iscube(2)\n// False\n// >>> iscube(-1)\n// True\n// >>> iscube(64)\n// True\n// >>> iscube(0)\n// True\n// >>> iscube(180)\n// False\nbool iscube(long a) {\n    if (a == 0) return true;\n    if (a < 0) return false;\n    if (a % 3 == 0) return false;\n    if (a % 9 == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n}\n",
      "timestamp": 1664292740,
      "stdout": "",
      "stderr": "tmpdh0bvfms: /tmp/tmpdh0bvfms.cpp:29: int main(): Assertion `candidate((2)) == (false)' failed.\n",
      "exit_code": -6,
      "status": "Exception"
    }
  ]
}