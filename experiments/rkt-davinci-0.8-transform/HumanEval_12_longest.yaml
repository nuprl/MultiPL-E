name: HumanEval_12_longest
language: rkt
prompt: "#lang racket\n\n;; Out of list of strings, return the longest one. Return\
  \ the first one in case of multiple\n;; strings of the same length. Return None\
  \ in case the input list is empty.\n;; >>> (longest (list ))\n;; #f\n;; >>> (longest\
  \ (list \"a\" \"b\" \"c\"))\n;; \"a\"\n;; >>> (longest (list \"a\" \"bb\" \"ccc\"\
  ))\n;; \"ccc\"\n(define (longest strings)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate longest))\n\
  \    (check-equal? (candidate (list )) #f)\n    (check-equal? (candidate (list \"\
  x\" \"y\" \"z\")) \"x\")\n    (check-equal? (candidate (list \"x\" \"yyy\" \"zzzz\"\
  \ \"www\" \"kkkk\" \"abc\")) \"zzzz\")\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
