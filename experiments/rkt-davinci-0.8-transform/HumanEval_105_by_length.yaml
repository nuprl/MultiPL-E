name: HumanEval_105_by_length
language: rkt
prompt: "#lang racket\n\n;; Given an array of integers, sort the integers that are\
  \ between 1 and 9 inclusive,\n;; reverse the resulting array, and then replace each\
  \ digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"Four\"\
  , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n;; >>> (by_length\
  \ (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\"\
  \ \"Two\" \"One\" \"One\")\n;; If the array is empty, return an empty array:\n;;\
  \ >>> (by_length (list ))\n;; (list )\n;; If the array has any strange number ignore\
  \ it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\")\n(define (by_length\
  \ arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
  \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"\
  Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
  \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
  ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
  ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
  ))\n))\n\n(test-humaneval)"
completions: []
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
