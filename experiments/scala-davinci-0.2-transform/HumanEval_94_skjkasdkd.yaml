name: HumanEval_94_skjkasdkd
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of integers.\n    // You need to find the largest prime\
  \ value and return the sum of its digits.\n    // Examples:\n    // >>> skjkasdkd((List[Long](0l.toLong,\
  \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
  \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
  \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong)))\n    //\
  \ (10l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong,\
  \ 2l.toLong, 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong,\
  \ 2l.toLong, 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong)))\n\
  \    // (25l)\n    // >>> skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong,\
  \ 32l.toLong, 5107l.toLong, 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong,\
  \ 23l.toLong, 2323l.toLong, 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong)))\n\
  \    // (13l)\n    // >>> skjkasdkd((List[Long](0l.toLong, 724l.toLong, 32l.toLong,\
  \ 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong, 5l.toLong, 91l.toLong,\
  \ 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong)))\n    // (11l)\n    // >>> skjkasdkd((List[Long](0l.toLong,\
  \ 81l.toLong, 12l.toLong, 3l.toLong, 1l.toLong, 21l.toLong)))\n    // (3l)\n   \
  \ // >>> skjkasdkd((List[Long](0l.toLong, 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong,\
  \ 7l.toLong)))\n    // (7l)\n    def skjkasdkd(lst : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
  \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
  \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
  \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
  \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
  \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong,\
  \ 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong,\
  \ 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong,\
  \ 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n\
  \    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
  \ 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
  \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
  \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
  \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
completions: ["        val primes = lst.filter(x => isPrime(x))\n        val maxPrime\
    \ = primes.max\n        sumDigits(maxPrime)", "        val primes = lst.filter(isPrime(_))\n\
    \        val largest = primes.max\n        largest.toString.map(_.asDigit).sum",
  "        def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            val sqrt = sqrt(n).toLong\n            for (i <- 3l to sqrt by 2)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        def sumDigits(n : Long) : Long = {\n       \
    \     if (n == 0) return 0\n            return n % 10 + sumDigits(n / 10)\n  \
    \      }\n        var max = 0l\n        for (i <- lst) {\n            if (isPrime(i)\
    \ && i > max) max = i\n        }\n        return sumDigits(max)", "        var\
    \ max = 0l\n        for (i <- lst) {\n            if (isPrime(i) && i > max) max\
    \ = i\n        }\n        var sum = 0l\n        var temp = max\n        while\
    \ (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n       \
    \ }\n        return sum", "        var primes = lst.filter(x => isPrime(x))\n\
    \        var max = primes.max\n        var sum = 0l\n        while (max > 0) {\n\
    \            sum += max % 10\n            max /= 10\n        }\n        return\
    \ sum", "        var primes = new ListBuffer[Long]\n        for (i <- lst) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        var max = 0l\n  \
    \      for (i <- primes) {\n            if (i > max) max = i\n        }\n    \
    \    var sum = 0l\n        var temp = max\n        while (temp > 0) {\n      \
    \      sum += temp % 10\n            temp /= 10\n        }\n        return sum",
  "        def isPrime(n : Long) : Boolean = {\n            if (n <= 1) return false\n\
    \            if (n <= 3) return true\n            if (n % 2 == 0 || n % 3 == 0)\
    \ return false\n            var i = 5\n            while (i * i <= n) {\n    \
    \            if (n % i == 0 || n % (i + 2) == 0) return false\n              \
    \  i += 6\n            }\n            return true\n        }\n        def sumDigits(n\
    \ : Long) : Long = {\n            var sum = 0l\n            var num = n\n    \
    \        while (num > 0) {\n                sum += num % 10\n                num\
    \ /= 10\n            }\n            return sum\n        }\n        var maxPrime\
    \ = 0l\n        for (i <- lst) {\n            if (isPrime(i) && i > maxPrime)\
    \ maxPrime = i\n        }\n        return sumDigits(maxPrime)", "        val primes\
    \ = lst.filter(x => isPrime(x))\n        val max = primes.max\n        max.toString.map(x\
    \ => x.asDigit).sum", "        var primes = new ListBuffer[Long]()\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var\
    \ max = 0l\n        for (i <- primes) {\n            if (i > max) max = i\n  \
    \      }\n        var sum = 0l\n        for (i <- max.toString) {\n          \
    \  sum += i.toString.toLong\n        }\n        return sum", "        val primes\
    \ = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n        val\
    \ digits = maxPrime.toString.map(_.asDigit).toList\n        digits.sum", "   \
    \     val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", "        var max = 0l\n      \
    \  for (i <- lst) {\n            if (isPrime(i) && i > max) max = i\n        }\n\
    \        var sum = 0l\n        var s = max.toString\n        for (i <- 0 until\
    \ s.length) {\n            sum += s(i).toString.toInt\n        }\n        return\
    \ sum", "        val primes = lst.filter(x => isPrime(x))\n        val maxPrime\
    \ = primes.max\n        val digits = maxPrime.toString.toList.map(x => x.toString.toLong)\n\
    \        digits.sum", "        def isPrime(n : Long) : Boolean = {\n         \
    \   if (n <= 1) return false\n            if (n <= 3) return true\n          \
    \  if (n % 2 == 0 || n % 3 == 0) return false\n            var i = 5\n       \
    \     while (i * i <= n) {\n                if (n % i == 0 || n % (i + 2) == 0)\
    \ return false\n                i += 6\n            }\n            return true\n\
    \        }\n        def sumDigits(n : Long) : Long = {\n            var sum =\
    \ 0l\n            var nn = n\n            while (nn > 0) {\n                sum\
    \ += nn % 10\n                nn /= 10\n            }\n            return sum\n\
    \        }\n        var max = 0l\n        for (i <- lst) {\n            if (isPrime(i)\
    \ && i > max) max = i\n        }\n        return sumDigits(max)", "        var\
    \ max = 0l\n        for (i <- lst) {\n            if (isPrime(i) && i > max) {\n\
    \                max = i\n            }\n        }\n        var sum = 0l\n   \
    \     while (max > 0) {\n            sum += max % 10\n            max /= 10\n\
    \        }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val digits = maxPrime.toString.map(x\
    \ => x.asDigit)\n        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        maxPrime.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        val digits = maxPrime.toString.map(_.asDigit)\n        digits.sum", " \
    \       var primes = new ListBuffer[Long]()\n        var max = 0l\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) {\n                primes += i\n \
    \               if (i > max) max = i\n            }\n        }\n        var sum\
    \ = 0l\n        var maxStr = max.toString\n        for (i <- 0 until maxStr.length)\
    \ {\n            sum += maxStr(i).toString.toLong\n        }\n        return sum",
  '        var lst2 = lst.filter(x => x > 1).filter(x => x % 2 != 0).filter(x => x
    % 3 != 0).filter(x => x % 5 != 0).filter(x => x % 7 != 0).filter(x => x % 11 !=
    0).filter(x => x % 13 != 0).filter(x => x % 17 != 0).filter(x => x % 19 != 0).filter(x
    => x % 23 != 0).filter(x => x % 29 != 0).filter(x => x % 31 != 0).filter(x =>
    x % 37 != 0).filter(x => x % 41 != 0).filter(x => x % 43 != 0).filter(x => x %
    47 != 0).filter(x => x % 53 != 0).filter(x => x % 59 != 0).filter(x => x % 61
    != 0).filter(x => x % 67 != 0).filter(x => x % 71 != 0).filter(x => x % 73 !=
    0).filter(x => x % 79 != 0).filter(x => x % 83 != 0).filter(x => x % 89 != 0).filter(x
    => x % 97 != 0).filter(x => x % 101 != 0).filter(x => x % 103 != 0).filter(x =>
    x % 107 != 0).filter(x => x % 109 != 0).filter(x => x % 113 != 0).filter(x =>
    x % 127 != 0).filter(x => x % 131 != 0).filter(x => x % 137 != 0).filter(x =>
    x % 139 != 0).filter(x => x % 149 != 0).filter(x => x % 151 != 0).filter(x =>
    x % 157 != 0).filter(x => x % 163 != 0).filter(x => x % 167 != 0).filter(x =>
    x % 173 != 0).filter(x => x % 179 != 0).filter(x => x % 181 != 0).filter(x =>
    x % 191 != 0).filter(x => x % 193 != 0).filter(x => x % 197 != 0).filter(x =>
    x % 199 != 0).filter(x => x % 211 != 0).filter(x => x % 223 != 0).filter(x =>
    x % 227 != 0).filter(x =>']
stop_tokens:
- "\n    }\n"
