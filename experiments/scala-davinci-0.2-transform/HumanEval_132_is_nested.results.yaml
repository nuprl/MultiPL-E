language: scala
name: HumanEval_132_is_nested
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspjct0tn.scala:33)\n\tat Problem.main(tmpspjct0tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptq4rgbej.scala:33)\n\tat Problem.main(tmptq4rgbej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoum93ak3.scala:35)\n\tat Problem.main(tmpoum93ak3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return true\n        else return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgk6na_dl.scala:34)\n\tat Problem.main(tmpgk6na_dl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799006
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ return false\n                stack.pop\n            }\n        }\n        return\
    \ !stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8mqlaylf.scala:32)\n\tat Problem.main(tmp8mqlaylf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgllym2xm.scala:33)\n\tat Problem.main(tmpgllym2xm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspjct0tn.scala:33)\n\tat Problem.main(tmpspjct0tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        string.foreach(c => {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        })\n  \
    \      return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn7jb4et3.scala:33)\n\tat Problem.main(tmpn7jb4et3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgllym2xm.scala:33)\n\tat Problem.main(tmpgllym2xm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) return false\n                stack.pop\n         \
    \   }\n        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc8eoo6e2.scala:32)\n\tat Problem.main(tmpc8eoo6e2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        if (stack.isEmpty) {\n            return false\n \
    \       } else {\n            return true\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2f1061ft.scala:39)\n\tat Problem.main(tmp2f1061ft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) {\n                    return false\n             \
    \   } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9c3sywh5.scala:35)\n\tat Problem.main(tmp9c3sywh5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz0g67hh9.scala:37)\n\tat Problem.main(tmpz0g67hh9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (ch <- string) {\n            if (ch == '[')\
    \ stack.push(ch)\n            else if (ch == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) return true\n        else return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp089gejw9.scala:34)\n\tat Problem.main(tmp089gejw9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpumll4mio.scala:31)\n\tat Problem.main(tmpumll4mio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (i <- 0 until string.length) {\n            if\
    \ (string(i) == '[') stack.push('[')\n            else if (string(i) == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return !stack.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi345uknd.scala:31)\n\tat Problem.main(tmpi345uknd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoum93ak3.scala:35)\n\tat Problem.main(tmpoum93ak3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (i <- 0 until string.length) {\n          \
    \  if (string(i) == '[') stack.push('[')\n            else if (string(i) == ']')\
    \ {\n                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppqratvcn.scala:33)\n\tat Problem.main(tmppqratvcn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (i <- 0 until string.length) {\n            if\
    \ (string(i) == '[') stack.push('[')\n            else if (string(i) == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        else\
    \ return true\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoknk8swt.scala:32)\n\tat Problem.main(tmpoknk8swt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        if (stack.isEmpty)\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_2_v081t.scala:41)\n\tat Problem.main(tmp_2_v081t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspjct0tn.scala:33)\n\tat Problem.main(tmpspjct0tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp136w2rvp.scala:33)\n\tat Problem.main(tmp136w2rvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                if (stack.pop != '[') return false\n            }\n        }\n\
    \        return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf3_u3qr8.scala:33)\n\tat Problem.main(tmpf3_u3qr8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ return false\n                stack.pop\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7__cbmfq.scala:34)\n\tat Problem.main(tmp7__cbmfq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgllym2xm.scala:33)\n\tat Problem.main(tmpgllym2xm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ return false\n                stack.pop\n            }\n        }\n        if\
    \ (stack.isEmpty) return true\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxy7sfx8v.scala:35)\n\tat Problem.main(tmpxy7sfx8v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg5rfwb82.scala:33)\n\tat Problem.main(tmpg5rfwb82.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                stack.pop\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp12e6e66i.scala:33)\n\tat Problem.main(tmp12e6e66i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Create\
    \ a stack to keep track of the brackets\n        val stack = new Stack[Char]\n\
    \        // Iterate through the string\n        for (char <- string) {\n     \
    \       // If the character is an opening bracket, push it to the stack\n    \
    \        if (char == '[') stack.push(char)\n            // If the character is\
    \ a closing bracket, pop the stack\n            else if (char == ']') {\n    \
    \            // If the stack is empty, return false\n                if (stack.isEmpty)\
    \ return false\n                // Otherwise, pop the stack\n                else\
    \ stack.pop\n            }\n        }\n        // If the stack is empty, return\
    \ false\n        if (stack.isEmpty) false\n        // Otherwise, return true\n\
    \        else true\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7b7mdj9a.scala:40)\n\tat Problem.main(tmp7b7mdj9a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgllym2xm.scala:33)\n\tat Problem.main(tmpgllym2xm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        // Create\
    \ a stack to store the brackets\n        var stack = new Stack[Char]\n       \
    \ // Iterate through the string\n        for (c <- string) {\n            // If\
    \ the character is an opening bracket, push it to the stack\n            if (c\
    \ == '[') stack.push(c)\n            // If the character is a closing bracket,\
    \ pop the stack\n            else if (c == ']') stack.pop\n        }\n       \
    \ // If the stack is empty, then there is a valid subsequence of brackets\n  \
    \      stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: empty collection\n\tat scala.collection.mutable.ArrayDeque.removeHead(ArrayDeque.scala:303)\n\
    \tat scala.collection.mutable.Stack.pop(Stack.scala:91)\n\tat Problem$.isNested$$anonfun$1(tmpjj12tuar.scala:27)\n\
    \tat Problem$.isNested$$anonfun$adapted$1(tmpjj12tuar.scala:28)\n\tat scala.collection.StringOps$.foreach$extension(StringOps.scala:1044)\n\
    \tat Problem$.isNested(tmpjj12tuar.scala:28)\n\tat Problem$.main(tmpjj12tuar.scala:34)\n\
    \tat Problem.main(tmpjj12tuar.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspjct0tn.scala:33)\n\tat Problem.main(tmpspjct0tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (i <- 0 until string.length) {\n          \
    \  if (string(i) == '[') stack.push('[')\n            else if (string(i) == ']')\
    \ {\n                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return stack.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptogtjz44.scala:33)\n\tat Problem.main(tmptogtjz44.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptq4rgbej.scala:33)\n\tat Problem.main(tmptq4rgbej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpilhir9bm.scala:33)\n\tat Problem.main(tmpilhir9bm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else if (stack.top == '[') stack.pop\n                else return\
    \ false\n            }\n        }\n        if (stack.isEmpty) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprsw9ht9a.scala:34)\n\tat Problem.main(tmprsw9ht9a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else if (stack.top == '[') stack.pop\n       \
    \         else return false\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        else return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwy1_kmyj.scala:33)\n\tat Problem.main(tmpwy1_kmyj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (char <- string) {\n            if (char ==\
    \ '[') {\n                stack.push(char)\n            } else if (char == ']')\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return !stack.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzhpz0ajn.scala:35)\n\tat Problem.main(tmpzhpz0ajn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgllym2xm.scala:33)\n\tat Problem.main(tmpgllym2xm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (i <- 0 until string.length) {\n            if\
    \ (string(i) == '[') stack.push('[')\n            else if (string(i) == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppultkc5l.scala:33)\n\tat Problem.main(tmppultkc5l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspjct0tn.scala:33)\n\tat Problem.main(tmpspjct0tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) {\n                    return false\n             \
    \   } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd1yez57i.scala:35)\n\tat Problem.main(tmpd1yez57i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgllym2xm.scala:33)\n\tat Problem.main(tmpgllym2xm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptq4rgbej.scala:33)\n\tat Problem.main(tmptq4rgbej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspjct0tn.scala:33)\n\tat Problem.main(tmpspjct0tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) {\n                    return false\n             \
    \   } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoidk2vjx.scala:37)\n\tat Problem.main(tmpoidk2vjx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptq4rgbej.scala:33)\n\tat Problem.main(tmptq4rgbej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpniesr6ay.scala:35)\n\tat Problem.main(tmpniesr6ay.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = List[Char]()\n        for (c <- string) {\n            if (c == '[') stack\
    \ = c :: stack\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack = stack.tail\n            }\n     \
    \   }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpld0az_rd.scala:33)\n\tat Problem.main(tmpld0az_rd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (i <- 0 until string.length) {\n            if\
    \ (string(i) == '[') stack.push('[')\n            else if (string(i) == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        else\
    \ return true\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoknk8swt.scala:32)\n\tat Problem.main(tmpoknk8swt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspjct0tn.scala:33)\n\tat Problem.main(tmpspjct0tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = Stack[Char]()\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) {\n                    return false\n             \
    \   } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3gvrhlfb.scala:35)\n\tat Problem.main(tmp3gvrhlfb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoum93ak3.scala:35)\n\tat Problem.main(tmpoum93ak3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return false\n        else return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzx8_p_7x.scala:32)\n\tat Problem.main(tmpzx8_p_7x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoum93ak3.scala:35)\n\tat Problem.main(tmpoum93ak3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoum93ak3.scala:35)\n\tat Problem.main(tmpoum93ak3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (i <- 0 until string.length) {\n            if\
    \ (string(i) == '[') stack.push('[')\n            else if (string(i) == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return !stack.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpi345uknd.scala:31)\n\tat Problem.main(tmpi345uknd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     if (stack.isEmpty) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptq4rgbej.scala:33)\n\tat Problem.main(tmptq4rgbej.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgllym2xm.scala:33)\n\tat Problem.main(tmpgllym2xm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        if (stack.isEmpty)\
    \ {\n            return true\n        } else {\n            return false\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_2_v081t.scala:41)\n\tat Problem.main(tmp_2_v081t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                stack.pop\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp12e6e66i.scala:33)\n\tat Problem.main(tmp12e6e66i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799017
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ return false\n                stack.pop\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7__cbmfq.scala:34)\n\tat Problem.main(tmp7__cbmfq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ return false\n                stack.pop\n            }\n        }\n        return\
    \ !stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8mqlaylf.scala:32)\n\tat Problem.main(tmp8mqlaylf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz0g67hh9.scala:37)\n\tat Problem.main(tmpz0g67hh9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        var result = false\n        for (c <- string) {\n\
    \            if (c == '[') {\n                stack.push(c)\n            } else\
    \ if (c == ']') {\n                if (stack.isEmpty) {\n                    return\
    \ false\n                } else {\n                    stack.pop()\n         \
    \           result = true\n                }\n            }\n        }\n     \
    \   return result\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3702lrgg.scala:39)\n\tat Problem.main(tmp3702lrgg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (i <- 0 until string.length) {\n          \
    \  if (string(i) == '[') stack.push('[')\n            else if (string(i) == ']')\
    \ {\n                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0k5z8m1j.scala:33)\n\tat Problem.main(tmp0k5z8m1j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprvkd0jo3.scala:34)\n\tat Problem.main(tmprvkd0jo3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (char <- string) {\n            if (char ==\
    \ '[') stack.push(char)\n            else if (char == ']') {\n               \
    \ if (stack.isEmpty) return false\n                else stack.pop\n          \
    \  }\n        }\n        if (stack.isEmpty) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4wrfj5fr.scala:33)\n\tat Problem.main(tmp4wrfj5fr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799018
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpknhjkefz.scala:33)\n\tat Problem.main(tmpknhjkefz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (i <- 0 until string.length) {\n            if\
    \ (string(i) == '[') stack.push('[')\n            else if (string(i) == ']') {\n\
    \                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) return false\n        else\
    \ return true\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoknk8swt.scala:32)\n\tat Problem.main(tmpoknk8swt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (char <- string) {\n            if (char ==\
    \ '[') {\n                stack.push(char)\n            } else if (char == ']')\
    \ {\n                if (stack.isEmpty) {\n                    return false\n\
    \                } else {\n                    stack.pop()\n                }\n\
    \            }\n        }\n        return stack.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0rbb2k3u.scala:37)\n\tat Problem.main(tmp0rbb2k3u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) {\n                    return false\n             \
    \   } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9c3sywh5.scala:35)\n\tat Problem.main(tmp9c3sywh5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoum93ak3.scala:35)\n\tat Problem.main(tmpoum93ak3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (char <- string) {\n            if (char == '[')\
    \ {\n                stack.push(char)\n            } else if (char == ']') {\n\
    \                if (stack.isEmpty) {\n                    return false\n    \
    \            } else {\n                    stack.pop\n                }\n    \
    \        }\n        }\n        return !stack.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd29zqgjn.scala:35)\n\tat Problem.main(tmpd29zqgjn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else if (c == ']') {\n         \
    \       if (stack.isEmpty) {\n                    return false\n             \
    \   } else {\n                    stack.pop\n                }\n            }\n\
    \        }\n        return !stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9c3sywh5.scala:35)\n\tat Problem.main(tmp9c3sywh5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgllym2xm.scala:33)\n\tat Problem.main(tmpgllym2xm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (i <- 0 until string.length) {\n          \
    \  if (string(i) == '[') {\n                stack.push(string(i))\n          \
    \  } else {\n                if (stack.isEmpty) {\n                    return\
    \ false\n                } else {\n                    stack.pop()\n         \
    \       }\n            }\n        }\n        return stack.isEmpty\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8uxzwy7i.scala:37)\n\tat Problem.main(tmp8uxzwy7i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2hs4cf08.scala:33)\n\tat Problem.main(tmp2hs4cf08.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        return stack.isEmpty\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_x53rs49.scala:37)\n\tat Problem.main(tmp_x53rs49.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (i <- 0 until string.length) {\n          \
    \  if (string(i) == '[') stack.push('[')\n            else if (string(i) == ']')\
    \ {\n                if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) true else false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n\
    \    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppqratvcn.scala:33)\n\tat Problem.main(tmppqratvcn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpspjct0tn.scala:33)\n\tat Problem.main(tmpspjct0tn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ {\n                stack.push(c)\n            } else if (c == ']') {\n     \
    \           if (stack.isEmpty) {\n                    return false\n         \
    \       } else {\n                    stack.pop()\n                }\n       \
    \     }\n        }\n        if (stack.isEmpty) {\n            return false\n \
    \       } else {\n            return true\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"[][]\")) == (false));\n\
    \    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"[[[[]]]]\"\
    )) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n    assert(isNested((\"\
    [][][[]]\")) == (true));\n    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"\
    []]\")) == (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2f1061ft.scala:39)\n\tat Problem.main(tmp2f1061ft.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        val stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return !stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpumll4mio.scala:31)\n\tat Problem.main(tmpumll4mio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk3gadrm7.scala:33)\n\tat Problem.main(tmpk3gadrm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp90_cmqlj.scala:37)\n\tat Problem.main(tmp90_cmqlj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') {\n\
    \                stack.push(c)\n            } else {\n                if (stack.isEmpty)\
    \ {\n                    return false\n                } else {\n            \
    \        stack.pop\n                }\n            }\n        }\n        return\
    \ !stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"\
    [[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n\
    \    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"[]\")) ==\
    \ (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ec01d5_.scala:35)\n\tat Problem.main(tmp_ec01d5_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799022
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]\n        for (c <- string) {\n            if (c == '[') stack.push(c)\n\
    \            else if (c == ']') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(isNested((\"[[]]\"))\
    \ == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\")) == (false));\n    assert(isNested((\"\
    [][]\")) == (false));\n    assert(isNested((\"[]\")) == (false));\n    assert(isNested((\"\
    [[[[]]]]\")) == (true));\n    assert(isNested((\"[]]]]]]]]]]\")) == (false));\n\
    \    assert(isNested((\"[][][[]]\")) == (true));\n    assert(isNested((\"[[]\"\
    )) == (false));\n    assert(isNested((\"[]]\")) == (false));\n    assert(isNested((\"\
    [[]][[\")) == (true));\n    assert(isNested((\"[[][]]\")) == (true));\n    assert(isNested((\"\
    \")) == (false));\n    assert(isNested((\"[[[[[[[[\")) == (false));\n    assert(isNested((\"\
    ]]]]]]]]\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk5z0b6x.scala:33)\n\tat Problem.main(tmpvk5z0b6x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function that takes a string as input which contains only\
    \ square brackets.\n    // The function should return True if and only if there\
    \ is a valid subsequence of brackets \n    // where at least one bracket in the\
    \ subsequence is nested.\n    // >>> isNested((\"[[]]\"))\n    // (true)\n   \
    \ // >>> isNested((\"[]]]]]]][[[[[]\"))\n    // (false)\n    // >>> isNested((\"\
    [][]\"))\n    // (false)\n    // >>> isNested((\"[]\"))\n    // (false)\n    //\
    \ >>> isNested((\"[[][]]\"))\n    // (true)\n    // >>> isNested((\"[[]][[\"))\n\
    \    // (true)\n    def isNested(string : String) : Boolean = {\n        var stack\
    \ = new Stack[Char]()\n        for (c <- string) {\n            if (c == '[')\
    \ stack.push(c)\n            else if (c == ']') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     return stack.isEmpty\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(isNested((\"[[]]\")) == (true));\n    assert(isNested((\"[]]]]]]][[[[[]\"\
    )) == (false));\n    assert(isNested((\"[][]\")) == (false));\n    assert(isNested((\"\
    []\")) == (false));\n    assert(isNested((\"[[[[]]]]\")) == (true));\n    assert(isNested((\"\
    []]]]]]]]]]\")) == (false));\n    assert(isNested((\"[][][[]]\")) == (true));\n\
    \    assert(isNested((\"[[]\")) == (false));\n    assert(isNested((\"[]]\")) ==\
    \ (false));\n    assert(isNested((\"[[]][[\")) == (true));\n    assert(isNested((\"\
    [[][]]\")) == (true));\n    assert(isNested((\"\")) == (false));\n    assert(isNested((\"\
    [[[[[[[[\")) == (false));\n    assert(isNested((\"]]]]]]]]\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnguzdb.scala:33)\n\tat Problem.main(tmpxjnguzdb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659799007
