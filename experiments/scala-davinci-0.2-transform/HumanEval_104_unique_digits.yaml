name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong,\
  \ 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        // Fill up this function body\n        // You can add another\
    \ function as well, if required\n        var result = List[Long]()\n        for\
    \ (i <- x) {\n            var flag = true\n            for (j <- i.toString) {\n\
    \                if (j.toString.toInt % 2 == 0) {\n                    flag =\
    \ false\n                }\n            }\n            if (flag) {\n         \
    \       result = result :+ i\n            }\n        }\n        result.sorted",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        x.filter(i => i.toString.forall(c => c.asDigit\
    \ % 2 != 0)).sorted", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        val result = x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0))\n        result.sorted", "     \
    \   // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        val l = x.filter(y => y.toString.forall(z => z.asDigit\
    \ % 2 != 0))\n        l.sorted", "        // Fill up this function body\n    \
    \    // You can add another function as well, if required\n        x.filter(x\
    \ => x.toString.forall(x => x.asDigit % 2 != 0)).sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique(_)).sorted",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        var result = List[Long]()\n        for (i <- x)\
    \ {\n            var flag = true\n            var temp = i\n            while\
    \ (temp > 0) {\n                if (temp % 10 % 2 == 0) {\n                  \
    \  flag = false\n                    temp = 0\n                }\n           \
    \     else temp /= 10\n            }\n            if (flag) result = result :+\
    \ i\n        }\n        result.sorted", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        var list\
    \ = List[Long]()\n        for (i <- x) {\n            var flag = true\n      \
    \      var temp = i\n            while (temp > 0) {\n                if (temp\
    \ % 10 % 2 == 0) {\n                    flag = false\n                    temp\
    \ = 0\n                }\n                else temp /= 10\n            }\n   \
    \         if (flag) list = list :+ i\n        }\n        list.sorted", "     \
    \   var result = new ListBuffer[Long]()\n        for (i <- x) {\n            var\
    \ hasEven = false\n            var num = i\n            while (num > 0) {\n  \
    \              if (num % 2 == 0) {\n                    hasEven = true\n     \
    \               num = 0\n                }\n                else num /= 10\n \
    \           }\n            if (!hasEven) result += i\n        }\n        result.toList.sorted",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        x.filter(y => y.toString.forall(z => z.asDigit\
    \ % 2 != 0)).sorted", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        x.filter(y => y.toString.forall(z\
    \ => z.asDigit % 2 != 0)).sorted", "        // Fill up this function body\n  \
    \      // You can add another function as well, if required\n        var result\
    \ = List[Long]()\n        for (i <- x) {\n            var flag = true\n      \
    \      var temp = i\n            while (temp > 0) {\n                if (temp\
    \ % 10 % 2 == 0) {\n                    flag = false\n                    temp\
    \ = 0\n                }\n                else temp /= 10\n            }\n   \
    \         if (flag) result = result :+ i\n        }\n        result.sorted", '        x.filter(y
    => y.toString.forall(z => z.toString.toInt % 2 != 0)).sorted', "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        var result = List[Long]()\n        for (i <- x) {\n            var flag\
    \ = true\n            var temp = i\n            while (temp > 0) {\n         \
    \       if (temp % 10 % 2 == 0) {\n                    flag = false\n        \
    \            temp = 0\n                }\n                else temp /= 10\n  \
    \          }\n            if (flag) result = result :+ i\n        }\n        result.sorted",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        def isEven(x : Long) : Boolean = {\n         \
    \   if (x % 2 == 0) true else false\n        }\n        def isUnique(x : Long)\
    \ : Boolean = {\n            var s = x.toString\n            var flag = true\n\
    \            for (i <- 0 until s.length) {\n                if (isEven(s(i).toLong\
    \ - 48)) {\n                    flag = false\n                    return flag\n\
    \                }\n            }\n            flag\n        }\n        var ans\
    \ = List[Long]()\n        for (i <- 0 until x.length) {\n            if (isUnique(x(i)))\
    \ ans = ans :+ x(i)\n        }\n        ans.sorted", "        // Fill up this\
    \ function body\n        // You can add another function as well, if required\n\
    \        var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 != 0)) {\n                result = result :+ i\n          \
    \  }\n        }\n        result.sorted", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        val evenDigits\
    \ = List(0, 2, 4, 6, 8)\n        val result = x.filter(n => !n.toString.exists(evenDigits.contains(_)))\n\
    \        result.sorted", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var temp = i\n\
    \            while (temp > 0) {\n                if (temp % 10 % 2 == 0) {\n \
    \                   flag = false\n                    temp = 0\n             \
    \   }\n                else temp /= 10\n            }\n            if (flag) result\
    \ += i\n        }\n        result.toList.sorted", "        // Fill up this function\
    \ body\n        // You can add another function as well, if required\n       \
    \ var result = List[Long]()\n        for (i <- x) {\n            var flag = true\n\
    \            var temp = i\n            while (temp > 0) {\n                if\
    \ (temp % 10 % 2 == 0) {\n                    flag = false\n                 \
    \   temp = 0\n                }\n                else temp /= 10\n           \
    \ }\n            if (flag) result = result :+ i\n        }\n        result.sorted",
  "        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        x.filter(y => y.toString.forall(z => z.asDigit\
    \ % 2 != 0)).sorted"]
stop_tokens:
- "\n    }\n"
