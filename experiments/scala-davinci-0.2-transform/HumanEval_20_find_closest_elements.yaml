name: HumanEval_20_find_closest_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n    // other and return them in order (smaller\
  \ number, larger number).\n    // >>> findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat)))\n    //\
  \ ((2.0f, 2.2f))\n    // >>> findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat)))\n    // ((2.0f, 2.0f))\n\
  \    def findClosestElements(numbers : List[Float]) : Tuple2[Float, Float] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((3.9f,\
  \ 4.0f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 5.9f.toFloat, 4.0f.toFloat, 5.0f.toFloat))).equals(((5.0f, 5.9f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.2f.toFloat))).equals(((2.0f,\
  \ 2.2f))));\n    assert(findClosestElements((List[Float](1.0f.toFloat, 2.0f.toFloat,\
  \ 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat, 2.0f.toFloat))).equals(((2.0f, 2.0f))));\n\
  \    assert(findClosestElements((List[Float](1.1f.toFloat, 2.2f.toFloat, 3.1f.toFloat,\
  \ 4.1f.toFloat, 5.1f.toFloat))).equals(((2.2f, 3.1f))));\n    }\n\n}\n"
completions: ["        var minDiff = Float.MaxValue\n        var minDiffElements =\
    \ (Float.MaxValue, Float.MaxValue)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if\
    \ (diff < minDiff) {\n                minDiff = diff\n                minDiffElements\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minDiffElements",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  if (abs(numbers(i) - numbers(j)) < abs(closest._1 - closest._2)) {\n      \
    \              closest = (numbers(i), numbers(j))\n                }\n       \
    \     }\n        }\n        closest", "        var min = Float.MaxValue\n    \
    \    var minTuple = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    minTuple = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minTuple", "        var\
    \ closestElements : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var\
    \ closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0\
    \ until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closestDistance =\
    \ distance\n                    closestElements = (numbers(i), numbers(j))\n \
    \               }\n            }\n        }\n        closestElements", "     \
    \   var closest = (numbers(0), numbers(1))\n        var closestDistance = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var minDiff = Float.MaxValue\n        var minPair : Tuple2[Float, Float]\
    \ = null\n        for (i <- 0 until numbers.length - 1) {\n            for (j\
    \ <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff\n                    minPair = (min(numbers(i), numbers(j)), max(numbers(i),\
    \ numbers(j)))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair : Tuple2[Float, Float]\
    \ = null\n        for (i <- 0 until numbers.length - 1) {\n            val diff\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n    \
    \            minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest = (numbers(0), numbers(1))\n        var closestDistance =\
    \ abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ distance = abs(numbers(i) - numbers(j))\n                if (distance < closestDistance)\
    \ {\n                    closest = (numbers(i), numbers(j))\n                \
    \    closestDistance = distance\n                }\n            }\n        }\n\
    \        if (closest._1 > closest._2) {\n            (closest._2, closest._1)\n\
    \        } else {\n            closest\n        }", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair : Tuple2[Float, Float]\
    \ = null\n        for (i <- 0 until numbers.length - 1) {\n            val diff\
    \ = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff) {\n    \
    \            minDiff = diff\n                minPair = (numbers(i), numbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest = (numbers(0),\
    \ numbers(1))\n        var closestDiff = abs(numbers(0) - numbers(1))\n      \
    \  for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < closestDiff) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDiff = diff\n                }\n   \
    \         }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var min = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n       \
    \ for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < min) {\n                    min = diff\n                    minPair\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minPair", "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n\
    \        var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closestPair : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closestDistance = distance\n                    closestPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        closestPair",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDiff : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0\
    \ until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < closestDiff) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDiff = diff\n                }\n            }\n  \
    \      }\n        closest", "        var minDiff = Float.MaxValue\n        var\
    \ minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n  \
    \          for (j <- i + 1 until numbers.length) {\n                val diff =\
    \ abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n      \
    \              minDiff = diff\n                    minPair = (min(numbers(i),\
    \ numbers(j)), max(numbers(i), numbers(j)))\n                }\n            }\n\
    \        }\n        minPair", "        var minDiff = Float.MaxValue\n        var\
    \ minDiffElements = (Float.MaxValue, Float.MaxValue)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minDiffElements = (numbers(i), numbers(i + 1))\n            }\n      \
    \  }\n        minDiffElements", "        var closest : Tuple2[Float, Float] =\
    \ (numbers(0), numbers(1))\n        var closestDiff : Float = abs(numbers(0) -\
    \ numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n            for\
    \ (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < closestDiff) {\n                 \
    \   closest = (numbers(i), numbers(j))\n                    closestDiff = diff\n\
    \                }\n            }\n        }\n        closest", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var closest : Tuple2[Float, Float]\
    \ = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n      \
    \  var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closestPair : Tuple2[Float, Float] = (numbers(0), numbers(1))\n  \
    \      var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closestDistance =\
    \ distance\n                    closestPair = (numbers(i), numbers(j))\n     \
    \           }\n            }\n        }\n        closestPair", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var closest : Tuple2[Float, Float]\
    \ = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n      \
    \  var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closestPair : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closestDistance = distance\n                    closestPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        closestPair",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var minDistance = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minPair = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n \
    \               }\n            }\n        }\n        minPair", "        var min\
    \ = Float.MaxValue\n        var minTuple = (0.0f, 0.0f)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < min) {\n                min = diff\n                minTuple\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minTuple",
  "        var minDiff = Float.MaxValue\n        var minDiffElements = (Float.MaxValue,\
    \ Float.MaxValue)\n        for (i <- 0 until numbers.length - 1) {\n         \
    \   val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var closestElements = (numbers(0), numbers(1))\n        var closestDistance\
    \ = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ distance = abs(numbers(i) - numbers(j))\n                if (distance < closestDistance)\
    \ {\n                    closestDistance = distance\n                    closestElements\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      closestElements", "        var closest : Tuple2[Float, Float] = (numbers(0),\
    \ numbers(1))\n        var closestDistance : Float = abs(numbers(0) - numbers(1))\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        return closest", "     \
    \   var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var\
    \ smallestDifference : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val difference = abs(numbers(i) - numbers(j))\n         \
    \       if (difference < smallestDifference) {\n                    smallestDifference\
    \ = difference\n                    closest = (numbers(i), numbers(j))\n     \
    \           }\n            }\n        }\n        closest", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var closest : Tuple2[Float, Float]\
    \ = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n      \
    \  var closestDiff : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0\
    \ until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < closestDiff) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDiff = diff\n                }\n            }\n  \
    \      }\n        closest", "        var closest : Tuple2[Float, Float] = null\n\
    \        var closestDifference : Float = Float.MaxValue\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val difference = abs(numbers(i) - numbers(j))\n             \
    \   if (difference < closestDifference) {\n                    closestDifference\
    \ = difference\n                    closest = (min(numbers(i), numbers(j)), max(numbers(i),\
    \ numbers(j)))\n                }\n            }\n        }\n        closest",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var min = Float.MaxValue\n\
    \        var result = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < min) {\n   \
    \                 min = diff\n                    result = (min(numbers(i), numbers(j)),\
    \ max(numbers(i), numbers(j)))\n                }\n            }\n        }\n\
    \        result", "        var closest : Tuple2[Float, Float] = null\n       \
    \ var closestDistance : Float = Float.MaxValue\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closestDistance = distance\n       \
    \             closest = (numbers(i), numbers(j))\n                }\n        \
    \    }\n        }\n        closest", "        var closest : Tuple2[Float, Float]\
    \ = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n   \
    \     for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var closest = (numbers(0), numbers(1))\n\
    \        var closestDistance = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var minDiff : Float = Float.MaxValue\n        var minDiffElements : Tuple2[Float,\
    \ Float] = null\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var min = Float.MaxValue\n        var min1 = 0.0f\n        var min2 = 0.0f\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < min) {\n                    min = diff\n         \
    \           min1 = numbers(i)\n                    min2 = numbers(j)\n       \
    \         }\n            }\n        }\n        if (min1 > min2) (min2, min1) else\
    \ (min1, min2)", "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n\
    \        var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        return closest", "        var closestElements\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closestDistance = distance\n       \
    \             closestElements = (numbers(i), numbers(j))\n                }\n\
    \            }\n        }\n        closestElements", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (Float.MaxValue, Float.MaxValue)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minDiffElements = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n\
    \                }\n            }\n        }\n        minDiffElements", "    \
    \    var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var\
    \ closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0\
    \ until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest = (numbers(0),\
    \ numbers(1))\n        var closestDiff = abs(numbers(0) - numbers(1))\n      \
    \  for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < closestDiff) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDiff = diff\n                }\n   \
    \         }\n        }\n        closest", "        var minDiff : Float = Float.MaxValue\n\
    \        var minPair : Tuple2[Float, Float] = null\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n\
    \        var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (Float.MaxValue, Float.MaxValue)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var min = Float.MaxValue\n        var minPair : Tuple2[Float,\
    \ Float] = null\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < min) {\n                    min =\
    \ diff\n                    minPair = (numbers(i), numbers(j))\n             \
    \   }\n            }\n        }\n        minPair", "        var min = abs(numbers(0)\
    \ - numbers(1))\n        var minPair = (numbers(0), numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i\
    \ + 1))\n            if (diff < min) {\n                min = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var closest = (numbers(0), numbers(1))\n        var closestDistance\
    \ = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ distance = abs(numbers(i) - numbers(j))\n                if (distance < closestDistance)\
    \ {\n                    closest = (numbers(i), numbers(j))\n                \
    \    closestDistance = distance\n                }\n            }\n        }\n\
    \        closest", "        var closest : Tuple2[Float, Float] = (numbers(0),\
    \ numbers(1))\n        var closestDifference : Float = abs(numbers(0) - numbers(1))\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val difference = abs(numbers(i) - numbers(j))\n\
    \                if (difference < closestDifference) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDifference = difference\n\
    \                }\n            }\n        }\n        closest", "        var closestPair\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closestDistance = distance\n       \
    \             closestPair = (numbers(i), numbers(j))\n                }\n    \
    \        }\n        }\n        closestPair", "        var closest = (numbers(0),\
    \ numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n  \
    \      for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var minDiff : Float\
    \ = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff : Float = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    closest = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        closest",
  "        var minDiff = Float.MaxValue\n        var minPair = (Float.MaxValue, Float.MaxValue)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var minDistance = Float.MaxValue\n\
    \        var minDistanceElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val distance = abs(numbers(i) - numbers(i + 1))\n      \
    \      if (distance < minDistance) {\n                minDistance = distance\n\
    \                minDistanceElements = (numbers(i), numbers(i + 1))\n        \
    \    }\n        }\n        minDistanceElements", "        var closest = (numbers(0),\
    \ numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n  \
    \      for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var closestPair : Tuple2[Float, Float]\
    \ = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closestDistance = distance\n                    closestPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        closestPair",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDifference : Float = abs(numbers(0) - numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val difference = abs(numbers(i) - numbers(j))\n         \
    \       if (difference < closestDifference) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDifference = difference\n          \
    \      }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closestPair : Tuple2[Float, Float] = (numbers(0), numbers(1))\n  \
    \      var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closestDistance =\
    \ distance\n                    closestPair = (numbers(i), numbers(j))\n     \
    \           }\n            }\n        }\n        closestPair", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var closest = (numbers(0), numbers(1))\n\
    \        var closestDistance = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var minDiff = Float.MaxValue\n        var result = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                result = (numbers(i), numbers(i + 1))\n            }\n\
    \        }\n        result", "        var closest = (numbers(0), numbers(1))\n\
    \        var closestDistance = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var result : Tuple2[Float,\
    \ Float] = (0.0f, 0.0f)\n        var minDiff : Float = Float.MaxValue\n      \
    \  for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   result = (numbers(i), numbers(j))\n                }\n   \
    \         }\n        }\n        result", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest : Tuple2[Float, Float] = null\n        var closestDistance\
    \ : Float = Float.MaxValue\n        for (i <- 0 until numbers.length - 1) {\n\
    \            for (j <- i + 1 until numbers.length) {\n                val distance\
    \ = abs(numbers(i) - numbers(j))\n                if (distance < closestDistance)\
    \ {\n                    closestDistance = distance\n                    closest\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      closest", "        var minDiff = Float.MaxValue\n        var minPair =\
    \ (Float.MaxValue, Float.MaxValue)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if\
    \ (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        return closest", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var closest : Tuple2[Float, Float]\
    \ = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n      \
    \  var closestDifference : Float = abs(numbers(0) - numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val difference = abs(numbers(i) - numbers(j))\n         \
    \       if (difference < closestDifference) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDifference = difference\n          \
    \      }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDifference : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length) {\n            for\
    \ (j <- i + 1 until numbers.length) {\n                val difference = abs(numbers(i)\
    \ - numbers(j))\n                if (difference < closestDifference) {\n     \
    \               closest = (numbers(i), numbers(j))\n                    closestDifference\
    \ = difference\n                }\n            }\n        }\n        closest",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n      \
    \  var closestDifference : Float = abs(numbers(0) - numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val difference = abs(numbers(i) - numbers(j))\n         \
    \       if (difference < closestDifference) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDifference = difference\n          \
    \      }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDifference : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val difference = abs(numbers(i)\
    \ - numbers(j))\n                if (difference < closestDifference) {\n     \
    \               closest = (numbers(i), numbers(j))\n                    closestDifference\
    \ = difference\n                }\n            }\n        }\n        closest",
  "        var minDistance = Float.MaxValue\n        var closestElements : Tuple2[Float,\
    \ Float] = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n   \
    \         for (j <- i + 1 until numbers.length) {\n                val distance\
    \ = abs(numbers(i) - numbers(j))\n                if (distance < minDistance)\
    \ {\n                    minDistance = distance\n                    closestElements\
    \ = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n             \
    \   }\n            }\n        }\n        closestElements", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (0.0f, 0.0f)\n        for (i\
    \ <- 0 until numbers.length) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minDiffElements = (numbers(i), numbers(j))\n                }\n         \
    \   }\n        }\n        minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (Float.MaxValue, Float.MaxValue)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n\
    \        var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest = (numbers(0),\
    \ numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n  \
    \      for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest", "        var minDiff\
    \ = Float.MaxValue\n        var minPair : Tuple2[Float, Float] = null\n      \
    \  for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var minDiff : Float = Float.MaxValue\n\
    \        var minDiffElements : Tuple2[Float, Float] = null\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i\
    \ + 1))\n            if (diff < minDiff) {\n                minDiff = diff\n \
    \               minDiffElements = (numbers(i), numbers(i + 1))\n            }\n\
    \        }\n        minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closestElements\
    \ : Tuple2[Float, Float] = (0.0f, 0.0f)\n        var closestDistance : Float =\
    \ Float.MaxValue\n        for (i <- 0 until numbers.length) {\n            for\
    \ (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closestDistance = distance\n                    closestElements =\
    \ (numbers(i), numbers(j))\n                }\n            }\n        }\n    \
    \    closestElements", "        var closest : Tuple2[Float, Float] = (numbers(0),\
    \ numbers(1))\n        var closestDifference : Float = abs(numbers(0) - numbers(1))\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val difference = abs(numbers(i) - numbers(j))\n\
    \                if (difference < closestDifference) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDifference = difference\n\
    \                }\n            }\n        }\n        closest", "        var closest\
    \ = (numbers(0), numbers(1))\n        var diff = abs(closest._1 - closest._2)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1\
    \ until numbers.length) {\n                val newDiff = abs(numbers(i) - numbers(j))\n\
    \                if (newDiff < diff) {\n                    diff = newDiff\n \
    \                   closest = (numbers(i), numbers(j))\n                }\n  \
    \          }\n        }\n        closest", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (Float.MaxValue, Float.MaxValue)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i\
    \ + 1))\n            if (diff < minDiff) {\n                minDiff = diff\n \
    \               minDiffElements = (numbers(i), numbers(i + 1))\n            }\n\
    \        }\n        minDiffElements", "        var closest : Tuple2[Float, Float]\
    \ = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n      \
    \  var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDifference : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val difference = abs(numbers(i)\
    \ - numbers(j))\n                if (difference < closestDifference) {\n     \
    \               closest = (numbers(i), numbers(j))\n                    closestDifference\
    \ = difference\n                }\n            }\n        }\n        closest",
  "        var closest = (numbers(0), numbers(1))\n        var closestDistance = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var minDiff = abs(numbers(0) - numbers(1))\n        var minPair = (numbers(0),\
    \ numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n            for\
    \ (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff\n                    minPair = (numbers(i), numbers(j))\n           \
    \     }\n            }\n        }\n        minPair", "        var minDiff = abs(numbers(0)\
    \ - numbers(1))\n        var minPair = (numbers(0), numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minPair = (numbers(i), numbers(j))\n                }\n            }\n  \
    \      }\n        minPair", "        var minDiff = Float.MaxValue\n        var\
    \ minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n  \
    \          val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff <\
    \ minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        // TODO:\
    \ Implement this function\n        return (0.0f, 0.0f)", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        val sortedNumbers = numbers.sorted\n\
    \        var closestElements = (sortedNumbers(0), sortedNumbers(1))\n        var\
    \ closestDifference = abs(sortedNumbers(0) - sortedNumbers(1))\n        for (i\
    \ <- 0 until sortedNumbers.length - 1) {\n            val difference = abs(sortedNumbers(i)\
    \ - sortedNumbers(i + 1))\n            if (difference < closestDifference) {\n\
    \                closestDifference = difference\n                closestElements\
    \ = (sortedNumbers(i), sortedNumbers(i + 1))\n            }\n        }\n     \
    \   closestElements", "        var minDiff = Float.MaxValue\n        var minDiffElements\
    \ = (Float.MaxValue, Float.MaxValue)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minDiffElements =\
    \ (numbers(i), numbers(j))\n                }\n            }\n        }\n    \
    \    minDiffElements", "        var minDiff = Float.MaxValue\n        var minPair\
    \ : Tuple2[Float, Float] = null\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var minDiff : Float\
    \ = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff : Float = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    closest = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        closest",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDifference : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val difference = abs(numbers(i)\
    \ - numbers(j))\n                if (difference < closestDifference) {\n     \
    \               closest = (numbers(i), numbers(j))\n                    closestDifference\
    \ = difference\n                }\n            }\n        }\n        closest",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n   \
    \     for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minPair = (numbers(i), numbers(j))\n                }\n  \
    \          }\n        }\n        if (minPair._1 > minPair._2) (minPair._2, minPair._1)\
    \ else minPair", "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n\
    \        var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n      \
    \  var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = Tuple2(0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minDiffElements =\
    \ Tuple2(numbers(i), numbers(j))\n                }\n            }\n        }\n\
    \        minDiffElements", "        val sortedNumbers = numbers.sorted\n     \
    \   var minDiff = abs(sortedNumbers(0) - sortedNumbers(1))\n        var minDiffElements\
    \ = (sortedNumbers(0), sortedNumbers(1))\n        for (i <- 1 until sortedNumbers.length\
    \ - 1) {\n            val diff = abs(sortedNumbers(i) - sortedNumbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minDiffElements = (sortedNumbers(i), sortedNumbers(i + 1))\n         \
    \   }\n        }\n        minDiffElements", "        val sortedNumbers = numbers.sorted\n\
    \        var closestPair = (sortedNumbers(0), sortedNumbers(1))\n        var closestDistance\
    \ = abs(sortedNumbers(0) - sortedNumbers(1))\n        for (i <- 0 until sortedNumbers.length\
    \ - 1) {\n            val distance = abs(sortedNumbers(i) - sortedNumbers(i +\
    \ 1))\n            if (distance < closestDistance) {\n                closestDistance\
    \ = distance\n                closestPair = (sortedNumbers(i), sortedNumbers(i\
    \ + 1))\n            }\n        }\n        closestPair", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var minDistance = Float.MaxValue\n\
    \        var minDistanceElements = (Float.MaxValue, Float.MaxValue)\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    minDistanceElements = (numbers(i), numbers(j))\n        \
    \        }\n            }\n        }\n        minDistanceElements", "        var\
    \ minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minPair = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n  \
    \              }\n            }\n        }\n        minPair", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var minDiff = Float.MaxValue\n  \
    \      var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var closest : Tuple2[Float, Float]\
    \ = (numbers(0), numbers(1))\n        var closestDifference : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val difference = abs(numbers(i)\
    \ - numbers(j))\n                if (difference < closestDifference) {\n     \
    \               closest = (numbers(i), numbers(j))\n                    closestDifference\
    \ = difference\n                }\n            }\n        }\n        closest",
  "        var minDiff = Float.MaxValue\n        var minPair = (Float.MaxValue, Float.MaxValue)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var closest : Tuple2[Float, Float]\
    \ = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var minDiff = Float.MaxValue\n        var minDiffElements = (Float.MaxValue,\
    \ Float.MaxValue)\n        for (i <- 0 until numbers.length - 1) {\n         \
    \   val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var minDistance = abs(numbers(0) - numbers(1))\n        var minDistanceElements\
    \ = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n\
    \            for (j <- i + 1 until numbers.length) {\n                val distance\
    \ = abs(numbers(i) - numbers(j))\n                if (distance < minDistance)\
    \ {\n                    minDistance = distance\n                    minDistanceElements\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      minDistanceElements", "        var minDiff = Float.MaxValue\n        var\
    \ minTuple = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n \
    \           for (j <- i + 1 until numbers.length) {\n                val diff\
    \ = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n    \
    \                minDiff = diff\n                    minTuple = (numbers(i), numbers(j))\n\
    \                }\n            }\n        }\n        minTuple", "        var\
    \ closest = (numbers(0), numbers(1))\n        var closestDistance = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest = (numbers(0), numbers(1))\n        var closestDiff = abs(closest._1\
    \ - closest._2)\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < closestDiff) {\n                 \
    \   closest = (numbers(i), numbers(j))\n                    closestDiff = diff\n\
    \                }\n            }\n        }\n        closest", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var diff : Float\
    \ = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ newDiff : Float = abs(numbers(i) - numbers(j))\n                if (newDiff\
    \ < diff) {\n                    diff = newDiff\n                    closest =\
    \ (numbers(i), numbers(j))\n                }\n            }\n        }\n    \
    \    closest", "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n\
    \        var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                if (abs(numbers(i) - numbers(j)) < closestDistance) {\n \
    \                   closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = abs(numbers(i) - numbers(j))\n                }\n            }\n        }\n\
    \        closest", "        var closest = (numbers(0), numbers(1))\n        var\
    \ closestDistance = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var closest = (numbers(0), numbers(1))\n\
    \        var closestDistance = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closestElements : Tuple2[Float, Float] = (numbers(0), numbers(1))\n\
    \        var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closestDistance =\
    \ distance\n                    closestElements = (numbers(i), numbers(j))\n \
    \               }\n            }\n        }\n        closestElements", "     \
    \   var minDiff : Float = Float.MaxValue\n        var minDiffElements : Tuple2[Float,\
    \ Float] = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n   \
    \         for (j <- i + 1 until numbers.length) {\n                val diff :\
    \ Float = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minDiffElements = (min(numbers(i),\
    \ numbers(j)), max(numbers(i), numbers(j)))\n                }\n            }\n\
    \        }\n        minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n          \
    \  if (diff < minDiff) {\n                minDiff = diff\n                minPair\
    \ = (numbers(i), numbers(i + 1))\n            }\n        }\n        minPair",
  "        val sortedNumbers = numbers.sorted\n        var closest = (sortedNumbers(0),\
    \ sortedNumbers(1))\n        var closestDistance = abs(sortedNumbers(0) - sortedNumbers(1))\n\
    \        for (i <- 0 until sortedNumbers.length - 1) {\n            val distance\
    \ = abs(sortedNumbers(i) - sortedNumbers(i + 1))\n            if (distance < closestDistance)\
    \ {\n                closest = (sortedNumbers(i), sortedNumbers(i + 1))\n    \
    \            closestDistance = distance\n            }\n        }\n        closest",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var minDiff = abs(numbers(0)\
    \ - numbers(1))\n        var minPair = (numbers(0), numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minPair = (numbers(i), numbers(j))\n                }\n            }\n  \
    \      }\n        minPair", "        var closest = (numbers(0), numbers(1))\n\
    \        var closestDistance = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closestPair : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closestDistance = distance\n                    closestPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        closestPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minPair = (numbers(i), numbers(j))\n                }\n  \
    \          }\n        }\n        minPair", "        var closestPair : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closestDistance = distance\n                    closestPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        closestPair",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minPair = (numbers(i), numbers(i + 1))\n           \
    \ }\n        }\n        minPair", "        var closestElements : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closestDistance = distance\n                    closestElements =\
    \ (numbers(i), numbers(j))\n                }\n            }\n        }\n    \
    \    closestElements", "        var minDiff = Float.MaxValue\n        var minPair\
    \ : Tuple2[Float, Float] = null\n        for (i <- 0 until numbers.length - 1)\
    \ {\n            val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff\
    \ < minDiff) {\n                minDiff = diff\n                minPair = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minElements = (Float.MaxValue, Float.MaxValue)\n\
    \        for (i <- 0 until numbers.length) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minElements = (numbers(i), numbers(j))\n                }\n\
    \            }\n        }\n        minElements", "        var minDistance = Float.MaxValue\n\
    \        var minTuple : Tuple2[Float, Float] = null\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val distance = abs(numbers(i) - numbers(i\
    \ + 1))\n            if (distance < minDistance) {\n                minDistance\
    \ = distance\n                minTuple = (numbers(i), numbers(i + 1))\n      \
    \      }\n        }\n        minTuple", "        var minDistance = Float.MaxValue\n\
    \        var minDistanceElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ minDistance) {\n                    minDistance = distance\n               \
    \     minDistanceElements = (numbers(i), numbers(j))\n                }\n    \
    \        }\n        }\n        minDistanceElements", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var minDiff = Float.MaxValue\n        var minDiffElements = (Float.MaxValue,\
    \ Float.MaxValue)\n        for (i <- 0 until numbers.length - 1) {\n         \
    \   val diff = abs(numbers(i) - numbers(i + 1))\n            if (diff < minDiff)\
    \ {\n                minDiff = diff\n                minDiffElements = (numbers(i),\
    \ numbers(i + 1))\n            }\n        }\n        minDiffElements", "     \
    \   var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var\
    \ closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0\
    \ until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n      \
    \  var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        val sortedNumbers =\
    \ numbers.sorted\n        var minDiff = abs(sortedNumbers(0) - sortedNumbers(1))\n\
    \        var minPair = (sortedNumbers(0), sortedNumbers(1))\n        for (i <-\
    \ 0 until sortedNumbers.length - 1) {\n            val diff = abs(sortedNumbers(i)\
    \ - sortedNumbers(i + 1))\n            if (diff < minDiff) {\n               \
    \ minDiff = diff\n                minPair = (sortedNumbers(i), sortedNumbers(i\
    \ + 1))\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (Float.MaxValue, Float.MaxValue)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i + 1))\n\
    \            if (diff < minDiff) {\n                minDiff = diff\n         \
    \       minPair = (numbers(i), numbers(i + 1))\n            }\n        }\n   \
    \     minPair", "        var minDiff = Float.MaxValue\n        var minPair = (0.0f,\
    \ 0.0f)\n        for (i <- 0 until numbers.length - 1) {\n            for (j <-\
    \ i + 1 until numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minPair = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n\
    \                }\n            }\n        }\n        minPair", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (Float.MaxValue, Float.MaxValue)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minDiffElements = (numbers(i), numbers(i + 1))\n   \
    \         }\n        }\n        minDiffElements", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                if (abs(numbers(i)\
    \ - numbers(j)) < abs(closest._1 - closest._2)) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                }\n            }\n        }\n  \
    \      closest", "        var closest : Tuple2[Float, Float] = null\n        var\
    \ minDiff : Float = Float.MaxValue\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    closest = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        closest",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        return closest", "        var closest\
    \ : Tuple2[Float, Float] = (numbers(0), numbers(1))\n        var closestDistance\
    \ : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val distance = abs(numbers(i) - numbers(j))\n                if (distance <\
    \ closestDistance) {\n                    closest = (numbers(i), numbers(j))\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n        closest", "        var minDiff = Float.MaxValue\n  \
    \      var minPair = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length -\
    \ 1) {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minPair = (min(numbers(i),\
    \ numbers(j)), max(numbers(i), numbers(j)))\n                }\n            }\n\
    \        }\n        minPair", "        var minDiff = Float.MaxValue\n        var\
    \ minPair : Tuple2[Float, Float] = null\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  val diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff)\
    \ {\n                    minDiff = diff\n                    minPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minPair",
  "        var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n       \
    \ var closestDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < closestDistance) {\n                    closest = (numbers(i),\
    \ numbers(j))\n                    closestDistance = distance\n              \
    \  }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest = (numbers(0), numbers(1))\n        var closestDiff = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < closestDiff) {\n                 \
    \   closest = (numbers(i), numbers(j))\n                    closestDiff = diff\n\
    \                }\n            }\n        }\n        closest", "        var minDiff\
    \ = Float.MaxValue\n        var minDiffElements = (Float.MaxValue, Float.MaxValue)\n\
    \        for (i <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i)\
    \ - numbers(i + 1))\n            if (diff < minDiff) {\n                minDiff\
    \ = diff\n                minDiffElements = (numbers(i), numbers(i + 1))\n   \
    \         }\n        }\n        minDiffElements", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closest = (numbers(i), numbers(j))\n                    closestDistance\
    \ = distance\n                }\n            }\n        }\n        closest", " \
    \       var closest : Tuple2[Float, Float] = (numbers(0), numbers(1))\n      \
    \  var minDistance : Float = abs(numbers(0) - numbers(1))\n        for (i <- 0\
    \ until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val distance = abs(numbers(i) - numbers(j))\n           \
    \     if (distance < minDistance) {\n                    minDistance = distance\n\
    \                    closest = (numbers(i), numbers(j))\n                }\n \
    \           }\n        }\n        closest", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (Float.MaxValue, Float.MaxValue)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            val diff = abs(numbers(i) - numbers(i\
    \ + 1))\n            if (diff < minDiff) {\n                minDiff = diff\n \
    \               minDiffElements = (numbers(i), numbers(i + 1))\n            }\n\
    \        }\n        minDiffElements", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (Float.MaxValue, Float.MaxValue)\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until numbers.length)\
    \ {\n                val diff = abs(numbers(i) - numbers(j))\n               \
    \ if (diff < minDiff) {\n                    minDiff = diff\n                \
    \    minDiffElements = (numbers(i), numbers(j))\n                }\n         \
    \   }\n        }\n        minDiffElements", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  if (abs(numbers(i) - numbers(j)) < abs(closest._1 - closest._2)) {\n      \
    \              closest = (numbers(i), numbers(j))\n                }\n       \
    \     }\n        }\n        closest", "        var closestPair : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        var closestDistance : Float = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val distance = abs(numbers(i)\
    \ - numbers(j))\n                if (distance < closestDistance) {\n         \
    \           closestDistance = distance\n                    closestPair = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        closestPair",
  "        var closest = (numbers(0), numbers(1))\n        var minDiff = abs(numbers(0)\
    \ - numbers(1))\n        for (i <- 0 until numbers.length - 1) {\n           \
    \ for (j <- i + 1 until numbers.length) {\n                val diff = abs(numbers(i)\
    \ - numbers(j))\n                if (diff < minDiff) {\n                    minDiff\
    \ = diff\n                    closest = (numbers(i), numbers(j))\n           \
    \     }\n            }\n        }\n        closest", "        var closest : Tuple2[Float,\
    \ Float] = (numbers(0), numbers(1))\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            for (j <- i + 1 until numbers.length) {\n              \
    \  if (abs(numbers(i) - numbers(j)) < abs(closest._1 - closest._2)) {\n      \
    \              closest = (numbers(i), numbers(j))\n                }\n       \
    \     }\n        }\n        closest", "        var minDiff = Float.MaxValue\n\
    \        var minPair = (Float.MaxValue, Float.MaxValue)\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            for (j <- i + 1 until numbers.length) {\n\
    \                val diff = abs(numbers(i) - numbers(j))\n                if (diff\
    \ < minDiff) {\n                    minDiff = diff\n                    minPair\
    \ = (min(numbers(i), numbers(j)), max(numbers(i), numbers(j)))\n             \
    \   }\n            }\n        }\n        minPair", "        var minDiff = Float.MaxValue\n\
    \        var minDiffElements = (0.0f, 0.0f)\n        for (i <- 0 until numbers.length)\
    \ {\n            for (j <- i + 1 until numbers.length) {\n                val\
    \ diff = abs(numbers(i) - numbers(j))\n                if (diff < minDiff) {\n\
    \                    minDiff = diff\n                    minDiffElements = (numbers(i),\
    \ numbers(j))\n                }\n            }\n        }\n        minDiffElements",
  "        var minDiff = Float.MaxValue\n        var minPair = (0.0f, 0.0f)\n    \
    \    for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val diff = abs(numbers(i) - numbers(j))\n\
    \                if (diff < minDiff) {\n                    minDiff = diff\n \
    \                   minPair = (numbers(i), numbers(j))\n                }\n  \
    \          }\n        }\n        minPair", "        var closest = (numbers(0),\
    \ numbers(1))\n        var closestDistance = abs(numbers(0) - numbers(1))\n  \
    \      for (i <- 0 until numbers.length - 1) {\n            for (j <- i + 1 until\
    \ numbers.length) {\n                val distance = abs(numbers(i) - numbers(j))\n\
    \                if (distance < closestDistance) {\n                    closest\
    \ = (numbers(i), numbers(j))\n                    closestDistance = distance\n\
    \                }\n            }\n        }\n        closest"]
stop_tokens:
- "\n    }\n"
