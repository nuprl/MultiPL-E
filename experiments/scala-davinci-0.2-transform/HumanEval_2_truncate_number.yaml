name: HumanEval_2_truncate_number
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive floating point number, it can be decomposed into\n    //\
  \ and integer part (largest integer smaller than given number) and decimals\n  \
  \  // (leftover part always smaller than 1).\n    // Return the decimal part of\
  \ the number.\n    // >>> truncateNumber((3.5f))\n    // (0.5f)\n    def truncateNumber(number\
  \ : Float) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(truncateNumber((3.5f))\
  \ == (0.5f));\n    assert(truncateNumber((1.25f)) == (0.25f));\n    assert(truncateNumber((123.0f))\
  \ == (0.0f));\n    }\n\n}\n"
completions: ['        return number - number.toInt', "        val intPart = floor(number).toInt\n\
    \        return number - intPart", "        val intPart = floor(number).toInt\n\
    \        number - intPart", '        return number - floor(number).toFloat', " \
    \       val intPart = floor(number).toInt\n        return number - intPart", " \
    \       val integerPart = floor(number).toInt\n        number - integerPart",
  '        return number - floor(number)', '        return number - floor(number).toFloat',
  "        val integerPart = floor(number).toInt\n        number - integerPart", '        return
    number - floor(number)', "        val integer = floor(number).toInt\n        number\
    \ - integer", "        val integerPart = number.toInt\n        number - integerPart",
  "        val intPart = floor(number).toInt\n        return number - intPart", " \
    \       val integerPart = floor(number).toInt\n        number - integerPart",
  '        return number - floor(number).toFloat', "        val intPart = floor(number).toInt\n\
    \        return number - intPart", "        val intPart = floor(number).toInt\n\
    \        number - intPart", "        val intPart = floor(number).toInt\n     \
    \   return number - intPart", "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", "        val intPart = floor(number).toInt\n \
    \       val decimalPart = number - intPart\n        return decimalPart", "   \
    \     val intPart = number.toInt\n        number - intPart", "        val integerPart\
    \ = number.toInt\n        number - integerPart", "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", "        val integerPart = number.toInt\n    \
    \    number - integerPart", '        return number - floor(number)', "       \
    \ val integerPart = floor(number).toInt\n        return number - integerPart",
  '        return number - floor(number)', "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", "        val intPart = floor(number).toInt\n \
    \       number - intPart", "        val intPart = floor(number).toInt\n      \
    \  number - intPart", '        return number - floor(number)', "        val integerPart\
    \ = floor(number).toInt\n        number - integerPart", "        val intPart =\
    \ floor(number).toInt\n        number - intPart", "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", '        number - floor(number)', "        val\
    \ integerPart = floor(number).toInt\n        return number - integerPart", " \
    \       val integerPart = floor(number).toInt\n        return number - integerPart",
  '        return number - floor(number)', "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", '        return number - floor(number)', "   \
    \     val integerPart = floor(number).toInt\n        number - integerPart", '        return
    number - number.toInt', '        return number - floor(number)', "        val\
    \ intPart = floor(number).toInt\n        val decPart = number - intPart\n    \
    \    return decPart", "        val integerPart = number.toInt\n        number\
    \ - integerPart", "        val integerPart = floor(number).toInt\n        number\
    \ - integerPart", "        val integerPart = number.toInt\n        return number\
    \ - integerPart", '        return number - floor(number)', "        val intPart\
    \ = number.toInt\n        number - intPart", "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", "        val intPart = floor(number).toInt\n \
    \       number - intPart", '        return number - floor(number)', '        return
    number - floor(number)', '        return number - floor(number)', "        val\
    \ intPart = floor(number).toInt\n        number - intPart", "        val intPart\
    \ = floor(number).toInt\n        return number - intPart", "        val integerPart\
    \ = floor(number).toInt\n        number - integerPart", "        val intPart =\
    \ floor(number).toInt\n        number - intPart", '        return number - floor(number)',
  "        val integerPart = floor(number).toInt\n        number - integerPart", " \
    \       val integerPart = floor(number).toInt\n        return number - integerPart",
  "        val integerPart = floor(number).toInt\n        number - integerPart", '        return
    number - floor(number)', '        return number - number.toInt', "        val\
    \ intPart = floor(number).toInt\n        val decimalPart = number - intPart\n\
    \        return decimalPart", "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", "        val intPart = floor(number).toInt\n \
    \       number - intPart", '        return number - floor(number).toFloat', '        return
    number - floor(number)', '        return number - number.toInt', "        val\
    \ integerPart = number.toInt\n        return number - integerPart", "        val\
    \ integerPart = floor(number).toInt\n        return number - integerPart", '        return
    number - floor(number)', "        val integerPart = floor(number).toInt\n    \
    \    number - integerPart", "        val intPart = floor(number).toInt\n     \
    \   return number - intPart", "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", '        return number - floor(number)', "   \
    \     val integerPart = floor(number).toInt\n        return number - integerPart",
  "        val intPart = floor(number).toInt\n        return number - intPart", " \
    \       val integerPart = floor(number).toInt\n        val decimalPart = number\
    \ - integerPart\n        decimalPart", "        val intPart = floor(number).toInt\n\
    \        number - intPart", "        val integerPart = floor(number).toInt\n \
    \       number - integerPart", "        val intPart = number.toInt\n        return\
    \ number - intPart", "        val integerPart = floor(number).toInt\n        number\
    \ - integerPart", "        val integerPart = number.toInt\n        number - integerPart",
  "        val integerPart = floor(number).toInt\n        number - integerPart", '        return
    number - floor(number).toFloat', "        val intPart = floor(number).toInt\n\
    \        return number - intPart", '        return number - floor(number).toFloat',
  "        val integerPart = floor(number).toInt\n        number - integerPart", " \
    \       val integerPart = floor(number).toInt\n        number - integerPart",
  '        return number - floor(number)', "        val intPart = floor(number).toInt\n\
    \        number - intPart", '        return number - number.toInt', "        val\
    \ integerPart = floor(number).toInt\n        number - integerPart", "        val\
    \ intPart = number.toInt\n        return number - intPart", "        val integerPart\
    \ = floor(number).toInt\n        return number - integerPart", '        return
    number - floor(number)', '        return number - floor(number).toFloat', "  \
    \      val integerPart = floor(number).toInt\n        number - integerPart", '        return
    number - floor(number)', "        val intPart = floor(number).toInt\n        number\
    \ - intPart", '        return number - floor(number).toFloat', "        val intPart\
    \ = number.toInt\n        number - intPart", "        val integerPart = floor(number).toInt\n\
    \        return number - integerPart", "        val intPart = floor(number).toInt\n\
    \        number - intPart", "        val integerPart = floor(number).toInt\n \
    \       val decimalPart = number - integerPart\n        decimalPart", '        return
    number - floor(number)', "        val integerPart = floor(number).toInt\n    \
    \    number - integerPart", "        val intPart = floor(number).toInt\n     \
    \   number - intPart", '        return number - floor(number).toFloat', "    \
    \    val intPart = floor(number).toInt\n        return number - intPart", "  \
    \      val intPart = floor(number).toInt\n        number - intPart", "       \
    \ val integerPart = number.toInt\n        number - integerPart", "        val\
    \ integerPart = number.toInt\n        return number - integerPart", "        val\
    \ intPart = floor(number).toInt\n        number - intPart", '        return number
    - number.toInt', "        val intPart = floor(number).toInt\n        number -\
    \ intPart", "        val intPart = floor(number).toInt\n        number - intPart",
  '        return number - floor(number)', "        val integerPart = number.toInt\n\
    \        number - integerPart", "        val integerPart = floor(number).toInt\n\
    \        return number - integerPart", '        return number - number.floor',
  '        return number - floor(number)', "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", "        val intPart = floor(number).toInt\n \
    \       return number - intPart", "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", "        val integerPart = floor(number).toInt\n\
    \        val decimalPart = number - integerPart\n        decimalPart", "     \
    \   val integerPart = floor(number).toInt\n        number - integerPart", "  \
    \      val intPart = floor(number).toInt\n        number - intPart", "       \
    \ val integerPart = floor(number).toInt\n        number - integerPart", "    \
    \    val intPart = floor(number).toInt\n        number - intPart", "        val\
    \ integerPart = floor(number).toInt\n        number - integerPart", '        return
    number - number.toInt', '        return number - number.toInt', '        return
    number - floor(number)', "        val integerPart = floor(number).toInt\n    \
    \    number - integerPart", "        val integerPart = floor(number).toInt\n \
    \       number - integerPart", "        val integerPart = floor(number).toInt\n\
    \        return number - integerPart", '        return number - floor(number)',
  '        return number - floor(number)', "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", "        val intPart = floor(number).toInt\n \
    \       number - intPart", '        return number - floor(number)', "        val\
    \ integerPart = floor(number).toInt\n        return number - integerPart", " \
    \       val intPart = number.toInt\n        number - intPart", "        val integerPart\
    \ = floor(number).toInt\n        number - integerPart", '        return number
    - floor(number).toFloat', "        val integerPart = floor(number).toInt\n   \
    \     number - integerPart", "        val intPart = number.toInt\n        number\
    \ - intPart", "        val integerPart = floor(number).toInt\n        number -\
    \ integerPart", '        return number - floor(number).toFloat', "        val\
    \ integerPart = floor(number).toInt\n        number - integerPart", '        return
    number - floor(number)', "        val integerPart = floor(number).toInt\n    \
    \    return number - integerPart", "        val intPart = floor(number).toInt\n\
    \        number - intPart", '        number - number.toInt', '        return number
    - floor(number).toFloat', '        return number - floor(number)', '        number
    - floor(number)', '        return number - floor(number)', '        return number
    - floor(number)', '        return number - floor(number)', "        val intPart\
    \ = floor(number).toInt\n        return number - intPart", "        var numberString\
    \ = number.toString\n        var decimalIndex = numberString.indexOf('.')\n  \
    \      if (decimalIndex == -1) return 0\n        var decimalPart = numberString.substring(decimalIndex\
    \ + 1)\n        return decimalPart.toFloat / pow(10, decimalPart.length).toFloat",
  "        val integerPart = floor(number).toInt\n        return number - integerPart",
  "        val integerPart = number.toInt\n        number - integerPart", '        return
    number - number.toInt', "        val intPart = number.toInt\n        number -\
    \ intPart", '        return number - floor(number)', "        val integerPart\
    \ = floor(number).toInt\n        return number - integerPart", "        val intPart\
    \ = floor(number).toInt\n        return number - intPart", "        val integerPart\
    \ = floor(number).toInt\n        return number - integerPart", '        return
    number - floor(number)', "        val intPart = floor(number).toInt\n        return\
    \ number - intPart", '        return number - floor(number).toFloat', '        return
    number - number.toInt', '        return number - floor(number).toFloat', "   \
    \     val integerPart = floor(number).toInt\n        number - integerPart", '        return
    number - floor(number)', "        val integerPart = floor(number).toInt\n    \
    \    return number - integerPart", '        return number - floor(number)', '        return
    number - number.toInt', "        val intPart = floor(number).toInt\n        number\
    \ - intPart", "        val intPart = floor(number).toInt\n        number - intPart",
  "        val integerPart = floor(number).toInt\n        return number - integerPart",
  '        return number - floor(number)', '        return number - floor(number)',
  '        return number - number.toInt', "        val integerPart = floor(number).toInt\n\
    \        number - integerPart", '        return number - floor(number)', '        return
    number - floor(number).toFloat', "        val integerPart = number.toInt\n   \
    \     number - integerPart", "        val integerPart = floor(number).toInt\n\
    \        return number - integerPart", "        val integerPart = floor(number).toInt\n\
    \        val decimalPart = number - integerPart\n        decimalPart", "     \
    \   val integerPart = number.toInt\n        return number - integerPart", '        return
    number - floor(number).toFloat', "        val integerPart = floor(number).toInt\n\
    \        return number - integerPart"]
stop_tokens:
- "\n    }\n"
