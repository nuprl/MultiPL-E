name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a dictionary, return True if all keys are strings in lower \n    //\
  \ case or all keys are strings in upper case, else return False.\n    // The function\
  \ should return False is the given dictionary is empty.\n    // Examples:\n    //\
  \ >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\"\
  )))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
  , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n    //\
  \ >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\"\
  , \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
  \ : Map[String,String]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        // Fill in the code here\n        var lower = true\n      \
    \  var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) {\n                lower = false\n            }\n            if (key.toUpperCase()\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ return lower || upper", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.length == keys.length\
    \ || upper.length == keys.length) true else false", "        // Fill in the code\
    \ here\n        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n\
    \        val firstKeyLower = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper)\
    \ {\n            for (key <- keys) {\n                if (key != key.toUpperCase)\
    \ return false\n            }\n        } else if (firstKey == firstKeyLower) {\n\
    \            for (key <- keys) {\n                if (key != key.toLowerCase)\
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n        return true", "        // Fill in the code here\n        dict.keys.forall(_.toLowerCase\
    \ == _) || dict.keys.forall(_.toUpperCase == _)", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower || firstKeyIsUpper)\
    \ {\n            keys.tail.forall(key => {\n                if (firstKeyIsLower)\
    \ key.toLowerCase == key\n                else key.toUpperCase == key\n      \
    \      })\n        } else false", "        // Fill in the code here\n        var\
    \ upper = true\n        var lower = true\n        for (x <- dict.keys) {\n   \
    \         if (x.toUpperCase() != x) {\n                upper = false\n       \
    \     }\n            if (x.toLowerCase() != x) {\n                lower = false\n\
    \            }\n        }\n        if (upper || lower) {\n            return true\n\
    \        }\n        return false", "        // Fill in the code here\n       \
    \ if (dict.size == 0) false\n        else {\n            var isLower = true\n\
    \            var isUpper = true\n            for ((k, v) <- dict) {\n        \
    \        if (k.toLowerCase() != k) isLower = false\n                if (k.toUpperCase()\
    \ != k) isUpper = false\n            }\n            isLower || isUpper\n     \
    \   }", "        // Fill in the code here\n        var lower = true\n        var\
    \ upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        if (lower || upper) true else false", "        if (dict.isEmpty)\
    \ return false\n        val lower = dict.keys.forall(x => x.toLowerCase == x)\n\
    \        val upper = dict.keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper", "        // Fill in the code here\n        var lower = true\n   \
    \     var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        lower || upper", "        // Fill in the code here\n      \
    \  var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        if (lower || upper) true else false",
  "        // TODO: Implement this function\n        return false", "        // Fill\
    \ in the code here\n        if (dict.isEmpty) return false\n        val keys =\
    \ dict.keys\n        val lowerKeys = keys.filter(_.toLowerCase == _)\n       \
    \ val upperKeys = keys.filter(_.toUpperCase == _)\n        if (lowerKeys.size\
    \ == keys.size || upperKeys.size == keys.size) true else false", "        // Fill\
    \ in the code here\n        var lower = true\n        var upper = true\n     \
    \   for (key <- dict.keys) {\n            if (key.toLowerCase() != key) lower\
    \ = false\n            if (key.toUpperCase() != key) upper = false\n        }\n\
    \        if (lower || upper) true else false", "        // Fill in the code here\n\
    \        if (dict.isEmpty) return false\n        val keys = dict.keys\n      \
    \  val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            for (key <- keys) {\n           \
    \     if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (firstKeyIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        // TODO: Implement\
    \ this function\n        return false", "        // Fill in the code here\n  \
    \      return true", "        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        lower || upper", "        // Fill in the code here\n        var\
    \ lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n    \
    \        if (k.toLowerCase != k) lower = false\n            if (k.toUpperCase\
    \ != k) upper = false\n        }\n        if (lower || upper) true else false",
  "        // Fill in the code here\n        return false", "        // Fill in the\
    \ code here\n        if (dict.isEmpty) false\n        else {\n            val\
    \ keys = dict.keys\n            val firstKey = keys.head\n            val firstChar\
    \ = firstKey.charAt(0)\n            val isUpper = firstChar.isUpper\n        \
    \    val isLower = firstChar.isLower\n            if (isUpper || isLower) {\n\
    \                val isAllUpper = keys.forall(key => key.forall(c => c.isUpper))\n\
    \                val isAllLower = keys.forall(key => key.forall(c => c.isLower))\n\
    \                if (isAllUpper || isAllLower) true\n                else false\n\
    \            }\n            else false\n        }", "        // Fill in the code\
    \ here\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val firstKey = keys.head\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n\
    \        if (firstKeyIsUpper) {\n            keys.forall(k => k.toUpperCase ==\
    \ k)\n        } else if (firstKeyIsLower) {\n            keys.forall(k => k.toLowerCase\
    \ == k)\n        } else {\n            false\n        }", "        // Fill in\
    \ the code here\n        dict.keys.forall(x => x.toUpperCase == x || x.toLowerCase\
    \ == x)", "        // Fill in the code here\n        var lower = true\n      \
    \  var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        if (lower || upper) true else false", "        // Fill in\
    \ the code here\n        var lower = true\n        var upper = true\n        for\
    \ ((k,v) <- dict) {\n            if (k.toLowerCase() != k) lower = false\n   \
    \         if (k.toUpperCase() != k) upper = false\n        }\n        if (lower\
    \ || upper) true else false", "        // Fill in the code here\n        var lower\
    \ = true\n        var upper = true\n        for (key <- dict.keys) {\n       \
    \     if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper", "        // Fill\
    \ in the code here.\n        var lower = true\n        var upper = true\n    \
    \    dict.keys.foreach(x => {\n            if (x.toLowerCase != x) lower = false\n\
    \            if (x.toUpperCase != x) upper = false\n        })\n        lower\
    \ || upper", "        // Fill in the code here\n        return false", "     \
    \   // Fill in the code here\n        var lowercase = true\n        var uppercase\
    \ = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase != k) lowercase\
    \ = false\n            if (k.toUpperCase != k) uppercase = false\n        }\n\
    \        return lowercase || uppercase", "        // Your code here\n        return\
    \ true", "        // Fill in the code here\n        var lower = true\n       \
    \ var upper = true\n        for (i <- dict.keys) {\n            if (i.toLowerCase()\
    \ != i) {\n                lower = false\n            }\n            if (i.toUpperCase()\
    \ != i) {\n                upper = false\n            }\n        }\n        if\
    \ (lower || upper) {\n            return true\n        }\n        else {\n   \
    \         return false\n        }", "        // Fill in the code here\n      \
    \  return false", "        // Your code here\n        return false", "       \
    \ if (dict.isEmpty) return false\n        val isLower = dict.keys.head.toLowerCase\
    \ == dict.keys.head\n        dict.keys.forall(x => (x.toLowerCase == x) == isLower)",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for ((key, value) <- dict) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        lower || upper", "        // Fill in the code here\n     \
    \   var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (!key.toLowerCase.equals(key)) lower = false\n           \
    \ if (!key.toUpperCase.equals(key)) upper = false\n        }\n        lower ||\
    \ upper", "        // Fill in the code here\n        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    if (firstKey.toLowerCase == firstKey) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else {\n            keys.forall(key => key.toUpperCase ==\
    \ key)\n        }", "        // Fill in the code here\n        var result = true\n\
    \        var upper = true\n        var lower = true\n        for ((k,v) <- dict)\
    \ {\n            if (k.toUpperCase() != k) {\n                upper = false\n\
    \            }\n            if (k.toLowerCase() != k) {\n                lower\
    \ = false\n            }\n        }\n        if (upper == false && lower == false)\
    \ {\n            result = false\n        }\n        return result", "        //\
    \ Fill in the code here\n        var lower = true\n        var upper = true\n\
    \        for ((k,v) <- dict) {\n            if (k.toLowerCase != k) lower = false\n\
    \            if (k.toUpperCase != k) upper = false\n        }\n        return\
    \ lower || upper", "        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        lower || upper", "        // Fill in the code here\n      \
    \  dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase == _)",
  "        // Fill in the code here\n        dict.keys.forall(x => x.toLowerCase ==\
    \ x || x.toUpperCase == x)", "        // Fill in the code here\n        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val firstKey = keys.head\n\
    \        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        if (!firstKeyIsUpper && !firstKeyIsLower)\
    \ return false\n        val allKeysAreUpper = keys.forall(key => key.toUpperCase\
    \ == key)\n        val allKeysAreLower = keys.forall(key => key.toLowerCase ==\
    \ key)\n        if (firstKeyIsUpper && allKeysAreUpper) return true\n        if\
    \ (firstKeyIsLower && allKeysAreLower) return true\n        false", "        if\
    \ (dict.isEmpty) return false\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n\
    \        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower)\
    \ {\n            keys.forall(key => key.toLowerCase == key)\n        } else if\
    \ (firstKeyIsUpper) {\n            keys.forall(key => key.toUpperCase == key)\n\
    \        } else {\n            false\n        }", "        // Fill in the code\
    \ here\n        if (dict.isEmpty) false\n        else {\n            val keys\
    \ = dict.keys.toList\n            val lower = keys.filter(x => x.toLowerCase ==\
    \ x)\n            val upper = keys.filter(x => x.toUpperCase == x)\n         \
    \   if (lower.length == keys.length || upper.length == keys.length) true\n   \
    \         else false\n        }", "        // Fill Up this function body\n   \
    \     // `dict` is a Map of String to String\n        // `dict.keys` is a collection\
    \ of keys of the Map\n        // `dict.values` is a collection of values of the\
    \ Map\n        // `dict.keys.toList` is a List of keys of the Map\n        //\
    \ `dict.values.toList` is a List of values of the Map\n        // `dict.keys.toList(0)`\
    \ is the first key of the Map\n        // `dict.values.toList(0)` is the first\
    \ value of the Map\n        // `dict.keys.toList.length` is the number of keys\
    \ of the Map\n        // `dict.values.toList.length` is the number of values of\
    \ the Map\n        // `dict.keys.toList.contains(\"a\")` is true if the Map contains\
    \ the key \"a\"\n        // `dict.values.toList.contains(\"apple\")` is true if\
    \ the Map contains the value \"apple\"\n        // `dict.keys.toList.filter(k\
    \ => k == \"a\")` is a List of keys that are equal to \"a\"\n        // `dict.values.toList.filter(v\
    \ => v == \"apple\")` is a List of values that are equal to \"apple\"\n      \
    \  // `dict.keys.toList.filter(k => k == \"a\").length` is the number of keys\
    \ that are equal to \"a\"\n        // `dict.values.toList.filter(v => v == \"\
    apple\").length` is the number of values that are equal to \"apple\"\n       \
    \ // `dict.keys.toList.filter(k => k == \"a\").length == dict.keys.toList.length`\
    \ is true if all keys are equal to \"a\"\n        // `dict.values.toList.filter(v\
    \ => v == \"apple\").length == dict.values.toList.length` is true if all values\
    \ are equal to \"apple\"\n        // `dict.keys.toList.filter(k => k == \"a\"\
    ).length == dict.keys.toList.length || dict.values.toList.filter(v => v == \"\
    apple\").length == dict.values.toList.length` is true if all keys", "        //\
    \ Fill in the code here\n        return false", "        // Fill in the code here\n\
    \        var lowerCase = true\n        var upperCase = true\n        for (key\
    \ <- dict.keys) {\n            if (key.toLowerCase != key) lowerCase = false\n\
    \            if (key.toUpperCase != key) upperCase = false\n        }\n      \
    \  lowerCase || upperCase", "        if (dict.isEmpty) false\n        else {\n\
    \            val keys = dict.keys\n            val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lowerCaseKeys.size == keys.size || upperCaseKeys.size\
    \ == keys.size) true\n            else false\n        }", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val first = keys.head\n\
    \        val isLower = first.toLowerCase == first\n        val isUpper = first.toUpperCase\
    \ == first\n        if (isLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (isUpper) {\n            keys.forall(key => key.toUpperCase\
    \ == key)\n        } else {\n            false\n        }", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val firstKey = keys.head\n\
    \        val firstKeyIsUpper = firstKey.forall(_.isUpper)\n        val firstKeyIsLower\
    \ = firstKey.forall(_.isLower)\n        if (firstKeyIsUpper) {\n            keys.forall(_.forall(_.isUpper))\n\
    \        } else if (firstKeyIsLower) {\n            keys.forall(_.forall(_.isLower))\n\
    \        } else {\n            false\n        }", "        // Fill in the code\
    \ here\n        var lower = true\n        var upper = true\n        for ((k,v)\
    \ <- dict) {\n            if (k.toLowerCase != k) lower = false\n            if\
    \ (k.toUpperCase != k) upper = false\n        }\n        return lower || upper",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for(key <- dict.keys) {\n            if(key.toLowerCase() != key)\
    \ lower = false\n            if(key.toUpperCase() != key) upper = false\n    \
    \    }\n        if(lower || upper) true else false", "        // Fill in the code\
    \ here\n        var lower = true\n        var upper = true\n        for ((k,v)\
    \ <- dict) {\n            if (k.toLowerCase() != k) lower = false\n          \
    \  if (k.toUpperCase() != k) upper = false\n        }\n        return lower ||\
    \ upper", "        // Fill in the code here\n        if (dict.isEmpty) {\n   \
    \         return false\n        }\n        val keys = dict.keys\n        val firstKey\
    \ = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n\
    \        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower)\
    \ {\n            return keys.forall(key => key.toLowerCase == key)\n        }\
    \ else if (firstKeyIsUpper) {\n            return keys.forall(key => key.toUpperCase\
    \ == key)\n        } else {\n            return false\n        }", "        //\
    \ Fill in the code here\n        if (dict.isEmpty) false\n        else {\n   \
    \         val keys = dict.keys.toList\n            val first = keys.head\n   \
    \         val firstIsUpper = first.toUpperCase == first\n            val isUpper\
    \ = keys.forall(x => x.toUpperCase == x)\n            val isLower = keys.forall(x\
    \ => x.toLowerCase == x)\n            isUpper || isLower\n        }", "      \
    \  // Fill in the code here\n        dict.keys.forall(_.toUpperCase == _) || dict.keys.forall(_.toLowerCase\
    \ == _)", "        // Fill in the code here\n        dict.keys.forall(x => x.toLowerCase\
    \ == x || x.toUpperCase == x)", "        // Fill in the code\n        false",
  "        // Fill in the code here\n        return true", "        // Fill in the\
    \ code here\n        var lower = true\n        var upper = true\n        for ((k,v)\
    \ <- dict) {\n            if (k.toLowerCase() != k) lower = false\n          \
    \  if (k.toUpperCase() != k) upper = false\n        }\n        return lower ||\
    \ upper", "        // Fill in the code here\n        var lower = true\n      \
    \  var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        if (lower || upper) true else false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val firstKey = keys.head\n\
    \        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     keys.forall(key => key.toLowerCase == key)\n        } else if (firstKeyIsUpper)\
    \ {\n            keys.forall(key => key.toUpperCase == key)\n        } else {\n\
    \            false\n        }", "        // Fill in the code here\n        if\
    \ (dict.isEmpty) {\n            return false\n        }\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) {\n                lower = false\n            }\n            if (k.toUpperCase()\
    \ != k) {\n                upper = false\n            }\n        }\n        return\
    \ lower || upper", "        // Fill in the code here\n        false", "      \
    \  // Your code here\n        return false", "        // Fill in the code here\n\
    \        dict.keys.forall(x => x.toLowerCase == x || x.toUpperCase == x)", " \
    \       // Fill in the code here\n        var lower = true\n        var upper\
    \ = true\n        for (k <- dict.keys) {\n            if (k.toLowerCase != k)\
    \ lower = false\n            if (k.toUpperCase != k) upper = false\n        }\n\
    \        return lower || upper", "        // Fill in the code here\n        val\
    \ keys = dict.keys\n        val lowerCase = keys.filter(x => x.toLowerCase ==\
    \ x)\n        val upperCase = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lowerCase.size == keys.size || upperCase.size == keys.size) true else false",
  "        // Fill in the code here\n        dict.keys.forall(_.toLowerCase == _)\
    \ || dict.keys.forall(_.toUpperCase == _)", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false", "   \
    \     val keys = dict.keys\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.size == keys.size || upper.size == keys.size) true else false", "   \
    \     // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for (key <- dict.keys) {\n            if (key.toLowerCase() !=\
    \ key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        lower || upper", "        // Your code here\n        return\
    \ false", "        if (dict.size == 0) false\n        else {\n            val\
    \ keys = dict.keys.toList\n            val lowerCaseKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n            val upperCaseKeys = keys.filter(x => x.toUpperCase == x)\n\
    \            if (lowerCaseKeys.size == keys.size || upperCaseKeys.size == keys.size)\
    \ true\n            else false\n        }", "        // Fill in the code here\n\
    \        if (dict.isEmpty) {\n            return false\n        }\n        var\
    \ lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n    \
    \        if (k.toLowerCase() != k) {\n                lower = false\n        \
    \    }\n            if (k.toUpperCase() != k) {\n                upper = false\n\
    \            }\n        }\n        return lower || upper", "        // Fill in\
    \ the code here\n        var lower = true\n        var upper = true\n        for\
    \ ((k,v) <- dict) {\n            if (k.toLowerCase != k) lower = false\n     \
    \       if (k.toUpperCase != k) upper = false\n        }\n        return lower\
    \ || upper", "        // Fill in the code here\n        var lowerCase = true\n\
    \        var upperCase = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) {\n                lowerCase = false\n            }\n            if (k.toUpperCase()\
    \ != k) {\n                upperCase = false\n            }\n        }\n     \
    \   return lowerCase || upperCase", "        // Fill in the code here\n      \
    \  var lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n\
    \            if (k.toLowerCase != k) lower = false\n            if (k.toUpperCase\
    \ != k) upper = false\n        }\n        return lower || upper", "        //\
    \ Fill in the code here\n        return false", "        // Fill in the code here\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        if (dict.size == 0) false\n      \
    \  else lower || upper", "        // Fill in the code here\n        var lower\
    \ = true\n        var upper = true\n        for (key <- dict.keys) {\n       \
    \     if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper", "        // Fill\
    \ in the code here\n        return false", "        // Fill in the code here\n\
    \        return false", "        // Fill in the code here\n        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys\n        val first = keys.head\n\
    \        val firstIsLower = first.toLowerCase == first\n        val firstIsUpper\
    \ = first.toUpperCase == first\n        if (firstIsLower) {\n            keys.forall(k\
    \ => k.toLowerCase == k)\n        } else if (firstIsUpper) {\n            keys.forall(k\
    \ => k.toUpperCase == k)\n        } else {\n            false\n        }", " \
    \       if (dict.isEmpty) return false\n        val keys = dict.keys\n       \
    \ val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val lowerKeys = keys.filter(x => x.toLowerCase == x)\n        val upperKeys\
    \ = keys.filter(x => x.toUpperCase == x)\n        if (lowerKeys.size == keys.size\
    \ || upperKeys.size == keys.size) true else false", "        if (dict.isEmpty)\
    \ return false\n        var lower = true\n        var upper = true\n        for\
    \ (key <- dict.keys) {\n            if (key.toLowerCase != key) lower = false\n\
    \            if (key.toUpperCase != key) upper = false\n        }\n        return\
    \ lower || upper", "        // Fill in the code here\n        return false", " \
    \       // Fill in the code here\n        var upper = true\n        var lower\
    \ = true\n        for (key <- dict.keys) {\n            if (key.toUpperCase !=\
    \ key) {\n                upper = false\n            }\n            if (key.toLowerCase\
    \ != key) {\n                lower = false\n            }\n        }\n       \
    \ if (upper || lower) {\n            return true\n        }\n        return false",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for (key <- dict.keys) {\n            if (key.toLowerCase != key)\
    \ {\n                lower = false\n            }\n            if (key.toUpperCase\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ if (lower || upper) {\n            return true\n        }\n        return false",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase != k) lower\
    \ = false\n            if (k.toUpperCase != k) upper = false\n        }\n    \
    \    if (lower || upper) true else false", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerCaseKeys.length == keys.length || upperCaseKeys.length\
    \ == keys.length) true else false", "        // Fill in the code here\n      \
    \  var lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n\
    \            if (k.toLowerCase != k) lower = false\n            if (k.toUpperCase\
    \ != k) upper = false\n        }\n        return lower || upper", "        //\
    \ Fill in the code here\n        return false", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val firstKey = keys.head\n\
    \        val firstKeyUpper = firstKey.toUpperCase\n        val firstKeyLower =\
    \ firstKey.toLowerCase\n        if (firstKeyUpper == firstKeyLower) return false\n\
    \        val isUpper = firstKey == firstKeyUpper\n        val isLower = firstKey\
    \ == firstKeyLower\n        if (isUpper) {\n            for (key <- keys) {\n\
    \                if (key != key.toUpperCase) return false\n            }\n   \
    \     } else if (isLower) {\n            for (key <- keys) {\n               \
    \ if (key != key.toLowerCase) return false\n            }\n        } else {\n\
    \            return false\n        }\n        return true", "        // TODO:\
    \ Implement this function\n        var lower = true\n        var upper = true\n\
    \        for (key <- dict.keys) {\n            if (key.toLowerCase() != key) lower\
    \ = false\n            if (key.toUpperCase() != key) upper = false\n        }\n\
    \        return lower || upper", "        // TODO: Implement this function\n \
    \       return false", "        // TODO: Implement this function\n        return\
    \ true", "        if (dict.isEmpty) return false\n        val firstKey = dict.keys.head\n\
    \        if (firstKey.forall(_.isUpper)) dict.keys.forall(_.forall(_.isUpper))\n\
    \        else dict.keys.forall(_.forall(_.isLower))", "        // Your code here\n\
    \        return false", "        // Fill in the code here\n        var lower =\
    \ true\n        var upper = true\n        for ((k,v) <- dict) {\n            if\
    \ (k.toLowerCase != k) lower = false\n            if (k.toUpperCase != k) upper\
    \ = false\n        }\n        lower || upper", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerCaseKeys.length == keys.length || upperCaseKeys.length\
    \ == keys.length) true else false", "        // Your code here\n        var lower\
    \ = true\n        var upper = true\n        for (key <- dict.keys) {\n       \
    \     if (key.toLowerCase() != key) {\n                lower = false\n       \
    \     }\n            if (key.toUpperCase() != key) {\n                upper =\
    \ false\n            }\n        }\n        return lower || upper", "        //\
    \ Fill in the code here\n        var lower = true\n        var upper = true\n\
    \        for ((k,v) <- dict) {\n            if (k.toLowerCase() != k) lower =\
    \ false\n            if (k.toUpperCase() != k) upper = false\n        }\n    \
    \    return lower || upper", "        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toUpperCase == x || x.toLowerCase == x)", "        // Fill in the code\
    \ here\n        dict.keys.forall(x => x.toLowerCase == x) || dict.keys.forall(x\
    \ => x.toUpperCase == x)", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upper = keys.forall(x => x.toUpperCase == x)\n        return\
    \ lower || upper", "        if (dict.size == 0) return false\n        val keys\
    \ = dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase == x)\n\
    \        val upper = keys.forall(x => x.toUpperCase == x)\n        return lower\
    \ || upper", "        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for (key <- dict.keys) {\n            if (key.toLowerCase() !=\
    \ key) {\n                lower = false\n            }\n            if (key.toUpperCase()\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ return lower || upper", "        // Your code here\n        return false", " \
    \       // Your code here\n        return false", "        // Fill in the code\
    \ here\n        var lower = true\n        var upper = true\n        for ((k,v)\
    \ <- dict) {\n            if (k.toLowerCase != k) lower = false\n            if\
    \ (k.toUpperCase != k) upper = false\n        }\n        return lower || upper",
  "        // Fill in the code\n        var lower = true\n        var upper = true\n\
    \        for ((k,v) <- dict) {\n            if (k.toLowerCase() != k) lower =\
    \ false\n            if (k.toUpperCase() != k) upper = false\n        }\n    \
    \    lower || upper", "        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        dict.keys.foreach(x => if(x.toLowerCase !=\
    \ x) lower = false)\n        dict.keys.foreach(x => if(x.toUpperCase != x) upper\
    \ = false)\n        if(lower || upper) true else false", "        // Fill in the\
    \ code here\n        return false", "        if (dict.isEmpty) return false\n\
    \        val keys = dict.keys.toList\n        val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n        val upper = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lower.length == keys.length || upper.length == keys.length) true else false",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase != k) lower\
    \ = false\n            if (k.toUpperCase != k) upper = false\n        }\n    \
    \    lower || upper", "        // Fill in the code here\n        return false",
  "        if (dict.isEmpty) false\n        else {\n            val keys = dict.keys.toList\n\
    \            val lowerCase = keys.forall(x => x.toLowerCase == x)\n          \
    \  val upperCase = keys.forall(x => x.toUpperCase == x)\n            lowerCase\
    \ || upperCase\n        }", "        // Fill in the code here\n        var lower\
    \ = true\n        var upper = true\n        for ((k,v) <- dict) {\n          \
    \  if (k.toLowerCase() != k) lower = false\n            if (k.toUpperCase() !=\
    \ k) upper = false\n        }\n        return lower || upper", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lowerCaseKeys\
    \ = keys.filter(key => key.toLowerCase == key)\n        val upperCaseKeys = keys.filter(key\
    \ => key.toUpperCase == key)\n        if (lowerCaseKeys.length == keys.length\
    \ || upperCaseKeys.length == keys.length) true else false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.length == keys.length || upper.length == keys.length)\
    \ true else false", "        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        if (lower || upper) true else false", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val lowerCase = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upperCase = keys.filter(x => x.toUpperCase\
    \ == x)\n        if (lowerCase.size == keys.size || upperCase.size == keys.size)\
    \ true else false", "        // Fill in the code here\n        if (dict.size ==\
    \ 0) {\n            return false\n        }\n        var isLower = true\n    \
    \    var isUpper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) {\n                isLower = false\n            }\n            if (k.toUpperCase()\
    \ != k) {\n                isUpper = false\n            }\n        }\n       \
    \ return isLower || isUpper", "        // Fill in the code here\n        var lower\
    \ = true\n        var upper = true\n        for (k <- dict.keys) {\n         \
    \   lower = lower && k.toLowerCase == k\n            upper = upper && k.toUpperCase\
    \ == k\n        }\n        lower || upper", "        // Fill in the code here\n\
    \        var lower = true\n        var upper = true\n        for ((k,v) <- dict)\
    \ {\n            if (k.toLowerCase() != k) lower = false\n            if (k.toUpperCase()\
    \ != k) upper = false\n        }\n        lower || upper", "        // Fill in\
    \ the code here\n        var lower = true\n        var upper = true\n        for\
    \ ((k,v) <- dict) {\n            if (k.toLowerCase != k) lower = false\n     \
    \       if (k.toUpperCase != k) upper = false\n        }\n        lower || upper",
  "        if (dict.isEmpty) false\n        else {\n            val keys = dict.keys\n\
    \            val firstKey = keys.head\n            if (firstKey.exists(_.isUpper))\
    \ {\n                keys.forall(_.forall(_.isUpper))\n            } else {\n\
    \                keys.forall(_.forall(_.isLower))\n            }\n        }",
  "        // Fill in the code here\n        dict.keys.forall(x => x.toUpperCase ==\
    \ x) || dict.keys.forall(x => x.toLowerCase == x)", "        // Fill in the code\
    \ here\n        var lower = true\n        var upper = true\n        for ((k,v)\
    \ <- dict) {\n            if (k.toLowerCase() != k) lower = false\n          \
    \  if (k.toUpperCase() != k) upper = false\n        }\n        return lower ||\
    \ upper", "        if (dict.size == 0) return false\n        val keys = dict.keys.toList\n\
    \        val lowerCaseKeys = keys.filter(key => key.toLowerCase == key)\n    \
    \    val upperCaseKeys = keys.filter(key => key.toUpperCase == key)\n        if\
    \ (lowerCaseKeys.size == keys.size || upperCaseKeys.size == keys.size) return\
    \ true\n        return false", "        if (dict.isEmpty) return false\n     \
    \   val keys = dict.keys.toList\n        val lowerCase = keys.forall(x => x.toLowerCase\
    \ == x)\n        val upperCase = keys.forall(x => x.toUpperCase == x)\n      \
    \  lowerCase || upperCase", "        // Fill in the code here\n        var lower\
    \ = true\n        var upper = true\n        for (key <- dict.keys) {\n       \
    \     if (!key.toLowerCase.equals(key)) {\n                lower = false\n   \
    \         }\n            if (!key.toUpperCase.equals(key)) {\n               \
    \ upper = false\n            }\n        }\n        lower || upper", "        //\
    \ Fill in the code here\n        return true", "        // Fill in the code here\n\
    \        dict.keys.forall(_.toUpperCase == _) || dict.keys.forall(_.toLowerCase\
    \ == _)", "        // Your code here\n        false", "        // Fill in the\
    \ code here\n        var lower = true\n        var upper = true\n        for (key\
    \ <- dict.keys) {\n            if (key.toLowerCase != key) lower = false\n   \
    \         if (key.toUpperCase != key) upper = false\n        }\n        return\
    \ lower || upper", "        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        lower || upper", "        // Fill in the code here\n     \
    \   if (dict.isEmpty) false\n        else {\n            val keys = dict.keys.toList\n\
    \            val lower = keys.filter(x => x.toLowerCase == x)\n            val\
    \ upper = keys.filter(x => x.toUpperCase == x)\n            if (lower.length ==\
    \ keys.length || upper.length == keys.length) true\n            else false\n \
    \       }", "        if (dict.isEmpty) false\n        else {\n            val\
    \ keys = dict.keys.toList\n            val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n            val upper = keys.forall(x => x.toUpperCase == x)\n      \
    \      lower || upper\n        }", "        // Fill in the code here\n       \
    \ var lower = true\n        var upper = true\n        for (key <- dict.keys) {\n\
    \            if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper", "        // Fill\
    \ in the code here\n        var lowerCase = true\n        var upperCase = true\n\
    \        for (key <- dict.keys) {\n            if (key.toLowerCase() != key) lowerCase\
    \ = false\n            if (key.toUpperCase() != key) upperCase = false\n     \
    \   }\n        return lowerCase || upperCase", "        // Fill in the code here\n\
    \        var lower = true\n        var upper = true\n        for ((k,v) <- dict)\
    \ {\n            if (k.toLowerCase() != k) lower = false\n            if (k.toUpperCase()\
    \ != k) upper = false\n        }\n        if (lower || upper) true else false",
  "        // TODO: Implement this method\n        return false", "        // Fill\
    \ in the code here\n        if (dict.isEmpty) {\n            return false\n  \
    \      }\n        val keys = dict.keys\n        val lowerKeys = keys.filter(_.forall(_.isLower))\n\
    \        val upperKeys = keys.filter(_.forall(_.isUpper))\n        if (lowerKeys.size\
    \ == keys.size || upperKeys.size == keys.size) {\n            return true\n  \
    \      }\n        return false", "        // Fill in the code here\n        var\
    \ lowerCase = true\n        var upperCase = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase == key) {\n                upperCase = false\n\
    \            } else if (key.toUpperCase == key) {\n                lowerCase =\
    \ false\n            } else {\n                return false\n            }\n \
    \       }\n        return lowerCase || upperCase", "        if (dict.isEmpty)\
    \ return false\n        val keys = dict.keys.toList\n        val firstKey = keys.head\n\
    \        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        if (firstKeyIsUpper) {\n       \
    \     keys.forall(key => key.toUpperCase == key)\n        } else if (firstKeyIsLower)\
    \ {\n            keys.forall(key => key.toLowerCase == key)\n        } else {\n\
    \            false\n        }", "        // Fill in the code here\n        dict.keys.forall(_.toUpperCase\
    \ == _) || dict.keys.forall(_.toLowerCase == _)", "        // Fill in the code\
    \ here\n        var lower = true\n        var upper = true\n        for (key <-\
    \ dict.keys) {\n            if (key.toLowerCase != key) lower = false\n      \
    \      if (key.toUpperCase != key) upper = false\n        }\n        lower ||\
    \ upper", "        // Fill in the code here\n        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val lower\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lower.size == keys.size || upper.size\
    \ == keys.size) true\n            else false\n        }", "        // Fill in\
    \ the code here\n        var lower = true\n        var upper = true\n        for\
    \ ((k,v) <- dict) {\n            if (k.toLowerCase != k) lower = false\n     \
    \       if (k.toUpperCase != k) upper = false\n        }\n        return lower\
    \ || upper", "        // Fill in the code here\n        if (dict.isEmpty) {\n\
    \            return false\n        }\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        if (firstKey.toLowerCase == firstKey) {\n    \
    \        for (key <- keys) {\n                if (key.toLowerCase != key) {\n\
    \                    return false\n                }\n            }\n        }\
    \ else {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) {\n                    return false\n                }\n           \
    \ }\n        }\n        return true", "        // Fill in the code here\n    \
    \    dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase ==\
    \ _)", "        // Your code here\n        return false", "        // TODO: Implement\
    \ this function\n        return false", "        // Fill in the code here\n  \
    \      var lower = true\n        var upper = true\n        for ((k,v) <- dict)\
    \ {\n            if (k.toLowerCase != k) lower = false\n            if (k.toUpperCase\
    \ != k) upper = false\n        }\n        return lower || upper", "        //\
    \ Fill in the code here\n        var lower = true\n        var upper = true\n\
    \        for (key <- dict.keys) {\n            if (key.toLowerCase != key) lower\
    \ = false\n            if (key.toUpperCase != key) upper = false\n        }\n\
    \        lower || upper", "        // Fill Up this function body\n        // `dict`\
    \ is a dictionary of type Map[String,String]\n        // `dict.keys` is a collection\
    \ of type Iterable[String]\n        // `dict.keys.forall(x => x.isUpper)` is a\
    \ boolean expression\n        // `dict.keys.forall(x => x.isLower)` is a boolean\
    \ expression\n        // `dict.isEmpty` is a boolean expression\n        // `dict.keys.forall(x\
    \ => x.isUpper) || dict.keys.forall(x => x.isLower)` is a boolean expression\n\
    \        // `dict.keys.forall(x => x.isUpper) || dict.keys.forall(x => x.isLower)\
    \ || dict.isEmpty` is a boolean expression\n        dict.keys.forall(x => x.isUpper)\
    \ || dict.keys.forall(x => x.isLower) || dict.isEmpty", "        // Fill in the\
    \ code here\n        if (dict.isEmpty) false\n        else {\n            val\
    \ keys = dict.keys.toList\n            val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n            val upper = keys.filter(x => x.toUpperCase == x)\n      \
    \      if (lower.length == keys.length || upper.length == keys.length) true\n\
    \            else false\n        }", "        if (dict.isEmpty) false\n      \
    \  else {\n            val keys = dict.keys.toList\n            val lower = keys.filter(_.forall(_.isLower))\n\
    \            val upper = keys.filter(_.forall(_.isUpper))\n            if (lower.size\
    \ == keys.size || upper.size == keys.size) true\n            else false\n    \
    \    }", "        // Fill in the code here\n        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val lower\
    \ = keys.forall(x => x.toLowerCase == x)\n            val upper = keys.forall(x\
    \ => x.toUpperCase == x)\n            lower || upper\n        }", "        //\
    \ Fill in the code here\n        return false", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val first = keys.head\n\
    \        if (first.forall(_.isUpper)) {\n            keys.forall(_.forall(_.isUpper))\n\
    \        } else if (first.forall(_.isLower)) {\n            keys.forall(_.forall(_.isLower))\n\
    \        } else {\n            false\n        }", "        // Your code here\n\
    \        return true", "        // Fill in the code here\n        var lower =\
    \ true\n        var upper = true\n        for (key <- dict.keys) {\n         \
    \   if (key.toLowerCase != key) {\n                lower = false\n           \
    \ }\n            if (key.toUpperCase != key) {\n                upper = false\n\
    \            }\n        }\n        if (lower || upper) {\n            return true\n\
    \        }\n        return false", "        // Fill in the code here\n       \
    \ var lower = true\n        var upper = true\n        for (key <- dict.keys) {\n\
    \            if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        return lower || upper", "        //\
    \ Fill in the code here\n        var isUpper = true\n        var isLower = true\n\
    \        for (key <- dict.keys) {\n            if (key.toUpperCase != key) isUpper\
    \ = false\n            if (key.toLowerCase != key) isLower = false\n        }\n\
    \        if (isUpper || isLower) true else false", "        // Fill Up this function\
    \ body\n        // `dict` is a map of type Map[String,String]\n        // `dict.keys`\
    \ is a collection of type Iterable[String]\n        // `dict.values` is a collection\
    \ of type Iterable[String]\n        // `dict.keys.toList` is a collection of type\
    \ List[String]\n        // `dict.values.toList` is a collection of type List[String]\n\
    \        // `dict.keys.toList(0)` is a String\n        // `dict.values.toList(0)`\
    \ is a String\n        // `dict.keys.toList.length` is an Int\n        // `dict.values.toList.length`\
    \ is an Int\n        // `dict.keys.toList.head` is a String\n        // `dict.values.toList.head`\
    \ is a String\n        // `dict.keys.toList.tail` is a List[String]\n        //\
    \ `dict.values.toList.tail` is a List[String]\n        // `dict.keys.toList.tail.head`\
    \ is a String\n        // `dict.values.toList.tail.head` is a String\n       \
    \ // `dict.keys.toList.tail.tail` is a List[String]\n        // `dict.values.toList.tail.tail`\
    \ is a List[String]\n        // `dict.keys.toList.tail.tail.head` is a String\n\
    \        // `dict.values.toList.tail.tail.head` is a String\n        // `dict.keys.toList.tail.tail.tail`\
    \ is a List[String]\n        // `dict.values.toList.tail.tail.tail` is a List[String]\n\
    \        // `dict.keys.toList.tail.tail.tail.head` is a String\n        // `dict.values.toList.tail.tail.tail.head`\
    \ is a String\n        // `dict.keys.toList.tail.tail.tail.tail` is a List[String]\n\
    \        // `dict.values.toList.tail.tail.tail.tail` is a List[String]\n     \
    \   // `dict.keys.toList.tail.tail.tail.", "        // Fill in the code here\n\
    \        dict.keys.forall(x => x.toLowerCase == x) || dict.keys.forall(x => x.toUpperCase\
    \ == x)", "        // Fill in the code here\n        var lower = true\n      \
    \  var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper", "        // Fill in the code here\n \
    \       var lower = true\n        var upper = true\n        for ((k,v) <- dict)\
    \ {\n            if (k.toLowerCase != k) lower = false\n            if (k.toUpperCase\
    \ != k) upper = false\n        }\n        lower || upper", "        // Fill in\
    \ the code here\n        var lower = true\n        var upper = true\n        for\
    \ (key <- dict.keys) {\n            if (key.toLowerCase != key) lower = false\n\
    \            if (key.toUpperCase != key) upper = false\n        }\n        lower\
    \ || upper", "        // Fill in the code here\n        var lowerCase = true\n\
    \        var upperCase = true\n        for (key <- dict.keys) {\n            if\
    \ (key.toLowerCase != key) lowerCase = false\n            if (key.toUpperCase\
    \ != key) upperCase = false\n        }\n        return lowerCase || upperCase",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase != k) lower\
    \ = false\n            if (k.toUpperCase != k) upper = false\n        }\n    \
    \    return lower || upper", "        // Fill Up this function body\n        //\
    \ `dict` is a Map of String to String\n        // `dict.keys` is a collection\
    \ of type Iterable[String]\n        // `dict.keys.toList` is a collection of type\
    \ List[String]\n        // `dict.keys.toList.map` is a method that takes a function\
    \ as a parameter\n        // `dict.keys.toList.map(x => x.toUpperCase)` is a collection\
    \ of type List[String]\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet`\
    \ is a collection of type Set[String]\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size`\
    \ is an integer\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size\
    \ == 1` is a boolean\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size\
    \ == 1 && dict.keys.toList.map(x => x.toUpperCase).toSet.head == dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.head.toUpperCase` is a boolean\n        // `dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.size == 1 && dict.keys.toList.map(x => x.toUpperCase).toSet.head\
    \ == dict.keys.toList.map(x => x.toUpperCase).toSet.head.toUpperCase || dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size == 1 && dict.keys.toList.map(x => x.toLowerCase).toSet.head\
    \ == dict.keys.toList.map(x => x.toLowerCase).toSet.head.toLowerCase` is a boolean\n\
    \        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1 && dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.head == dict.keys.toList.map(x => x", "        // TODO:\
    \ Implement this function\n        false", "        // Fill in the code here\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        if (lower || upper) true else false",
  "        // Fill in the code here\n        dict.keys.forall(x => x.toLowerCase ==\
    \ x) || dict.keys.forall(x => x.toUpperCase == x)", "        // Fill in the code\
    \ here\n        var lower = true\n        var upper = true\n        for (i <-\
    \ dict.keys) {\n            if (i.toLowerCase() != i) lower = false\n        \
    \    if (i.toUpperCase() != i) upper = false\n        }\n        return lower\
    \ || upper", "        // Fill in the code here\n        var lower = true\n   \
    \     var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return (lower || upper)", "        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val lower\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lower.length == keys.length || upper.length\
    \ == keys.length) true\n            else false\n        }", "        // TODO:\
    \ Implement this function\n        return false", "        // Your code here\n\
    \        return false", "        // Fill in the code here\n        return false",
  "        if (dict.isEmpty) return false\n        val isLower = dict.keys.head.toLowerCase\
    \ == dict.keys.head\n        dict.keys.forall(k => (k.toLowerCase == k) == isLower)",
  "        // Fill in the code here\n        var lower = true\n        var upper =\
    \ true\n        for (key <- dict.keys) {\n            lower = lower && key.toLowerCase\
    \ == key\n            upper = upper && key.toUpperCase == key\n        }\n   \
    \     lower || upper", "        // Fill in the code here\n        var lower =\
    \ true\n        var upper = true\n        for (key <- dict.keys) {\n         \
    \   if (key.toLowerCase != key) lower = false\n            if (key.toUpperCase\
    \ != key) upper = false\n        }\n        return lower || upper", "        //\
    \ Fill Up this function body\n        // `dict` is a dictionary of type Map[String,String]\n\
    \        // `dict.keys` is a collection of type Iterable[String]\n        // `dict.keys.toList`\
    \ is a collection of type List[String]\n        // `dict.keys.toList.map(x =>\
    \ x.toUpperCase)` is a collection of type List[String]\n        // `dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet` is a collection of type Set[String]\n        // `dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.size` is an integer\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size` is an integer\n        // `dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.size == 1` is a boolean\n        // `dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size == 1` is a boolean\n        // `dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.size == 1 || dict.keys.toList.map(x => x.toLowerCase).toSet.size\
    \ == 1` is a boolean\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size\
    \ == 1 || dict.keys.toList.map(x => x.toLowerCase).toSet.size == 1 && dict.size\
    \ > 0` is a boolean\n        dict.keys.toList.map(x => x.toUpperCase).toSet.size\
    \ == 1 || dict.keys.toList.map(x => x.toLowerCase).toSet.size == 1 && dict.size\
    \ > 0", "        // Fill in the code here\n        if (dict.isEmpty) false\n \
    \       else {\n            val keys = dict.keys.toList\n            val lowerCase\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upperCase = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lowerCase.length == keys.length || upperCase.length\
    \ == keys.length) true\n            else false\n        }", "        // Fill in\
    \ the code here\n        return false", "        // Fill in the code here\n  \
    \      var lower = true\n        var upper = true\n        for ((k,v) <- dict)\
    \ {\n            if (k.toLowerCase != k) lower = false\n            if (k.toUpperCase\
    \ != k) upper = false\n        }\n        lower || upper", "        // Fill in\
    \ the code here\n        return false", "        // Fill in the code here\n  \
    \      var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper", "        // Fill\
    \ in the code here\n        var lower = true\n        var upper = true\n     \
    \   for ((k,v) <- dict) {\n            if (k.toLowerCase != k) lower = false\n\
    \            if (k.toUpperCase != k) upper = false\n        }\n        lower ||\
    \ upper", "        var lowerCase = true\n        var upperCase = true\n      \
    \  for (key <- dict.keys) {\n            if (key.toLowerCase != key) lowerCase\
    \ = false\n            if (key.toUpperCase != key) upperCase = false\n       \
    \ }\n        return lowerCase || upperCase", "        // Fill in the code here\n\
    \        var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper"]
stop_tokens:
- "\n    }\n"
