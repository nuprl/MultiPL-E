name: HumanEval_95_check_dict_case
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a dictionary, return True if all keys are strings in lower \n    //\
  \ case or all keys are strings in upper case, else return False.\n    // The function\
  \ should return False is the given dictionary is empty.\n    // Examples:\n    //\
  \ >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"banana\"\
  )))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\"\
  , \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  a\" -> \"apple\", 8l -> \"banana\", \"a\" -> \"apple\")))\n    // (false)\n    //\
  \ >>> checkDictCase((Map[String,String](\"Name\" -> \"John\", \"Age\" -> \"36\"\
  , \"City\" -> \"Houston\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
  STATE\" -> \"NC\", \"ZIP\" -> \"12345\")))\n    // (true)\n    def checkDictCase(dict\
  \ : Map[String,String]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
  p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
  banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
  Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
  \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" -> \"\
  12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\" ->\
  \ \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        // Fill in the code here\n        var lower = true\n      \
    \  var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) {\n                lower = false\n            }\n            if (key.toUpperCase()\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ return lower || upper", "        if (dict.isEmpty) return false\n        val\
    \ keys = dict.keys\n        val firstKey = keys.head\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        if (firstKeyIsLower) {\n            keys.forall(key =>\
    \ key.toLowerCase == key)\n        } else if (firstKeyIsUpper) {\n           \
    \ keys.forall(key => key.toUpperCase == key)\n        } else {\n            false\n\
    \        }", "        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.length == keys.length\
    \ || upper.length == keys.length) true else false", "        // Fill in the code\
    \ here\n        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n\
    \        val firstKeyLower = firstKey.toLowerCase\n        if (firstKey == firstKeyUpper)\
    \ {\n            for (key <- keys) {\n                if (key != key.toUpperCase)\
    \ return false\n            }\n        } else if (firstKey == firstKeyLower) {\n\
    \            for (key <- keys) {\n                if (key != key.toLowerCase)\
    \ return false\n            }\n        } else {\n            return false\n  \
    \      }\n        return true", "        // Fill in the code here\n        dict.keys.forall(_.toLowerCase\
    \ == _) || dict.keys.forall(_.toUpperCase == _)", "        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower || firstKeyIsUpper)\
    \ {\n            keys.tail.forall(key => {\n                if (firstKeyIsLower)\
    \ key.toLowerCase == key\n                else key.toUpperCase == key\n      \
    \      })\n        } else false", "        // Fill in the code here\n        var\
    \ upper = true\n        var lower = true\n        for (x <- dict.keys) {\n   \
    \         if (x.toUpperCase() != x) {\n                upper = false\n       \
    \     }\n            if (x.toLowerCase() != x) {\n                lower = false\n\
    \            }\n        }\n        if (upper || lower) {\n            return true\n\
    \        }\n        return false", "        // Fill in the code here\n       \
    \ if (dict.size == 0) false\n        else {\n            var isLower = true\n\
    \            var isUpper = true\n            for ((k, v) <- dict) {\n        \
    \        if (k.toLowerCase() != k) isLower = false\n                if (k.toUpperCase()\
    \ != k) isUpper = false\n            }\n            isLower || isUpper\n     \
    \   }", "        // Fill in the code here\n        var lower = true\n        var\
    \ upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        if (lower || upper) true else false", "        if (dict.isEmpty)\
    \ return false\n        val lower = dict.keys.forall(x => x.toLowerCase == x)\n\
    \        val upper = dict.keys.forall(x => x.toUpperCase == x)\n        lower\
    \ || upper", "        // Fill in the code here\n        var lower = true\n   \
    \     var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        lower || upper", "        // Fill in the code here\n      \
    \  var lower = true\n        var upper = true\n        for (key <- dict.keys)\
    \ {\n            if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        if (lower || upper) true else false",
  "        // TODO: Implement this function\n        return false", "        // Fill\
    \ in the code here\n        if (dict.isEmpty) return false\n        val keys =\
    \ dict.keys\n        val lowerKeys = keys.filter(_.toLowerCase == _)\n       \
    \ val upperKeys = keys.filter(_.toUpperCase == _)\n        if (lowerKeys.size\
    \ == keys.size || upperKeys.size == keys.size) true else false", "        // Fill\
    \ in the code here\n        var lower = true\n        var upper = true\n     \
    \   for (key <- dict.keys) {\n            if (key.toLowerCase() != key) lower\
    \ = false\n            if (key.toUpperCase() != key) upper = false\n        }\n\
    \        if (lower || upper) true else false", "        // Fill in the code here\n\
    \        if (dict.isEmpty) return false\n        val keys = dict.keys\n      \
    \  val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            for (key <- keys) {\n           \
    \     if (key.toLowerCase != key) return false\n            }\n        } else\
    \ if (firstKeyIsUpper) {\n            for (key <- keys) {\n                if\
    \ (key.toUpperCase != key) return false\n            }\n        } else {\n   \
    \         return false\n        }\n        return true", "        // TODO: Implement\
    \ this function\n        return false", "        // Fill in the code here\n  \
    \      return true", "        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        lower || upper", "        // Fill in the code here\n        var\
    \ lower = true\n        var upper = true\n        for ((k,v) <- dict) {\n    \
    \        if (k.toLowerCase != k) lower = false\n            if (k.toUpperCase\
    \ != k) upper = false\n        }\n        if (lower || upper) true else false"]
stop_tokens:
- "\n    }\n"
