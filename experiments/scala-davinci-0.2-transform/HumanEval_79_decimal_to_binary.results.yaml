language: scala
name: HumanEval_79_decimal_to_binary
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var n = decimal\n        while (n > 0) {\n            binary =\
    \ (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphpqxstk.scala:24)\n\tat Problem.main(tmpphpqxstk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"db\"\n        var n = decimal\n        while (n > 0) {\n            binary\
    \ += (n % 2).toString\n            n /= 2\n        }\n        binary += \"db\"\
    \n        binary.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9bj8_rxc.scala:25)\n\tat Problem.main(tmp9bj8_rxc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"db\"\n        var temp = decimal\n        while (temp > 0) {\n           \
    \ binary += (temp % 2).toString\n            temp /= 2\n        }\n        binary\
    \ += \"db\"\n        binary.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9dg_30u.scala:25)\n\tat Problem.main(tmps9dg_30u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        // Your code\
    \ here\n        \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptfgls7j3.scala:19)\n\tat Problem.main(tmptfgls7j3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hnpvmnl.scala:26)\n\tat Problem.main(tmp9hnpvmnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var n = decimal\n        while (n > 0) {\n            binary =\
    \ (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphpqxstk.scala:24)\n\tat Problem.main(tmpphpqxstk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var remainder = decimal\n        while (remainder\
    \ > 0) {\n            binary.append(remainder % 2)\n            remainder /= 2\n\
    \        }\n        binary.append(\"db\").reverse.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n\
    \    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
    db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp84hn_his.scala:24)\n\tat Problem.main(tmp84hn_his.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var temp = decimal\n        while (temp > 0) {\n            binary\
    \ = (temp % 2).toString + binary\n            temp /= 2\n        }\n        \"\
    db\" + binary + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv91skt3s.scala:24)\n\tat Problem.main(tmpv91skt3s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hnpvmnl.scala:26)\n\tat Problem.main(tmp9hnpvmnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var num = decimal\n        while (num > 0) {\n            binary\
    \ = (num % 2).toString + binary\n            num /= 2\n        }\n        \"db\"\
    \ + binary + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiwbianxd.scala:24)\n\tat Problem.main(tmpiwbianxd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val s = \"db\"\
    \ + decimal.toBinaryString + \"db\"\n        s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hnpvmnl.scala:26)\n\tat Problem.main(tmp9hnpvmnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"db\"\n        var n = decimal\n        while (n > 0) {\n            binary\
    \ += (n % 2).toString\n            n /= 2\n        }\n        binary += \"db\"\
    \n        binary.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9bj8_rxc.scala:25)\n\tat Problem.main(tmp9bj8_rxc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        return \"db\"\
    \ + decimal.toBinaryString + \"db\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"db\"\n        var remainder = decimal\n        while (remainder > 0) {\n \
    \           binary += (remainder % 2).toString\n            remainder /= 2\n \
    \       }\n        binary += \"db\"\n        binary.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n\
    \    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
    db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxpeoq1vq.scala:25)\n\tat Problem.main(tmpxpeoq1vq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var temp = decimal\n        while (temp >\
    \ 0) {\n            binary.append(temp % 2)\n            temp /= 2\n        }\n\
    \        binary.append(\"db\").reverse.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzh25ut3.scala:24)\n\tat Problem.main(tmppzh25ut3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hnpvmnl.scala:26)\n\tat Problem.main(tmp9hnpvmnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hnpvmnl.scala:26)\n\tat Problem.main(tmp9hnpvmnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"db\"\n        var num = decimal\n        while (num > 0) {\n            binary\
    \ += num % 2\n            num /= 2\n        }\n        binary += \"db\"\n    \
    \    binary.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4f2o3ew5.scala:25)\n\tat Problem.main(tmp4f2o3ew5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"db\"\n        var temp = decimal\n        while (temp > 0) {\n           \
    \ binary += (temp % 2).toString\n            temp /= 2\n        }\n        binary\
    \ += \"db\"\n        binary.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9dg_30u.scala:25)\n\tat Problem.main(tmps9dg_30u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var n = decimal\n        while (n > 0) {\n            binary =\
    \ (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphpqxstk.scala:24)\n\tat Problem.main(tmpphpqxstk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val sb = new\
    \ StringBuilder\n        sb.append(\"db\")\n        var n = decimal\n        while\
    \ (n > 0) {\n            sb.append(n % 2)\n            n /= 2\n        }\n   \
    \     sb.append(\"db\")\n        sb.reverse.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n\
    \    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
    db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpccvxvxgj.scala:26)\n\tat Problem.main(tmpccvxvxgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val s = new StringBuilder(\"\
    db\")\n        var n = decimal\n        while (n > 0) {\n            s.append(n\
    \ % 2)\n            n /= 2\n        }\n        s.append(\"db\").reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4g9c__s7.scala:24)\n\tat Problem.main(tmp4g9c__s7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var n = decimal\n        while (n != 0) {\n            binary\
    \ = (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" +\
    \ binary + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3o_f77wz.scala:24)\n\tat Problem.main(tmp3o_f77wz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798252
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val sb = new\
    \ StringBuilder\n        sb.append(\"db\")\n        var n = decimal\n        while\
    \ (n > 0) {\n            sb.append(n % 2)\n            n /= 2\n        }\n   \
    \     sb.append(\"db\")\n        sb.reverse.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n\
    \    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
    db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpccvxvxgj.scala:26)\n\tat Problem.main(tmpccvxvxgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        return \"db\"\
    \ + decimal.toBinaryString + \"db\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"db\"\n        var temp = decimal\n        while (temp > 0) {\n           \
    \ binary += (temp % 2).toString\n            temp /= 2\n        }\n        binary\
    \ += \"db\"\n        binary.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9dg_30u.scala:25)\n\tat Problem.main(tmps9dg_30u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var temp = decimal\n        while (temp >\
    \ 0) {\n            binary.append(temp % 2)\n            temp /= 2\n        }\n\
    \        binary.append(\"db\").reverse.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzh25ut3.scala:24)\n\tat Problem.main(tmppzh25ut3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var temp = decimal\n        while (temp > 0) {\n            binary\
    \ = (temp % 2).toString + binary\n            temp /= 2\n        }\n        \"\
    db\" + binary + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv91skt3s.scala:24)\n\tat Problem.main(tmpv91skt3s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var n = decimal\n        while (n > 0) {\n            binary =\
    \ (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphpqxstk.scala:24)\n\tat Problem.main(tmpphpqxstk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            val r = n % 2\n            binary.append(r)\n            n = n /\
    \ 2\n        }\n        binary.append(\"db\").toString.reverse\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\"\
    )));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
    db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw__n51n7.scala:25)\n\tat Problem.main(tmpw__n51n7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val sb = new\
    \ StringBuilder\n        sb.append(\"db\")\n        var n = decimal\n        while\
    \ (n > 0) {\n            sb.append(n % 2)\n            n /= 2\n        }\n   \
    \     sb.append(\"db\")\n        sb.reverse.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n\
    \    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
    db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpccvxvxgj.scala:26)\n\tat Problem.main(tmpccvxvxgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var number = decimal\n\
    \        while (number > 0) {\n            binary.append(number % 2)\n       \
    \     number /= 2\n        }\n        binary.append(\"db\")\n        binary.reverse.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ia6i_7w.scala:26)\n\tat Problem.main(tmp0ia6i_7w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"db\"\n        var temp = decimal\n        while (temp > 0) {\n           \
    \ binary += (temp % 2).toString\n            temp /= 2\n        }\n        binary\
    \ += \"db\"\n        binary.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9dg_30u.scala:25)\n\tat Problem.main(tmps9dg_30u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val s = \"db\"\
    \ + decimal.toBinaryString + \"db\"\n        s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var temp = decimal\n        while (temp >\
    \ 0) {\n            binary.append(temp % 2)\n            temp /= 2\n        }\n\
    \        binary.append(\"db\").reverse.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzh25ut3.scala:24)\n\tat Problem.main(tmppzh25ut3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"db\"\n        var num = decimal\n        while (num > 0) {\n            binary\
    \ += (num % 2).toString\n            num /= 2\n        }\n        binary += \"\
    db\"\n        binary.reverse\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnwo1_2ei.scala:25)\n\tat Problem.main(tmpnwo1_2ei.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"db\"\n        var temp = decimal\n        while (temp > 0) {\n           \
    \ binary += (temp % 2).toString\n            temp /= 2\n        }\n        binary\
    \ += \"db\"\n        binary.reverse\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps9dg_30u.scala:25)\n\tat Problem.main(tmps9dg_30u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n != 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcj_20zyp.scala:24)\n\tat Problem.main(tmpcj_20zyp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.reverse.append(\"db\").toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n\
    \    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
    db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpna_zsrqc.scala:25)\n\tat Problem.main(tmpna_zsrqc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var num = decimal\n        while (num > 0) {\n            binary\
    \ = (num % 2).toString + binary\n            num /= 2\n        }\n        \"db\"\
    \ + binary + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiwbianxd.scala:24)\n\tat Problem.main(tmpiwbianxd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val sb = new\
    \ StringBuilder\n        sb.append(\"db\")\n        var n = decimal\n        while\
    \ (n > 0) {\n            sb.append(n % 2)\n            n /= 2\n        }\n   \
    \     sb.append(\"db\")\n        sb.reverse.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n\
    \    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
    db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpccvxvxgj.scala:26)\n\tat Problem.main(tmpccvxvxgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var result =\
    \ \"db\"\n        var temp = decimal\n        while (temp > 0) {\n           \
    \ result = (temp % 2).toString + result\n            temp /= 2\n        }\n  \
    \      result += \"db\"\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3gj32pu4.scala:25)\n\tat Problem.main(tmp3gj32pu4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var n = decimal\n        while (n > 0) {\n\
    \            binary.append(n % 2)\n            n /= 2\n        }\n        binary.append(\"\
    db\").reverse.toString\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4utvs08y.scala:24)\n\tat Problem.main(tmp4utvs08y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798164
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var result =\
    \ \"db\"\n        var temp = decimal\n        while (temp > 0) {\n           \
    \ result = (temp % 2).toString + result\n            temp /= 2\n        }\n  \
    \      result += \"db\"\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3gj32pu4.scala:25)\n\tat Problem.main(tmp3gj32pu4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798253
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var n = decimal\n        while (n > 0) {\n            binary =\
    \ (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphpqxstk.scala:24)\n\tat Problem.main(tmpphpqxstk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hnpvmnl.scala:26)\n\tat Problem.main(tmp9hnpvmnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val sb = new\
    \ StringBuilder\n        sb.append(\"db\")\n        var n = decimal\n        while\
    \ (n > 0) {\n            sb.append(n % 2)\n            n /= 2\n        }\n   \
    \     sb.append(\"db\")\n        sb.reverse.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n\
    \    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
    db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpccvxvxgj.scala:26)\n\tat Problem.main(tmpccvxvxgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hnpvmnl.scala:26)\n\tat Problem.main(tmp9hnpvmnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var temp = decimal\n        while (temp > 0) {\n            binary\
    \ = (temp % 2).toString + binary\n            temp /= 2\n        }\n        \"\
    db\" + binary + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv91skt3s.scala:24)\n\tat Problem.main(tmpv91skt3s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val s = \"db\"\
    \ + decimal.toBinaryString + \"db\"\n        s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798167
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var n = decimal\n        while (n > 0) {\n            binary =\
    \ (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphpqxstk.scala:24)\n\tat Problem.main(tmpphpqxstk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val sb = new\
    \ StringBuilder\n        sb.append(\"db\")\n        var n = decimal\n        while\
    \ (n > 0) {\n            sb.append(n % 2)\n            n /= 2\n        }\n   \
    \     sb.append(\"db\")\n        sb.reverse.toString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n\
    \    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"\
    db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpccvxvxgj.scala:26)\n\tat Problem.main(tmpccvxvxgj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        var binary =\
    \ \"\"\n        var n = decimal\n        while (n > 0) {\n            binary =\
    \ (n % 2).toString + binary\n            n /= 2\n        }\n        \"db\" + binary\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpphpqxstk.scala:24)\n\tat Problem.main(tmpphpqxstk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hnpvmnl.scala:26)\n\tat Problem.main(tmp9hnpvmnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder\n        binary.append(\"db\")\n        var n = decimal\n\
    \        while (n > 0) {\n            binary.append(n % 2)\n            n /= 2\n\
    \        }\n        binary.append(\"db\")\n        binary.reverse.toString\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9hnpvmnl.scala:26)\n\tat Problem.main(tmp9hnpvmnl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        val binary =\
    \ new StringBuilder(\"db\")\n        var temp = decimal\n        while (temp >\
    \ 0) {\n            binary.append(temp % 2)\n            temp /= 2\n        }\n\
    \        binary.append(\"db\").reverse.toString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(decimalToBinary((0l)).equals((\"db0db\")));\n    assert(decimalToBinary((32l)).equals((\"\
    db100000db\")));\n    assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n\
    \    assert(decimalToBinary((15l)).equals((\"db1111db\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppzh25ut3.scala:24)\n\tat Problem.main(tmppzh25ut3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a number in decimal form and your task is to convert\
    \ it to\n    // binary format. The function should return a string, with each\
    \ character representing a binary\n    // number. Each character in the string\
    \ will be '0' or '1'.\n    // There will be an extra couple of characters 'db'\
    \ at the beginning and at the end of the string.\n    // The extra characters\
    \ are there to help with the format.\n    // Examples:\n    // >>> decimalToBinary((15l))\n\
    \    // (\"db1111db\")\n    // >>> decimalToBinary((32l))\n    // (\"db100000db\"\
    )\n    def decimalToBinary(decimal : Long) : String = {\n        \"db\" + decimal.toBinaryString\
    \ + \"db\"\n    }\n    def main(args: Array[String]) = {\n    assert(decimalToBinary((0l)).equals((\"\
    db0db\")));\n    assert(decimalToBinary((32l)).equals((\"db100000db\")));\n  \
    \  assert(decimalToBinary((103l)).equals((\"db1100111db\")));\n    assert(decimalToBinary((15l)).equals((\"\
    db1111db\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798163
