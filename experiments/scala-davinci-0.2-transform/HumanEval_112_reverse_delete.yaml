name: HumanEval_112_reverse_delete
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Task\n    // We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n    // then check if the\
  \ result string is palindrome.\n    // A string is called palindrome if it reads\
  \ the same backward as forward.\n    // You should return a tuple containing the\
  \ result string and True/False for the check.\n    // Example\n    // >>> reverseDelete((\"\
  abcde\"), (\"ae\"))\n    // ((\"bcd\", false))\n    // >>> reverseDelete((\"abcdef\"\
  ), (\"b\"))\n    // ((\"acdef\", false))\n    // >>> reverseDelete((\"abcdedcba\"\
  ), (\"ab\"))\n    // ((\"cdedc\", true))\n    def reverseDelete(s : String, c :\
  \ String) : Tuple2[String, Boolean] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(reverseDelete((\"\
  abcde\"), (\"ae\")).equals(((\"bcd\", false))));\n    assert(reverseDelete((\"abcdef\"\
  ), (\"b\")).equals(((\"acdef\", false))));\n    assert(reverseDelete((\"abcdedcba\"\
  ), (\"ab\")).equals(((\"cdedc\", true))));\n    assert(reverseDelete((\"dwik\"),\
  \ (\"w\")).equals(((\"dik\", false))));\n    assert(reverseDelete((\"a\"), (\"a\"\
  )).equals(((\"\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"\")).equals(((\"\
  abcdedcba\", true))));\n    assert(reverseDelete((\"abcdedcba\"), (\"v\")).equals(((\"\
  abcdedcba\", true))));\n    assert(reverseDelete((\"vabba\"), (\"v\")).equals(((\"\
  abba\", true))));\n    assert(reverseDelete((\"mamma\"), (\"mia\")).equals(((\"\"\
  , true))));\n    }\n\n}\n"
completions: ["        // Write your code here\n        return (\"\", false)", " \
    \       var result = s\n        for (i <- 0 until c.length) {\n            result\
    \ = result.replaceAll(c(i).toString, \"\")\n        }\n        return (result,\
    \ result == result.reverse)", "        // Write your code here\n        return\
    \ null", "        // Write your code here\n        return null", "        // Write\
    \ your code here\n        val s1 = s.filter(x => !c.contains(x))\n        val\
    \ s2 = s1.reverse\n        return (s1, s1 == s2)", "        // Write your code\
    \ here\n        return null", "        // Write your code here\n        return\
    \ null", "        // Write your code here\n        return null", "        // Write\
    \ your code here\n        return null", "        // Write your code here\n   \
    \     return (\"\", false)", "        val result = s.filter(x => !c.contains(x))\n\
    \        val isPalindrome = result.equals(result.reverse)\n        (result, isPalindrome)",
  "        // Write your code here\n        return null", "        // Write your code\
    \ here\n        return null", "        // Write your code here\n        return\
    \ (\"\", false)", "        // Write your code here\n        return (\"\", false)",
  "        // Write your code here\n        return (\"\", false)", "        // Write\
    \ your code here\n        return (\"\", false)", "        // Write your code here\n\
    \        return null", "        // Write your code here\n        val result =\
    \ s.filterNot(c.contains(_))\n        (result, result == result.reverse)", " \
    \       val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n  \
    \          if (!c.contains(s(i))) sb.append(s(i))\n        }\n        val sb2\
    \ = new StringBuilder\n        for (i <- 0 until sb.length) {\n            sb2.append(sb(sb.length\
    \ - 1 - i))\n        }\n        (sb.toString, sb.toString == sb2.toString)"]
stop_tokens:
- "\n    }\n"
