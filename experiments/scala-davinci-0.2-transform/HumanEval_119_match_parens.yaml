name: HumanEval_119_match_parens
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of two strings, both strings consist of open\n    //\
  \ parentheses '(' or close parentheses ')' only.\n    // Your job is to check if\
  \ it is possible to concatenate the two strings in\n    // some order, that the\
  \ resulting string will be good.\n    // A string S is considered to be good if\
  \ and only if all parentheses in S\n    // are balanced. For example: the string\
  \ '(())()' is good, while the string\n    // '())' is not.\n    // Return 'Yes'\
  \ if there's a way to make a good string, and return 'No' otherwise.\n    // Examples:\n\
  \    // >>> matchParens((List[String](\"()(\", \")\")))\n    // (\"Yes\")\n    //\
  \ >>> matchParens((List[String](\")\", \")\")))\n    // (\"No\")\n    def matchParens(lst\
  \ : List[String]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(matchParens((List[String](\"\
  ()(\", \")\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\")\"\
  , \")\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(())\"\
  , \"())())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")())\"\
  , \"(()()(\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"(())))\"\
  , \"(()())((\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"()\"\
  , \"())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(()(\",\
  \ \"()))()\"))).equals((\"Yes\")));\n    assert(matchParens((List[String](\"((((\"\
  , \"((())\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(()\"\
  , \"(()(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\")(\", \"\
  )(\"))).equals((\"No\")));\n    assert(matchParens((List[String](\"(\", \")\"))).equals((\"\
  Yes\")));\n    assert(matchParens((List[String](\")\", \"(\"))).equals((\"Yes\"\
  )));\n    }\n\n}\n"
completions: ["        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1\
    \ + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n        \
    \    if (c == '(') stack.push(c)\n            else if (c == ')') {\n         \
    \       if (stack.isEmpty) return \"No\"\n                else stack.pop\n   \
    \         }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "   \
    \     val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n    \
    \    val n = s.length\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until n) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s = lst.mkString\n        val n = s.length\n        val dp = Array.fill(n\
    \ + 1)(0)\n        for (i <- 1 to n) {\n            if (s(i - 1) == '(') dp(i)\
    \ = dp(i - 1) + 1\n            else dp(i) = dp(i - 1) - 1\n            if (dp(i)\
    \ < 0) return \"No\"\n        }\n        if (dp(n) == 0) \"Yes\" else \"No\"",
  "        val str1 = lst(0)\n        val str2 = lst(1)\n        val str = str1 +\
    \ str2\n        val stack = new Stack[Char]\n        for (c <- str) {\n      \
    \      if (c == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s = lst.mkString\n        val n = s.length\n\
    \        var c = 0\n        for (i <- 0 until n) {\n            if (s(i) == '(')\
    \ c += 1\n            else c -= 1\n            if (c < 0) return \"No\"\n    \
    \    }\n        if (c == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        def isGood(s : String) : Boolean = {\n      \
    \      var stack = new Stack[Char]\n            for (c <- s) {\n             \
    \   if (c == '(') stack.push(c)\n                else if (c == ')') {\n      \
    \              if (stack.isEmpty) return false\n                    else stack.pop\n\
    \                }\n            }\n            stack.isEmpty\n        }\n    \
    \    if (isGood(s1 + s2)) \"Yes\"\n        else if (isGood(s2 + s1)) \"Yes\"\n\
    \        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n   \
    \     val s3 = s1 + s2\n        val s4 = s2 + s1\n        if (isGood(s3)) \"Yes\"\
    \n        else if (isGood(s4)) \"Yes\"\n        else \"No\"", "        val s1\
    \ = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        var stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      var stack = new Stack[Char]\n        for (c <- s1) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n \
    \           else stack.pop\n        }\n        for (c <- s2) {\n            if\
    \ (c == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n\
    \            else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s = lst.mkString\n        if (s.length % 2 == 1) return\
    \ \"No\"\n        val stack = new Stack[Char]\n        for (c <- s) {\n      \
    \      if (c == '(') stack.push(c)\n            else if (stack.isEmpty) return\
    \ \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        var s1 = lst(0)\n        var s2 = lst(1)\n      \
    \  var s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s)\
    \ {\n            if (c == '(') stack.push(c)\n            else if (c == ')') {\n\
    \                if (stack.isEmpty) return \"No\"\n                stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_\
    \ == '(')\n        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == '(')\n        val s2_close = s2.count(_ == ')')\n        val s1_balance =\
    \ s1_open - s1_close\n        val s2_balance = s2_open - s2_close\n        if\
    \ (s1_balance + s2_balance == 0) \"Yes\"\n        else \"No\"", "        val s1\
    \ = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val (s1, s2) = (lst(0), lst(1))\n        val (c1, c2) = (s1.count(_ ==\
    \ '('), s1.count(_ == ')'))\n        val (d1, d2) = (s2.count(_ == '('), s2.count(_\
    \ == ')'))\n        if (c1 == c2 && d1 == d2) \"Yes\"\n        else if (c1 ==\
    \ c2 && d1 > d2) \"Yes\"\n        else if (c1 > c2 && d1 == d2) \"Yes\"\n    \
    \    else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n       \
    \ val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n\
    \            if (c == '(') stack.push(c)\n            else if (c == ')') {\n \
    \               if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s = lst.mkString\n        val n = s.length\n        var c = 0\n  \
    \      for (i <- 0 until n) {\n            if (s(i) == '(') c += 1\n         \
    \   else c -= 1\n            if (c < 0) return \"No\"\n        }\n        if (c\
    \ == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s3 = s1 + s2\n        if (s3.length % 2 == 1) return \"No\"\n   \
    \     val stack = new Stack[Char]\n        for (c <- s3) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n \
    \           else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open\
    \ = s1.count(_ == '(')\n        val s1_close = s1.count(_ == ')')\n        val\
    \ s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_ == ')')\n  \
    \      if (s1_open == s1_close && s2_open == s2_close) \"Yes\"\n        else if\
    \ (s1_open == s1_close && s2_open > s2_close) \"Yes\"\n        else if (s1_open\
    \ > s1_close && s2_open == s2_close) \"Yes\"\n        else \"No\"", "        def\
    \ isGood(s : String) : Boolean = {\n            var cnt = 0\n            for (c\
    \ <- s) {\n                if (c == '(') cnt += 1\n                else cnt -=\
    \ 1\n                if (cnt < 0) return false\n            }\n            return\
    \ cnt == 0\n        }\n        if (isGood(lst(0) + lst(1))) \"Yes\"\n        else\
    \ if (isGood(lst(1) + lst(0))) \"Yes\"\n        else \"No\"", "        val s1\
    \ = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val n =\
    \ s.length\n        var stack = new Stack[Char]\n        for (i <- 0 until n)\
    \ {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n     \
    \       else {\n                if (stack.isEmpty) return \"No\"\n           \
    \     else stack.pop\n            }\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s = s1 + s2\n        val stack = Stack[Char]()\n        for (c <- s) {\n\
    \            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val str1 = lst(0)\n        val str2 = lst(1)\n\
    \        val s1 = str1.toCharArray.filter(c => c == '(' || c == ')').toList\n\
    \        val s2 = str2.toCharArray.filter(c => c == '(' || c == ')').toList\n\
    \        def isGood(s : List[Char]) : Boolean = {\n            val stack = new\
    \ Stack[Char]\n            for (c <- s) {\n                if (c == '(') stack.push(c)\n\
    \                else if (stack.isEmpty) return false\n                else stack.pop\n\
    \            }\n            stack.isEmpty\n        }\n        if (isGood(s1) &&\
    \ isGood(s2)) \"Yes\"\n        else if (isGood(s1 + s2)) \"Yes\"\n        else\
    \ if (isGood(s2 + s1)) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        val stack = Stack[Char]()\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n \
    \       val s4 = s2 + s1\n        if (isGood(s3)) \"Yes\"\n        else if (isGood(s4))\
    \ \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        if (s.length % 2 == 1) return \"No\"\n     \
    \   val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n    \
    \        else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else \"\
    No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 +\
    \ s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return \"No\"\n                else stack.pop\n     \
    \       }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "     \
    \   val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n     \
    \   val s4 = s2 + s1\n        if (isGood(s3)) \"Yes\"\n        else if (isGood(s4))\
    \ \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n\
    \        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n\
    \        if (s1c == s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o &&\
    \ s2c > s2o) \"Yes\"\n        else if (s1c > s1o && s2c == s2o) \"Yes\"\n    \
    \    else \"No\"", "        val str1 = lst(0)\n        val str2 = lst(1)\n   \
    \     val s1 = str1.toList.filter(c => c == '(' || c == ')')\n        val s2 =\
    \ str2.toList.filter(c => c == '(' || c == ')')\n        val s = s1 ++ s2\n  \
    \      if (s.length % 2 == 1) return \"No\"\n        var stack = Stack[Char]()\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_\
    \ == '(')\n        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_\
    \ == ')')\n        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c\
    \ == s2o) \"Yes\"\n        else if (s1c == s1o && s2c > s2o) {\n            if\
    \ (s2c - s2o <= s1c) \"Yes\"\n            else \"No\"\n        }\n        else\
    \ if (s1c > s1o && s2c == s2o) {\n            if (s1c - s1o <= s2c) \"Yes\"\n\
    \            else \"No\"\n        }\n        else if (s1c > s1o && s2c > s2o)\
    \ {\n            if (s1c - s1o + s2c - s2o <= s1c + s2c) \"Yes\"\n           \
    \ else \"No\"\n        }\n        else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s3 = s1 + s2\n        val s4 = s2 + s1\n  \
    \      if (isGood(s3)) \"Yes\"\n        else if (isGood(s4)) \"Yes\"\n       \
    \ else \"No\"", "        val s = lst.mkString\n        val n = s.length\n    \
    \    var c = 0\n        for (i <- 0 until n) {\n            if (s(i) == '(') c\
    \ += 1\n            else c -= 1\n            if (c < 0) return \"No\"\n      \
    \  }\n        if (c == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var count = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i) == '(') count += 1\n            else count -= 1\n  \
    \          if (count < 0) return \"No\"\n        }\n        if (count == 0) \"\
    Yes\" else \"No\"", "        val s = lst.mkString\n        if (s.count(_ == '(')\
    \ == s.count(_ == ')')) \"Yes\" else \"No\"", "        val s1 = lst(0)\n     \
    \   val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (i <- 0 until s.length) {\n            val c = s(i)\n           \
    \ if (c == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (i <- 0 until s.length) {\n            if (s(i) == '(') stack.push('(')\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val (s1,\
    \ s2) = (lst(0), lst(1))\n        val (c1, c2) = (s1.count(_ == '('), s1.count(_\
    \ == ')'))\n        val (d1, d2) = (s2.count(_ == '('), s2.count(_ == ')'))\n\
    \        if (c1 == c2 && d1 == d2) \"Yes\"\n        else if (c1 == c2 && d1 !=\
    \ d2) \"No\"\n        else if (c1 != c2 && d1 == d2) \"No\"\n        else if (c1\
    \ > c2 && d1 < d2) \"No\"\n        else if (c1 < c2 && d1 > d2) \"No\"\n     \
    \   else \"Yes\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n       \
    \ val s1_open = s1.count(_ == '(')\n        val s1_close = s1.count(_ == ')')\n\
    \        val s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_ ==\
    \ ')')\n        if (s1_open == s1_close && s2_open == s2_close) {\n          \
    \  \"Yes\"\n        } else if (s1_open == s1_close && s2_open != s2_close) {\n\
    \            if (s2_open > s2_close) {\n                \"Yes\"\n            }\
    \ else {\n                \"No\"\n            }\n        } else if (s1_open !=\
    \ s1_close && s2_open == s2_close) {\n            if (s1_open > s1_close) {\n\
    \                \"Yes\"\n            } else {\n                \"No\"\n     \
    \       }\n        } else {\n            if (s1_open > s1_close && s2_open > s2_close)\
    \ {\n                \"Yes\"\n            } else {\n                \"No\"\n \
    \           }\n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n\
    \        val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n\
    \        if (s1c == s1o && s2c == s2o) \"Yes\"\n        else if (s1c == s1o &&\
    \ s2c < s2o) \"No\"\n        else if (s1c < s1o && s2c == s2o) \"No\"\n      \
    \  else if (s1c < s1o && s2c < s2o) \"No\"\n        else if (s1c > s1o && s2c\
    \ > s2o) \"Yes\"\n        else if (s1c > s1o && s2c < s2o) \"Yes\"\n        else\
    \ if (s1c < s1o && s2c > s2o) \"Yes\"\n        else \"Yes\"", "        def isGood(s\
    \ : String) : Boolean = {\n            var count = 0\n            for (c <- s)\
    \ {\n                if (c == '(') count += 1\n                else if (c == ')')\
    \ count -= 1\n                if (count < 0) return false\n            }\n   \
    \         return count == 0\n        }\n        if (isGood(lst(0) + lst(1))) return\
    \ \"Yes\"\n        if (isGood(lst(1) + lst(0))) return \"Yes\"\n        return\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var cnt = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i) == '(') cnt += 1\n            else cnt -= 1\n      \
    \      if (cnt < 0) return \"No\"\n        }\n        if (cnt == 0) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        var stack = Stack[Char]()\n        for (c <- s) {\n       \
    \     if (c == '(') stack.push(c)\n            else if (c == ')') {\n        \
    \        if (stack.isEmpty) return \"No\"\n                else stack.pop\n  \
    \          }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "  \
    \      val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     var stack = List[Char]()\n        for (c <- s) {\n            if (c == '(')\
    \ stack = c :: stack\n            else if (stack.isEmpty) return \"No\"\n    \
    \        else stack = stack.tail\n        }\n        if (stack.isEmpty) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n \
    \           if (c == '(') stack.push(c)\n            else if (c == ')') {\n  \
    \              if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        if (s1.length == 0 &&\
    \ s2.length == 0) return \"Yes\"\n        if (s1.length == 0) {\n            if\
    \ (s2.length % 2 == 0) return \"No\"\n            else return \"Yes\"\n      \
    \  }\n        if (s2.length == 0) {\n            if (s1.length % 2 == 0) return\
    \ \"No\"\n            else return \"Yes\"\n        }\n        if (s1.length %\
    \ 2 == 0 && s2.length % 2 == 0) return \"No\"\n        if (s1.length % 2 == 1\
    \ && s2.length % 2 == 1) return \"Yes\"\n        if (s1.length % 2 == 0) {\n \
    \           if (s2.length % 2 == 1) {\n                if (s2.charAt(0) == '(')\
    \ return \"Yes\"\n                else return \"No\"\n            }\n        }\n\
    \        if (s2.length % 2 == 0) {\n            if (s1.length % 2 == 1) {\n  \
    \              if (s1.charAt(0) == '(') return \"Yes\"\n                else return\
    \ \"No\"\n            }\n        }\n        return \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        var stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (i <-\
    \ 0 until s.length) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val (a, b) = (lst(0), lst(1))\n        val (a1,\
    \ b1) = (a.count(_ == '('), b.count(_ == '('))\n        val (a2, b2) = (a.count(_\
    \ == ')'), b.count(_ == ')'))\n        if (a1 == a2 && b1 == b2) \"Yes\"\n   \
    \     else if (a1 == a2 && b1 < b2) \"No\"\n        else if (a1 < a2 && b1 ==\
    \ b2) \"No\"\n        else if (a1 < a2 && b1 < b2) \"No\"\n        else \"Yes\"",
  "        val s = lst.mkString\n        if (s.count(_ == '(') == s.count(_ == ')'))\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s = lst.mkString\n        val n = s.length\n        var c = 0\n  \
    \      for (i <- 0 until n) {\n            if (s(i) == '(') c += 1\n         \
    \   else c -= 1\n            if (c < 0) return \"No\"\n        }\n        if (c\
    \ == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else {\n     \
    \           if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      var stack = new Stack[Char]\n        for (c <- s1) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n \
    \           else stack.pop\n        }\n        for (c <- s2) {\n            if\
    \ (c == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n\
    \            else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else if (c == ')') {\n      \
    \          if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val n = s.length\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until n) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        def isGood(s : String) : Boolean = {\n      \
    \      var count = 0\n            for (c <- s) {\n                if (c == '(')\
    \ count += 1\n                else count -= 1\n                if (count < 0)\
    \ return false\n            }\n            return count == 0\n        }\n    \
    \    if (isGood(lst(0) + lst(1))) \"Yes\"\n        else if (isGood(lst(1) + lst(0)))\
    \ \"Yes\"\n        else \"No\"", "        val s = lst.mkString\n        val n\
    \ = s.length\n        val dp = Array.fill(n + 1)(0)\n        for (i <- 0 until\
    \ n) {\n            if (s(i) == '(') dp(i + 1) = dp(i) + 1\n            else dp(i\
    \ + 1) = dp(i) - 1\n        }\n        if (dp.min < 0) return \"No\"\n       \
    \ val dp2 = Array.fill(n + 1)(0)\n        for (i <- n - 1 to 0 by -1) {\n    \
    \        if (s(i) == ')') dp2(i) = dp2(i + 1) + 1\n            else dp2(i) = dp2(i\
    \ + 1) - 1\n        }\n        if (dp2.min < 0) return \"No\"\n        return\
    \ \"Yes\"", "        def isGood(s : String) : Boolean = {\n            var cnt\
    \ = 0\n            for (c <- s) {\n                if (c == '(') cnt += 1\n  \
    \              else if (c == ')') cnt -= 1\n                if (cnt < 0) return\
    \ false\n            }\n            cnt == 0\n        }\n        if (isGood(lst(0)\
    \ + lst(1))) \"Yes\"\n        else if (isGood(lst(1) + lst(0))) \"Yes\"\n    \
    \    else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n       \
    \ val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s) {\n\
    \            if (c == '(') stack.push(c)\n            else if (c == ')') {\n \
    \               if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      if (s.length % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val str1 = lst(0)\n\
    \        val str2 = lst(1)\n        val str1Balanced = str1.count(_ == '(') ==\
    \ str1.count(_ == ')')\n        val str2Balanced = str2.count(_ == '(') == str2.count(_\
    \ == ')')\n        if (str1Balanced && str2Balanced) {\n            val str1Open\
    \ = str1.count(_ == '(')\n            val str2Open = str2.count(_ == '(')\n  \
    \          if (str1Open == str2Open) \"Yes\"\n            else if (str1Open >\
    \ str2Open) {\n                val str1Close = str1.count(_ == ')')\n        \
    \        val str2Close = str2.count(_ == ')')\n                if (str1Close ==\
    \ str2Close) \"Yes\"\n                else if (str1Close > str2Close) \"Yes\"\n\
    \                else \"No\"\n            }\n            else \"No\"\n       \
    \ }\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (c ==\
    \ ')') {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else if (c == ')') {\n      \
    \          if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (i <- 0 until s.length) {\n  \
    \          val c = s(i)\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = Stack[Char]()\n        for (c <- s) {\n       \
    \     if (c == '(') stack.push(c)\n            else if (c == ')') {\n        \
    \        if (stack.isEmpty) return \"No\"\n                else stack.pop\n  \
    \          }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "  \
    \      val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s3 = s1 + s2\n        if (s3.count(_ == '(') != s3.count(_ == ')'))\
    \ \"No\"\n        else {\n            val stack = new Stack[Char]\n          \
    \  for (c <- s3) {\n                if (c == '(') stack.push(c)\n            \
    \    else {\n                    if (stack.isEmpty) return \"No\"\n          \
    \          else stack.pop\n                }\n            }\n            \"Yes\"\
    \n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s\
    \ = s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s) {\n   \
    \         if (c == '(') stack.push(c)\n            else if (c == ')') {\n    \
    \            if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       def isGood(s : String) : Boolean = {\n            var count = 0\n    \
    \        for (c <- s) {\n                if (c == '(') count += 1\n          \
    \      else if (c == ')') count -= 1\n                if (count < 0) return false\n\
    \            }\n            return count == 0\n        }\n        if (isGood(lst(0)\
    \ + lst(1))) return \"Yes\"\n        if (isGood(lst(1) + lst(0))) return \"Yes\"\
    \n        return \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else {\n     \
    \           if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val (s1,\
    \ s2) = (lst(0), lst(1))\n        val (c1, c2) = (s1.count(_ == '('), s1.count(_\
    \ == ')'))\n        val (d1, d2) = (s2.count(_ == '('), s2.count(_ == ')'))\n\
    \        if (c1 == c2 && d1 == d2) \"Yes\"\n        else if (c1 == c2 && d1 >\
    \ d2) \"Yes\"\n        else if (c1 > c2 && d1 == d2) \"Yes\"\n        else \"\
    No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 +\
    \ s2\n        val stack = new Stack[Char]\n        for (i <- 0 until s.length)\
    \ {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n     \
    \       else {\n                if (stack.isEmpty) return \"No\"\n           \
    \     else stack.pop\n            }\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s1c = s1.count(_ == '(')\n        val s2c = s2.count(_ == '(')\n      \
    \  val s1o = s1.count(_ == ')')\n        val s2o = s2.count(_ == ')')\n      \
    \  if (s1c == s1o && s2c == s2o) return \"Yes\"\n        if (s1c == s1o && s2c\
    \ > s2o) return \"Yes\"\n        if (s1c > s1o && s2c == s2o) return \"Yes\"\n\
    \        if (s1c > s1o && s2c > s2o) return \"Yes\"\n        \"No\"", "      \
    \  val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n       \
    \ val stack = Stack[Char]()\n        for (c <- s) {\n            if (c == '(')\
    \ stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      var count = 0\n        for (i <- 0 until s1.length) {\n            if (s1(i)\
    \ == '(') count += 1\n            else count -= 1\n        }\n        for (i <-\
    \ 0 until s2.length) {\n            if (s2(i) == '(') count += 1\n           \
    \ else count -= 1\n        }\n        if (count == 0) \"Yes\"\n        else \"\
    No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        var cnt = 0\n\
    \        for (i <- 0 until s1.length) {\n            if (s1(i) == '(') cnt +=\
    \ 1\n            else cnt -= 1\n        }\n        for (i <- 0 until s2.length)\
    \ {\n            if (s2(i) == '(') cnt += 1\n            else cnt -= 1\n     \
    \   }\n        if (cnt == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        if (s1.length\
    \ == 0 && s2.length == 0) return \"Yes\"\n        if (s1.length == 0) {\n    \
    \        if (s2.length % 2 == 0) return \"No\"\n            else return \"Yes\"\
    \n        }\n        if (s2.length == 0) {\n            if (s1.length % 2 == 0)\
    \ return \"No\"\n            else return \"Yes\"\n        }\n        if (s1.length\
    \ % 2 == 0 && s2.length % 2 == 0) return \"No\"\n        if (s1.length % 2 ==\
    \ 1 && s2.length % 2 == 1) return \"Yes\"\n        if (s1.length % 2 == 0) {\n\
    \            if (s1.count(_ == '(') == s1.count(_ == ')')) return \"Yes\"\n  \
    \          else return \"No\"\n        }\n        if (s2.length % 2 == 0) {\n\
    \            if (s2.count(_ == '(') == s2.count(_ == ')')) return \"Yes\"\n  \
    \          else return \"No\"\n        }\n        return \"Yes\"", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val str1 = lst(0)\n        val str2 = lst(1)\n\
    \        val str1Open = str1.count(_ == '(')\n        val str1Close = str1.count(_\
    \ == ')')\n        val str2Open = str2.count(_ == '(')\n        val str2Close\
    \ = str2.count(_ == ')')\n        if (str1Open == str1Close && str2Open == str2Close)\
    \ {\n            \"Yes\"\n        } else if (str1Open == str1Close) {\n      \
    \      if (str2Open > str2Close) {\n                \"Yes\"\n            } else\
    \ {\n                \"No\"\n            }\n        } else if (str2Open == str2Close)\
    \ {\n            if (str1Open > str1Close) {\n                \"Yes\"\n      \
    \      } else {\n                \"No\"\n            }\n        } else {\n   \
    \         \"No\"\n        }", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val n = s.length\n        var count = 0\n  \
    \      for (i <- 0 until n) {\n            if (s(i) == '(') count += 1\n     \
    \       else count -= 1\n            if (count < 0) return \"No\"\n        }\n\
    \        if (count == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n    \
    \    val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = Stack[Char]()\n        for (c <- s)\
    \ {\n            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s = lst.reduceLeft(_ + _)\n        if (s.length\
    \ % 2 == 1) return \"No\"\n        var count = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i) == '(') count += 1\n            else count -= 1\n  \
    \          if (count < 0) return \"No\"\n        }\n        if (count == 0) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <- s)\
    \ {\n            if (c == '(') stack.push(c)\n            else if (c == ')') {\n\
    \                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s = lst.mkString\n\
    \        if (s.length % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      var count = 0\n        for (c <- s1) {\n            if (c == '(') count\
    \ += 1\n            else count -= 1\n        }\n        for (c <- s2) {\n    \
    \        if (c == '(') count += 1\n            else count -= 1\n        }\n  \
    \      if (count == 0) \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        if (s.length % 2 ==\
    \ 1) return \"No\"\n        val stack = new Stack[Char]\n        for (c <- s)\
    \ {\n            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until s.length) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val str1 = lst(0)\n \
    \       val str2 = lst(1)\n        val str1_len = str1.length\n        val str2_len\
    \ = str2.length\n        val str1_open = str1.count(_ == '(')\n        val str1_close\
    \ = str1.count(_ == ')')\n        val str2_open = str2.count(_ == '(')\n     \
    \   val str2_close = str2.count(_ == ')')\n        val str1_diff = str1_open -\
    \ str1_close\n        val str2_diff = str2_open - str2_close\n        if (str1_diff\
    \ == 0 && str2_diff == 0) {\n            \"Yes\"\n        } else if (str1_diff\
    \ == 0 && str2_diff > 0) {\n            if (str2_diff % 2 == 0) \"Yes\" else \"\
    No\"\n        } else if (str1_diff > 0 && str2_diff == 0) {\n            if (str1_diff\
    \ % 2 == 0) \"Yes\" else \"No\"\n        } else if (str1_diff > 0 && str2_diff\
    \ > 0) {\n            if (str1_diff % 2 == 0 && str2_diff % 2 == 0) \"Yes\" else\
    \ \"No\"\n        } else if (str1_diff < 0 && str2_diff < 0) {\n            if\
    \ (str1_diff % 2 == 0 && str2_diff % 2 == 0) \"Yes\" else \"No\"\n        } else\
    \ if (str1_diff < 0 && str2_diff > 0) {\n            if (str1_diff % 2 == 0 &&\
    \ str2_diff % 2 == 0) \"Yes\" else \"No\"\n        } else if (str1_diff > 0 &&\
    \ str2_diff < 0) {\n            if (str1_diff % 2 == 0 && str2_diff % 2 == 0)\
    \ \"Yes\" else \"No\"\n        } else {\n            \"No\"\n        }", "   \
    \     val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n    \
    \    var stack = new Stack[Char]\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else {\n        \
    \        if (stack.isEmpty) return \"No\"\n                stack.pop\n       \
    \     }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "       \
    \ val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n       \
    \ if (s3.length % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s3) {\n            if (c == '(') stack.push(c)\n          \
    \  else if (stack.isEmpty) return \"No\"\n            else stack.pop\n       \
    \ }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (i <- 0 until s.length) {\n            if (s(i) == '(') stack.push('(')\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s1_open = s1.count(_ == '(')\n        val s1_close = s1.count(_ ==\
    \ ')')\n        val s2_open = s2.count(_ == '(')\n        val s2_close = s2.count(_\
    \ == ')')\n        if (s1_open == s1_close && s2_open == s2_close) {\n       \
    \     \"Yes\"\n        } else if (s1_open == s1_close && s2_open > s2_close) {\n\
    \            \"Yes\"\n        } else if (s1_open > s1_close && s2_open == s2_close)\
    \ {\n            \"Yes\"\n        } else {\n            \"No\"\n        }", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n\
    \            if (s(i) == '(') count += 1\n            else count -= 1\n      \
    \      if (count < 0) return \"No\"\n        }\n        if (count == 0) \"Yes\"\
    \ else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val\
    \ s = s1 + s2\n        var stack = Stack[Char]()\n        for (c <- s) {\n   \
    \         if (c == '(') stack.push(c)\n            else if (c == ')') {\n    \
    \            if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       def isGood(str : String) : Boolean = {\n            var count = 0\n  \
    \          for (c <- str) {\n                if (c == '(') count += 1\n      \
    \          else if (c == ')') count -= 1\n                if (count < 0) return\
    \ false\n            }\n            return count == 0\n        }\n        if (isGood(lst(0)\
    \ + lst(1))) return \"Yes\"\n        if (isGood(lst(1) + lst(0))) return \"Yes\"\
    \n        return \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (c ==\
    \ ')') {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        if (s.length % 2 == 1) return \"No\"\n        val stack = new\
    \ Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        var stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n \
    \       if (s3.length % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s3) {\n            if (c == '(') stack.push(c)\n          \
    \  else if (stack.isEmpty) return \"No\"\n            else stack.pop\n       \
    \ }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (i <- 0 until s.length) {\n            val c = s(i)\n           \
    \ if (c == '(') stack.push(c)\n            else if (c == ')') {\n            \
    \    if (stack.isEmpty) return \"No\"\n                else stack.pop\n      \
    \      }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "      \
    \  val s1 = lst(0)\n        val s2 = lst(1)\n        val s1c = s1.count(_ == '(')\n\
    \        val s2c = s2.count(_ == '(')\n        val s1o = s1.count(_ == ')')\n\
    \        val s2o = s2.count(_ == ')')\n        if (s1c == s1o && s2c == s2o) \"\
    Yes\"\n        else if (s1c == s1o && s2c > s2o) {\n            if (s2c - s2o\
    \ <= s1c) \"Yes\"\n            else \"No\"\n        }\n        else if (s1c >\
    \ s1o && s2c == s2o) {\n            if (s1c - s1o <= s2c) \"Yes\"\n          \
    \  else \"No\"\n        }\n        else if (s1c > s1o && s2c > s2o) {\n      \
    \      if (s1c - s1o <= s2c && s2c - s2o <= s1c) \"Yes\"\n            else \"\
    No\"\n        }\n        else \"No\"", "        val s1 = lst(0)\n        val s2\
    \ = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n   \
    \     for (c <- s) {\n            if (c == '(') stack.push(c)\n            else\
    \ if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n        \
    \        else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i) == '(') stack.push('(')\n        \
    \    else if (stack.isEmpty) return \"No\"\n            else stack.pop\n     \
    \   }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until s.length) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = Stack[Char]()\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s3 = s1 + s2\n        if (s3.length % 2 == 1) return \"No\"\n     \
    \   val stack = new Stack[Char]\n        for (c <- s3) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n    \
    \        else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else \"\
    No\"", "        def isGood(s : String) : Boolean = {\n            var cnt = 0\n\
    \            for (c <- s) {\n                if (c == '(') cnt += 1\n        \
    \        else cnt -= 1\n                if (cnt < 0) return false\n          \
    \  }\n            return cnt == 0\n        }\n        if (isGood(lst(0) + lst(1)))\
    \ \"Yes\"\n        else if (isGood(lst(1) + lst(0))) \"Yes\"\n        else \"\
    No\"", "        val str1 = lst(0)\n        val str2 = lst(1)\n        val str3\
    \ = str1 + str2\n        val str4 = str2 + str1\n        if (str3.length % 2 ==\
    \ 1) return \"No\"\n        val stack = new Stack[Char]\n        for (i <- 0 until\
    \ str3.length) {\n            val c = str3(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ return \"Yes\"\n        else {\n            stack.clear\n            for (i\
    \ <- 0 until str4.length) {\n                val c = str4(i)\n               \
    \ if (c == '(') stack.push(c)\n                else {\n                    if\
    \ (stack.isEmpty) return \"No\"\n                    else stack.pop\n        \
    \        }\n            }\n            if (stack.isEmpty) return \"Yes\"\n   \
    \         else return \"No\"\n        }", "        val s1 = lst(0)\n        val\
    \ s2 = lst(1)\n        val s = s1 + s2\n        if (s.length % 2 == 1) return\
    \ \"No\"\n        val stack = new Stack[Char]\n        for (c <- s) {\n      \
    \      if (c == '(') stack.push(c)\n            else if (stack.isEmpty) return\
    \ \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s)\
    \ {\n            if (c == '(') stack.push(c)\n            else if (c == ')') {\n\
    \                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s =\
    \ lst.mkString\n        val n = s.length\n        var count = 0\n        for (i\
    \ <- 0 until n) {\n            if (s(i) == '(') count += 1\n            else count\
    \ -= 1\n            if (count < 0) return \"No\"\n        }\n        if (count\
    \ == 0) \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (c ==\
    \ ')') {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else if (c == ')') {\n      \
    \          if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n \
    \       val s4 = s2 + s1\n        if (isGood(s3)) \"Yes\"\n        else if (isGood(s4))\
    \ \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (c ==\
    \ ')') {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        var stack\
    \ = new Stack[Char]\n        for (c <- s1) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        for (c <- s2) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val str1\
    \ = lst(0)\n        val str2 = lst(1)\n        val str = str1 + str2\n       \
    \ val stack = new Stack[Char]\n        for (i <- 0 until str.length) {\n     \
    \       val c = str(i)\n            if (c == '(') stack.push(c)\n            else\
    \ if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n        \
    \        else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      var stack = new Stack[Char]\n        for (c <- s1) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n \
    \           else stack.pop\n        }\n        for (c <- s2) {\n            if\
    \ (c == '(') stack.push(c)\n            else if (stack.isEmpty) return \"No\"\n\
    \            else stack.pop\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = new Stack[Char]\n        for (i <- 0 until s.length)\
    \ {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n     \
    \       else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\
    \n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else {\n        \
    \        if (stack.isEmpty) return \"No\"\n                else stack.pop\n  \
    \          }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "  \
    \      val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     val stack = new Stack[Char]\n        for (i <- 0 until s.length) {\n   \
    \         val c = s(i)\n            if (c == '(') stack.push(c)\n            else\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      if (s.count(_ == '(') != s.count(_ == ')')) \"No\"\n        else {\n  \
    \          var stack = new Stack[Char]\n            for (c <- s) {\n         \
    \       if (c == '(') stack.push(c)\n                else if (stack.isEmpty) return\
    \ \"No\"\n                else stack.pop\n            }\n            if (stack.isEmpty)\
    \ \"Yes\"\n            else \"No\"\n        }", "        val (s1, s2) = (lst(0),\
    \ lst(1))\n        val (c1, c2) = (s1.count(_ == '('), s1.count(_ == ')'))\n \
    \       val (d1, d2) = (s2.count(_ == '('), s2.count(_ == ')'))\n        if (c1\
    \ == c2 && d1 == d2) \"Yes\"\n        else if (c1 == c2 && d1 > d2) \"Yes\"\n\
    \        else if (c1 > c2 && d1 == d2) \"Yes\"\n        else \"No\"", "      \
    \  val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n       \
    \ if (s.length % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s = s1 + s2\n        val n = s.length\n \
    \       var stack = new Stack[Char]\n        for (i <- 0 until n) {\n        \
    \    val c = s(i)\n            if (c == '(') stack.push(c)\n            else {\n\
    \                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      if (s.length % 2 == 1) return \"No\"\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (stack.isEmpty) return \"No\"\n            else stack.pop\n        }\n\
    \        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n \
    \       val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      def matchParens(s : String) : Boolean = {\n            var stack = new\
    \ Stack[Char]\n            for (c <- s) {\n                if (c == '(') stack.push(c)\n\
    \                else if (c == ')') {\n                    if (stack.isEmpty)\
    \ return false\n                    else stack.pop\n                }\n      \
    \      }\n            stack.isEmpty\n        }\n        if (matchParens(s1 + s2))\
    \ \"Yes\"\n        else if (matchParens(s2 + s1)) \"Yes\"\n        else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1_open = s1.count(_\
    \ == '(')\n        val s1_close = s1.count(_ == ')')\n        val s2_open = s2.count(_\
    \ == '(')\n        val s2_close = s2.count(_ == ')')\n        if (s1_open == s1_close\
    \ && s2_open == s2_close) return \"Yes\"\n        if (s1_open == s1_close && s2_open\
    \ != s2_close) return \"No\"\n        if (s1_open != s1_close && s2_open == s2_close)\
    \ return \"No\"\n        if (s1_open > s1_close && s2_open < s2_close) return\
    \ \"No\"\n        if (s1_open < s1_close && s2_open > s2_close) return \"No\"\n\
    \        if (s1_open > s1_close && s2_open > s2_close) {\n            if (s1_open\
    \ - s1_close == s2_open - s2_close) return \"Yes\"\n            else return \"\
    No\"\n        }\n        if (s1_open < s1_close && s2_open < s2_close) {\n   \
    \         if (s1_close - s1_open == s2_close - s2_open) return \"Yes\"\n     \
    \       else return \"No\"\n        }\n        \"No\"", "        val s1 = lst(0)\n\
    \        val s2 = lst(1)\n        val s = s1 + s2\n        if (s.length % 2 ==\
    \ 1) return \"No\"\n        val stack = new Stack[Char]\n        for (i <- 0 until\
    \ s.length) {\n            val c = s(i)\n            if (c == '(') stack.push(c)\n\
    \            else {\n                if (stack.isEmpty) return \"No\"\n      \
    \          else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s3 = s1 + s2\n \
    \       val s4 = s2 + s1\n        if (isGood(s3)) \"Yes\"\n        else if (isGood(s4))\
    \ \"Yes\"\n        else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (c ==\
    \ ')') {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        if (s.length % 2 == 1) return \"No\"\n        val stack = new\
    \ Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (stack.isEmpty) return \"No\"\n            else stack.pop\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i) == '(') stack.push('(')\n        \
    \    else if (stack.isEmpty) return \"No\"\n            else stack.pop\n     \
    \   }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val str1 = lst(0)\n\
    \        val str2 = lst(1)\n        val str1Count = str1.count(_ == '(')\n   \
    \     val str2Count = str2.count(_ == '(')\n        if (str1Count == str2Count)\
    \ \"Yes\"\n        else if (str1Count == str2.count(_ == ')')) \"Yes\"\n     \
    \   else if (str2Count == str1.count(_ == ')')) \"Yes\"\n        else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n   \
    \     var stack = new Stack[Char]\n        for (i <- 0 until s.length) {\n   \
    \         val c = s(i)\n            if (c == '(') stack.push(c)\n            else\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      var stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else if (c == ')') {\n                if\
    \ (stack.isEmpty) return \"No\"\n                else stack.pop\n            }\n\
    \        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 =\
    \ lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        var stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i) == '(') stack.push('(')\n        \
    \    else if (stack.isEmpty) return \"No\"\n            else stack.pop\n     \
    \   }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "        var lst1 = lst(0).toList\n\
    \        var lst2 = lst(1).toList\n        var lst3 = lst1 ++ lst2\n        var\
    \ lst4 = lst2 ++ lst1\n        var lst5 = lst3.filter(x => x == '(' || x == ')')\n\
    \        var lst6 = lst4.filter(x => x == '(' || x == ')')\n        var lst7 =\
    \ lst5.filter(x => x == '(')\n        var lst8 = lst5.filter(x => x == ')')\n\
    \        var lst9 = lst6.filter(x => x == '(')\n        var lst10 = lst6.filter(x\
    \ => x == ')')\n        if (lst7.length == lst8.length && lst9.length == lst10.length)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val n = s.length\n        var stack = new Stack[Char]\n\
    \        for (i <- 0 until n) {\n            val c = s(i)\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s = lst.mkString\n\
    \        val n = s.length\n        var c = 0\n        for (i <- 0 until n) {\n\
    \            if (s(i) == '(') c += 1\n            else c -= 1\n            if\
    \ (c < 0) return \"No\"\n        }\n        if (c == 0) \"Yes\" else \"No\"",
  "        val s1 = lst(0)\n        val s2 = lst(1)\n        if (s1.length == 0 &&\
    \ s2.length == 0) return \"Yes\"\n        if (s1.length == 0 && s2.length > 0)\
    \ return \"No\"\n        if (s1.length > 0 && s2.length == 0) return \"No\"\n\
    \        if (s1.length == 1 && s2.length == 1) {\n            if (s1(0) == '('\
    \ && s2(0) == ')') return \"Yes\"\n            else return \"No\"\n        }\n\
    \        if (s1.length == 1 && s2.length > 1) {\n            if (s1(0) == '(')\
    \ {\n                if (s2(0) == ')') return matchParens(List(s1.substring(1),\
    \ s2.substring(1)))\n                else return matchParens(List(s1.substring(1),\
    \ s2))\n            }\n            else return \"No\"\n        }\n        if (s1.length\
    \ > 1 && s2.length == 1) {\n            if (s2(0) == ')') {\n                if\
    \ (s1(0) == '(') return matchParens(List(s1.substring(1), s2.substring(1)))\n\
    \                else return matchParens(List(s1, s2.substring(1)))\n        \
    \    }\n            else return \"No\"\n        }\n        if (s1.length > 1 &&\
    \ s2.length > 1) {\n            if (s1(0) == '(') {\n                if (s2(0)\
    \ == ')') return matchParens(List(s1.substring(1), s2.substring(1)))\n       \
    \         else return matchParens(List(s1.substring(1), s2))\n            }\n\
    \            else {\n                if (s2(0) == ')') return matchParens(List(s1,\
    \ s2.substring(1)))\n                else return \"No\"\n            }\n     \
    \   }\n        return \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (c ==\
    \ ')') {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = new Stack[Char]\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i) == '(') stack.push('(')\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') {\n                stack.push(c)\n         \
    \   } else {\n                if (stack.isEmpty) return \"No\"\n             \
    \   stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s1open\
    \ = s1.count(_ == '(')\n        val s1close = s1.count(_ == ')')\n        val\
    \ s2open = s2.count(_ == '(')\n        val s2close = s2.count(_ == ')')\n    \
    \    if (s1open == s1close && s2open == s2close) return \"Yes\"\n        if (s1open\
    \ == s1close && s2open != s2close) return \"No\"\n        if (s1open != s1close\
    \ && s2open == s2close) return \"No\"\n        if (s1open != s1close && s2open\
    \ != s2close) {\n            if (s1open - s1close == s2open - s2close) return\
    \ \"Yes\"\n            else return \"No\"\n        }\n        \"No\"", "     \
    \   val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n      \
    \  val stack = new Stack[Char]\n        for (c <- s) {\n            if (c == '(')\
    \ stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') {\n                stack.push(c)\n\
    \            } else {\n                if (stack.isEmpty) return \"No\"\n    \
    \            stack.pop\n            }\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s)\
    \ {\n            if (c == '(') stack.push(c)\n            else if (c == ')') {\n\
    \                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      var stack = Stack[Char]()\n        for (c <- s) {\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        if (s.length % 2 == 1)\
    \ return \"No\"\n        val stack = new Stack[Char]\n        for (c <- s) {\n\
    \            if (c == '(') stack.push(c)\n            else if (stack.isEmpty)\
    \ return \"No\"\n            else stack.pop\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       def isGood(s : String) : Boolean = {\n            var count = 0\n    \
    \        for (c <- s) {\n                if (c == '(') count += 1\n          \
    \      else if (c == ')') count -= 1\n                if (count < 0) return false\n\
    \            }\n            return count == 0\n        }\n        if (isGood(lst(0)\
    \ + lst(1))) return \"Yes\"\n        if (isGood(lst(1) + lst(0))) return \"Yes\"\
    \n        return \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n\
    \        val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c\
    \ <- s) {\n            if (c == '(') stack.push(c)\n            else if (c ==\
    \ ')') {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        var count = 0\n        for (c <- s) {\n            if (c ==\
    \ '(') count += 1\n            else count -= 1\n            if (count < 0) return\
    \ \"No\"\n        }\n        if (count == 0) \"Yes\" else \"No\"", "        val\
    \ s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n        val stack\
    \ = new Stack[Char]\n        for (c <- s) {\n            if (c == '(') stack.push(c)\n\
    \            else if (c == ')') {\n                if (stack.isEmpty) return \"\
    No\"\n                else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        var count = 0\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i) == '(') count += 1\n            else count -= 1\n  \
    \          if (count < 0) return \"No\"\n        }\n        if (count == 0) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s = s1 + s2\n        val n = s.length\n        val stack = new Stack[Char]\n\
    \        for (i <- 0 until n) {\n            val c = s(i)\n            if (c ==\
    \ '(') stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        var stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else if (c == ')') {\n                if (stack.isEmpty) return \"No\"\n   \
    \             else stack.pop\n            }\n        }\n        if (stack.isEmpty)\
    \ \"Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n  \
    \      val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <-\
    \ s) {\n            if (c == '(') stack.push(c)\n            else if (c == ')')\
    \ {\n                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (i <- 0 until s.length) {\n  \
    \          val c = s(i)\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n        val s =\
    \ s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s) {\n     \
    \       if (c == '(') stack.push(c)\n            else if (c == ')') {\n      \
    \          if (stack.isEmpty) return \"No\"\n                stack.pop\n     \
    \       }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", "     \
    \   val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n      \
    \  val stack = new Stack[Char]\n        for (c <- s) {\n            if (c == '(')\
    \ stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') {\n                stack.push(c)\n\
    \            } else {\n                if (stack.isEmpty) return \"No\"\n    \
    \            stack.pop\n            }\n        }\n        if (stack.isEmpty) \"\
    Yes\" else \"No\"", "        val s1 = lst(0)\n        val s2 = lst(1)\n      \
    \  val s = s1 + s2\n        val stack = new Stack[Char]\n        for (c <- s)\
    \ {\n            if (c == '(') stack.push(c)\n            else if (c == ')') {\n\
    \                if (stack.isEmpty) return \"No\"\n                else stack.pop\n\
    \            }\n        }\n        if (stack.isEmpty) \"Yes\" else \"No\"", " \
    \       val s1 = lst(0)\n        val s2 = lst(1)\n        val s = s1 + s2\n  \
    \      val stack = new Stack[Char]\n        for (c <- s) {\n            if (c\
    \ == '(') stack.push(c)\n            else {\n                if (stack.isEmpty)\
    \ return \"No\"\n                else stack.pop\n            }\n        }\n  \
    \      if (stack.isEmpty) \"Yes\" else \"No\"", "        val s1 = lst(0)\n   \
    \     val s2 = lst(1)\n        val s = s1 + s2\n        val stack = new Stack[Char]\n\
    \        for (c <- s) {\n            if (c == '(') stack.push(c)\n           \
    \ else {\n                if (stack.isEmpty) return \"No\"\n                else\
    \ stack.pop\n            }\n        }\n        if (stack.isEmpty) \"Yes\" else\
    \ \"No\""]
stop_tokens:
- "\n    }\n"
