name: HumanEval_24_largest_divisor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n    // >>> largestDivisor((15l))\n    // (5l)\n    def largestDivisor(n\
  \ : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestDivisor((3l))\
  \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
  \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
  \ == (7l));\n    }\n\n}\n"
completions: ["        var i = n - 1\n        while (i > 0) {\n            if (n %\
    \ i == 0) return i\n            i -= 1\n        }\n        return 0", "      \
    \  var i = n - 1\n        while (i > 1) {\n            if (n % i == 0) return\
    \ i\n            i -= 1\n        }\n        return 1", "        val sqrt = sqrt(n).toLong\n\
    \        for (i <- sqrt to 2 by -1) {\n            if (n % i == 0) return i\n\
    \        }\n        return 1", "        var i = n - 1\n        while (i > 0) {\n\
    \            if (n % i == 0) return i\n            i -= 1\n        }\n       \
    \ return 0", "        var largestDivisor = 1l\n        for (i <- 2l to sqrt(n).toLong)\
    \ {\n            if (n % i == 0) {\n                largestDivisor = i\n     \
    \       }\n        }\n        largestDivisor", "        var i = n - 1\n      \
    \  while (i > 1) {\n            if (n % i == 0) return i\n            i -= 1\n\
    \        }\n        return 1", "        var i = n - 1\n        while (i > 0) {\n\
    \            if (n % i == 0) return i\n            i -= 1\n        }\n       \
    \ return 1", "        var i = n - 1\n        while (i > 0) {\n            if (n\
    \ % i == 0) return i\n            i -= 1\n        }\n        return 1", "    \
    \    var i = n - 1\n        while (i > 1) {\n            if (n % i == 0) return\
    \ i\n            i -= 1\n        }\n        return 1", "        var largest =\
    \ 1l\n        for (i <- 2l to sqrt(n).toLong) {\n            if (n % i == 0) {\n\
    \                largest = i\n            }\n        }\n        largest", "  \
    \      var i = n - 1\n        while (i > 0) {\n            if (n % i == 0) return\
    \ i\n            i -= 1\n        }\n        return 0", "        var i = n - 1\n\
    \        while (i > 0) {\n            if (n % i == 0) return i\n            i\
    \ -= 1\n        }\n        return 0", "        var i = n - 1\n        while (i\
    \ > 0) {\n            if (n % i == 0) return i\n            i -= 1\n        }\n\
    \        return 0", "        var i = n - 1\n        while (i > 0) {\n        \
    \    if (n % i == 0) return i\n            i -= 1\n        }\n        return 1",
  "        var i = n - 1\n        while (i > 1) {\n            if (n % i == 0) return\
    \ i\n            i -= 1\n        }\n        return 1", "        var largest =\
    \ 1l\n        for (i <- 2l to n) {\n            if (n % i == 0) largest = i\n\
    \        }\n        largest", "        var i = n - 1\n        while (i > 0) {\n\
    \            if (n % i == 0) return i\n            i -= 1\n        }\n       \
    \ return 0", "        var i = n - 1\n        while (i > 0) {\n            if (n\
    \ % i == 0) return i\n            i -= 1\n        }\n        return 1", "    \
    \    var i = n - 1\n        while (i > 0) {\n            if (n % i == 0) return\
    \ i\n            i -= 1\n        }\n        return 0", "        var i = n - 1\n\
    \        while (i > 0) {\n            if (n % i == 0) return i\n            i\
    \ -= 1\n        }\n        return 1"]
stop_tokens:
- "\n    }\n"
