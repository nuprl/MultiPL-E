name: HumanEval_74_total_match
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts two lists of strings and returns the list\
  \ that has \n    // total number of chars in the all strings of the list less than\
  \ the other list.\n    // if the two lists have the same number of chars, return\
  \ the first list.\n    // Examples\n    // >>> totalMatch((List[String]()), (List[String]()))\n\
  \    // (List[String]())\n    // >>> totalMatch((List[String](\"hi\", \"admin\"\
  )), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\", \"Hi\"))\n   \
  \ // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"\
  hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"))\n    //\
  \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\"\
  , \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    // >>> totalMatch((List[String](\"\
  4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\")))\n    // (List[String](\"\
  4\"))\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
  \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\",\
  \ \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n\
  \    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\"\
  , \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\",\
  \ \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"\
  hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"\
  ))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")),\
  \ (List[String]())).equals((List[String]())));\n    }\n\n}\n"
completions: ["        if (lst1.length == 0 && lst2.length == 0) return lst1\n   \
    \     if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until\
    \ lst1.length) sum1 += lst1(i).length\n        for (i <- 0 until lst2.length)\
    \ sum2 += lst2(i).length\n        if (sum1 < sum2) return lst1\n        else if\
    \ (sum1 > sum2) return lst2\n        else return lst1", "        // Fill Up this\
    \ function body\n        // `totalMatch` is a function that accepts two lists\
    \ of strings and returns the list that has \n        // total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        //\
    \ Examples\n        // >>> totalMatch((List[String]()), (List[String]()))\n  \
    \      // (List[String]())\n        // >>> totalMatch((List[String](\"hi\", \"\
    admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"\
    Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        val lst1_len =\
    \ lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val lst2_len = lst2.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        if (lst1_len < lst2_len) lst1 else lst2", " \
    \       // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_total = 0\n\
    \        var lst2_total = 0\n        for (i <- lst1) {\n            lst1_total\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2_total +=\
    \ i.length\n        }\n        if (lst1_total < lst2_total) {\n            return\
    \ lst1\n        } else {\n            return lst2\n        }", "        // Fill\
    \ Up this function body\n        // `totalMatch` should return the list that has\
    \ total number of chars in the all strings of the list less than the other list.\n\
    \        // if the two lists have the same number of chars, return the first list.\n\
    \        // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_len = 0\n \
    \       var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n\
    \        }\n        for (i <- lst2) {\n            lst2_len += i.length\n    \
    \    }\n        if (lst1_len == lst2_len) {\n            return lst1\n       \
    \ } else if (lst1_len < lst2_len) {\n            return lst1\n        } else {\n\
    \            return lst2\n        }", "        // Fill Up this function body\n\
    \        // `totalMatch` should return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        //\
    \ For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // Do not change the function signature\n        var lst1_total\
    \ = 0\n        var lst2_total = 0\n        for (i <- lst1) {\n            lst1_total\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2_total +=\
    \ i.length\n        }\n        if (lst1_total < lst2_total) {\n            return\
    \ lst1\n        } else {\n            return lst2\n        }", "        if (lst1.length\
    \ == 0) lst2\n        else if (lst2.length == 0) lst1\n        else {\n      \
    \      val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n           \
    \ val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n            if (total1\
    \ < total2) lst1\n            else if (total1 > total2) lst2\n            else\
    \ lst1\n        }", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all strings of\
    \ the list less than the other list.\n        // if the two lists have the same\
    \ number of chars, return the first list.\n        // For example,\n        //\
    \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"\
    )))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) {\n            return lst1\n        }\n        var\
    \ lst1Total = 0\n        var lst2Total = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            lst1Total += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            lst2Total += lst2(i).length\n        }\n       \
    \ if (lst1Total < lst2Total) {\n            return lst1\n        } else if (lst1Total\
    \ > lst2Total) {\n            return lst2\n        } else {\n            return\
    \ lst1\n        }", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        if (lst1.length == 0 && lst2.length == 0) {\n            return lst1\n\
    \        }\n        var lst1_sum = 0\n        var lst2_sum = 0\n        for (i\
    \ <- 0 until lst1.length) {\n            lst1_sum += lst1(i).length\n        }\n\
    \        for (i <- 0 until lst2.length) {\n            lst2_sum += lst2(i).length\n\
    \        }\n        if (lst1_sum < lst2_sum) {\n            return lst1\n    \
    \    } else if (lst1_sum > lst2_sum) {\n            return lst2\n        } else\
    \ {\n            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List(\"hi\", \"admin\")\n        // >>> lst2\n\
    \        // List(\"hI\", \"Hi\")\n        // >>> lst1.head\n        // \"hi\"\n\
    \        // >>> lst1.tail\n        // List(\"admin\")\n        // >>> lst1.tail.head\n\
    \        // \"admin\"\n        // >>> lst1.tail.tail\n        // List()\n    \
    \    // >>> lst1.tail.tail.head\n        // error: java.util.NoSuchElementException:\
    \ head of empty list\n        // >>> lst1.tail.tail.tail\n        // List()\n\
    \        // >>> lst1.tail.tail.tail.head\n        // error: java.util.NoSuchElementException:\
    \ head of empty list\n        // >>> lst1.tail.tail.tail.tail\n        // List()\n\
    \        // >>> lst1.tail.tail.tail.tail.head\n        // error: java.util.NoSuchElementException:\
    \ head of empty list\n        // >>> lst1.tail.tail.tail.tail.tail\n        //\
    \ List()\n        // >>> lst1.tail.tail.tail.tail.tail.head\n        // error:\
    \ java.util.NoSuchElementException: head of empty list\n        // >>> lst1.tail.tail.tail.tail.tail.tail\n\
    \        // List()\n        // >>> lst1.tail.tail.tail.tail.tail.tail.head\n \
    \       // error: java.util.NoSuchElementException: head of empty list\n     \
    \   // >>> lst1.tail.tail.tail.tail.tail.tail.tail\n        // List()\n      \
    \  // >>> lst1.tail.tail.tail.tail.tail.tail.tail.head\n        // error: java.util.NoSuchElementException:\
    \ head of empty list\n        // >>> lst1.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        // List()\n        // >>> lst1.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \       ", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List(\"hi\", \"admin\")\n        // >>> lst2\n        // List(\"hI\", \"\
    Hi\")\n        // >>> lst1.head\n        // \"hi\"\n        // >>> lst1.tail\n\
    \        // List(\"admin\")\n        // >>> lst1.tail.head\n        // \"admin\"\
    \n        // >>> lst1.tail.tail\n        // List()\n        // >>> lst1.tail.tail.head\n\
    \        // error: java.util.NoSuchElementException: head of empty list\n    \
    \    // >>> lst1.tail.tail.tail\n        // List()\n        // >>> lst1.tail.tail.tail.head\n\
    \        // error: java.util.NoSuchElementException: head of empty list\n    \
    \    // >>> lst1.tail.tail.tail.tail\n        // List()\n        // >>> lst1.tail.tail.tail.tail.head\n\
    \        // error: java.util.NoSuchElementException: head of empty list\n    \
    \    // >>> lst1.tail.tail.tail.tail.tail\n        // List()\n        // >>> lst1.tail.tail.tail.tail.tail.head\n\
    \        // error: java.util.NoSuchElementException: head of empty list\n    \
    \    // >>> lst1.tail.tail.tail.tail.tail.tail\n        // List()\n        //\
    \ >>> lst1.tail.tail.tail.tail.tail.tail.head\n        // error: java.util.NoSuchElementException:\
    \ head of empty list\n        // >>> lst1.tail.tail.tail.tail.tail.tail.tail\n\
    \        // List()\n        // >>> lst1.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        // error: java.util.NoSuchElementException: head of empty list\n    \
    \    // >>> lst1.tail.tail.tail.tail.tail.tail.tail.tail\n        // List()\n\
    \        // >>> lst1.tail.tail.tail.tail.tail.tail.tail.tail.head\n       ", " \
    \       // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // Do not change the function signature\n        // You may\
    \ create other functions\n        // You may also create classes\n        // You\
    \ may import scala.collection.mutable._\n        // You may import scala.math._\n\
    \        var lst1_sum = 0\n        var lst2_sum = 0\n        for (i <- lst1) {\n\
    \            lst1_sum += i.length\n        }\n        for (i <- lst2) {\n    \
    \        lst2_sum += i.length\n        }\n        if (lst1_sum < lst2_sum) {\n\
    \            return lst1\n        } else {\n            return lst2\n        }",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        var lst1_total = 0\n        var\
    \ lst2_total = 0\n        for (i <- 0 until lst1.length) {\n            lst1_total\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         lst2_total += lst2(i).length\n        }\n        if (lst1_total < lst2_total)\
    \ return lst1\n        else return lst2", "        var total1 = 0\n        var\
    \ total2 = 0\n        for (i <- lst1) {\n            total1 += i.length\n    \
    \    }\n        for (i <- lst2) {\n            total2 += i.length\n        }\n\
    \        if (total1 < total2) lst1 else lst2", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings\n        // You have\
    \ to return a list of strings\n        if (lst1.length == 0 && lst2.length ==\
    \ 0) return lst1\n        else if (lst1.length == 0) return lst2\n        else\
    \ if (lst2.length == 0) return lst1\n        else {\n            var lst1_total\
    \ = 0\n            var lst2_total = 0\n            for (i <- 0 until lst1.length)\
    \ {\n                lst1_total += lst1(i).length\n            }\n           \
    \ for (i <- 0 until lst2.length) {\n                lst2_total += lst2(i).length\n\
    \            }\n            if (lst1_total < lst2_total) return lst1\n       \
    \     else if (lst1_total > lst2_total) return lst2\n            else return lst1\n\
    \        }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // For each string in the list, you can get the length\
    \ of the string by `str.length`\n        // For example,\n        // >>> \"hi\"\
    .length\n        // 2\n        // >>> \"admin\".length\n        // 5\n       \
    \ // You can also get the total number of chars in the list by `lst.map(str =>\
    \ str.length).sum`\n        // For example,\n        // >>> lst1.map(str => str.length).sum\n\
    \        // 7\n        // >>> lst2.map(str => str.length).sum\n        // 4\n\
    \        // You can also get the total number of chars in the list by `lst.map(_.length).sum`\n\
    \        // For example,\n        // >>> lst1.map(_.length).sum\n        // 7\n\
    \        // >>> lst2.map(_.length).sum\n        // 4\n        // You can also\
    \ get the total number of chars in the list by `lst.map(str => str.length).sum`\n\
    \        // For example,\n        // >>> lst1.map(str => str.length).sum\n   \
    \     // 7\n        // >>> lst2.map(str => str.length).sum\n        // 4\n   \
    \     // You can also get the total number of chars in the list by `lst.map(_.length).sum`\n\
    \        // For example,\n        // >>> lst1.map(_.length).sum\n        // 7\n\
    \        // >>> lst2.map(_.length).sum\n        // 4\n        // You can also\
    \ get the total number of chars in the list by `lst.map(str => str.length).sum`\n\
    \        // For example,\n        // >>> lst1.map(str => str.length).sum\n   \
    \     // 7\n        // >>> lst2.map(str => str.length).sum\n        // 4\n   \
    \     // You can also get the total number of chars in", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ For example,\n        // >>> lst1\n        // List[String](\"hi\", \"admin\"\
    )\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n        // You\
    \ can get the length of a string as follows.\n        // >>> lst1(0).length\n\
    \        // 2\n        // You can get the length of a list as follows.\n     \
    \   // >>> lst1.length\n        // 2\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ lst1.map(_.length).sum\n        // 6\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ lst1.map(_.length).sum\n        // 6\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ lst1.map(_.length).sum\n        // 6\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ lst1.map(_.length).sum\n        // 6\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ lst1.map(_.length).sum\n        // 6\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ l", "        // Fill Up this function body\n        // `totalMatch` should return\
    \ the list that has total number of chars in the all strings of the list less\
    \ than the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // Do not modify the function signature\n  \
    \      var count1 = 0\n        var count2 = 0\n        for(i <- lst1)\n      \
    \      count1 += i.length\n        for(i <- lst2)\n            count2 += i.length\n\
    \        if(count1 < count2)\n            lst1\n        else if(count1 > count2)\n\
    \            lst2\n        else\n            lst1", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List(\"hi\", \"admin\")\n        // >>> lst2\n\
    \        // List(\"hI\", \"Hi\")\n        // >>> lst1(0)\n        // \"hi\"\n\
    \        // >>> lst2(1)\n        // \"Hi\"\n        // >>> lst1(0).length\n  \
    \      // 2\n        // >>> lst2(1).length\n        // 2\n        // >>> lst1.length\n\
    \        // 2\n        // >>> lst2.length\n        // 2\n        // >>> lst1.length\
    \ == lst2.length\n        // true\n        // >>> lst1.length != lst2.length\n\
    \        // false\n        // >>> lst1.length > lst2.length\n        // false\n\
    \        // >>> lst1.length < lst2.length\n        // false\n        // >>> lst1.length\
    \ >= lst2.length\n        // true\n        // >>> lst1.length <= lst2.length\n\
    \        // true\n        // >>> lst1.length + lst2.length\n        // 4\n   \
    \     // >>> lst1.length - lst2.length\n        // 0\n        // >>> lst1.length\
    \ * lst2.length\n        // 4\n        // >>> lst1.length / lst2.length\n    \
    \    // 1\n        // >>> lst1.length % lst2.length\n        // 0\n        //\
    \ >>> lst1.length.toDouble / lst2.length.toDouble\n        // 1.0\n        //\
    \ >>> lst1.length.toDouble / lst2.length\n        // 1.0\n        // >>> lst1.length\
    \ / lst2.length.toDouble\n        // 1.0\n        // >>> lst1.length.toFloat /\
    \ lst2.length.toFloat\n        // 1.0\n        // >>> lst1.length.toFloat / lst2.length\n\
    \        // 1.0\n        // >>> lst1.length / lst2.length.toFloat\n        //\
    \ 1", "        // Fill Up this function body\n        // `lst1` and `lst2` are\
    \ lists of strings\n        // For example,\n        // >>> lst1\n        // List[String](\"\
    hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\"\
    )\n        // You can use `lst1.length` to get the length of the list `lst1`\n\
    \        // You can use `lst1(0)` to get the first element of the list `lst1`\n\
    \        // You can use `lst1(1)` to get the second element of the list `lst1`\n\
    \        // You can use `lst1(2)` to get the third element of the list `lst1`\n\
    \        // and so on.\n        // You can use `lst1(lst1.length - 1)` to get\
    \ the last element of the list `lst1`\n        // You can use `lst1.head` to get\
    \ the first element of the list `lst1`\n        // You can use `lst1.tail` to\
    \ get the list without the first element of the list `lst1`\n        // You can\
    \ use `lst1.init` to get the list without the last element of the list `lst1`\n\
    \        // You can use `lst1.last` to get the last element of the list `lst1`\n\
    \        // You can use `lst1.reverse` to get the reversed list of the list `lst1`\n\
    \        // You can use `lst1.take(n)` to get the first `n` elements of the list\
    \ `lst1`\n        // You can use `lst1.drop(n)` to get the list without the first\
    \ `n` elements of the list `lst1`\n        // You can use `lst1.splitAt(n)` to\
    \ get a pair of lists, where the first list is the first `n` elements of the list\
    \ `lst1`\n        // and the second list is the list without the first `n` elements\
    \ of the list `lst1`\n        // You can use `lst1.takeWhile(f)` to get the list\
    \ of", "        if (lst1.length == 0) return lst2\n        if (lst2.length ==\
    \ 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        else return lst2",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For example,\n        // >>> lst1\n        // List(\"hi\"\
    , \"admin\")\n        // >>> lst2\n        // List(\"hI\", \"Hi\")\n        //\
    \ You can use `lst1.size` to get the number of strings in `lst1`\n        // You\
    \ can use `lst1(i)` to get the ith string in `lst1`\n        // You can use `lst1(i).size`\
    \ to get the number of chars in the ith string in `lst1`\n        // You can use\
    \ `lst1(i)(j)` to get the jth char in the ith string in `lst1`\n        // You\
    \ can use `lst1(i).substring(j, k)` to get the substring of the ith string in\
    \ `lst1` from index j to index k\n        // You can use `lst1(i).substring(j)`\
    \ to get the substring of the ith string in `lst1` from index j to the end\n \
    \       // You can use `lst1(i).substring(0, j)` to get the substring of the ith\
    \ string in `lst1` from the beginning to index j\n        // You can use `lst1(i).substring(0)`\
    \ to get the ith string in `lst1`\n        // You can use `lst1(i).toUpperCase`\
    \ to get the uppercase version of the ith string in `lst1`\n        // You can\
    \ use `lst1(i).toLowerCase` to get the lowercase version of the ith string in\
    \ `lst1`\n        // You can use `lst1(i).contains(s)` to check if the ith string\
    \ in `lst1` contains string `s`\n        // You can use `lst1(i).indexOf(s)` to\
    \ get the index of the first occurrence of string `s` in the ith string in `lst1`\n\
    \        // You can use `lst1(i).lastIndexOf(s)` to", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n   \
    \     else {\n            var total1 = 0\n            var total2 = 0\n       \
    \     for (i <- 0 until lst1.length) total1 += lst1(i).length\n            for\
    \ (i <- 0 until lst2.length) total2 += lst2(i).length\n            if (total1\
    \ < total2) lst1\n            else if (total1 > total2) lst2\n            else\
    \ lst1\n        }", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // Do not change the function signature\n\
    \        // You may create other functions\n        // You may import scala.math._\n\
    \        // You may import scala.collection.mutable._\n        var sum1 = 0\n\
    \        var sum2 = 0\n        for(i <- lst1) {\n            sum1 += i.length\n\
    \        }\n        for(i <- lst2) {\n            sum2 += i.length\n        }\n\
    \        if(sum1 < sum2) {\n            return lst1\n        }\n        else if(sum1\
    \ > sum2) {\n            return lst2\n        }\n        else {\n            return\
    \ lst1\n        }", "        if (lst1.length == 0 && lst2.length == 0) return\
    \ lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length ==\
    \ 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (str\
    \ <- lst1) sum1 += str.length\n        for (str <- lst2) sum2 += str.length\n\
    \        if (sum1 < sum2) return lst1\n        else if (sum1 > sum2) return lst2\n\
    \        else return lst1", "        if (lst1.length == 0 && lst2.length == 0)\
    \ return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n        }\n \
    \       for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) return lst1\n        if (sum1 > sum2) return\
    \ lst2\n        return lst1", "        // Fill Up this function body\n       \
    \ // `totalMatch` is a function that accepts two lists of strings and returns\
    \ the list that has \n        // total number of chars in the all strings of the\
    \ list less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        // Examples\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        if (lst1.length\
    \ == 0 && lst2.length == 0) {\n            return lst1\n        }\n        var\
    \ lst1_total = 0\n        var lst2_total = 0\n        for (i <- 0 to lst1.length\
    \ - 1) {\n            lst1_total += lst1(i).length\n        }\n        for (i\
    \ <- 0 to lst2.length - 1) {\n            lst2_total += lst2(i).length\n     \
    \   }\n        if (lst1_total == lst2_total) {\n            return lst1\n    \
    \    }\n        if (lst1_total < lst2_total) {\n            return lst1\n    \
    \    }\n        else {\n            return lst2\n        }", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      for (i <- 0 until lst1.length) total1 += lst1(i).length\n        var total2\
    \ = 0\n        for (i <- 0 until lst2.length) total2 += lst2(i).length\n     \
    \   if (total1 < total2) return lst1\n        else if (total1 > total2) return\
    \ lst2\n        else return lst1", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // For example,\n  \
    \      // >>> lst1\n        // List[String](\"hi\", \"admin\")\n        // >>>\
    \ lst2\n        // List[String](\"hI\", \"Hi\")\n        // >>> lst1(0)\n    \
    \    // \"hi\"\n        // >>> lst2(1)\n        // \"Hi\"\n        // >>> lst1(0).length\n\
    \        // 2\n        // >>> lst2(1).length\n        // 2\n        // >>> lst1(0)(0)\n\
    \        // 'h'\n        // >>> lst2(1)(1)\n        // 'i'\n        // >>> lst1(0)(0).toUpper\n\
    \        // 'H'\n        // >>> lst2(1)(1).toUpper\n        // 'I'\n        //\
    \ >>> lst1(0)(0).toUpper.toLower\n        // 'h'\n        // >>> lst2(1)(1).toUpper.toLower\n\
    \        // 'i'\n        // >>> lst1(0)(0).toUpper.toLower == lst2(1)(1).toUpper.toLower\n\
    \        // true\n        // >>> lst1(0)(0).toUpper.toLower == lst2(1)(1).toUpper.toLower\
    \ && lst1(0)(1).toUpper.toLower == lst2(1)(0).toUpper.toLower\n        // true\n\
    \        // >>> lst1(0)(0).toUpper.toLower == lst2(1)(1).toUpper.toLower && lst1(0)(1).toUpper.toLower\
    \ == lst2(1)(0).toUpper.toLower && lst1(1)(0).toUpper.toLower == lst2(0)(0).toUpper.toLower\
    \ && lst1(1)(1).toUpper.toLower == lst2(0)(1).toUpper.toLower && lst1(1)(2).toUpper.toLower\
    \ == lst2(0)(2).", "        val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n\
    \        val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if\
    \ (total1 < total2) lst1 else lst2", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ the list that has total number of chars in the all strings of the list less\
    \ than the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ lst1 else lst2", "        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- lst1) total1 += i.length\n        for (i <- lst2) total2 += i.length\n\
    \        if (total1 < total2) lst1\n        else if (total1 > total2) lst2\n \
    \       else lst1", "        if (lst1.length == 0 && lst2.length == 0) return\
    \ lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length ==\
    \ 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        if (total2 < total1)\
    \ return lst2\n        return lst1", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        for (i <- 0 until lst1.length)\
    \ sum1 += lst1(i).length\n        var sum2 = 0\n        for (i <- 0 until lst2.length)\
    \ sum2 += lst2(i).length\n        if (sum1 < sum2) return lst1\n        else return\
    \ lst2", "        // Fill Up this function body\n        // `totalMatch` should\
    \ return the list that has total number of chars in the all strings of the list\
    \ less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ You have to return a list of strings\n        // You have to return the list\
    \ that has total number of chars in the all strings of the list less than the\
    \ other list.\n        // if the two lists have the same number of chars, return\
    \ the first list.\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- lst1) {\n            sum1 += i.length\n        }\n        for (i <- lst2)\
    \ {\n            sum2 += i.length\n        }\n        if (sum1 < sum2) {\n   \
    \         return lst1\n        } else if (sum1 > sum2) {\n            return lst2\n\
    \        } else {\n            return lst1\n        }", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    if (lst1.length == 0 && lst2.length == 0) {\n            return lst1\n  \
    \      }\n        var total1 = 0\n        var total2 = 0\n        for (i <- 0\
    \ until lst1.length) {\n            total1 += lst1(i).length\n        }\n    \
    \    for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) {\n            return lst1\n        }\n\
    \        else if (total1 > total2) {\n            return lst2\n        }\n   \
    \     else {\n            return lst1\n        }", "        if (lst1.length ==\
    \ 0 && lst2.length == 0) return List[String]()\n        if (lst1.length == 0)\
    \ return lst2\n        if (lst2.length == 0) return lst1\n        var total1 =\
    \ 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) total1 +=\
    \ lst1(i).length\n        for (i <- 0 until lst2.length) total2 += lst2(i).length\n\
    \        if (total1 == total2) return lst1\n        if (total1 < total2) return\
    \ lst1\n        return lst2", "        if (lst1.length == 0 && lst2.length ==\
    \ 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var lst1Total = 0\n        var lst2Total = 0\n  \
    \      for (i <- 0 until lst1.length) lst1Total += lst1(i).length\n        for\
    \ (i <- 0 until lst2.length) lst2Total += lst2(i).length\n        if (lst1Total\
    \ < lst2Total) return lst1\n        else return lst2", "        def totalMatchHelper(lst1\
    \ : List[String], lst2 : List[String], total1 : Int, total2 : Int) : List[String]\
    \ = {\n            if (lst1.isEmpty && lst2.isEmpty) {\n                if (total1\
    \ < total2) lst1 else lst2\n            } else if (lst1.isEmpty) {\n         \
    \       if (total1 < total2) lst1 else lst2\n            } else if (lst2.isEmpty)\
    \ {\n                if (total1 < total2) lst1 else lst2\n            } else {\n\
    \                totalMatchHelper(lst1.tail, lst2.tail, total1 + lst1.head.length,\
    \ total2 + lst2.head.length)\n            }\n        }\n        totalMatchHelper(lst1,\
    \ lst2, 0, 0)", "        // Fill Up this function body\n        // `lst1` and\
    \ `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n     \
    \       sum1 += i.length\n        }\n        for (i <- lst2) {\n            sum2\
    \ += i.length\n        }\n        if (sum1 < sum2) {\n            return lst1\n\
    \        } else if (sum1 > sum2) {\n            return lst2\n        } else {\n\
    \            return lst1\n        }", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        else return lst2",
  "        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        if (lst1.map(_.length).sum\
    \ < lst2.map(_.length).sum) return lst1\n        else return lst2", "        //\
    \ Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // You have to return the list that has total number of chars in the\
    \ all strings of the list less than the other list.\n        // if the two lists\
    \ have the same number of chars, return the first list.\n        var sum1 = 0\n\
    \        var sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n\
    \        }\n        for (i <- lst2) {\n            sum2 += i.length\n        }\n\
    \        if (sum1 < sum2) {\n            return lst1\n        } else if (sum1\
    \ > sum2) {\n            return lst2\n        } else {\n            return lst1\n\
    \        }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // You have to return a list of strings\n    \
    \    val lst1_total = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val\
    \ lst2_total = lst2.foldLeft(0)((acc, x) => acc + x.length)\n        if (lst1_total\
    \ < lst2_total) lst1 else lst2", "        // Fill Up this function body\n    \
    \    // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        if (lst1.length == 0 && lst2.length == 0) return\
    \ lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length ==\
    \ 0) return lst1\n        var lst1_total = 0\n        var lst2_total = 0\n   \
    \     for (i <- 0 until lst1.length) {\n            lst1_total += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            lst2_total +=\
    \ lst2(i).length\n        }\n        if (lst1_total < lst2_total) return lst1\n\
    \        else if (lst1_total > lst2_total) return lst2\n        else return lst1",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For Example:\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ You have to return a list of strings\n        if (lst1.length == 0) lst2\n \
    \       else if (lst2.length == 0) lst1\n        else {\n            var total1\
    \ = 0\n            var total2 = 0\n            for (i <- 0 until lst1.length)\
    \ {\n                total1 += lst1(i).length\n            }\n            for\
    \ (i <- 0 until lst2.length) {\n                total2 += lst2(i).length\n   \
    \         }\n            if (total1 < total2) lst1\n            else if (total1\
    \ > total2) lst2\n            else lst1\n        }", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ You have to return a list of strings\n        var lst1_len = 0\n        var\
    \ lst2_len = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n\
    \        }\n        for (i <- lst2) {\n            lst2_len += i.length\n    \
    \    }\n        if (lst1_len < lst2_len) {\n            return lst1\n        }\
    \ else if (lst1_len > lst2_len) {\n            return lst2\n        } else {\n\
    \            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ the list that has total number of chars in the all strings of the list less\
    \ than the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        if (lst1.length == 0 && lst2.length == 0) {\n\
    \            return lst1\n        }\n        var sum1 = 0\n        var sum2 =\
    \ 0\n        for (i <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) {\n            return lst1\n        } else\
    \ if (sum1 > sum2) {\n            return lst2\n        } else {\n            return\
    \ lst1\n        }", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all strings of\
    \ the list less than the other list.\n        // if the two lists have the same\
    \ number of chars, return the first list.\n        // For example,\n        //\
    \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"\
    )))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n     \
    \       sum1 += i.length\n        }\n        for (i <- lst2) {\n            sum2\
    \ += i.length\n        }\n        if (sum1 < sum2) lst1\n        else if (sum1\
    \ > sum2) lst2\n        else lst1", "        val total1 = lst1.foldLeft(0)((sum,\
    \ str) => sum + str.length)\n        val total2 = lst2.foldLeft(0)((sum, str)\
    \ => sum + str.length)\n        if (total1 < total2) lst1 else lst2", "      \
    \  var total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n       \
    \     total1 += i.length\n        }\n        for (i <- lst2) {\n            total2\
    \ += i.length\n        }\n        if (total1 < total2) lst1 else lst2", "    \
    \    // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        var lst1_len = 0\n        var lst2_len = 0\n\
    \        for (i <- lst1) {\n            lst1_len += i.length\n        }\n    \
    \    for (i <- lst2) {\n            lst2_len += i.length\n        }\n        if\
    \ (lst1_len < lst2_len) {\n            return lst1\n        } else if (lst1_len\
    \ > lst2_len) {\n            return lst2\n        } else {\n            return\
    \ lst1\n        }", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        if (lst1.length == 0 && lst2.length == 0) {\n            return lst1\n\
    \        }\n        var total1 = 0\n        var total2 = 0\n        for (i <-\
    \ 0 until lst1.length) {\n            total1 += lst1(i).length\n        }\n  \
    \      for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) {\n            return lst1\n        }\
    \ else if (total1 > total2) {\n            return lst2\n        } else {\n   \
    \         return lst1\n        }", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // For example,\n  \
    \      // >>> lst1\n        // List[String](\"hi\", \"admin\")\n        // >>>\
    \ lst2\n        // List[String](\"hI\", \"Hi\")\n        // You can use `lst1.length`\
    \ to get the length of the list\n        // You can use `lst1(0)` to get the first\
    \ element of the list\n        // You can use `lst1(1)` to get the second element\
    \ of the list\n        // You can use `lst1(2)` to get the third element of the\
    \ list\n        // and so on.\n        // You can use `lst1(0).length` to get\
    \ the length of the first string\n        // You can use `lst1(1).length` to get\
    \ the length of the second string\n        // and so on.\n        // You can use\
    \ `lst1(0).toLowerCase` to convert the first string to lower case\n        //\
    \ You can use `lst1(1).toLowerCase` to convert the second string to lower case\n\
    \        // and so on.\n        // You can use `lst1(0).toUpperCase` to convert\
    \ the first string to upper case\n        // You can use `lst1(1).toUpperCase`\
    \ to convert the second string to upper case\n        // and so on.\n        //\
    \ You can use `lst1(0).contains(\"hi\")` to check if the first string contains\
    \ \"hi\"\n        // You can use `lst1(1).contains(\"hi\")` to check if the second\
    \ string contains \"hi\"\n        // and so on.\n        // You can use `lst1(0).contains(\"\
    HI\")` to check if the first string contains \"HI\"\n        // You can use `lst1(1).contains(\"\
    HI\")` to check if the second string contains \"HI\"\n        // and so on.\n\
    \        // You can use `lst1(0).contains(\"Hi\")` to check if the first string\
    \ contains \"Hi\"\n        // You can use `lst1(1).contains(\"Hi\")", "      \
    \  // Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // For example,\n        // >>> lst1\n        // List[String](\"hi\"\
    , \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n \
    \       // You can access the string in the list using lst(index)\n        //\
    \ For example,\n        // >>> lst1(0)\n        // \"hi\"\n        // >>> lst1(1)\n\
    \        // \"admin\"\n        // You can get the length of a string using the\
    \ length() function\n        // For example,\n        // >>> lst1(0).length()\n\
    \        // 2\n        // >>> lst1(1).length()\n        // 5\n        // You can\
    \ get the total length of all strings in a list using the sum() function\n   \
    \     // For example,\n        // >>> lst1.map(_.length()).sum\n        // 7\n\
    \        // >>> lst2.map(_.length()).sum\n        // 4\n        // You can compare\
    \ two integers using the == operator\n        // For example,\n        // >>>\
    \ lst1.map(_.length()).sum == lst2.map(_.length()).sum\n        // false\n   \
    \     // >>> lst1.map(_.length()).sum == lst1.map(_.length()).sum\n        //\
    \ true\n        // You can use the if-else expression to return the correct list\n\
    \        // For example,\n        // >>> if (lst1.map(_.length()).sum == lst2.map(_.length()).sum)\
    \ lst1 else lst2\n        // List[String](\"hI\", \"Hi\")\n        // >>> if (lst1.map(_.length()).sum\
    \ == lst1.map(_.length()).sum) lst1 else lst2\n        // List[String](\"hi\"\
    , \"admin\")\n        if (lst1.map(_.length()).sum == lst2.map(_.length()).sum)\
    \ lst1 else lst2", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all strings of\
    \ the list less than the other list.\n        // if the two lists have the same\
    \ number of chars, return the first list.\n        // For example,\n        //\
    \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"\
    )))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n",
  "        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) total1 +=\
    \ lst1(i).length\n        for (i <- 0 until lst2.length) total2 += lst2(i).length\n\
    \        if (total1 < total2) return lst1\n        else if (total1 > total2) return\
    \ lst2\n        else return lst1", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        else if (lst1.length == 0) return lst2\n        else\
    \ if (lst2.length == 0) return lst1\n        var total1 = 0\n        var total2\
    \ = 0\n        for (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        else if (total1\
    \ > total2) return lst2\n        else return lst1", "        if (lst1.length ==\
    \ 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return lst2\n\
    \        if (lst2.length == 0) return lst1\n        var sum1 = 0\n        var\
    \ sum2 = 0\n        for (i <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) return lst1\n        else if (sum1 > sum2)\
    \ return lst2\n        else return lst1", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        if (lst1.length == 0 && lst2.length == 0) {\n   \
    \         return lst1\n        }\n        var lst1Total = 0\n        var lst2Total\
    \ = 0\n        for (i <- 0 until lst1.length) {\n            lst1Total += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            lst2Total +=\
    \ lst2(i).length\n        }\n        if (lst1Total < lst2Total) {\n          \
    \  return lst1\n        } else if (lst1Total > lst2Total) {\n            return\
    \ lst2\n        } else {\n            return lst1\n        }", "        // Fill\
    \ Up this function body\n        // `lst1` and `lst2` are lists of strings\n \
    \       // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // `lst1` has total number of chars in all strings of the list less than\
    \ the other list\n        // `lst2` has total number of chars in all strings of\
    \ the list greater than the other list\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // `lst1` has total number of chars in all strings\
    \ of the list less than the other list\n        // `lst2` has total number of\
    \ chars in all strings of the list greater than the other list\n        // >>>\
    \ totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\", \"4\",\
    \ \"5\")))\n        // (List[String](\"4\"))\n        // `lst1` has total number\
    \ of chars in all strings of the list less than the other list\n        // `lst2`\
    \ has total number of chars in all strings of the list greater than the other\
    \ list\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // `lst1` has total number of chars in all strings of the list less\
    \ than the other list\n        // `lst2` has total number of chars in all strings\
    \ of the list greater than the other list\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // `lst1` has total\
    \ number of chars in all strings of the list less than the other list\n      \
    \  // `lst2` has total number of chars in all strings of the list greater than\
    \ the other list\n        // >>> totalMatch((List[String](\"hi\", \"admin", " \
    \       // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        var sum1 = 0\n        var sum2 = 0\n       \
    \ for(i <- lst1)\n        {\n            sum1 += i.length\n        }\n       \
    \ for(i <- lst2)\n        {\n            sum2 += i.length\n        }\n       \
    \ if(sum1 < sum2)\n        {\n            return lst1\n        }\n        else\
    \ if(sum1 > sum2)\n        {\n            return lst2\n        }\n        else\n\
    \        {\n            return lst1\n        }", "        if (lst1.length == 0\
    \ && lst2.length == 0) return lst1\n        if (lst1.length == 0) return lst2\n\
    \        if (lst2.length == 0) return lst1\n        var sum1 = 0\n        var\
    \ sum2 = 0\n        for (i <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) return lst1\n        else if (sum1 > sum2)\
    \ return lst2\n        else return lst1", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) total1 += lst1(i).length\n        for (i <- 0 until\
    \ lst2.length) total2 += lst2(i).length\n        if (total1 == total2) return\
    \ lst1\n        if (total1 < total2) return lst1\n        return lst2", "    \
    \    if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n\
    \        var total1 = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            total1 += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            total2 += lst2(i).length\n        }\n        if\
    \ (total1 < total2) return lst1\n        else return lst2", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) total1 += lst1(i).length\n\
    \        for (i <- 0 until lst2.length) total2 += lst2(i).length\n        if (total1\
    \ < total2) return lst1\n        else if (total1 > total2) return lst2\n     \
    \   else return lst1", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        var lst1_len = 0\n        var lst2_len = 0\n        for (i <- lst1) {\n\
    \            lst1_len += i.length\n        }\n        for (i <- lst2) {\n    \
    \        lst2_len += i.length\n        }\n        if (lst1_len < lst2_len) {\n\
    \            return lst1\n        } else if (lst1_len > lst2_len) {\n        \
    \    return lst2\n        } else {\n            return lst1\n        }", "   \
    \     if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        if (total2 < total1) return lst2\n        return lst1",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) {\n            return lst1\n        }\n        if\
    \ (lst1.length == 0) {\n            return lst2\n        }\n        if (lst2.length\
    \ == 0) {\n            return lst1\n        }\n        var total1 = 0\n      \
    \  var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) {\n\
    \            return lst1\n        }\n        if (total2 < total1) {\n        \
    \    return lst2\n        }\n        return lst1", "        if (lst1.length ==\
    \ 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return lst2\n\
    \        if (lst2.length == 0) return lst1\n        var total1 = 0\n        var\
    \ total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1 +=\
    \ lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n      \
    \      total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        if (total2 < total1) return lst2\n        return lst1",
  "        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var total1 = 0\n        var total2 = 0\n        for (i <- 0 until\
    \ lst1.length) total1 += lst1(i).length\n        for (i <- 0 until lst2.length)\
    \ total2 += lst2(i).length\n        if (total1 < total2) return lst1\n       \
    \ else return lst2", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // For example,\n        // >>> lst1\n\
    \        // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // >>> lst1(0)\n        // \"hi\"\n        // >>> lst2(1)\n\
    \        // \"Hi\"\n        // >>> lst1(0).length\n        // 2\n        // >>>\
    \ lst2(1).length\n        // 2\n        // >>> lst1(0).length + lst1(1).length\n\
    \        // 7\n        // >>> lst2(0).length + lst2(1).length\n        // 4\n\
    \        // >>> lst1(0).length + lst1(1).length < lst2(0).length + lst2(1).length\n\
    \        // false\n        // >>> lst1(0).length + lst1(1).length == lst2(0).length\
    \ + lst2(1).length\n        // false\n        // >>> lst1(0).length + lst1(1).length\
    \ > lst2(0).length + lst2(1).length\n        // true\n        // >>> lst1(0).length\
    \ + lst1(1).length < lst2(0).length + lst2(1).length\n        // false\n     \
    \   // >>> lst1(0).length + lst1(1).length == lst2(0).length + lst2(1).length\n\
    \        // false\n        // >>> lst1(0).length + lst1(1).length > lst2(0).length\
    \ + lst2(1).length\n        // true\n        // >>> lst1(0).length + lst1(1).length\
    \ < lst2(0).length + lst2(1).length\n        // false\n        // >>> lst1(0).length\
    \ + lst1(1).length == lst2(0).length + lst2(1).length\n        // false\n    \
    \    // >>> lst1(0).length + lst1(1).length", "        var sum1 = 0\n        var\
    \ sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n        }\n\
    \        for (i <- lst2) {\n            sum2 += i.length\n        }\n        if\
    \ (sum1 < sum2) lst1\n        else if (sum1 > sum2) lst2\n        else lst1",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        // You have\
    \ to return a list of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n        // You have to return\
    \ a list of strings\n        // You have to return a list of strings\n       \
    \ // You have to return a list of strings\n        // You have to return a list\
    \ of strings\n        // You have to return a list of strings\n        // You\
    \ have to return a list of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n        // You have to return\
    \ a list of strings\n        // You have to return a list of strings\n       \
    \ // You have to return a list of strings\n        // You have to return a list\
    \ of strings\n        // You have to return a list of strings\n        // You\
    \ have to return a list of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n        // You have to return\
    \ a list of strings\n        // You have to return a list of strings\n       \
    \ // You have to return a list of strings\n        // You have to return a list\
    \ of strings\n        // You have to return a list of strings\n        // You\
    \ have to return a list of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n        // You have to return\
    \ a list of strings\n        // You have to return a list of strings\n       \
    \ // You have to return a list of strings\n        // You have to return a list\
    \ of strings\n        // You have to return a list of strings\n        // You\
    \ have to return a list of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n        // You have to return\
    \ a list of strings\n        // You have to return a list of strings\n       \
    \ // You have to return a list of strings\n        // You have to return a list\
    \ of strings\n        // You have to return a list of strings\n        // You\
    \ have to return a list of strings\n        // You have to return a list of strings\n\
    \        // You have to return a list of strings\n       ", "        // Fill Up\
    \ this function body\n        // `lst1` and `lst2` are lists of strings\n    \
    \    // You have to return a list of strings\n        var lst1_len = 0\n     \
    \   var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n\
    \        }\n        for (i <- lst2) {\n            lst2_len += i.length\n    \
    \    }\n        if (lst1_len < lst2_len) {\n            return lst1\n        }\
    \ else if (lst1_len > lst2_len) {\n            return lst2\n        } else {\n\
    \            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List[String](\"hi\", \"admin\")\n        // >>>\
    \ lst2\n        // List[String](\"hI\", \"Hi\")\n        // >>> lst1.head\n  \
    \      // \"hi\"\n        // >>> lst1.tail\n        // List[String](\"admin\"\
    )\n        // >>> lst1.tail.head\n        // \"admin\"\n        // >>> lst1.tail.tail\n\
    \        // List[String]()\n        // >>> lst1.tail.tail.head\n        // error:\
    \ value head is not a member of List[String]\n        // >>> lst1.tail.tail.isEmpty\n\
    \        // true\n        // >>> lst1.tail.tail.isEmpty == true\n        // true\n\
    \        // >>> lst1.tail.tail.isEmpty == false\n        // false\n        //\
    \ >>> lst1.tail.tail.isEmpty != true\n        // false\n        // >>> lst1.tail.tail.isEmpty\
    \ != false\n        // true\n        // >>> lst1.tail.tail.isEmpty == Nil\n  \
    \      // true\n        // >>> lst1.tail.tail == Nil\n        // true\n      \
    \  // >>> lst1.tail.tail == List[String]()\n        // true\n        // >>> lst1.tail.tail.length\n\
    \        // 0\n        // >>> lst1.tail.tail.length == 0\n        // true\n  \
    \      // >>> lst1.tail.tail.length == 1\n        // false\n        // >>> lst1.tail.tail.length\
    \ != 0\n        // false\n        // >>> lst1.tail.tail.length != 1\n        //\
    \ true\n        // >>> lst1.tail.tail.length > 0\n        // false\n        //\
    \ >>> lst1.tail.tail.length < 0\n        // false\n        // >>> lst1.tail.tail.length\
    \ >= 0\n        // true\n        // >>> lst1.tail.tail.length <= 0\n        //\
    \ true\n        // >>> lst1.tail.tail.length > 1", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings\n        // You have\
    \ to return the list that has total number of chars in the all strings of the\
    \ list less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        var sum1 = 0\n        var sum2 = 0\n\
    \        for (i <- lst1) {\n            sum1 += i.length\n        }\n        for\
    \ (i <- lst2) {\n            sum2 += i.length\n        }\n        if (sum1 < sum2)\
    \ {\n            return lst1\n        } else if (sum1 > sum2) {\n            return\
    \ lst2\n        } else {\n            return lst1\n        }", "        // Fill\
    \ Up this function body\n        // `lst1` and `lst2` are lists of strings\n \
    \       // For Example:\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        if(lst1.length\
    \ == 0 && lst2.length == 0) List[String]()\n        else if(lst1.length == 0)\
    \ lst2\n        else if(lst2.length == 0) lst1\n        else {\n            var\
    \ sum1 = 0\n            var sum2 = 0\n            for(i <- 0 until lst1.length)\
    \ {\n                sum1 += lst1(i).length\n            }\n            for(i\
    \ <- 0 until lst2.length) {\n                sum2 += lst2(i).length\n        \
    \    }\n            if(sum1 < sum2) lst1\n            else if(sum1 > sum2) lst2\n\
    \            else lst1\n        }", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n        }\n \
    \       for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 <= sum2) return lst1\n        else return lst2",
  "        if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        else if (total1 > total2) return lst2\n        else return\
    \ lst1", "        // Fill Up this function body\n        // `totalMatch` must\
    \ be a tail-recursive function\n        def totalMatchHelper(lst1 : List[String],\
    \ lst2 : List[String], acc : Int) : Int = {\n            if (lst1.isEmpty) acc\n\
    \            else totalMatchHelper(lst1.tail, lst2, acc + lst1.head.length)\n\
    \        }\n        val total1 = totalMatchHelper(lst1, lst2, 0)\n        val\
    \ total2 = totalMatchHelper(lst2, lst1, 0)\n        if (total1 < total2) lst1\n\
    \        else lst2", "        if (lst1.length == 0 && lst2.length == 0) return\
    \ lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length ==\
    \ 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i <-\
    \ 0 until lst1.length) sum1 += lst1(i).length\n        for (i <- 0 until lst2.length)\
    \ sum2 += lst2(i).length\n        if (sum1 < sum2) return lst1\n        else return\
    \ lst2", "        if (lst1.length == 0) lst2\n        else if (lst2.length ==\
    \ 0) lst1\n        else {\n            var sum1 = 0\n            for (i <- 0 until\
    \ lst1.length) sum1 += lst1(i).length\n            var sum2 = 0\n            for\
    \ (i <- 0 until lst2.length) sum2 += lst2(i).length\n            if (sum1 < sum2)\
    \ lst1\n            else if (sum1 > sum2) lst2\n            else lst1\n      \
    \  }", "        if (lst1.length == 0 && lst2.length == 0) return lst1\n      \
    \  if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            sum1 += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            sum2 += lst2(i).length\n        }\n        if (sum1\
    \ < sum2) return lst1\n        else if (sum1 > sum2) return lst2\n        else\
    \ return lst1", "        // Fill Up this function body\n        // `lst1` and\
    \ `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        if (lst1.length == 0) lst2\n        else if (lst2.length == 0) lst1\n\
    \        else {\n            var total1 = 0\n            var total2 = 0\n    \
    \        for (i <- 0 until lst1.length) {\n                total1 += lst1(i).length\n\
    \            }\n            for (i <- 0 until lst2.length) {\n               \
    \ total2 += lst2(i).length\n            }\n            if (total1 < total2) lst1\n\
    \            else if (total1 > total2) lst2\n            else lst1\n        }",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For example,\n        // lst1 = List(\"hi\", \"admin\")\n\
    \        // lst2 = List(\"hI\", \"Hi\")\n        // In this case,\n        //\
    \ lst1 has total number of chars in the all strings of the list less than the\
    \ other list.\n        // So, the function will return lst1\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var lst1_sum = 0\n\
    \        var lst2_sum = 0\n        for (i <- 0 until lst1.length) {\n        \
    \    lst1_sum += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            lst2_sum += lst2(i).length\n        }\n        if (lst1_sum <\
    \ lst2_sum) return lst1\n        else if (lst1_sum > lst2_sum) return lst2\n \
    \       else return lst1", "        // Fill Up this function body\n        //\
    \ `lst1` and `lst2` are lists of strings\n        // You have to return a list\
    \ of strings\n        if (lst1.length == 0 && lst2.length == 0) return lst1\n\
    \        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until\
    \ lst1.length) {\n            sum1 += lst1(i).length\n        }\n        for (i\
    \ <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n        }\n \
    \       if (sum1 < sum2) return lst1\n        else return lst2", "        // Fill\
    \ Up this function body\n        // `totalMatch` should return the list that has\
    \ total number of chars in the all strings of the list less than the other list.\n\
    \        // if the two lists have the same number of chars, return the first list.\n\
    \        // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_len = 0\n \
    \       var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n\
    \        }\n        for (i <- lst2) {\n            lst2_len += i.length\n    \
    \    }\n        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1", "        var total1 = 0\n        var total2 = 0\n\
    \        for (str <- lst1) total1 += str.length\n        for (str <- lst2) total2\
    \ += str.length\n        if (total1 == total2) lst1\n        else if (total1 <\
    \ total2) lst1\n        else lst2", "        // Fill Up this function body\n \
    \       // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        var lst1_len = 0\n        var lst2_len = 0\n    \
    \    for (i <- lst1) {\n            lst1_len += i.length\n        }\n        for\
    \ (i <- lst2) {\n            lst2_len += i.length\n        }\n        if (lst1_len\
    \ < lst2_len) {\n            return lst1\n        } else if (lst1_len > lst2_len)\
    \ {\n            return lst2\n        } else {\n            return lst1\n    \
    \    }", "        // Fill Up this function body\n        // `totalMatch` should\
    \ return the list that has total number of chars in the all strings of the list\
    \ less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        if (lst1.length == 0\
    \ && lst2.length == 0) {\n            return List[String]()\n        }\n     \
    \   var lst1Total = 0\n        var lst2Total = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            lst1Total += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            lst2Total += lst2(i).length\n        }\n       \
    \ if (lst1Total < lst2Total) {\n            return lst1\n        } else {\n  \
    \          return lst2\n        }", "        // Fill Up this function body\n \
    \       // `totalMatch` should return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        var\
    \ sum1 = 0\n        var sum2 = 0\n        for(i <- lst1) {\n            sum1 +=\
    \ i.length\n        }\n        for(i <- lst2) {\n            sum2 += i.length\n\
    \        }\n        if(sum1 < sum2) {\n            return lst1\n        } else\
    \ if(sum1 > sum2) {\n            return lst2\n        } else {\n            return\
    \ lst1\n        }", "        if (lst1.length == 0 && lst2.length == 0) return\
    \ lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length ==\
    \ 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        if (total2 < total1)\
    \ return lst2\n        return lst1", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List(\"hi\", \"admin\")\n        // >>> lst2\n\
    \        // List(\"hI\", \"Hi\")\n        // >>> lst1.length\n        // 2\n \
    \       // >>> lst1(0)\n        // \"hi\"\n        // >>> lst1(1)\n        //\
    \ \"admin\"\n        // >>> lst1(0).length\n        // 2\n        // >>> lst1(1).length\n\
    \        // 5\n        // >>> lst1(0)(0)\n        // 'h'\n        // >>> lst1(0)(1)\n\
    \        // 'i'\n        // >>> lst1(1)(0)\n        // 'a'\n        // >>> lst1(1)(1)\n\
    \        // 'd'\n        // >>> lst1(1)(2)\n        // 'm'\n        // >>> lst1(1)(3)\n\
    \        // 'i'\n        // >>> lst1(1)(4)\n        // 'n'\n        // >>> lst1(1)(5)\n\
    \        // java.lang.StringIndexOutOfBoundsException: String index out of range:\
    \ 5\n        // >>> lst1(1)(-1)\n        // java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n        // >>> lst1(2)\n        // java.lang.IndexOutOfBoundsException:\
    \ 2\n        // >>> lst1(-1)\n        // java.lang.IndexOutOfBoundsException:\
    \ -1\n        // >>> lst1.length\n        // 2\n        // >>> lst1.isEmpty\n\
    \        // false\n        // >>> lst1.head\n        // \"hi\"\n        // >>>\
    \ lst1.tail\n        // List(\"admin\")\n        // >>> lst1.tail.head\n     \
    \   // \"admin\"\n        // >>> lst1.tail.tail\n        // List()\n        //\
    \ >>> lst1.tail.tail.isEmpty\n        // true\n        // >>> lst1.tail.tail.head\n",
  "        // Fill Up this function body\n        // `totalMatch` must return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        if (lst1.length == 0 && lst2.length == 0) {\n\
    \            return lst1\n        }\n        var sum1 = 0\n        var sum2 =\
    \ 0\n        for (i <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) {\n            return lst1\n        } else\
    \ if (sum1 > sum2) {\n            return lst2\n        } else {\n            return\
    \ lst1\n        }", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // For example,\n        // >>> lst1\n\
    \        // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // >>> lst1(0)\n        // \"hi\"\n        // >>> lst2(1)\n\
    \        // \"Hi\"\n        // >>> lst1(0).length\n        // 2\n        // >>>\
    \ lst2(1).length\n        // 2\n        // >>> lst1(0)(0)\n        // 'h'\n  \
    \      // >>> lst2(1)(1)\n        // 'i'\n        // >>> lst1(0)(0).toUpper\n\
    \        // 'H'\n        // >>> lst2(1)(1).toUpper\n        // 'I'\n        //\
    \ >>> lst1(0)(0).toUpper == lst2(1)(1).toUpper\n        // true\n        // >>>\
    \ lst1(0)(0).toUpper == lst2(1)(1)\n        // false\n        // >>> lst1(0)(0)\
    \ == lst2(1)(1).toUpper\n        // false\n        // >>> lst1(0)(0) == lst2(1)(1)\n\
    \        // false\n        // >>> lst1(0)(0).toUpper == lst2(1)(1).toUpper\n \
    \       // true\n        // >>> lst1(0)(0).toUpper == lst2(1)(1)\n        // false\n\
    \        // >>> lst1(0)(0) == lst2(1)(1).toUpper\n        // false\n        //\
    \ >>> lst1(0)(0) == lst2(1)(1)\n        // false\n        // >>> lst1(0)(0).toUpper\
    \ == lst2(1)(1).toUpper\n        // true\n        // >>> lst1(0)(0).toUpper ==\
    \ lst2(1)(1)\n        // false\n        // >>> lst1(0)(0) == lst2", "        //\
    \ Fill Up this function body\n        // `totalMatch` should return the list that\
    \ has total number of chars in the all strings of the list less than the other\
    \ list.\n        // if the two lists have the same number of chars, return the\
    \ first list.\n        var sum1 = 0\n        var sum2 = 0\n        for(i <- lst1)\
    \ {\n            sum1 += i.length\n        }\n        for(i <- lst2) {\n     \
    \       sum2 += i.length\n        }\n        if(sum1 < sum2) {\n            return\
    \ lst1\n        }\n        else if(sum1 > sum2) {\n            return lst2\n \
    \       }\n        else {\n            return lst1\n        }", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var sum1 = 0\n    \
    \    var sum2 = 0\n        for (i <- 0 until lst1.length) sum1 += lst1(i).length\n\
    \        for (i <- 0 until lst2.length) sum2 += lst2(i).length\n        if (sum1\
    \ < sum2) return lst1\n        else return lst2", "        // Fill Up this function\
    \ body\n        // `totalMatch` should return the list that has total number of\
    \ chars in the all strings of the list less than the other list.\n        // if\
    \ the two lists have the same number of chars, return the first list.\n      \
    \  // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_total_chars\
    \ = 0\n        var lst2_total_chars = 0\n        for (i <- lst1) {\n         \
    \   lst1_total_chars += i.length\n        }\n        for (i <- lst2) {\n     \
    \       lst2_total_chars += i.length\n        }\n        if (lst1_total_chars\
    \ == lst2_total_chars) {\n            return lst1\n        } else if (lst1_total_chars\
    \ < lst2_total_chars) {\n            return lst1\n        } else {\n         \
    \   return lst2\n        }", "        if (lst1.length == 0 && lst2.length == 0)\
    \ return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        else if (total1\
    \ > total2) return lst2\n        else return lst1", "        if (lst1.size ==\
    \ 0 && lst2.size == 0) return lst1\n        if (lst1.size == 0) return lst2\n\
    \        if (lst2.size == 0) return lst1\n        var total1 = 0\n        var\
    \ total2 = 0\n        for (i <- 0 until lst1.size) {\n            total1 += lst1(i).size\n\
    \        }\n        for (i <- 0 until lst2.size) {\n            total2 += lst2(i).size\n\
    \        }\n        if (total1 < total2) return lst1\n        else if (total1\
    \ > total2) return lst2\n        else return lst1", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings\n        // You have\
    \ to return a list of strings\n        if (lst1.length == 0 && lst2.length ==\
    \ 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var lst1_total = 0\n        var lst2_total = 0\n\
    \        for (i <- 0 until lst1.length) {\n            lst1_total += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            lst2_total +=\
    \ lst2(i).length\n        }\n        if (lst1_total < lst2_total) return lst1\n\
    \        else if (lst1_total > lst2_total) return lst2\n        else return lst1",
  "        // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ For example,\n        // >>> lst1\n        // List[String](\"hi\", \"admin\"\
    )\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n        // >>>\
    \ lst1(0)\n        // \"hi\"\n        // >>> lst2(1)\n        // \"Hi\"\n    \
    \    // >>> lst1(0).length\n        // 2\n        // >>> lst2(1).length\n    \
    \    // 2\n        // >>> lst1(0)(0)\n        // 'h'\n        // >>> lst2(1)(1)\n\
    \        // 'i'\n        if (lst1.length == 0 && lst2.length == 0) return lst1\n\
    \        if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until\
    \ lst1.length) {\n            for (j <- 0 until lst1(i).length) {\n          \
    \      sum1 += lst1(i)(j)\n            }\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            for (j <- 0 until lst2(i).length) {\n          \
    \      sum2 += lst2(i)(j)\n            }\n        }\n        if (sum1 < sum2)\
    \ return lst1\n        else return lst2", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List[String](\"hi\", \"admin\")\n        // >>>\
    \ lst2\n        // List[String](\"hI\", \"Hi\")\n        // >>> lst1(0)\n    \
    \    // \"hi\"\n        // >>> lst2(1)\n        // \"Hi\"\n        // >>> lst1(0).length\n\
    \        // 2\n        // >>> lst2(1).length\n        // 2\n        // >>> lst1(0).length\
    \ + lst1(1).length\n        // 6\n        // >>> lst2(0).length + lst2(1).length\n\
    \        // 4\n        // >>> lst1.length\n        // 2\n        // >>> lst2.length\n\
    \        // 2\n        // >>> lst1.length + lst2.length\n        // 4\n      \
    \  // >>> lst1.isEmpty\n        // false\n        // >>> lst2.isEmpty\n      \
    \  // false\n        // >>> lst1.isEmpty && lst2.isEmpty\n        // false\n \
    \       // >>> lst1.isEmpty || lst2.isEmpty\n        // false\n        // >>>\
    \ lst1.isEmpty && lst2.isEmpty\n        // false\n        // >>> lst1.isEmpty\
    \ || lst2.isEmpty\n        // false\n        // >>> lst1.isEmpty && lst2.isEmpty\n\
    \        // false\n        // >>> lst1.isEmpty || lst2.isEmpty\n        // false\n\
    \        // >>> lst1.isEmpty && lst2.isEmpty\n        // false\n        // >>>\
    \ lst1.isEmpty || lst2.isEmpty\n        // false\n        // >>> lst1.isEmpty\
    \ && lst2.isEmpty\n        // false\n        // >>> lst1.isEmpty || lst2.isEmpty\n\
    \        // false\n        // >>> lst1.isEmpty && lst2.isEmpty\n        // false\n\
    \        // >>> lst1.isEmpty || lst2.isEmpty\n        // false\n        // >>>\
    \ lst", "        // Fill Up this function body\n        // `lst1` and `lst2` are\
    \ lists of strings\n        // You have to return a list of strings\n        if\
    \ (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var sum1\
    \ = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n      \
    \      sum1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return\
    \ lst1\n        else return lst2", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- lst1) {\n            sum1 += i.length\n        }\n        for (i <- lst2)\
    \ {\n            sum2 += i.length\n        }\n        if (sum1 < sum2) {\n   \
    \         return lst1\n        } else if (sum1 > sum2) {\n            return lst2\n\
    \        } else {\n            return lst1\n        }", "        val lst1Total\
    \ = lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val lst2Total = lst2.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        if (lst1Total < lst2Total) lst1 else lst2", " \
    \       var lst1_total = 0\n        var lst2_total = 0\n        for (i <- lst1)\
    \ {\n            lst1_total += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ {\n            return lst1\n        }\n        else {\n            return lst2\n\
    \        }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n", "        // Fill Up this\
    \ function body\n        // `totalMatch` should return the list that has total\
    \ number of chars in the all strings of the list less than the other list.\n \
    \       // if the two lists have the same number of chars, return the first list.\n\
    \        // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_total_chars\
    \ = 0\n        var lst2_total_chars = 0\n        for (i <- lst1) {\n         \
    \   lst1_total_chars += i.length\n        }\n        for (i <- lst2) {\n     \
    \       lst2_total_chars += i.length\n        }\n        if (lst1_total_chars\
    \ < lst2_total_chars) {\n            return lst1\n        } else {\n         \
    \   return lst2\n        }", "        // Fill Up this function body\n        //\
    \ `lst1` and `lst2` are lists of strings\n        // You have to return a list\
    \ of strings\n        if (lst1.length == 0 && lst2.length == 0) return lst1\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            sum1 += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            sum2 += lst2(i).length\n        }\n        if (sum1\
    \ < sum2) return lst1\n        else if (sum1 > sum2) return lst2\n        else\
    \ return lst1", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all strings of\
    \ the list less than the other list.\n        // if the two lists have the same\
    \ number of chars, return the first list.\n        // Do not use any built-in\
    \ functions.\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1)\
    \ {\n            sum1 += i.length\n        }\n        for (i <- lst2) {\n    \
    \        sum2 += i.length\n        }\n        if (sum1 < sum2) {\n           \
    \ return lst1\n        } else if (sum1 > sum2) {\n            return lst2\n  \
    \      } else {\n            return lst1\n        }", "        var sum1 = 0\n\
    \        var sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n\
    \        }\n        for (i <- lst2) {\n            sum2 += i.length\n        }\n\
    \        if (sum1 < sum2) lst1\n        else if (sum1 > sum2) lst2\n        else\
    \ lst1", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List(\"hi\", \"admin\")\n        // >>> lst2\n        // List(\"hI\", \"\
    Hi\")\n        // >>> lst1.length\n        // 2\n        // >>> lst1(0)\n    \
    \    // \"hi\"\n        // >>> lst1(1)\n        // \"admin\"\n        // >>> lst1(0).length\n\
    \        // 2\n        // >>> lst1(1).length\n        // 5\n        // >>> lst1(0)(0)\n\
    \        // 'h'\n        // >>> lst1(0)(1)\n        // 'i'\n        // >>> lst1(1)(0)\n\
    \        // 'a'\n        // >>> lst1(1)(1)\n        // 'd'\n        // >>> lst1(1)(2)\n\
    \        // 'm'\n        // >>> lst1(1)(3)\n        // 'i'\n        // >>> lst1(1)(4)\n\
    \        // 'n'\n        // >>> lst1(1)(5)\n        // java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 5\n        // >>> lst1(2)\n        // java.lang.IndexOutOfBoundsException:\
    \ 2\n        // >>> lst1(2)(0)\n        // java.lang.IndexOutOfBoundsException:\
    \ 2\n        // >>> lst1(0)(2)\n        // java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 2\n        // >>> lst1(0)(-1)\n        // java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n        // >>> lst1(-1)\n        // java.lang.IndexOutOfBoundsException:\
    \ -1\n        // >>> lst1(-1)(0)\n        // java.lang.IndexOutOfBoundsException:\
    \ -1\n        // >>> lst1(-1)(-1)\n        // java.lang.IndexOutOfBoundsException:\
    \ -1\n        // >>> l", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has \n        // total number of chars in the all\
    \ strings of the list less than the other list.\n        // if the two lists have\
    \ the same number of chars, return the first list.\n        if (lst1.length ==\
    \ 0 && lst2.length == 0) return lst1\n        else if (lst1.length == 0) return\
    \ lst2\n        else if (lst2.length == 0) return lst1\n        else {\n     \
    \       var total1 = 0\n            var total2 = 0\n            for (i <- 0 until\
    \ lst1.length) {\n                total1 += lst1(i).length\n            }\n  \
    \          for (i <- 0 until lst2.length) {\n                total2 += lst2(i).length\n\
    \            }\n            if (total1 < total2) return lst1\n            else\
    \ if (total1 > total2) return lst2\n            else return lst1\n        }",
  "        var lst1_total = 0\n        var lst2_total = 0\n        for (i <- lst1)\
    \ {\n            lst1_total += i.length\n        }\n        for (i <- lst2) {\n\
    \            lst2_total += i.length\n        }\n        if (lst1_total < lst2_total)\
    \ {\n            return lst1\n        }\n        else {\n            return lst2\n\
    \        }", "        // Fill Up this function body\n        // `totalMatch` should\
    \ return the list that has the total number of chars in the all strings of the\
    \ list less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        // Do not use any built-in functions.\n\
    \        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n \
    \           for (j <- i) {\n                total1 += 1\n            }\n     \
    \   }\n        for (i <- lst2) {\n            for (j <- i) {\n               \
    \ total2 += 1\n            }\n        }\n        if (total1 < total2) {\n    \
    \        return lst1\n        }\n        else if (total1 > total2) {\n       \
    \     return lst2\n        }\n        else {\n            return lst1\n      \
    \  }", "        // Fill Up this function body\n        // `lst1` and `lst2` are\
    \ lists of strings\n        // You have to return a list of strings\n        //\
    \ You can use any number of lines\n        // You can use any number of helper\
    \ functions\n        if (lst1.length == 0 && lst2.length == 0) {\n           \
    \ return lst1\n        }\n        var total1 = 0\n        var total2 = 0\n   \
    \     for (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) {\n            return lst1\n        }\
    \ else if (total1 > total2) {\n            return lst2\n        } else {\n   \
    \         return lst1\n        }", "        // Fill Up this function body\n  \
    \      // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n        }\n \
    \       for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) return lst1\n        else if (sum1 > sum2)\
    \ return lst2\n        else return lst1", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        if (total2 < total1)\
    \ return lst2\n        return lst1", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List[String](\"hi\", \"admin\")\n        // >>>\
    \ lst2\n        // List[String](\"hI\", \"Hi\")\n        // You can access the\
    \ list of strings as `lst1(0)` and `lst2(0)`\n        // For example,\n      \
    \  // >>> lst1(0)\n        // \"hi\"\n        // >>> lst2(0)\n        // \"hI\"\
    \n        // You can access the string as `lst1(0)(0)` and `lst2(0)(0)`\n    \
    \    // For example,\n        // >>> lst1(0)(0)\n        // 'h'\n        // >>>\
    \ lst2(0)(0)\n        // 'h'\n        // You can access the character as `lst1(0)(0)`\
    \ and `lst2(0)(0)`\n        // For example,\n        // >>> lst1(0)(0)\n     \
    \   // 'h'\n        // >>> lst2(0)(0)\n        // 'h'\n        // You can access\
    \ the character as `lst1(0)(0)` and `lst2(0)(0)`\n        // For example,\n  \
    \      // >>> lst1(0)(0)\n        // 'h'\n        // >>> lst2(0)(0)\n        //\
    \ 'h'\n        // You can access the character as `lst1(0)(0)` and `lst2(0)(0)`\n\
    \        // For example,\n        // >>> lst1(0)(0)\n        // 'h'\n        //\
    \ >>> lst2(0)(0)\n        // 'h'\n        // You can access the character as `lst1(0)(0)`\
    \ and `lst2(0)(0)`\n        // For example,\n        // >>> lst1(0)(0)\n     \
    \   // 'h'\n        // >>> lst2(0)(0)\n        // 'h'\n        // You can access\
    \ the character as `lst", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all strings of\
    \ the list less than the other list.\n        // if the two lists have the same\
    \ number of chars, return the first list.\n        // For example,\n        //\
    \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"\
    )))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n     \
    \       sum1 += i.length\n        }\n        for (i <- lst2) {\n            sum2\
    \ += i.length\n        }\n        if (sum1 == sum2) {\n            return lst1\n\
    \        } else if (sum1 < sum2) {\n            return lst1\n        } else {\n\
    \            return lst2\n        }", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        else if (lst1.length == 0) return lst2\n        else\
    \ if (lst2.length == 0) return lst1\n        var lst1Total = 0\n        var lst2Total\
    \ = 0\n        for (i <- 0 until lst1.length) lst1Total += lst1(i).length\n  \
    \      for (i <- 0 until lst2.length) lst2Total += lst2(i).length\n        if\
    \ (lst1Total < lst2Total) return lst1\n        else if (lst1Total > lst2Total)\
    \ return lst2\n        else return lst1", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List[String](\"hi\", \"admin\")\n        // >>>\
    \ lst2\n        // List[String](\"hI\", \"Hi\")\n        // >>> lst1(0)\n    \
    \    // \"hi\"\n        // >>> lst2(1)\n        // \"Hi\"\n        // >>> lst1(0).length\n\
    \        // 2\n        // >>> lst2(1).length\n        // 2\n        // >>> lst1(0).length\
    \ + lst1(1).length\n        // 7\n        // >>> lst2(0).length + lst2(1).length\n\
    \        // 4\n        // >>> lst1(0).length + lst1(1).length < lst2(0).length\
    \ + lst2(1).length\n        // false\n        // >>> lst1(0).length + lst1(1).length\
    \ == lst2(0).length + lst2(1).length\n        // false\n        // >>> lst1(0).length\
    \ + lst1(1).length > lst2(0).length + lst2(1).length\n        // true\n      \
    \  // >>> lst1(0).length + lst1(1).length > lst2(0).length + lst2(1).length\n\
    \        // true\n        // >>> lst1(0).length + lst1(1).length == lst2(0).length\
    \ + lst2(1).length\n        // false\n        // >>> lst1(0).length + lst1(1).length\
    \ < lst2(0).length + lst2(1).length\n        // false\n        // >>> lst1(0).length\
    \ + lst1(1).length == lst2(0).length + lst2(1).length\n        // false\n    \
    \    // >>> lst1(0).length + lst1(1).length > lst2(0).length + lst2(1).length\n\
    \        // true\n        // >>> lst1(0).length + lst1(1).length", "        //\
    \ Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        if (lst1.length == 0\
    \ && lst2.length == 0) (List[String]())\n        else if (lst1.length == 0) lst2\n\
    \        else if (lst2.length == 0) lst1\n        else {\n            var lst1_sum\
    \ = 0\n            var lst2_sum = 0\n            for (i <- 0 until lst1.length)\
    \ {\n                lst1_sum += lst1(i).length\n            }\n            for\
    \ (i <- 0 until lst2.length) {\n                lst2_sum += lst2(i).length\n \
    \           }\n            if (lst1_sum < lst2_sum) lst1\n            else if\
    \ (lst1_sum > lst2_sum) lst2\n            else lst1\n        }", "        var\
    \ total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n            total1\
    \ += i.length\n        }\n        for (i <- lst2) {\n            total2 += i.length\n\
    \        }\n        if (total1 < total2) lst1 else lst2", "        // Fill Up\
    \ this function body\n        // `lst1` and `lst2` are lists of strings\n    \
    \    // For example,\n        // >>> lst1\n        // List(\"hi\", \"admin\")\n\
    \        // >>> lst2\n        // List(\"hI\", \"Hi\")\n        // You can access\
    \ the list of strings as `lst1(0)`, `lst1(1)`, and so on.\n        // For example,\n\
    \        // >>> lst1(0)\n        // \"hi\"\n        // >>> lst1(1)\n        //\
    \ \"admin\"\n        // You can access the string as `lst1(0)(0)`, `lst1(0)(1)`,\
    \ and so on.\n        // For example,\n        // >>> lst1(0)(0)\n        // 'h'\n\
    \        // >>> lst1(0)(1)\n        // 'i'\n        // You can access the length\
    \ of the string as `lst1(0).length`.\n        // For example,\n        // >>>\
    \ lst1(0).length\n        // 2\n        // You can access the length of the list\
    \ as `lst1.length`.\n        // For example,\n        // >>> lst1.length\n   \
    \     // 2\n        // You can use `for` loop to iterate the list.\n        //\
    \ For example,\n        // >>> for (i <- 0 until lst1.length) {\n        // ...\
    \     println(lst1(i))\n        // ... }\n        // hi\n        // admin\n  \
    \      // You can use `for` loop to iterate the string.\n        // For example,\n\
    \        // >>> for (i <- 0 until lst1(0).length) {\n        // ...     println(lst1(0)(i))\n\
    \        // ... }\n        // h\n        // i\n        // You can use `if` statement\
    \ to check the condition.\n        // For example,\n        // >>> if (lst1(0)(0)\
    \ == 'h') {\n        // ...     println(\"true\")\n        // ... } else {\n \
    \       // ...     println(\"false\")\n        // ... }\n        // true\n   \
    \     // You can use `if` statement to check the", "        if (lst1.length ==\
    \ 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return lst2\n\
    \        if (lst2.length == 0) return lst1\n        var total1 = 0\n        var\
    \ total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1 +=\
    \ lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n      \
    \      total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        val lst1_len = lst1.map(_.length).sum\n\
    \        val lst2_len = lst2.map(_.length).sum\n        if (lst1_len < lst2_len)\
    \ lst1 else lst2", "        // Fill Up this function body\n        // `lst1` and\
    \ `lst2` are lists of strings\n        // For example,\n        // >>> lst1\n\
    \        // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // >>> lst1(0)\n        // \"hi\"\n        // >>> lst2(1)\n\
    \        // \"Hi\"\n        // >>> lst1(0).length\n        // 2\n        // >>>\
    \ lst2(1).length\n        // 2\n        // >>> lst1(0).charAt(0)\n        // 'h'\n\
    \        // >>> lst2(1).charAt(1)\n        // 'i'\n        // >>> lst1(0).charAt(0).toLower\n\
    \        // 'h'\n        // >>> lst2(1).charAt(1).toLower\n        // 'i'\n  \
    \      // >>> lst1(0).charAt(0).toLower == lst2(1).charAt(1).toLower\n       \
    \ // true\n        // >>> lst1(0).charAt(0).toLower == lst2(1).charAt(0).toLower\n\
    \        // false\n        // >>> lst1(0).charAt(0).toLower == lst2(1).charAt(0).toLower\
    \ || lst1(0).charAt(0).toLower == lst2(1).charAt(1).toLower\n        // true\n\
    \        // >>> lst1(0).charAt(0).toLower == lst2(1).charAt(0).toLower || lst1(0).charAt(0).toLower\
    \ == lst2(1).charAt(1).toLower || lst1(0).charAt(1).toLower == lst2(1).charAt(0).toLower\
    \ || lst1(0).charAt(1).toLower == lst2(1).charAt(1).toLower\n        // true\n\
    \        // >>> lst1(0).charAt(0).toLower == lst2(1).charAt(0).toLower || lst1(0",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For example,\n        // >>> lst1\n        // List[String](\"\
    hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\"\
    )\n        // You can access the length of a string using `.length` method\n \
    \       // For example,\n        // >>> \"hi\".length\n        // 2\n        //\
    \ You can access the list of characters in a string using `.toList` method\n \
    \       // For example,\n        // >>> \"hi\".toList\n        // List[Char]('h',\
    \ 'i')\n        // You can access the nth character of a string using `(n)` method\n\
    \        // For example,\n        // >>> \"hi\"(0)\n        // 'h'\n        //\
    \ >>> \"hi\"(1)\n        // 'i'\n        // You can convert a character to its\
    \ lowercase using `toLower` method\n        // For example,\n        // >>> 'A'.toLower\n\
    \        // 'a'\n        // You can convert a character to its uppercase using\
    \ `toUpper` method\n        // For example,\n        // >>> 'a'.toUpper\n    \
    \    // 'A'\n        // You can convert a string to its lowercase using `toLowerCase`\
    \ method\n        // For example,\n        // >>> \"HI\".toLowerCase\n       \
    \ // \"hi\"\n        // You can convert a string to its uppercase using `toUpperCase`\
    \ method\n        // For example,\n        // >>> \"hi\".toUpperCase\n       \
    \ // \"HI\"\n        // You can check if a character is uppercase using `isUpper`\
    \ method\n        // For example,\n        // >>> 'A'.isUpper\n        // true\n\
    \        // >>> 'a'.isUpper\n        // false\n        // You can check if a character\
    \ is lowercase using `isLower` method\n        // For example,\n        // >>>\
    \ 'A'.isLower\n        // false\n        // >>> 'a'.isLower\n        // true\n\
    \        // You can check if a string is uppercase using `isUpper` method\n  \
    \      // For example,\n        // >>>", "        // Fill Up this function body\n\
    \        // `totalMatch` should return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        //\
    \ For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For example,\n        // >>> lst1\n        // List[String](\"\
    hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\"\
    )\n        // You can access the length of a string by `str.length`\n        //\
    \ For example,\n        // >>> \"hi\".length\n        // 2\n        // You can\
    \ access the total number of chars in a list of strings by `lst.map(_.length).sum`\n\
    \        // For example,\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can use `if` expressions in Scala.\n        // For example,\n\
    \        // >>> if (1 > 0) \"positive\" else \"negative\"\n        // \"positive\"\
    \n        // >>> if (1 < 0) \"positive\" else \"negative\"\n        // \"negative\"\
    \n        // You can use `if` expressions as the value of a variable.\n      \
    \  // For example,\n        // >>> val x = if (1 > 0) \"positive\" else \"negative\"\
    \n        // >>> x\n        // \"positive\"\n        // You can use `if` expressions\
    \ as the return value of a function.\n        // For example,\n        // >>>\
    \ def f(x : Int) = if (x > 0) \"positive\" else \"negative\"\n        // >>> f(1)\n\
    \        // \"positive\"\n        // >>> f(-1)\n        // \"negative\"\n    \
    \    // You can use `if` expressions as the value of a `match` expression.\n \
    \       // For example,\n        // >>> val x = 1\n        // >>> x match { case\
    \ x if (x > 0) => \"positive\"; case _ => \"negative\" }\n        // \"positive\"\
    \n        // >>> val x = -1\n        // >>> x match { case x if (x > 0) => \"\
    positive\"; case _ => \"negative\" }\n        // \"negative\"\n        // You\
    \ can use `if` expressions as the return value of a function.\n        // For\
    \ example,\n        // >>> def f(x : Int) = x match { case x if (x > 0) => \"",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For example,\n        // >>> lst1\n        // List(\"hi\"\
    , \"admin\")\n        // >>> lst2\n        // List(\"hI\", \"Hi\")\n        //\
    \ >>> lst1.head\n        // \"hi\"\n        // >>> lst1.tail\n        // List(\"\
    admin\")\n        // >>> lst1.tail.head\n        // \"admin\"\n        // >>>\
    \ lst1.tail.tail\n        // List()\n        // >>> lst1.tail.tail.head\n    \
    \    // error: java.util.NoSuchElementException: head of empty list\n        //\
    \ >>> lst1.tail.tail.tail\n        // List()\n        // >>> lst1.length\n   \
    \     // 2\n        // >>> lst1.length == 0\n        // false\n        // >>>\
    \ lst1.length == 1\n        // false\n        // >>> lst1.length == 2\n      \
    \  // true\n        // >>> lst1.length == 3\n        // false\n        // >>>\
    \ lst1.length > 0\n        // true\n        // >>> lst1.length > 1\n        //\
    \ true\n        // >>> lst1.length > 2\n        // false\n        // >>> lst1.length\
    \ > 3\n        // false\n        // >>> lst1.length < 0\n        // false\n  \
    \      // >>> lst1.length < 1\n        // false\n        // >>> lst1.length <\
    \ 2\n        // false\n        // >>> lst1.length < 3\n        // true\n     \
    \   // >>> lst1.length < 4\n        // true\n        // >>> lst1.length >= 0\n\
    \        // true\n        // >>> lst1.length >= 1\n        // true\n        //\
    \ >>> lst1.length >= 2\n        // true\n        // >>> lst1.length >= 3\n   \
    \     // false\n        // >>> lst1.length >= 4\n        // false\n        //\
    \ >>> lst1.length <= 0\n        // false\n        // >>> lst1.length <= 1\n  \
    \      // false\n        // >>> lst1.length <= 2\n        // true\n        //\
    \ >>>", "        // Fill Up this function body\n        // `lst1` and `lst2` are\
    \ lists of strings\n        // For example,\n        // >>> lst1\n        // List(\"\
    hi\", \"admin\")\n        // >>> lst2\n        // List(\"hI\", \"Hi\")\n     \
    \   // You can access the length of a string using `.length` method\n        //\
    \ For example,\n        // >>> \"hi\".length\n        // 2\n        // You can\
    \ access the length of a list using `.length` method\n        // For example,\n\
    \        // >>> lst1.length\n        // 2\n        // You can access the elements\
    \ of a list using `(index)`\n        // For example,\n        // >>> lst1(0)\n\
    \        // \"hi\"\n        // >>> lst1(1)\n        // \"admin\"\n        // You\
    \ can use `if` expressions in Scala.\n        // For example,\n        // >>>\
    \ if (lst1.length > lst2.length) \"lst1 is longer\" else \"lst2 is longer\"\n\
    \        // \"lst2 is longer\"\n        // >>> if (lst1.length == lst2.length)\
    \ \"same length\" else \"different length\"\n        // \"different length\"\n\
    \        // You can use `for` expressions in Scala.\n        // For example,\n\
    \        // >>> for (i <- 0 to lst1.length - 1) yield lst1(i)\n        // List(\"\
    hi\", \"admin\")\n        // >>> for (i <- 0 to lst2.length - 1) yield lst2(i)\n\
    \        // List(\"hI\", \"Hi\")\n        // You can use `for` expressions to\
    \ loop over lists.\n        // For example,\n        // >>> for (i <- lst1) yield\
    \ i\n        // List(\"hi\", \"admin\")\n        // >>> for (i <- lst2) yield\
    \ i\n        // List(\"hI\", \"Hi\")\n        // You can use `for` expressions\
    \ to loop over lists and filter elements.\n        // For example,\n        //\
    \ >>> for (i <- lst1 if i.length > 3) yield i\n        // List(\"admin\")\n  \
    \      // >>> for (i <- lst2 if", "        // Fill Up this function body\n   \
    \     // `lst1` and `lst2` are lists of strings\n        // For example,\n   \
    \     // >>> lst1\n        // List(\"hi\", \"admin\")\n        // >>> lst2\n \
    \       // List(\"hI\", \"Hi\")\n        // >>> lst1.length\n        // 2\n  \
    \      // >>> lst1(0)\n        // \"hi\"\n        // >>> lst1(1)\n        // \"\
    admin\"\n        // >>> lst1(0).length\n        // 2\n        // >>> lst1(1).length\n\
    \        // 5\n        // >>> lst1(0)(0)\n        // 'h'\n        // >>> lst1(0)(1)\n\
    \        // 'i'\n        // >>> lst1(1)(0)\n        // 'a'\n        // >>> lst1(1)(1)\n\
    \        // 'd'\n        // >>> lst1(1)(2)\n        // 'm'\n        // >>> lst1(1)(3)\n\
    \        // 'i'\n        // >>> lst1(1)(4)\n        // 'n'\n        // >>> lst1(1)(5)\n\
    \        // java.lang.StringIndexOutOfBoundsException: String index out of range:\
    \ 5\n        // >>> lst1(2)\n        // java.lang.IndexOutOfBoundsException: 2\n\
    \        // >>> lst1(2)(0)\n        // java.lang.IndexOutOfBoundsException: 2\n\
    \        // >>> lst1(2)(1)\n        // java.lang.IndexOutOfBoundsException: 2\n\
    \        // >>> lst1(2)(2)\n        // java.lang.IndexOutOfBoundsException: 2\n\
    \        // >>> lst1(2)(3)\n        // java.lang.IndexOutOfBoundsException: 2\n\
    \        // >>> lst1(2)(4)\n        // java.lang.IndexOutOfBoundsException: 2\n\
    \        // >>> lst1(2)(5)\n        // java.lang.IndexOutOfBoundsException: 2\n\
    \        // >>> lst1(3)\n        // java.lang.IndexOutOfBoundsException", "  \
    \      if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        else if (total1 > total2) return lst2\n        else return\
    \ lst1", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // You have to return a list of strings\n    \
    \    if (lst1.length == 0 && lst2.length == 0) return lst1\n        if (lst1.length\
    \ == 0) return lst2\n        if (lst2.length == 0) return lst1\n        var total1\
    \ = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length) {\n    \
    \        total1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            total2 += lst2(i).length\n        }\n        if (total1 < total2)\
    \ return lst1\n        else if (total1 > total2) return lst2\n        else return\
    \ lst1", "        if (lst1.length == 0 && lst2.length == 0) return lst1\n    \
    \    if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n\
    \        var total1 = 0\n        for (i <- 0 until lst1.length) {\n          \
    \  total1 += lst1(i).length\n        }\n        var total2 = 0\n        for (i\
    \ <- 0 until lst2.length) {\n            total2 += lst2(i).length\n        }\n\
    \        if (total1 == total2) return lst1\n        if (total1 < total2) return\
    \ lst1\n        return lst2", "        if (lst1.length == 0 && lst2.length ==\
    \ 0) return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n        }\n \
    \       for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) return lst1\n        else if (sum1 > sum2)\
    \ return lst2\n        else return lst1", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return List[String]()\n        var total1 = 0\n        var total2 = 0\n\
    \        for (i <- 0 until lst1.length) total1 += lst1(i).length\n        for\
    \ (i <- 0 until lst2.length) total2 += lst2(i).length\n        if (total1 < total2)\
    \ return lst1\n        else if (total1 > total2) return lst2\n        else return\
    \ lst1", "        if (lst1.length == 0 && lst2.length == 0) {\n            return\
    \ lst1\n        }\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 <= total2) {\n            return lst1\n       \
    \ }\n        else {\n            return lst2\n        }", "        // Fill Up\
    \ this function body\n        // `totalMatch` should return the list that has\
    \ total number of chars in the all strings of the list less than the other list.\n\
    \        // if the two lists have the same number of chars, return the first list.\n\
    \        // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_len = 0\n \
    \       var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n\
    \        }\n        for (i <- lst2) {\n            lst2_len += i.length\n    \
    \    }\n        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1", "        // Fill Up this function body\n        //\
    \ `totalMatch` should return the list that has total number of chars in the all\
    \ strings of the list less than the other list.\n        // if the two lists have\
    \ the same number of chars, return the first list.\n        // For example,\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        var sum1 = 0\n        var sum2\
    \ = 0\n        for (i <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) return lst1\n        else if (sum1 > sum2)\
    \ return lst2\n        else return lst1", "        if (lst1.length == 0 && lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- 0 until lst1.length) sum1 += lst1(i).length\n        for (i <- 0 until lst2.length)\
    \ sum2 += lst2(i).length\n        if (sum1 < sum2) return lst1\n        else return\
    \ lst2", "        if (lst1.length == 0 && lst2.length == 0) return lst1\n    \
    \    if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n\
    \        var total1 = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            total1 += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            total2 += lst2(i).length\n        }\n        if\
    \ (total1 < total2) return lst1\n        if (total2 < total1) return lst2\n  \
    \      return lst1", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // For example,\n        // >>> lst1\n\
    \        // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // You can access the strings in the list using lst(index)\n\
    \        // For example,\n        // >>> lst1(0)\n        // \"hi\"\n        //\
    \ >>> lst1(1)\n        // \"admin\"\n        // You can get the length of a string\
    \ using the `length` method\n        // For example,\n        // >>> lst1(0).length\n\
    \        // 2\n        // You can get the length of a list using the `length`\
    \ method\n        // For example,\n        // >>> lst1.length\n        // 2\n\
    \        // You can get the sum of the lengths of all strings in a list using\
    \ the `sum` method\n        // For example,\n        // >>> lst1.map(_.length).sum\n\
    \        // 6\n        // You can get the sum of the lengths of all strings in\
    \ a list using the `sum` method\n        // For example,\n        // >>> lst1.map(_.length).sum\n\
    \        // 6\n        // You can get the sum of the lengths of all strings in\
    \ a list using the `sum` method\n        // For example,\n        // >>> lst1.map(_.length).sum\n\
    \        // 6\n        // You can get the sum of the lengths of all strings in\
    \ a list using the `sum` method\n        // For example,\n        // >>> lst1.map(_.length).sum\n\
    \        // 6\n        // You can get the sum of the lengths of all strings in\
    \ a list using the `sum` method\n        // For example,\n        // >>> lst1.map(_.length).sum\n\
    \        // 6\n        // You can get the sum of the lengths of all strings in\
    \ a list using the `sum` method\n        // For example,\n        // >>> lst1.map(_.length).sum\n\
    \        // 6\n        // You can get the sum of the lengths of all strings in\
    \ a list using the `sum` method\n        // For example", "        val sum1 =\
    \ lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val sum2 = lst2.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        if (sum1 < sum2) lst1 else lst2", "        //\
    \ Fill Up this function body\n        // `totalMatch` should return the list that\
    \ has total number of chars in the all strings of the list less than the other\
    \ list.\n        // if the two lists have the same number of chars, return the\
    \ first list.\n        if (lst1.length == 0 && lst2.length == 0) {\n         \
    \   return lst1\n        }\n        if (lst1.length == 0) {\n            return\
    \ lst2\n        }\n        if (lst2.length == 0) {\n            return lst1\n\
    \        }\n        var total1 = 0\n        var total2 = 0\n        for (i <-\
    \ 0 until lst1.length) {\n            total1 += lst1(i).length\n        }\n  \
    \      for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) {\n            return lst1\n        }\n\
    \        if (total1 > total2) {\n            return lst2\n        }\n        return\
    \ lst1", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // You have to return the list that has total\
    \ number of chars in the all strings of the list less than the other list.\n \
    \       // if the two lists have the same number of chars, return the first list.\n\
    \        if (lst1.length == 0 && lst2.length == 0) return lst1\n        else if\
    \ (lst1.length == 0) return lst2\n        else if (lst2.length == 0) return lst1\n\
    \        else {\n            var lst1_total = 0\n            var lst2_total =\
    \ 0\n            for (i <- 0 until lst1.length) {\n                lst1_total\
    \ += lst1(i).length\n            }\n            for (i <- 0 until lst2.length)\
    \ {\n                lst2_total += lst2(i).length\n            }\n           \
    \ if (lst1_total < lst2_total) return lst1\n            else if (lst1_total >\
    \ lst2_total) return lst2\n            else return lst1\n        }", "       \
    \ // Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // For example,\n        // >>> lst1\n        // List[String](\"hi\"\
    , \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n \
    \       // >>> lst1.head\n        // \"hi\"\n        // >>> lst1.tail\n      \
    \  // List[String](\"admin\")\n        // >>> lst1.tail.head\n        // \"admin\"\
    \n        // >>> lst1.length\n        // 2\n        // >>> lst1.tail.length\n\
    \        // 1\n        // >>> lst1.tail.tail\n        // List[String]()\n    \
    \    // >>> lst1.tail.tail.length\n        // 0\n        // >>> lst1.tail.tail.isEmpty\n\
    \        // true\n        // >>> lst1.tail.tail.isEmpty == true\n        // true\n\
    \        // >>> lst1.tail.tail.isEmpty == false\n        // false\n        //\
    \ >>> lst1.tail.tail.isEmpty != true\n        // false\n        // >>> lst1.tail.tail.isEmpty\
    \ != false\n        // true\n        // >>> lst1.tail.tail.isEmpty == lst2.tail.tail.isEmpty\n\
    \        // true\n        // >>> lst1.tail.tail.isEmpty != lst2.tail.tail.isEmpty\n\
    \        // false\n        // >>> lst1.tail.tail.isEmpty == lst2.tail.tail.isEmpty\
    \ == true\n        // true\n        // >>> lst1.tail.tail.isEmpty == lst2.tail.tail.isEmpty\
    \ == false\n        // false\n        // >>> lst1.tail.tail.isEmpty != lst2.tail.tail.isEmpty\
    \ == true\n        // false\n        // >>> lst1.tail.tail.isEmpty != lst2.tail.tail.isEmpty\
    \ == false\n        // true\n        // >>> lst1.tail.tail.isEmpty == lst2.tail.tail.isEmpty\
    \ != true\n        // false\n        // >>> lst1.tail.tail.is", "        // Fill\
    \ Up this function body\n        // `totalMatch` is a recursive function\n   \
    \     // Do not use any loops\n        if (lst1.length == 0 && lst2.length ==\
    \ 0) return lst1\n        else if (lst1.length == 0) return lst2\n        else\
    \ if (lst2.length == 0) return lst1\n        else if (lst1.length == 1 && lst2.length\
    \ == 1) {\n            if (lst1(0).length < lst2(0).length) return lst1\n    \
    \        else return lst2\n        }\n        else if (lst1.length == 1) {\n \
    \           if (lst1(0).length < totalMatch(lst2.tail, List(lst2(0)))(0).length)\
    \ return lst1\n            else return totalMatch(lst2.tail, List(lst2(0)))\n\
    \        }\n        else if (lst2.length == 1) {\n            if (lst2(0).length\
    \ < totalMatch(lst1.tail, List(lst1(0)))(0).length) return lst2\n            else\
    \ return totalMatch(lst1.tail, List(lst1(0)))\n        }\n        else {\n   \
    \         if (totalMatch(lst1.tail, List(lst1(0)))(0).length < totalMatch(lst2.tail,\
    \ List(lst2(0)))(0).length) return totalMatch(lst1.tail, List(lst1(0)))\n    \
    \        else return totalMatch(lst2.tail, List(lst2(0)))\n        }", "     \
    \   // Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // For example,\n        //     lst1 = List(\"hi\", \"admin\")\n    \
    \    //     lst2 = List(\"hI\", \"Hi\")\n        // You have to return the list\
    \ that has total number of chars in the all strings of the list less than the\
    \ other list.\n        // For example,\n        //     lst1 = List(\"hi\", \"\
    admin\")\n        //     lst2 = List(\"hI\", \"Hi\")\n        //     totalMatch(lst1,\
    \ lst2) = List(\"hI\", \"Hi\")\n        //     lst1 = List(\"hi\", \"admin\")\n\
    \        //     lst2 = List(\"hi\", \"hi\", \"admin\", \"project\")\n        //\
    \     totalMatch(lst1, lst2) = List(\"hi\", \"admin\")\n        //     lst1 =\
    \ List(\"hi\", \"admin\")\n        //     lst2 = List(\"hI\", \"hi\", \"hi\")\n\
    \        //     totalMatch(lst1, lst2) = List(\"hI\", \"hi\", \"hi\")\n      \
    \  //     lst1 = List(\"4\")\n        //     lst2 = List(\"1\", \"2\", \"3\",\
    \ \"4\", \"5\")\n        //     totalMatch(lst1, lst2) = List(\"4\")\n       \
    \ var lst1_len = 0\n        var lst2_len = 0\n        for (i <- lst1) {\n    \
    \        lst1_len += i.length\n        }\n        for (i <- lst2) {\n        \
    \    lst2_len += i.length\n        }\n        if (lst1_len < lst2_len) {\n   \
    \         return lst1\n        } else if (lst1_len > lst2_len) {\n           \
    \ return lst2\n        } else {\n            return lst1\n        }", "      \
    \  // Fill Up this function body\n        // `totalMatch` should return the list\
    \ that has total number of chars in the all strings of the list less than the\
    \ other list.\n        // if the two lists have the same number of chars, return\
    \ the first list.\n        if (lst1.length == 0 && lst2.length == 0) {\n     \
    \       return lst1\n        }\n        var sum1 = 0\n        var sum2 = 0\n \
    \       for (i <- 0 until lst1.length) {\n            sum1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            sum2 += lst2(i).length\n\
    \        }\n        if (sum1 < sum2) {\n            return lst1\n        } else\
    \ if (sum1 > sum2) {\n            return lst2\n        } else {\n            return\
    \ lst1\n        }", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all strings of\
    \ the list less than the other list.\n        // if the two lists have the same\
    \ number of chars, return the first list.\n        if (lst1.length == 0 && lst2.length\
    \ == 0) {\n            return lst1\n        }\n        var total1 = 0\n      \
    \  var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) {\n\
    \            return lst1\n        } else if (total1 > total2) {\n            return\
    \ lst2\n        } else {\n            return lst1\n        }", "        // Fill\
    \ Up this function body\n        // `lst1` and `lst2` are lists of strings\n \
    \       // For example,\n        //     lst1 = List(\"hi\", \"admin\")\n     \
    \   //     lst2 = List(\"hI\", \"Hi\")\n        // You need to return the list\
    \ that has total number of chars in the all strings of the list less than the\
    \ other list.\n        // For example,\n        //     lst1 = List(\"hi\", \"\
    admin\")\n        //     lst2 = List(\"hI\", \"Hi\")\n        //     totalMatch(lst1,\
    \ lst2) = List(\"hI\", \"Hi\")\n        //     lst1 = List(\"hi\", \"admin\")\n\
    \        //     lst2 = List(\"hi\", \"hi\", \"admin\", \"project\")\n        //\
    \     totalMatch(lst1, lst2) = List(\"hi\", \"admin\")\n        //     lst1 =\
    \ List(\"hi\", \"admin\")\n        //     lst2 = List(\"hI\", \"hi\", \"hi\")\n\
    \        //     totalMatch(lst1, lst2) = List(\"hI\", \"hi\", \"hi\")\n      \
    \  //     lst1 = List(\"4\")\n        //     lst2 = List(\"1\", \"2\", \"3\",\
    \ \"4\", \"5\")\n        //     totalMatch(lst1, lst2) = List(\"4\")\n       \
    \ // If the two lists have the same number of chars, return the first list.\n\
    \        // For example,\n        //     lst1 = List(\"hi\", \"admin\")\n    \
    \    //     lst2 = List(\"hI\", \"Hi\")\n        //     totalMatch(lst1, lst2)\
    \ = List(\"hI\", \"Hi\")\n        //     lst1 = List(\"hi\", \"admin\")\n    \
    \    //     lst2 = List(\"hi\", \"hi\", \"admin\", \"project\")\n        //  \
    \   totalMatch(lst1, lst2) = List(\"hi\", \"admin\")\n        //     lst1 = List(\"\
    hi\", \"admin\")\n        //     lst2 = List(\"hI\", \"hi\", \"hi\")\n       \
    \ //     totalMatch(lst1,", "        // Fill Up this function body\n        //\
    \ `lst1` and `lst2` are lists of strings\n        // You have to return the list\
    \ that has total number of chars in the all strings of the list less than the\
    \ other list.\n        // if the two lists have the same number of chars, return\
    \ the first list.\n        var lst1_len = 0\n        var lst2_len = 0\n      \
    \  for (i <- lst1) {\n            lst1_len += i.length\n        }\n        for\
    \ (i <- lst2) {\n            lst2_len += i.length\n        }\n        if (lst1_len\
    \ < lst2_len) {\n            return lst1\n        } else {\n            return\
    \ lst2\n        }", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        var lst1_total_chars = 0\n        var lst2_total_chars = 0\n        for\
    \ (i <- lst1) {\n            lst1_total_chars += i.length\n        }\n       \
    \ for (i <- lst2) {\n            lst2_total_chars += i.length\n        }\n   \
    \     if (lst1_total_chars < lst2_total_chars) {\n            return lst1\n  \
    \      } else {\n            return lst2\n        }", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var sum1 = 0\n    \
    \    var sum2 = 0\n        for (i <- 0 until lst1.length) {\n            sum1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return lst1\n\
    \        else if (sum1 > sum2) return lst2\n        else return lst1", "     \
    \   if (lst1.length == 0 && lst2.length == 0) return lst1\n        var sum1 =\
    \ 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n        \
    \    sum1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return\
    \ lst1\n        else return lst2", "        // Fill Up this function body\n  \
    \      // `totalMatch` should return the list that has the total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        //\
    \ For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        var total1 = 0\n        var total2 = 0\n        for (i <- lst1) {\n \
    \           total1 += i.length\n        }\n        for (i <- lst2) {\n       \
    \     total2 += i.length\n        }\n        if (total1 < total2) {\n        \
    \    return lst1\n        } else if (total1 > total2) {\n            return lst2\n\
    \        } else {\n            return lst1\n        }", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (x <- lst1) total1 += x.length\n        for\
    \ (x <- lst2) total2 += x.length\n        if (total1 < total2) return lst1\n \
    \       else if (total1 > total2) return lst2\n        else return lst1", "  \
    \      if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum) return lst1\n\
    \        else return lst2", "        if (lst1.length == 0 && lst2.length == 0)\
    \ return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i\
    \ <- 0 until lst1.length) sum1 += lst1(i).length\n        for (i <- 0 until lst2.length)\
    \ sum2 += lst2(i).length\n        if (sum1 == sum2) return lst1\n        if (sum1\
    \ < sum2) return lst1\n        return lst2", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings\n        // You have\
    \ to return the list that has total number of chars in the all strings of the\
    \ list less than the other list.\n        // if the two lists have the same number\
    \ of chars, return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var sum1 = 0\n    \
    \    var sum2 = 0\n        for (i <- 0 until lst1.length) {\n            sum1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) return lst1\n\
    \        else return lst2", "        if (lst1.length == 0) return lst2\n     \
    \   if (lst2.length == 0) return lst1\n        var total1 = 0\n        var total2\
    \ = 0\n        for (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n\
    \        }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        else return lst2",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // For example,\n        // >>> lst1\n        // List[String](\"\
    hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\"\
    )\n        // >>> lst1(0)\n        // \"hi\"\n        // >>> lst2(1)\n       \
    \ // \"Hi\"\n        // >>> lst1(0).length\n        // 2\n        // >>> lst2(1).length\n\
    \        // 2\n        // >>> lst1(0).length + lst1(1).length\n        // 7\n\
    \        // >>> lst2(0).length + lst2(1).length\n        // 4\n        // >>>\
    \ lst1.length\n        // 2\n        // >>> lst2.length\n        // 2\n      \
    \  // >>> lst1.length + lst2.length\n        // 4\n        // >>> lst1.length\
    \ + lst2.length + lst1(0).length + lst1(1).length\n        // 11\n        // >>>\
    \ lst1.length + lst2.length + lst2(0).length + lst2(1).length\n        // 9\n\
    \        // >>> lst1.length + lst2.length + lst1(0).length + lst1(1).length <\
    \ lst1.length + lst2.length + lst2(0).length + lst2(1).length\n        // true\n\
    \        // >>> lst1.length + lst2.length + lst1(0).length + lst1(1).length >\
    \ lst1.length + lst2.length + lst2(0).length + lst2(1).length\n        // false\n\
    \        // >>> lst1.length + lst2.length + lst1(0).length + lst1(1).length ==\
    \ lst1.length + lst2.length + lst2(0).length + lst2(1).length\n        // false\n\
    \        // >>> lst1.length + lst2.length + lst1(0).length + lst1", "        //\
    \ Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // You have to return a list of strings\n        var sum1 = 0\n     \
    \   var sum2 = 0\n        for (i <- lst1) {\n            sum1 += i.length\n  \
    \      }\n        for (i <- lst2) {\n            sum2 += i.length\n        }\n\
    \        if (sum1 < sum2) {\n            return lst1\n        } else if (sum1\
    \ > sum2) {\n            return lst2\n        } else {\n            return lst1\n\
    \        }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List(\"hi\", \"admin\")\n        // >>> lst2\n        // List(\"hI\", \"\
    Hi\")\n        // You can access the length of a string using `.length` method\n\
    \        // For example,\n        // >>> \"hi\".length\n        // 2\n       \
    \ // You can access the length of a list using `.length` method\n        // For\
    \ example,\n        // >>> List(\"hi\", \"admin\").length\n        // 2\n    \
    \    // You can access an element of a list using `(index)`\n        // For example,\n\
    \        // >>> List(\"hi\", \"admin\")(0)\n        // \"hi\"\n        // >>>\
    \ List(\"hi\", \"admin\")(1)\n        // \"admin\"\n        // You can use `List(element1,\
    \ element2, ...)` to create a list\n        // For example,\n        // >>> List(\"\
    hi\", \"admin\")\n        // List(\"hi\", \"admin\")\n        // You can use `:+`\
    \ operator to add an element to the end of a list\n        // For example,\n \
    \       // >>> List(\"hi\", \"admin\") :+ \"project\"\n        // List(\"hi\"\
    , \"admin\", \"project\")\n        // You can use `++` operator to concatenate\
    \ two lists\n        // For example,\n        // >>> List(\"hi\", \"admin\") ++\
    \ List(\"project\")\n        // List(\"hi\", \"admin\", \"project\")\n       \
    \ // You can use `.sum` method to sum up all elements of a list\n        // For\
    \ example,\n        // >>> List(1, 2, 3).sum\n        // 6\n        // You can\
    \ use `.min` method to find the minimum element of a list\n        // For example,\n\
    \        // >>> List(1, 2, 3).min\n        // 1\n        // You can use `.max`\
    \ method to find the maximum element of a list\n        // For example,\n    \
    \    // >>> List(1, 2, 3).max\n        // 3\n        // You can use `.sorted`\
    \ method to sort a list\n        // For example,\n        // >>>", "        val\
    \ total1 = lst1.foldLeft(0)((total, str) => total + str.length)\n        val total2\
    \ = lst2.foldLeft(0)((total, str) => total + str.length)\n        if (total1 <\
    \ total2) lst1 else lst2", "        if (lst1.length == 0 && lst2.length == 0)\
    \ return lst1\n        if (lst1.length == 0) return lst2\n        if (lst2.length\
    \ == 0) return lst1\n        var total1 = 0\n        var total2 = 0\n        for\
    \ (i <- 0 until lst1.length) {\n            total1 += lst1(i).length\n       \
    \ }\n        for (i <- 0 until lst2.length) {\n            total2 += lst2(i).length\n\
    \        }\n        if (total1 < total2) return lst1\n        if (total2 < total1)\
    \ return lst2\n        return lst1", "        // Fill Up this function body\n\
    \        // `totalMatch` must return List[String]\n        if (lst1.length ==\
    \ 0 && lst2.length == 0) {\n            return lst1\n        }\n        var sum1\
    \ = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length) {\n      \
    \      sum1 += lst1(i).length\n        }\n        for (i <- 0 until lst2.length)\
    \ {\n            sum2 += lst2(i).length\n        }\n        if (sum1 < sum2) {\n\
    \            return lst1\n        } else {\n            return lst2\n        }",
  "        // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        var lst1_total = 0\n        var lst2_total =\
    \ 0\n        for (i <- lst1) {\n            lst1_total += i.length\n        }\n\
    \        for (i <- lst2) {\n            lst2_total += i.length\n        }\n  \
    \      if (lst1_total < lst2_total) {\n            return lst1\n        } else\
    \ if (lst1_total > lst2_total) {\n            return lst2\n        } else {\n\
    \            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `totalMatch` should return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        if\
    \ (lst1.length == 0 && lst2.length == 0) {\n            return lst1\n        }\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            sum1 += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            sum2 += lst2(i).length\n        }\n        if (sum1\
    \ < sum2) {\n            return lst1\n        } else if (sum1 > sum2) {\n    \
    \        return lst2\n        } else {\n            return lst1\n        }", " \
    \       // Fill Up this function body\n        // `lst1` and `lst2` are lists\
    \ of strings\n        // You have to return the list that has total number of\
    \ chars in the all strings of the list less than the other list.\n        // if\
    \ the two lists have the same number of chars, return the first list.\n      \
    \  // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_len = 0\n \
    \       var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n\
    \        }\n        for (i <- lst2) {\n            lst2_len += i.length\n    \
    \    }\n        if (lst1_len < lst2_len) lst1\n        else if (lst1_len > lst2_len)\
    \ lst2\n        else lst1", "        // Fill Up this function body\n        //\
    \ `lst1` and `lst2` are lists of strings\n        // For example,\n        //\
    \ >>> lst1\n        // List[String](\"hi\", \"admin\")\n        // >>> lst2\n\
    \        // List[String](\"hI\", \"Hi\")\n        // You can access the list of\
    \ strings as `lst1(0)` and `lst2(0)`\n        // For example,\n        // >>>\
    \ lst1(0)\n        // \"hi\"\n        // >>> lst2(0)\n        // \"hI\"\n    \
    \    // You can access the chars of a string as `lst1(0)(0)` and `lst2(0)(0)`\n\
    \        // For example,\n        // >>> lst1(0)(0)\n        // 'h'\n        //\
    \ >>> lst2(0)(0)\n        // 'h'\n        // You can find the length of a string\
    \ as `lst1(0).length` and `lst2(0).length`\n        // For example,\n        //\
    \ >>> lst1(0).length\n        // 2\n        // >>> lst2(0).length\n        //\
    \ 2\n        // You can find the length of a list as `lst1.length` and `lst2.length`\n\
    \        // For example,\n        // >>> lst1.length\n        // 2\n        //\
    \ >>> lst2.length\n        // 2\n        // You can create a new list as `List[String]()`\n\
    \        // For example,\n        // >>> List[String]()\n        // List[String]()\n\
    \        // You can append a string to a list as `lst1 :+ \"hi\"` and `lst2 :+\
    \ \"hi\"`\n        // For example,\n        // >>> lst1 :+ \"hi\"\n        //\
    \ List[String](\"hi\", \"admin\", \"hi\")\n        // >>> lst2 :+ \"hi\"\n   \
    \     // List[String](\"hI\", \"Hi\", \"hi\")\n        // You can concatenate\
    \ two lists as `lst1 ++ lst2`\n        // For example,\n        // >>> lst1 ++\
    \ l", "        if (lst1.length == 0 && lst2.length == 0) return lst1\n       \
    \ if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return lst1\n\
    \        var total1 = 0\n        var total2 = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            total1 += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            total2 += lst2(i).length\n        }\n        if\
    \ (total1 == total2) return lst1\n        if (total1 < total2) return lst1\n \
    \       return lst2", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // For example,\n        // >>> lst1\n\
    \        // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // >>> lst1(0)\n        // \"hi\"\n        // >>> lst2(1)\n\
    \        // \"Hi\"\n        // >>> lst1(0).length\n        // 2\n        // >>>\
    \ lst2(1).length\n        // 2\n        // >>> lst1(0).length + lst1(1).length\n\
    \        // 6\n        // >>> lst2(0).length + lst2(1).length\n        // 4\n\
    \        // >>> lst1.length\n        // 2\n        // >>> lst2.length\n      \
    \  // 2\n        // >>> lst1.length + lst2.length\n        // 4\n        // >>>\
    \ lst1.length + lst2.length + lst1(0).length + lst1(1).length\n        // 10\n\
    \        // >>> lst1.length + lst2.length + lst2(0).length + lst2(1).length\n\
    \        // 8\n        // >>> lst1.length + lst2.length + lst1(0).length + lst1(1).length\
    \ < lst1.length + lst2.length + lst2(0).length + lst2(1).length\n        // true\n\
    \        // >>> lst1.length + lst2.length + lst1(0).length + lst1(1).length >\
    \ lst1.length + lst2.length + lst2(0).length + lst2(1).length\n        // false\n\
    \        // >>> lst1.length + lst2.length + lst1(0).length + lst1(1).length ==\
    \ lst1.length + lst2.length + lst2(0).length + lst2(1).length\n        // false\n\
    \        // >>> lst1.length + lst2.length + lst1(0).length + lst1", "        //\
    \ Fill Up this function body\n        // `lst1` and `lst2` are lists of strings\n\
    \        // For example,\n        // lst1 = List(\"hi\", \"admin\")\n        //\
    \ lst2 = List(\"hI\", \"Hi\")\n        // You can access the strings in the list\
    \ using lst(index)\n        // For example,\n        // lst1(0) will give \"hi\"\
    \n        // lst1(1) will give \"admin\"\n        // You can find the length of\
    \ a string using the length() function\n        // For example,\n        // \"\
    hi\".length() will give 2\n        // \"admin\".length() will give 5\n       \
    \ // You can find the length of a list using the length() function\n        //\
    \ For example,\n        // lst1.length() will give 2\n        // lst2.length()\
    \ will give 2\n        // You can find the total number of chars in a list using\
    \ the sum() function\n        // For example,\n        // lst1.sum(_.length())\
    \ will give 7\n        // lst2.sum(_.length()) will give 4\n        // You can\
    \ compare two integers using the < operator\n        // For example,\n       \
    \ // 7 < 4 will give false\n        // 4 < 7 will give true\n        // You can\
    \ compare two integers using the == operator\n        // For example,\n      \
    \  // 7 == 4 will give false\n        // 4 == 7 will give false\n        // 7\
    \ == 7 will give true\n        // You can use if-else to make decisions\n    \
    \    // For example,\n        // if (7 < 4) {\n        //     \"7 is less than\
    \ 4\"\n        // } else {\n        //     \"7 is not less than 4\"\n        //\
    \ }\n        // will give \"7 is not less than 4\"\n        // You can use if-else\
    \ to make decisions\n        // For example,\n        // if (7 < 4) {\n      \
    \  //     \"7 is less than 4\"\n        // } else if (7 == 4) {\n        //  \
    \   \"7 is equal to 4\"\n        // } else {\n        //     \"7 is greater than\
    \ 4\"\n        // }\n        // will give \"7 is greater than 4\"\n        //\
    \ You can", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List(\"hi\", \"admin\")\n        // >>> lst2\n        // List(\"hi\", \"\
    hi\", \"admin\", \"project\")\n        // You can access the length of a string\
    \ as follows\n        // >>> \"hi\".length\n        // 2\n        // You can access\
    \ the length of a list as follows\n        // >>> lst1.length\n        // 2\n\
    \        // You can access the nth element of a list as follows\n        // >>>\
    \ lst1(0)\n        // \"hi\"\n        // >>> lst1(1)\n        // \"admin\"\n \
    \       // You can access the nth character of a string as follows\n        //\
    \ >>> \"hi\"(0)\n        // 'h'\n        // >>> \"hi\"(1)\n        // 'i'\n  \
    \      // You can convert a character to an integer as follows\n        // >>>\
    \ 'h'.toInt\n        // 104\n        // You can convert an integer to a character\
    \ as follows\n        // >>> 104.toChar\n        // 'h'\n        // You can convert\
    \ a string to a list of characters as follows\n        // >>> \"hi\".toList\n\
    \        // List('h', 'i')\n        // You can convert a list of characters to\
    \ a string as follows\n        // >>> List('h', 'i').mkString\n        // \"hi\"\
    \n        // You can convert a list of integers to a list of characters as follows\n\
    \        // >>> List(104, 105).map(_.toChar)\n        // List('h', 'i')\n    \
    \    // You can convert a list of characters to a list of integers as follows\n\
    \        // >>> List('h', 'i').map(_.toInt)\n        // List(104, 105)\n     \
    \   // You can convert a string to a list of integers as follows\n        // >>>\
    \ \"hi\".map(_.toInt)\n        // List(104, 105)\n        // You can convert a\
    \ list of integers to a string as follows\n        // >>> List(104, 105).map(_.toChar).mkString\n\
    \        // \"hi\"\n        // You can convert a string to a list of characters\
    \ as", "        // Fill Up this function body\n        // `lst1` and `lst2` are\
    \ lists of strings\n        // You have to return the list that has total number\
    \ of chars in the all strings of the list less than the other list.\n        //\
    \ if the two lists have the same number of chars, return the first list.\n   \
    \     var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n        \
    \    sum1 += i.length\n        }\n        for (i <- lst2) {\n            sum2\
    \ += i.length\n        }\n        if (sum1 < sum2) {\n            return lst1\n\
    \        } else if (sum1 > sum2) {\n            return lst2\n        } else {\n\
    \            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // You have to return\
    \ a list of strings\n        var lst1_len = 0\n        var lst2_len = 0\n    \
    \    for (i <- lst1) {\n            lst1_len += i.length\n        }\n        for\
    \ (i <- lst2) {\n            lst2_len += i.length\n        }\n        if (lst1_len\
    \ < lst2_len) {\n            return lst1\n        } else if (lst1_len > lst2_len)\
    \ {\n            return lst2\n        } else {\n            return lst1\n    \
    \    }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // You have to return a list of strings\n    \
    \    if (lst1.length == 0 && lst2.length == 0) {\n            return lst1\n  \
    \      }\n        var lst1Total = 0\n        var lst2Total = 0\n        for (s\
    \ <- lst1) {\n            lst1Total += s.length\n        }\n        for (s <-\
    \ lst2) {\n            lst2Total += s.length\n        }\n        if (lst1Total\
    \ < lst2Total) {\n            return lst1\n        } else if (lst1Total > lst2Total)\
    \ {\n            return lst2\n        } else {\n            return lst1\n    \
    \    }", "        // Fill Up this function body\n        // `totalMatch` should\
    \ be a tail recursive function\n        def totalMatchHelper(lst1 : List[String],\
    \ lst2 : List[String], acc : Int) : List[String] = {\n            if (lst1.isEmpty\
    \ && lst2.isEmpty) Nil\n            else if (lst1.isEmpty) lst2\n            else\
    \ if (lst2.isEmpty) lst1\n            else if (lst1.head.length + acc < lst2.head.length\
    \ + acc) lst1\n            else if (lst1.head.length + acc > lst2.head.length\
    \ + acc) lst2\n            else lst1\n        }\n        totalMatchHelper(lst1,\
    \ lst2, 0)", "        // Fill Up this function body\n        // `totalMatch` is\
    \ a recursive function\n        // Do not use any loops\n        if (lst1.isEmpty\
    \ && lst2.isEmpty) return lst1\n        if (lst1.isEmpty) return lst2\n      \
    \  if (lst2.isEmpty) return lst1\n        if (lst1.map(_.length).sum < lst2.map(_.length).sum)\
    \ return lst1\n        else return lst2", "        // Fill Up this function body\n\
    \        // `totalMatch` should return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        //\
    \ For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        var sum1 = 0\n        var sum2 = 0\n        for (i <- lst1) {\n     \
    \       sum1 += i.length\n        }\n        for (i <- lst2) {\n            sum2\
    \ += i.length\n        }\n        if (sum1 < sum2) {\n            return lst1\n\
    \        } else if (sum1 > sum2) {\n            return lst2\n        } else {\n\
    \            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List[String](\"hi\", \"admin\")\n        // >>>\
    \ lst2\n        // List[String](\"hI\", \"Hi\")\n        // You can access the\
    \ string at index `i` of a list `lst` as `lst(i)`\n        // For example,\n \
    \       // >>> lst1(0)\n        // \"hi\"\n        // >>> lst2(1)\n        //\
    \ \"Hi\"\n        // You can find the length of a string `str` as `str.length`\n\
    \        // For example,\n        // >>> lst1(0).length\n        // 2\n      \
    \  // >>> lst2(1).length\n        // 2\n        // You can find the length of\
    \ a list `lst` as `lst.length`\n        // For example,\n        // >>> lst1.length\n\
    \        // 2\n        // >>> lst2.length\n        // 2\n        // You can convert\
    \ a string to a list of chars as `str.toList`\n        // For example,\n     \
    \   // >>> lst1(0).toList\n        // List[Char]('h', 'i')\n        // You can\
    \ convert a list of chars to a string as `lst.mkString`\n        // For example,\n\
    \        // >>> lst1(0).toList.mkString\n        // \"hi\"\n        // You can\
    \ use `:::` to concatenate two lists\n        // For example,\n        // >>>\
    \ lst1 ::: lst2\n        // List[String](\"hi\", \"admin\", \"hI\", \"Hi\")\n\
    \        // You can use `::` to prepend an element to a list\n        // For example,\n\
    \        // >>> \"a\" :: lst1\n        // List[String](\"a\", \"hi\", \"admin\"\
    )\n        // You can use `:+` to append an element to a list\n        // For\
    \ example,\n        // >>> lst1 :+ \"a\"\n        // List[String](\"hi\", \"admin\"\
    , \"a\")\n        // You can use `++`", "        if (lst1.length == 0) lst2\n\
    \        else if (lst2.length == 0) lst1\n        else {\n            val lst1Total\
    \ = lst1.foldLeft(0)((acc, x) => acc + x.length)\n            val lst2Total =\
    \ lst2.foldLeft(0)((acc, x) => acc + x.length)\n            if (lst1Total < lst2Total)\
    \ lst1\n            else if (lst1Total > lst2Total) lst2\n            else lst1\n\
    \        }"]
stop_tokens:
- "\n    }\n"
