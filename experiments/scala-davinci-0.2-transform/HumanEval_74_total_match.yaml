name: HumanEval_74_total_match
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that accepts two lists of strings and returns the list\
  \ that has \n    // total number of chars in the all strings of the list less than\
  \ the other list.\n    // if the two lists have the same number of chars, return\
  \ the first list.\n    // Examples\n    // >>> totalMatch((List[String]()), (List[String]()))\n\
  \    // (List[String]())\n    // >>> totalMatch((List[String](\"hi\", \"admin\"\
  )), (List[String](\"hI\", \"Hi\")))\n    // (List[String](\"hI\", \"Hi\"))\n   \
  \ // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hi\", \"\
  hi\", \"admin\", \"project\")))\n    // (List[String](\"hi\", \"admin\"))\n    //\
  \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"hi\"\
  , \"hi\")))\n    // (List[String](\"hI\", \"hi\", \"hi\"))\n    // >>> totalMatch((List[String](\"\
  4\")), (List[String](\"1\", \"2\", \"3\", \"4\", \"5\")))\n    // (List[String](\"\
  4\"))\n    def totalMatch(lst1 : List[String], lst2 : List[String]) : List[String]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(totalMatch((List[String]()),\
  \ (List[String]())).equals((List[String]())));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hi\", \"hi\"))).equals((List[String](\"hi\",\
  \ \"hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hi\", \"hi\", \"admin\", \"project\"))).equals((List[String](\"hi\", \"admin\"))));\n\
  \    assert(totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"3\"\
  , \"4\", \"5\"))).equals((List[String](\"4\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"Hi\"))).equals((List[String](\"hI\",\
  \ \"Hi\"))));\n    assert(totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
  hI\", \"hi\", \"hi\"))).equals((List[String](\"hI\", \"hi\", \"hi\"))));\n    assert(totalMatch((List[String](\"\
  hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hii\"))).equals((List[String](\"\
  hi\", \"admin\"))));\n    assert(totalMatch((List[String]()), (List[String](\"this\"\
  ))).equals((List[String]())));\n    assert(totalMatch((List[String](\"this\")),\
  \ (List[String]())).equals((List[String]())));\n    }\n\n}\n"
completions: ["        if (lst1.length == 0 && lst2.length == 0) return lst1\n   \
    \     if (lst1.length == 0) return lst2\n        if (lst2.length == 0) return\
    \ lst1\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until\
    \ lst1.length) sum1 += lst1(i).length\n        for (i <- 0 until lst2.length)\
    \ sum2 += lst2(i).length\n        if (sum1 < sum2) return lst1\n        else if\
    \ (sum1 > sum2) return lst2\n        else return lst1", "        // Fill Up this\
    \ function body\n        // `totalMatch` is a function that accepts two lists\
    \ of strings and returns the list that has \n        // total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        //\
    \ Examples\n        // >>> totalMatch((List[String]()), (List[String]()))\n  \
    \      // (List[String]())\n        // >>> totalMatch((List[String](\"hi\", \"\
    admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"\
    Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        val lst1_len =\
    \ lst1.foldLeft(0)((acc, x) => acc + x.length)\n        val lst2_len = lst2.foldLeft(0)((acc,\
    \ x) => acc + x.length)\n        if (lst1_len < lst2_len) lst1 else lst2", " \
    \       // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_total = 0\n\
    \        var lst2_total = 0\n        for (i <- lst1) {\n            lst1_total\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2_total +=\
    \ i.length\n        }\n        if (lst1_total < lst2_total) {\n            return\
    \ lst1\n        } else {\n            return lst2\n        }", "        // Fill\
    \ Up this function body\n        // `totalMatch` should return the list that has\
    \ total number of chars in the all strings of the list less than the other list.\n\
    \        // if the two lists have the same number of chars, return the first list.\n\
    \        // For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\"\
    )), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        var lst1_len = 0\n \
    \       var lst2_len = 0\n        for (i <- lst1) {\n            lst1_len += i.length\n\
    \        }\n        for (i <- lst2) {\n            lst2_len += i.length\n    \
    \    }\n        if (lst1_len == lst2_len) {\n            return lst1\n       \
    \ } else if (lst1_len < lst2_len) {\n            return lst1\n        } else {\n\
    \            return lst2\n        }", "        // Fill Up this function body\n\
    \        // `totalMatch` should return the list that has total number of chars\
    \ in the all strings of the list less than the other list.\n        // if the\
    \ two lists have the same number of chars, return the first list.\n        //\
    \ For example,\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // Do not change the function signature\n        var lst1_total\
    \ = 0\n        var lst2_total = 0\n        for (i <- lst1) {\n            lst1_total\
    \ += i.length\n        }\n        for (i <- lst2) {\n            lst2_total +=\
    \ i.length\n        }\n        if (lst1_total < lst2_total) {\n            return\
    \ lst1\n        } else {\n            return lst2\n        }", "        if (lst1.length\
    \ == 0) lst2\n        else if (lst2.length == 0) lst1\n        else {\n      \
    \      val total1 = lst1.foldLeft(0)((acc, x) => acc + x.length)\n           \
    \ val total2 = lst2.foldLeft(0)((acc, x) => acc + x.length)\n            if (total1\
    \ < total2) lst1\n            else if (total1 > total2) lst2\n            else\
    \ lst1\n        }", "        // Fill Up this function body\n        // `totalMatch`\
    \ should return the list that has total number of chars in the all strings of\
    \ the list less than the other list.\n        // if the two lists have the same\
    \ number of chars, return the first list.\n        // For example,\n        //\
    \ >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"hI\", \"Hi\"\
    )))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n\
    \        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"Hi\")))\n        // (List[String](\"hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hi\", \"hi\", \"admin\", \"project\")))\n \
    \       // (List[String](\"hi\", \"admin\"))\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"hi\", \"hi\")))\n        // (List[String](\"\
    hI\", \"hi\", \"hi\"))\n        // >>> totalMatch((List[String](\"4\")), (List[String](\"\
    1\", \"2\", \"3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n       \
    \ // >>> totalMatch((List[String]()), (List[String]()))\n        // (List[String]())\n",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) {\n            return lst1\n        }\n        var\
    \ lst1Total = 0\n        var lst2Total = 0\n        for (i <- 0 until lst1.length)\
    \ {\n            lst1Total += lst1(i).length\n        }\n        for (i <- 0 until\
    \ lst2.length) {\n            lst2Total += lst2(i).length\n        }\n       \
    \ if (lst1Total < lst2Total) {\n            return lst1\n        } else if (lst1Total\
    \ > lst2Total) {\n            return lst2\n        } else {\n            return\
    \ lst1\n        }", "        // Fill Up this function body\n        // `lst1`\
    \ and `lst2` are lists of strings\n        // You have to return a list of strings\n\
    \        if (lst1.length == 0 && lst2.length == 0) {\n            return lst1\n\
    \        }\n        var lst1_sum = 0\n        var lst2_sum = 0\n        for (i\
    \ <- 0 until lst1.length) {\n            lst1_sum += lst1(i).length\n        }\n\
    \        for (i <- 0 until lst2.length) {\n            lst2_sum += lst2(i).length\n\
    \        }\n        if (lst1_sum < lst2_sum) {\n            return lst1\n    \
    \    } else if (lst1_sum > lst2_sum) {\n            return lst2\n        } else\
    \ {\n            return lst1\n        }", "        // Fill Up this function body\n\
    \        // `lst1` and `lst2` are lists of strings\n        // For example,\n\
    \        // >>> lst1\n        // List(\"hi\", \"admin\")\n        // >>> lst2\n\
    \        // List(\"hI\", \"Hi\")\n        // >>> lst1.head\n        // \"hi\"\n\
    \        // >>> lst1.tail\n        // List(\"admin\")\n        // >>> lst1.tail.head\n\
    \        // \"admin\"\n        // >>> lst1.tail.tail\n        // List()\n    \
    \    // >>> lst1.tail.tail.head\n        // error: java.util.NoSuchElementException:\
    \ head of empty list\n        // >>> lst1.tail.tail.tail\n        // List()\n\
    \        // >>> lst1.tail.tail.tail.head\n        // error: java.util.NoSuchElementException:\
    \ head of empty list\n        // >>> lst1.tail.tail.tail.tail\n        // List()\n\
    \        // >>> lst1.tail.tail.tail.tail.head\n        // error: java.util.NoSuchElementException:\
    \ head of empty list\n        // >>> lst1.tail.tail.tail.tail.tail\n        //\
    \ List()\n        // >>> lst1.tail.tail.tail.tail.tail.head\n        // error:\
    \ java.util.NoSuchElementException: head of empty list\n        // >>> lst1.tail.tail.tail.tail.tail.tail\n\
    \        // List()\n        // >>> lst1.tail.tail.tail.tail.tail.tail.head\n \
    \       // error: java.util.NoSuchElementException: head of empty list\n     \
    \   // >>> lst1.tail.tail.tail.tail.tail.tail.tail\n        // List()\n      \
    \  // >>> lst1.tail.tail.tail.tail.tail.tail.tail.head\n        // error: java.util.NoSuchElementException:\
    \ head of empty list\n        // >>> lst1.tail.tail.tail.tail.tail.tail.tail.tail\n\
    \        // List()\n        // >>> lst1.tail.tail.tail.tail.tail.tail.tail.tail.head\n\
    \       ", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List(\"hi\", \"admin\")\n        // >>> lst2\n        // List(\"hI\", \"\
    Hi\")\n        // >>> lst1.head\n        // \"hi\"\n        // >>> lst1.tail\n\
    \        // List(\"admin\")\n        // >>> lst1.tail.head\n        // \"admin\"\
    \n        // >>> lst1.tail.tail\n        // List()\n        // >>> lst1.tail.tail.head\n\
    \        // error: java.util.NoSuchElementException: head of empty list\n    \
    \    // >>> lst1.tail.tail.tail\n        // List()\n        // >>> lst1.tail.tail.tail.head\n\
    \        // error: java.util.NoSuchElementException: head of empty list\n    \
    \    // >>> lst1.tail.tail.tail.tail\n        // List()\n        // >>> lst1.tail.tail.tail.tail.head\n\
    \        // error: java.util.NoSuchElementException: head of empty list\n    \
    \    // >>> lst1.tail.tail.tail.tail.tail\n        // List()\n        // >>> lst1.tail.tail.tail.tail.tail.head\n\
    \        // error: java.util.NoSuchElementException: head of empty list\n    \
    \    // >>> lst1.tail.tail.tail.tail.tail.tail\n        // List()\n        //\
    \ >>> lst1.tail.tail.tail.tail.tail.tail.head\n        // error: java.util.NoSuchElementException:\
    \ head of empty list\n        // >>> lst1.tail.tail.tail.tail.tail.tail.tail\n\
    \        // List()\n        // >>> lst1.tail.tail.tail.tail.tail.tail.tail.head\n\
    \        // error: java.util.NoSuchElementException: head of empty list\n    \
    \    // >>> lst1.tail.tail.tail.tail.tail.tail.tail.tail\n        // List()\n\
    \        // >>> lst1.tail.tail.tail.tail.tail.tail.tail.tail.head\n       ", " \
    \       // Fill Up this function body\n        // `totalMatch` should return the\
    \ list that has total number of chars in the all strings of the list less than\
    \ the other list.\n        // if the two lists have the same number of chars,\
    \ return the first list.\n        // For example,\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n        // >>> totalMatch((List[String](\"\
    hi\", \"admin\")), (List[String](\"hI\", \"Hi\")))\n        // (List[String](\"\
    hI\", \"Hi\"))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hi\", \"hi\", \"admin\", \"project\")))\n        // (List[String](\"hi\", \"admin\"\
    ))\n        // >>> totalMatch((List[String](\"hi\", \"admin\")), (List[String](\"\
    hI\", \"hi\", \"hi\")))\n        // (List[String](\"hI\", \"hi\", \"hi\"))\n \
    \       // >>> totalMatch((List[String](\"4\")), (List[String](\"1\", \"2\", \"\
    3\", \"4\", \"5\")))\n        // (List[String](\"4\"))\n        // >>> totalMatch((List[String]()),\
    \ (List[String]()))\n        // (List[String]())\n", "        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        if (lst1.length == 0) return\
    \ lst2\n        if (lst2.length == 0) return lst1\n        var total1 = 0\n  \
    \      var total2 = 0\n        for (i <- 0 until lst1.length) {\n            total1\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         total2 += lst2(i).length\n        }\n        if (total1 < total2) return\
    \ lst1\n        if (total2 < total1) return lst2\n        return lst1", "    \
    \    // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // Do not change the function signature\n        // You may\
    \ create other functions\n        // You may also create classes\n        // You\
    \ may import scala.collection.mutable._\n        // You may import scala.math._\n\
    \        var lst1_sum = 0\n        var lst2_sum = 0\n        for (i <- lst1) {\n\
    \            lst1_sum += i.length\n        }\n        for (i <- lst2) {\n    \
    \        lst2_sum += i.length\n        }\n        if (lst1_sum < lst2_sum) {\n\
    \            return lst1\n        } else {\n            return lst2\n        }",
  "        // Fill Up this function body\n        // `lst1` and `lst2` are lists of\
    \ strings\n        // You have to return a list of strings\n        if (lst1.length\
    \ == 0 && lst2.length == 0) return lst1\n        var lst1_total = 0\n        var\
    \ lst2_total = 0\n        for (i <- 0 until lst1.length) {\n            lst1_total\
    \ += lst1(i).length\n        }\n        for (i <- 0 until lst2.length) {\n   \
    \         lst2_total += lst2(i).length\n        }\n        if (lst1_total < lst2_total)\
    \ return lst1\n        else return lst2", "        var total1 = 0\n        var\
    \ total2 = 0\n        for (i <- lst1) {\n            total1 += i.length\n    \
    \    }\n        for (i <- lst2) {\n            total2 += i.length\n        }\n\
    \        if (total1 < total2) lst1 else lst2", "        // Fill Up this function\
    \ body\n        // `lst1` and `lst2` are lists of strings\n        // You have\
    \ to return a list of strings\n        if (lst1.length == 0 && lst2.length ==\
    \ 0) return lst1\n        else if (lst1.length == 0) return lst2\n        else\
    \ if (lst2.length == 0) return lst1\n        else {\n            var lst1_total\
    \ = 0\n            var lst2_total = 0\n            for (i <- 0 until lst1.length)\
    \ {\n                lst1_total += lst1(i).length\n            }\n           \
    \ for (i <- 0 until lst2.length) {\n                lst2_total += lst2(i).length\n\
    \            }\n            if (lst1_total < lst2_total) return lst1\n       \
    \     else if (lst1_total > lst2_total) return lst2\n            else return lst1\n\
    \        }", "        // Fill Up this function body\n        // `lst1` and `lst2`\
    \ are lists of strings\n        // For example,\n        // >>> lst1\n       \
    \ // List[String](\"hi\", \"admin\")\n        // >>> lst2\n        // List[String](\"\
    hI\", \"Hi\")\n        // For each string in the list, you can get the length\
    \ of the string by `str.length`\n        // For example,\n        // >>> \"hi\"\
    .length\n        // 2\n        // >>> \"admin\".length\n        // 5\n       \
    \ // You can also get the total number of chars in the list by `lst.map(str =>\
    \ str.length).sum`\n        // For example,\n        // >>> lst1.map(str => str.length).sum\n\
    \        // 7\n        // >>> lst2.map(str => str.length).sum\n        // 4\n\
    \        // You can also get the total number of chars in the list by `lst.map(_.length).sum`\n\
    \        // For example,\n        // >>> lst1.map(_.length).sum\n        // 7\n\
    \        // >>> lst2.map(_.length).sum\n        // 4\n        // You can also\
    \ get the total number of chars in the list by `lst.map(str => str.length).sum`\n\
    \        // For example,\n        // >>> lst1.map(str => str.length).sum\n   \
    \     // 7\n        // >>> lst2.map(str => str.length).sum\n        // 4\n   \
    \     // You can also get the total number of chars in the list by `lst.map(_.length).sum`\n\
    \        // For example,\n        // >>> lst1.map(_.length).sum\n        // 7\n\
    \        // >>> lst2.map(_.length).sum\n        // 4\n        // You can also\
    \ get the total number of chars in the list by `lst.map(str => str.length).sum`\n\
    \        // For example,\n        // >>> lst1.map(str => str.length).sum\n   \
    \     // 7\n        // >>> lst2.map(str => str.length).sum\n        // 4\n   \
    \     // You can also get the total number of chars in", "        // Fill Up this\
    \ function body\n        // `lst1` and `lst2` are lists of strings\n        //\
    \ For example,\n        // >>> lst1\n        // List[String](\"hi\", \"admin\"\
    )\n        // >>> lst2\n        // List[String](\"hI\", \"Hi\")\n        // You\
    \ can get the length of a string as follows.\n        // >>> lst1(0).length\n\
    \        // 2\n        // You can get the length of a list as follows.\n     \
    \   // >>> lst1.length\n        // 2\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ lst1.map(_.length).sum\n        // 6\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ lst1.map(_.length).sum\n        // 6\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ lst1.map(_.length).sum\n        // 6\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ lst1.map(_.length).sum\n        // 6\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ lst1.map(_.length).sum\n        // 6\n        // You can get the total length\
    \ of a list as follows.\n        // >>> lst1.map(_.length).sum\n        // 6\n\
    \        // You can get the total length of a list as follows.\n        // >>>\
    \ l"]
stop_tokens:
- "\n    }\n"
