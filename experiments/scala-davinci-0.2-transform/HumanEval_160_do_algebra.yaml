name: HumanEval_160_do_algebra
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n    // the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n    // expression and return the evaluation of this\
  \ expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n  \
  \  // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division (\
  \ // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*',\
  \ '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result\
  \ = 9\n    // Note:\n    // The length of operator list is equal to the length of\
  \ operand list minus one.\n    // Operand is a list of of non-negative integers.\n\
  \    // Operator list has at least one operator, and operand list has at least two\
  \ operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
  **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
  \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
  //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
  \n}\n"
completions: ["        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        val stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val x\
    \ = operand(i)\n            val y = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(x + y)\n                case \"-\" =>\
    \ stack.push(x - y)\n                case \"*\" => stack.push(x * y)\n       \
    \         case \"//\" => stack.push(x / y)\n                case \"**\" => stack.push(pow(x,\
    \ y).toLong)\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  stack.push(op(i) match {\n                case \"+\" => a + b\n           \
    \     case \"-\" => a - b\n                case \"*\" => a * b\n             \
    \   case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n  \
    \          })\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val a = stack.pop\n            val b\
    \ = operand(i + 1)\n            val c = op(i) match {\n                case \"\
    +\" => a + b\n                case \"-\" => a - b\n                case \"*\"\
    \ => a * b\n                case \"//\" => a / b\n                case \"**\"\
    \ => pow(a, b).toLong\n            }\n            stack.push(c)\n        }\n \
    \       stack.pop", "        var result = operand(0)\n        for (i <- 1 until\
    \ operand.length) {\n            op(i - 1) match {\n                case \"+\"\
    \ => result += operand(i)\n                case \"-\" => result -= operand(i)\n\
    \                case \"*\" => result *= operand(i)\n                case \"//\"\
    \ => result /= operand(i)\n                case \"**\" => result = pow(result,\
    \ operand(i)).toLong\n            }\n        }\n        result", "        var\
    \ result = operand(0)\n        for (i <- 0 until op.length) {\n            op(i)\
    \ match {\n                case \"+\" => result += operand(i + 1)\n          \
    \      case \"-\" => result -= operand(i + 1)\n                case \"*\" => result\
    \ *= operand(i + 1)\n                case \"//\" => result /= operand(i + 1)\n\
    \                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        var stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val right = operand(i + 1)\n\
    \            val left = stack.pop\n            val result = op(i) match {\n  \
    \              case \"+\" => left + right\n                case \"-\" => left\
    \ - right\n                case \"*\" => left * right\n                case \"\
    //\" => left / right\n                case \"**\" => pow(left, right).toLong\n\
    \            }\n            stack.push(result)\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result", "        val stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val a = stack.pop\n     \
    \       val b = operand(i + 1)\n            val c = op(i) match {\n          \
    \      case \"+\" => a + b\n                case \"-\" => a - b\n            \
    \    case \"*\" => a * b\n                case \"//\" => a / b\n             \
    \   case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        stack.push(operand(0))\n        for\
    \ (i <- 1 until operand.length) {\n            val num = operand(i)\n        \
    \    val operator = op(i - 1)\n            operator match {\n                case\
    \ \"+\" => stack.push(stack.pop + num)\n                case \"-\" => stack.push(stack.pop\
    \ - num)\n                case \"*\" => stack.push(stack.pop * num)\n        \
    \        case \"//\" => stack.push(stack.pop / num)\n                case \"**\"\
    \ => stack.push(pow(stack.pop, num).toLong)\n            }\n        }\n      \
    \  stack.pop", "        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            if (op(i) == \"+\") result += operand(i\
    \ + 1)\n            else if (op(i) == \"-\") result -= operand(i + 1)\n      \
    \      else if (op(i) == \"*\") result *= operand(i + 1)\n            else if\
    \ (op(i) == \"//\") result /= operand(i + 1)\n            else if (op(i) == \"\
    **\") result = pow(result, operand(i + 1)).toLong\n        }\n        return result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        var\
    \ stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n          \
    \  val a = stack.pop\n            val b = operand(i + 1)\n            val c =\
    \ op(i) match {\n                case \"+\" => a + b\n                case \"\
    -\" => a - b\n                case \"*\" => a * b\n                case \"//\"\
    \ => a / b\n                case \"**\" => pow(a, b).toLong\n            }\n \
    \           stack.push(c)\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        stack.pop", "        if (op.length\
    \ != operand.length - 1) throw new IllegalArgumentException(\"operator and operand\
    \ length mismatch\")\n        var result = operand(0)\n        for (i <- 0 until\
    \ op.length) {\n            op(i) match {\n                case \"+\" => result\
    \ += operand(i + 1)\n                case \"-\" => result -= operand(i + 1)\n\
    \                case \"*\" => result *= operand(i + 1)\n                case\
    \ \"//\" => result /= operand(i + 1)\n                case \"**\" => result =\
    \ pow(result, operand(i + 1)).toLong\n                case _ => throw new IllegalArgumentException(\"\
    invalid operator\")\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val x = operand(i)\n            val y = operand(i + 1)\n         \
    \   op(i) match {\n                case \"+\" => stack.push(x + y)\n         \
    \       case \"-\" => stack.push(x - y)\n                case \"*\" => stack.push(x\
    \ * y)\n                case \"//\" => stack.push(x / y)\n                case\
    \ \"**\" => stack.push(pow(x, y).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            op(i\
    \ - 1) match {\n                case \"+\" => result += operand(i)\n         \
    \       case \"-\" => result -= operand(i)\n                case \"*\" => result\
    \ *= operand(i)\n                case \"//\" => result /= operand(i)\n       \
    \         case \"**\" => result = pow(result, operand(i)).toLong\n           \
    \ }\n        }\n        result", "        val opStack = new Stack[String]\n  \
    \      val operandStack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            opStack.push(op(i))\n            operandStack.push(operand(i))\n\
    \        }\n        operandStack.push(operand(operand.length - 1))\n        while\
    \ (!opStack.isEmpty) {\n            val op = opStack.pop\n            val right\
    \ = operandStack.pop\n            val left = operandStack.pop\n            val\
    \ result = op match {\n                case \"+\" => left + right\n          \
    \      case \"-\" => left - right\n                case \"*\" => left * right\n\
    \                case \"//\" => left / right\n                case \"**\" => pow(left,\
    \ right).toLong\n            }\n            operandStack.push(result)\n      \
    \  }\n        operandStack.pop", "        val stack = new Stack[Long]\n      \
    \  for (i <- 0 until op.length) {\n            val x = operand(i)\n          \
    \  val y = operand(i + 1)\n            val z = op(i) match {\n               \
    \ case \"+\" => x + y\n                case \"-\" => x - y\n                case\
    \ \"*\" => x * y\n                case \"//\" => x / y\n                case \"\
    **\" => pow(x, y).toLong\n            }\n            stack.push(z)\n        }\n\
    \        stack.pop", "        var result = operand(0)\n        for (i <- 1 until\
    \ operand.length) {\n            op(i - 1) match {\n                case \"+\"\
    \ => result += operand(i)\n                case \"-\" => result -= operand(i)\n\
    \                case \"*\" => result *= operand(i)\n                case \"//\"\
    \ => result /= operand(i)\n                case \"**\" => result = pow(result,\
    \ operand(i)).toLong\n            }\n        }\n        result", "        var\
    \ result = operand(0)\n        for (i <- 0 until op.length) {\n            op(i)\
    \ match {\n                case \"+\" => result += operand(i + 1)\n          \
    \      case \"-\" => result -= operand(i + 1)\n                case \"*\" => result\
    \ *= operand(i + 1)\n                case \"//\" => result /= operand(i + 1)\n\
    \                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        val stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val b = stack.pop\n            val a = stack.pop\n            op(i)\
    \ match {\n                case \"+\" => stack.push(a + b)\n                case\
    \ \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n\
    \                case \"//\" => stack.push(a / b)\n                case \"**\"\
    \ => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 1 until operand.length) {\n            result = op(i - 1) match {\n     \
    \           case \"+\" => result + operand(i)\n                case \"-\" => result\
    \ - operand(i)\n                case \"*\" => result * operand(i)\n          \
    \      case \"//\" => result / operand(i)\n                case \"**\" => pow(result,\
    \ operand(i)).toLong\n            }\n        }\n        result", "        var\
    \ stack = new Stack[Long]\n        var i = 0\n        while (i < op.length) {\n\
    \            val o = op(i)\n            val a = operand(i)\n            val b\
    \ = operand(i + 1)\n            if (o == \"+\") stack.push(a + b)\n          \
    \  else if (o == \"-\") stack.push(a - b)\n            else if (o == \"*\") stack.push(a\
    \ * b)\n            else if (o == \"//\") stack.push(a / b)\n            else\
    \ if (o == \"**\") stack.push(pow(a, b).toLong)\n            i += 1\n        }\n\
    \        stack.pop", "        var result = operand(0)\n        for (i <- 0 until\
    \ op.length) {\n            op(i) match {\n                case \"+\" => result\
    \ += operand(i + 1)\n                case \"-\" => result -= operand(i + 1)\n\
    \                case \"*\" => result *= operand(i + 1)\n                case\
    \ \"//\" => result /= operand(i + 1)\n                case \"**\" => result =\
    \ pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result", "        var result = operand(0)\n   \
    \     for (i <- 1 until operand.length) {\n            result = op(i - 1) match\
    \ {\n                case \"+\" => result + operand(i)\n                case \"\
    -\" => result - operand(i)\n                case \"*\" => result * operand(i)\n\
    \                case \"//\" => result / operand(i)\n                case \"**\"\
    \ => pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        val stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        var\
    \ result = operand(0)\n        for (i <- 0 until op.length) {\n            op(i)\
    \ match {\n                case \"+\" => result += operand(i + 1)\n          \
    \      case \"-\" => result -= operand(i + 1)\n                case \"*\" => result\
    \ *= operand(i + 1)\n                case \"//\" => result /= operand(i + 1)\n\
    \                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 1 until operand.length) {\n            if (op(i - 1) == \"\
    +\") result += operand(i)\n            else if (op(i - 1) == \"-\") result -=\
    \ operand(i)\n            else if (op(i - 1) == \"*\") result *= operand(i)\n\
    \            else if (op(i - 1) == \"//\") result /= operand(i)\n            else\
    \ if (op(i - 1) == \"**\") result = pow(result, operand(i)).toLong\n        }\n\
    \        return result", "        var result = operand(0)\n        for (i <- 0\
    \ until op.length) {\n            op(i) match {\n                case \"+\" =>\
    \ result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        val stack = Stack[Long]()\n        for (i <- 0 until op.length) {\n   \
    \         val o1 = stack.pop\n            val o2 = operand(i + 1)\n          \
    \  val result = op(i) match {\n                case \"+\" => o1 + o2\n       \
    \         case \"-\" => o1 - o2\n                case \"*\" => o1 * o2\n     \
    \           case \"//\" => o1 / o2\n                case \"**\" => pow(o1, o2).toLong\n\
    \            }\n            stack.push(result)\n        }\n        stack.pop",
  "        val stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        var\
    \ stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n          \
    \  val a = stack.pop\n            val b = operand(i + 1)\n            val c =\
    \ op(i) match {\n                case \"+\" => a + b\n                case \"\
    -\" => a - b\n                case \"*\" => a * b\n                case \"//\"\
    \ => a / b\n                case \"**\" => pow(a, b).toLong\n            }\n \
    \           stack.push(c)\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            if (op(i)\
    \ == \"+\") result += operand(i + 1)\n            else if (op(i) == \"-\") result\
    \ -= operand(i + 1)\n            else if (op(i) == \"*\") result *= operand(i\
    \ + 1)\n            else if (op(i) == \"//\") result /= operand(i + 1)\n     \
    \       else if (op(i) == \"**\") result = pow(result, operand(i + 1)).toLong\n\
    \        }\n        return result", "        var result = operand(0)\n       \
    \ for (i <- 1 until operand.length) {\n            op(i - 1) match {\n       \
    \         case \"+\" => result += operand(i)\n                case \"-\" => result\
    \ -= operand(i)\n                case \"*\" => result *= operand(i)\n        \
    \        case \"//\" => result /= operand(i)\n                case \"**\" => result\
    \ = pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 1 until operand.length) {\n            result = op(i - 1) match\
    \ {\n                case \"+\" => result + operand(i)\n                case \"\
    -\" => result - operand(i)\n                case \"*\" => result * operand(i)\n\
    \                case \"//\" => result / operand(i)\n                case \"**\"\
    \ => pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        var\
    \ stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n          \
    \  val a = stack.pop\n            val b = operand(i + 1)\n            op(i) match\
    \ {\n                case \"+\" => stack.push(a + b)\n                case \"\
    -\" => stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n  \
    \              case \"//\" => stack.push(a / b)\n                case \"**\" =>\
    \ stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        if (op.isEmpty || operand.isEmpty) throw new IllegalArgumentException\n\
    \        var result = operand.head\n        for (i <- 0 until op.length) {\n \
    \           op(i) match {\n                case \"+\" => result += operand(i +\
    \ 1)\n                case \"-\" => result -= operand(i + 1)\n               \
    \ case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n                case _ => throw new IllegalArgumentException\n\
    \            }\n        }\n        result", "        var stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val a = stack.pop\n     \
    \       val b = operand(i + 1)\n            op(i) match {\n                case\
    \ \"+\" => stack.push(a + b)\n                case \"-\" => stack.push(a - b)\n\
    \                case \"*\" => stack.push(a * b)\n                case \"//\"\
    \ => stack.push(a / b)\n                case \"**\" => stack.push(pow(a, b).toLong)\n\
    \            }\n        }\n        stack.pop", "        var stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val x = stack.pop\n     \
    \       val y = operand(i + 1)\n            val z = op(i) match {\n          \
    \      case \"+\" => x + y\n                case \"-\" => x - y\n            \
    \    case \"*\" => x * y\n                case \"//\" => x / y\n             \
    \   case \"**\" => pow(x, y).toLong\n            }\n            stack.push(z)\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result", "        var stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val o = op(i)\n         \
    \   val a = operand(i)\n            val b = operand(i + 1)\n            o match\
    \ {\n                case \"+\" => stack.push(a + b)\n                case \"\
    -\" => stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n  \
    \              case \"//\" => stack.push(a / b)\n                case \"**\" =>\
    \ stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val x\
    \ = stack.pop\n            val y = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(x + y)\n                case \"-\" =>\
    \ stack.push(x - y)\n                case \"*\" => stack.push(x * y)\n       \
    \         case \"//\" => stack.push(x / y)\n                case \"**\" => stack.push(pow(x,\
    \ y).toLong)\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 1 until operand.length) {\n            op(i - 1) match {\n              \
    \  case \"+\" => result += operand(i)\n                case \"-\" => result -=\
    \ operand(i)\n                case \"*\" => result *= operand(i)\n           \
    \     case \"//\" => result /= operand(i)\n                case \"**\" => result\
    \ = pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 1 until operand.length) {\n            op(i - 1) match {\n\
    \                case \"+\" => result += operand(i)\n                case \"-\"\
    \ => result -= operand(i)\n                case \"*\" => result *= operand(i)\n\
    \                case \"//\" => result /= operand(i)\n                case \"\
    **\" => result = pow(result, operand(i)).toLong\n            }\n        }\n  \
    \      result", "        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        var i = 0\n        while (i < op.length) {\n    \
    \        op(i) match {\n                case \"+\" => stack.push(stack.pop + operand(i\
    \ + 1))\n                case \"-\" => stack.push(stack.pop - operand(i + 1))\n\
    \                case \"*\" => stack.push(stack.pop * operand(i + 1))\n      \
    \          case \"//\" => stack.push(stack.pop / operand(i + 1))\n           \
    \     case \"**\" => stack.push(pow(stack.pop, operand(i + 1)).toLong)\n     \
    \       }\n            i += 1\n        }\n        stack.pop", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            val c = op(i) match\
    \ {\n                case \"+\" => a + b\n                case \"-\" => a - b\n\
    \                case \"*\" => a * b\n                case \"//\" => a / b\n \
    \               case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            if (op(i) == \"+\") result += operand(i\
    \ + 1)\n            else if (op(i) == \"-\") result -= operand(i + 1)\n      \
    \      else if (op(i) == \"*\") result *= operand(i + 1)\n            else if\
    \ (op(i) == \"//\") result /= operand(i + 1)\n            else if (op(i) == \"\
    **\") result = pow(result, operand(i + 1)).toLong\n        }\n        return result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val o = op(i)\n            val a = operand(i)\n            val b =\
    \ operand(i + 1)\n            o match {\n                case \"+\" => stack.push(a\
    \ + b)\n                case \"-\" => stack.push(a - b)\n                case\
    \ \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a / b)\n\
    \                case \"**\" => stack.push(pow(a, b).toLong)\n            }\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 1 until operand.length) {\n            result = op(i - 1) match {\n  \
    \              case \"+\" => result + operand(i)\n                case \"-\" =>\
    \ result - operand(i)\n                case \"*\" => result * operand(i)\n   \
    \             case \"//\" => result / operand(i)\n                case \"**\"\
    \ => pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val o = op(i)\n            val a = operand(i)\n            val b =\
    \ operand(i + 1)\n            o match {\n                case \"+\" => stack.push(a\
    \ + b)\n                case \"-\" => stack.push(a - b)\n                case\
    \ \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a / b)\n\
    \                case \"**\" => stack.push(pow(a, b).toLong)\n            }\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        val stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            val c = op(i) match\
    \ {\n                case \"+\" => a + b\n                case \"-\" => a - b\n\
    \                case \"*\" => a * b\n                case \"//\" => a / b\n \
    \               case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 1 until operand.length) {\n            op(i - 1) match {\n           \
    \     case \"+\" => result += operand(i)\n                case \"-\" => result\
    \ -= operand(i)\n                case \"*\" => result *= operand(i)\n        \
    \        case \"//\" => result /= operand(i)\n                case \"**\" => result\
    \ = pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        stack.pop", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            op(i\
    \ - 1) match {\n                case \"+\" => result += operand(i)\n         \
    \       case \"-\" => result -= operand(i)\n                case \"*\" => result\
    \ *= operand(i)\n                case \"//\" => result /= operand(i)\n       \
    \         case \"**\" => result = pow(result, operand(i)).toLong\n           \
    \ }\n        }\n        result", "        var result = operand(0)\n        for\
    \ (i <- 1 until operand.length) {\n            op(i - 1) match {\n           \
    \     case \"+\" => result += operand(i)\n                case \"-\" => result\
    \ -= operand(i)\n                case \"*\" => result *= operand(i)\n        \
    \        case \"//\" => result /= operand(i)\n                case \"**\" => result\
    \ = pow(result, operand(i)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            if (op(i\
    \ - 1) == \"+\") result += operand(i)\n            else if (op(i - 1) == \"-\"\
    ) result -= operand(i)\n            else if (op(i - 1) == \"*\") result *= operand(i)\n\
    \            else if (op(i - 1) == \"//\") result /= operand(i)\n            else\
    \ if (op(i - 1) == \"**\") result = pow(result, operand(i)).toLong\n        }\n\
    \        return result", "        var result = operand(0)\n        for (i <- 0\
    \ until op.length) {\n            op(i) match {\n                case \"+\" =>\
    \ result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            if (op(i - 1) == \"+\") result += operand(i)\n            else if\
    \ (op(i - 1) == \"-\") result -= operand(i)\n            else if (op(i - 1) ==\
    \ \"*\") result *= operand(i)\n            else if (op(i - 1) == \"//\") result\
    \ /= operand(i)\n            else if (op(i - 1) == \"**\") result = pow(result,\
    \ operand(i)).toLong\n        }\n        return result", "        var result =\
    \ operand(0)\n        for (i <- 0 until op.length) {\n            if (op(i) ==\
    \ \"+\") result += operand(i + 1)\n            else if (op(i) == \"-\") result\
    \ -= operand(i + 1)\n            else if (op(i) == \"*\") result *= operand(i\
    \ + 1)\n            else if (op(i) == \"//\") result /= operand(i + 1)\n     \
    \       else if (op(i) == \"**\") result = pow(result, operand(i + 1)).toLong\n\
    \        }\n        return result", "        var result = operand(0)\n       \
    \ for (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val b = stack.pop\n            val a\
    \ = stack.pop\n            val c = op(i) match {\n                case \"+\" =>\
    \ a + b\n                case \"-\" => a - b\n                case \"*\" => a\
    \ * b\n                case \"//\" => a / b\n                case \"**\" => pow(a,\
    \ b).toLong\n            }\n            stack.push(c)\n        }\n        stack.pop",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        var\
    \ result = operand(0)\n        for (i <- 0 until op.length) {\n            op(i)\
    \ match {\n                case \"+\" => result += operand(i + 1)\n          \
    \      case \"-\" => result -= operand(i + 1)\n                case \"*\" => result\
    \ *= operand(i + 1)\n                case \"//\" => result /= operand(i + 1)\n\
    \                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 1 until operand.length) {\n            op(i - 1) match {\n\
    \                case \"+\" => result += operand(i)\n                case \"-\"\
    \ => result -= operand(i)\n                case \"*\" => result *= operand(i)\n\
    \                case \"//\" => result /= operand(i)\n                case \"\
    **\" => result = pow(result, operand(i)).toLong\n            }\n        }\n  \
    \      result", "        var stack = new Stack[Long]\n        for (i <- 0 until\
    \ op.length) {\n            val x = operand(i)\n            val y = operand(i\
    \ + 1)\n            val result = op(i) match {\n                case \"+\" =>\
    \ x + y\n                case \"-\" => x - y\n                case \"*\" => x\
    \ * y\n                case \"//\" => x / y\n                case \"**\" => pow(x,\
    \ y).toLong\n            }\n            stack.push(result)\n        }\n      \
    \  stack.pop", "        var stack = new Stack[Long]\n        for (i <- 0 until\
    \ op.length) {\n            val o = op(i)\n            val a = operand(i)\n  \
    \          val b = operand(i + 1)\n            val result = o match {\n      \
    \          case \"+\" => a + b\n                case \"-\" => a - b\n        \
    \        case \"*\" => a * b\n                case \"//\" => a / b\n         \
    \       case \"**\" => pow(a, b).toLong\n            }\n            stack.push(result)\n\
    \        }\n        stack.pop", "        var stack = new Stack[Long]\n       \
    \ for (i <- 0 until op.length) {\n            val num1 = stack.pop\n         \
    \   val num2 = operand(i + 1)\n            val result = op(i) match {\n      \
    \          case \"+\" => num1 + num2\n                case \"-\" => num1 - num2\n\
    \                case \"*\" => num1 * num2\n                case \"//\" => num1\
    \ / num2\n                case \"**\" => pow(num1, num2).toLong\n            }\n\
    \            stack.push(result)\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val a = stack.pop\n            val b\
    \ = operand(i + 1)\n            val c = op(i) match {\n                case \"\
    +\" => a + b\n                case \"-\" => a - b\n                case \"*\"\
    \ => a * b\n                case \"//\" => a / b\n                case \"**\"\
    \ => pow(a, b).toLong\n            }\n            stack.push(c)\n        }\n \
    \       stack.pop", "        var result = operand(0)\n        for (i <- 0 until\
    \ op.length) {\n            op(i) match {\n                case \"+\" => result\
    \ += operand(i + 1)\n                case \"-\" => result -= operand(i + 1)\n\
    \                case \"*\" => result *= operand(i + 1)\n                case\
    \ \"//\" => result /= operand(i + 1)\n                case \"**\" => result =\
    \ pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        var\
    \ result = operand(0)\n        for (i <- 1 until operand.length) {\n         \
    \   val next = operand(i)\n            op(i - 1) match {\n                case\
    \ \"+\" => result += next\n                case \"-\" => result -= next\n    \
    \            case \"*\" => result *= next\n                case \"//\" => result\
    \ /= next\n                case \"**\" => result = pow(result, next).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        stack.push(operand(0))\n\
    \        for (i <- 1 until operand.length) {\n            val o = op(i - 1)\n\
    \            val n = operand(i)\n            if (o == \"+\") stack.push(stack.pop\
    \ + n)\n            else if (o == \"-\") stack.push(stack.pop - n)\n         \
    \   else if (o == \"*\") stack.push(stack.pop * n)\n            else if (o ==\
    \ \"//\") stack.push(stack.pop / n)\n            else if (o == \"**\") stack.push(pow(stack.pop,\
    \ n).toLong)\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        val stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val o = op(i)\n            val a = operand(i)\n\
    \            val b = operand(i + 1)\n            o match {\n                case\
    \ \"+\" => stack.push(a + b)\n                case \"-\" => stack.push(a - b)\n\
    \                case \"*\" => stack.push(a * b)\n                case \"//\"\
    \ => stack.push(a / b)\n                case \"**\" => stack.push(pow(a, b).toLong)\n\
    \            }\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val a = stack.pop\n            val b\
    \ = operand(i + 1)\n            op(i) match {\n                case \"+\" => stack.push(a\
    \ + b)\n                case \"-\" => stack.push(a - b)\n                case\
    \ \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a / b)\n\
    \                case \"**\" => stack.push(pow(a, b).toLong)\n            }\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val o1 = stack.pop\n            val\
    \ o2 = operand(i + 1)\n            val o = op(i)\n            stack.push(o match\
    \ {\n                case \"+\" => o1 + o2\n                case \"-\" => o1 -\
    \ o2\n                case \"*\" => o1 * o2\n                case \"//\" => o1\
    \ / o2\n                case \"**\" => pow(o1, o2).toLong\n            })\n  \
    \      }\n        stack.pop", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            if (op(i) == \"+\") result += operand(i\
    \ + 1)\n            else if (op(i) == \"-\") result -= operand(i + 1)\n      \
    \      else if (op(i) == \"*\") result *= operand(i + 1)\n            else if\
    \ (op(i) == \"//\") result /= operand(i + 1)\n            else if (op(i) == \"\
    **\") result = pow(result, operand(i + 1)).toLong\n        }\n        return result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            result\
    \ = op(i - 1) match {\n                case \"+\" => result + operand(i)\n   \
    \             case \"-\" => result - operand(i)\n                case \"*\" =>\
    \ result * operand(i)\n                case \"//\" => result / operand(i)\n  \
    \              case \"**\" => pow(result, operand(i)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            result = op(i - 1) match {\n                case \"+\" => result\
    \ + operand(i)\n                case \"-\" => result - operand(i)\n          \
    \      case \"*\" => result * operand(i)\n                case \"//\" => result\
    \ / operand(i)\n                case \"**\" => pow(result, operand(i)).toLong\n\
    \            }\n        }\n        result", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        stack.push(operand(0))\n\
    \        for (i <- 1 until operand.length) {\n            val num = operand(i)\n\
    \            val operator = op(i - 1)\n            operator match {\n        \
    \        case \"+\" => stack.push(stack.pop + num)\n                case \"-\"\
    \ => stack.push(stack.pop - num)\n                case \"*\" => stack.push(stack.pop\
    \ * num)\n                case \"//\" => stack.push(stack.pop / num)\n       \
    \         case \"**\" => stack.push(pow(stack.pop, num).toLong)\n            }\n\
    \        }\n        stack.pop", "        var stack = new Stack[Long]\n       \
    \ stack.push(operand(0))\n        for (i <- 1 until operand.length) {\n      \
    \      val num = operand(i)\n            val opr = op(i - 1)\n            if (opr\
    \ == \"+\") stack.push(stack.pop + num)\n            else if (opr == \"-\") stack.push(stack.pop\
    \ - num)\n            else if (opr == \"*\") stack.push(stack.pop * num)\n   \
    \         else if (opr == \"//\") stack.push(stack.pop / num)\n            else\
    \ if (opr == \"**\") stack.push(pow(stack.pop, num).toLong)\n        }\n     \
    \   stack.pop", "        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            var a\
    \ = stack.pop\n            var b = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        return stack.pop", "        var\
    \ stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n          \
    \  val a = stack.pop\n            val b = operand(i + 1)\n            op(i) match\
    \ {\n                case \"+\" => stack.push(a + b)\n                case \"\
    -\" => stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n  \
    \              case \"//\" => stack.push(a / b)\n                case \"**\" =>\
    \ stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        val stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        stack.pop", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result", "        var result = operand(0)\n   \
    \     for (i <- 0 until op.length) {\n            op(i) match {\n            \
    \    case \"+\" => result += operand(i + 1)\n                case \"-\" => result\
    \ -= operand(i + 1)\n                case \"*\" => result *= operand(i + 1)\n\
    \                case \"//\" => result /= operand(i + 1)\n                case\
    \ \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n     \
    \   }\n        result", "        var stack = new Stack[Long]\n        for (i <-\
    \ 0 until op.length) {\n            val a = stack.pop\n            val b = operand(i\
    \ + 1)\n            op(i) match {\n                case \"+\" => stack.push(a\
    \ + b)\n                case \"-\" => stack.push(a - b)\n                case\
    \ \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a / b)\n\
    \                case \"**\" => stack.push(pow(a, b).toLong)\n            }\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val o\
    \ = op(i)\n            val a = operand(i)\n            val b = operand(i + 1)\n\
    \            if (o == \"+\") stack.push(a + b)\n            else if (o == \"-\"\
    ) stack.push(a - b)\n            else if (o == \"*\") stack.push(a * b)\n    \
    \        else if (o == \"//\") stack.push(a / b)\n            else if (o == \"\
    **\") stack.push(pow(a, b).toLong)\n        }\n        stack.pop", "        val\
    \ stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n          \
    \  val a = stack.pop\n            val b = operand(i + 1)\n            op(i) match\
    \ {\n                case \"+\" => stack.push(a + b)\n                case \"\
    -\" => stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n  \
    \              case \"//\" => stack.push(a / b)\n                case \"**\" =>\
    \ stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        val stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val b = stack.pop\n            val a = stack.pop\n            val\
    \ c = op(i) match {\n                case \"+\" => a + b\n                case\
    \ \"-\" => a - b\n                case \"*\" => a * b\n                case \"\
    //\" => a / b\n                case \"**\" => pow(a, b).toLong\n            }\n\
    \            stack.push(c)\n        }\n        stack.pop", "        var stack\
    \ = new Stack[Long]\n        stack.push(operand(0))\n        for (i <- 1 until\
    \ operand.length) {\n            val o = op(i - 1)\n            val n = operand(i)\n\
    \            val p = stack.pop\n            o match {\n                case \"\
    +\" => stack.push(p + n)\n                case \"-\" => stack.push(p - n)\n  \
    \              case \"*\" => stack.push(p * n)\n                case \"//\" =>\
    \ stack.push(p / n)\n                case \"**\" => stack.push(pow(p, n).toLong)\n\
    \            }\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val o1 = stack.pop\n            val\
    \ o2 = operand(i + 1)\n            val result = op(i) match {\n              \
    \  case \"+\" => o1 + o2\n                case \"-\" => o1 - o2\n            \
    \    case \"*\" => o1 * o2\n                case \"//\" => o1 / o2\n         \
    \       case \"**\" => pow(o1, o2).toLong\n            }\n            stack.push(result)\n\
    \        }\n        stack.pop", "        var stack = new Stack[Long]\n       \
    \ for (i <- 0 until op.length) {\n            val a = stack.pop\n            val\
    \ b = operand(i + 1)\n            op(i) match {\n                case \"+\" =>\
    \ stack.push(a + b)\n                case \"-\" => stack.push(a - b)\n       \
    \         case \"*\" => stack.push(a * b)\n                case \"//\" => stack.push(a\
    \ / b)\n                case \"**\" => stack.push(pow(a, b).toLong)\n        \
    \    }\n        }\n        stack.pop", "        var result = operand(0)\n    \
    \    for (i <- 0 until op.length) {\n            op(i) match {\n             \
    \   case \"+\" => result += operand(i + 1)\n                case \"-\" => result\
    \ -= operand(i + 1)\n                case \"*\" => result *= operand(i + 1)\n\
    \                case \"//\" => result /= operand(i + 1)\n                case\
    \ \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n     \
    \   }\n        result", "        var result = operand(0)\n        for (i <- 0\
    \ until op.length) {\n            op(i) match {\n                case \"+\" =>\
    \ result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        val\
    \ stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n          \
    \  val a = stack.pop\n            val b = operand(i + 1)\n            op(i) match\
    \ {\n                case \"+\" => stack.push(a + b)\n                case \"\
    -\" => stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n  \
    \              case \"//\" => stack.push(a / b)\n                case \"**\" =>\
    \ stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val op1 = stack.pop\n            val op2 = operand(i + 1)\n      \
    \      val result = op(i) match {\n                case \"+\" => op1 + op2\n \
    \               case \"-\" => op1 - op2\n                case \"*\" => op1 * op2\n\
    \                case \"//\" => op1 / op2\n                case \"**\" => pow(op1,\
    \ op2).toLong\n            }\n            stack.push(result)\n        }\n    \
    \    stack.pop", "        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        if (op.length != operand.length - 1) throw\
    \ new IllegalArgumentException(\"Invalid input\")\n        var stack = new Stack[Long]\n\
    \        for (i <- 0 until operand.length) {\n            stack.push(operand(i))\n\
    \            if (i < op.length) {\n                val opr = op(i)\n         \
    \       if (opr == \"+\") {\n                    val b = stack.pop\n         \
    \           val a = stack.pop\n                    stack.push(a + b)\n       \
    \         } else if (opr == \"-\") {\n                    val b = stack.pop\n\
    \                    val a = stack.pop\n                    stack.push(a - b)\n\
    \                } else if (opr == \"*\") {\n                    val b = stack.pop\n\
    \                    val a = stack.pop\n                    stack.push(a * b)\n\
    \                } else if (opr == \"//\") {\n                    val b = stack.pop\n\
    \                    val a = stack.pop\n                    stack.push(a / b)\n\
    \                } else if (opr == \"**\") {\n                    val b = stack.pop\n\
    \                    val a = stack.pop\n                    stack.push(pow(a,\
    \ b).toLong)\n                } else throw new IllegalArgumentException(\"Invalid\
    \ operator\")\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        val stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  op(i) match {\n                case \"+\" => stack.push(a + b)\n          \
    \      case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        val stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val o = op(i)\n            val a = operand(i)\n            val b =\
    \ operand(i + 1)\n            if (o == \"+\") stack.push(a + b)\n            else\
    \ if (o == \"-\") stack.push(a - b)\n            else if (o == \"*\") stack.push(a\
    \ * b)\n            else if (o == \"//\") stack.push(a / b)\n            else\
    \ if (o == \"**\") stack.push(pow(a, b).toLong)\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(a + b)\n                case \"-\" =>\
    \ stack.push(a - b)\n                case \"*\" => stack.push(a * b)\n       \
    \         case \"//\" => stack.push(a / b)\n                case \"**\" => stack.push(pow(a,\
    \ b).toLong)\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            result\
    \ = op(i - 1) match {\n                case \"+\" => result + operand(i)\n   \
    \             case \"-\" => result - operand(i)\n                case \"*\" =>\
    \ result * operand(i)\n                case \"//\" => result / operand(i)\n  \
    \              case \"**\" => pow(result, operand(i)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 1 until operand.length) {\n            result\
    \ = op(i - 1) match {\n                case \"+\" => result + operand(i)\n   \
    \             case \"-\" => result - operand(i)\n                case \"*\" =>\
    \ result * operand(i)\n                case \"//\" => result / operand(i)\n  \
    \              case \"**\" => pow(result, operand(i)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val o = op(i)\n            val o1 =\
    \ operand(i)\n            val o2 = operand(i + 1)\n            o match {\n   \
    \             case \"+\" => stack.push(o1 + o2)\n                case \"-\" =>\
    \ stack.push(o1 - o2)\n                case \"*\" => stack.push(o1 * o2)\n   \
    \             case \"//\" => stack.push(o1 / o2)\n                case \"**\"\
    \ => stack.push(pow(o1, o2).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            if (op(i) == \"+\") result += operand(i\
    \ + 1)\n            else if (op(i) == \"-\") result -= operand(i + 1)\n      \
    \      else if (op(i) == \"*\") result *= operand(i + 1)\n            else if\
    \ (op(i) == \"//\") result /= operand(i + 1)\n            else if (op(i) == \"\
    **\") result = pow(result, operand(i + 1)).toLong\n        }\n        return result",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val a\
    \ = stack.pop\n            val b = operand(i + 1)\n            val c = op(i) match\
    \ {\n                case \"+\" => a + b\n                case \"-\" => a - b\n\
    \                case \"*\" => a * b\n                case \"//\" => a / b\n \
    \               case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop"]
stop_tokens:
- "\n    }\n"
