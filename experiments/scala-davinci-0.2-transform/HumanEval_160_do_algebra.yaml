name: HumanEval_160_do_algebra
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n    // the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n    // expression and return the evaluation of this\
  \ expression.\n    // The basic algebra operations:\n    // Addition ( + ) \n  \
  \  // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division (\
  \ // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+', '*',\
  \ '-']\n    // array = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // => result\
  \ = 9\n    // Note:\n    // The length of operator list is equal to the length of\
  \ operand list minus one.\n    // Operand is a list of of non-negative integers.\n\
  \    // Operator list has at least one operator, and operand list has at least two\
  \ operands.\n    def doAlgebra(op : List[String], operand : List[Long]) : Long =\
  \ {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(doAlgebra((List[String](\"\
  **\", \"*\", \"+\")), (List[Long](2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\
  \ == (37l));\n    assert(doAlgebra((List[String](\"+\", \"*\", \"-\")), (List[Long](2l.toLong,\
  \ 3l.toLong, 4l.toLong, 5l.toLong))) == (9l));\n    assert(doAlgebra((List[String](\"\
  //\", \"*\")), (List[Long](7l.toLong, 3l.toLong, 4l.toLong))) == (8l));\n    }\n\
  \n}\n"
completions: ["        val stack = new Stack[Long]\n        for (i <- 0 until op.length)\
    \ {\n            val a = stack.pop\n            val b = operand(i + 1)\n     \
    \       op(i) match {\n                case \"+\" => stack.push(a + b)\n     \
    \           case \"-\" => stack.push(a - b)\n                case \"*\" => stack.push(a\
    \ * b)\n                case \"//\" => stack.push(a / b)\n                case\
    \ \"**\" => stack.push(pow(a, b).toLong)\n            }\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 0 until op.length) {\n     \
    \       op(i) match {\n                case \"+\" => result += operand(i + 1)\n\
    \                case \"-\" => result -= operand(i + 1)\n                case\
    \ \"*\" => result *= operand(i + 1)\n                case \"//\" => result /=\
    \ operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        val stack\
    \ = new Stack[Long]\n        for (i <- 0 until op.length) {\n            val x\
    \ = operand(i)\n            val y = operand(i + 1)\n            op(i) match {\n\
    \                case \"+\" => stack.push(x + y)\n                case \"-\" =>\
    \ stack.push(x - y)\n                case \"*\" => stack.push(x * y)\n       \
    \         case \"//\" => stack.push(x / y)\n                case \"**\" => stack.push(pow(x,\
    \ y).toLong)\n            }\n        }\n        stack.pop", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            op(i) match {\n                case \"\
    +\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  stack.push(op(i) match {\n                case \"+\" => a + b\n           \
    \     case \"-\" => a - b\n                case \"*\" => a * b\n             \
    \   case \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n  \
    \          })\n        }\n        stack.pop", "        var result = operand(0)\n\
    \        for (i <- 0 until op.length) {\n            op(i) match {\n         \
    \       case \"+\" => result += operand(i + 1)\n                case \"-\" =>\
    \ result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var stack = new Stack[Long]\n        for\
    \ (i <- 0 until op.length) {\n            val a = stack.pop\n            val b\
    \ = operand(i + 1)\n            val c = op(i) match {\n                case \"\
    +\" => a + b\n                case \"-\" => a - b\n                case \"*\"\
    \ => a * b\n                case \"//\" => a / b\n                case \"**\"\
    \ => pow(a, b).toLong\n            }\n            stack.push(c)\n        }\n \
    \       stack.pop", "        var result = operand(0)\n        for (i <- 1 until\
    \ operand.length) {\n            op(i - 1) match {\n                case \"+\"\
    \ => result += operand(i)\n                case \"-\" => result -= operand(i)\n\
    \                case \"*\" => result *= operand(i)\n                case \"//\"\
    \ => result /= operand(i)\n                case \"**\" => result = pow(result,\
    \ operand(i)).toLong\n            }\n        }\n        result", "        var\
    \ result = operand(0)\n        for (i <- 0 until op.length) {\n            op(i)\
    \ match {\n                case \"+\" => result += operand(i + 1)\n          \
    \      case \"-\" => result -= operand(i + 1)\n                case \"*\" => result\
    \ *= operand(i + 1)\n                case \"//\" => result /= operand(i + 1)\n\
    \                case \"**\" => result = pow(result, operand(i + 1)).toLong\n\
    \            }\n        }\n        result", "        var stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val right = operand(i + 1)\n\
    \            val left = stack.pop\n            val result = op(i) match {\n  \
    \              case \"+\" => left + right\n                case \"-\" => left\
    \ - right\n                case \"*\" => left * right\n                case \"\
    //\" => left / right\n                case \"**\" => pow(left, right).toLong\n\
    \            }\n            stack.push(result)\n        }\n        stack.pop",
  "        var result = operand(0)\n        for (i <- 1 until operand.length) {\n\
    \            op(i - 1) match {\n                case \"+\" => result += operand(i)\n\
    \                case \"-\" => result -= operand(i)\n                case \"*\"\
    \ => result *= operand(i)\n                case \"//\" => result /= operand(i)\n\
    \                case \"**\" => result = pow(result, operand(i)).toLong\n    \
    \        }\n        }\n        result", "        val stack = new Stack[Long]\n\
    \        for (i <- 0 until op.length) {\n            val a = stack.pop\n     \
    \       val b = operand(i + 1)\n            val c = op(i) match {\n          \
    \      case \"+\" => a + b\n                case \"-\" => a - b\n            \
    \    case \"*\" => a * b\n                case \"//\" => a / b\n             \
    \   case \"**\" => pow(a, b).toLong\n            }\n            stack.push(c)\n\
    \        }\n        stack.pop", "        var result = operand(0)\n        for\
    \ (i <- 0 until op.length) {\n            op(i) match {\n                case\
    \ \"+\" => result += operand(i + 1)\n                case \"-\" => result -= operand(i\
    \ + 1)\n                case \"*\" => result *= operand(i + 1)\n             \
    \   case \"//\" => result /= operand(i + 1)\n                case \"**\" => result\
    \ = pow(result, operand(i + 1)).toLong\n            }\n        }\n        result",
  "        var stack = new Stack[Long]\n        stack.push(operand(0))\n        for\
    \ (i <- 1 until operand.length) {\n            val num = operand(i)\n        \
    \    val operator = op(i - 1)\n            operator match {\n                case\
    \ \"+\" => stack.push(stack.pop + num)\n                case \"-\" => stack.push(stack.pop\
    \ - num)\n                case \"*\" => stack.push(stack.pop * num)\n        \
    \        case \"//\" => stack.push(stack.pop / num)\n                case \"**\"\
    \ => stack.push(pow(stack.pop, num).toLong)\n            }\n        }\n      \
    \  stack.pop", "        var result = operand(0)\n        for (i <- 0 until op.length)\
    \ {\n            op(i) match {\n                case \"+\" => result += operand(i\
    \ + 1)\n                case \"-\" => result -= operand(i + 1)\n             \
    \   case \"*\" => result *= operand(i + 1)\n                case \"//\" => result\
    \ /= operand(i + 1)\n                case \"**\" => result = pow(result, operand(i\
    \ + 1)).toLong\n            }\n        }\n        result", "        var result\
    \ = operand(0)\n        for (i <- 0 until op.length) {\n            op(i) match\
    \ {\n                case \"+\" => result += operand(i + 1)\n                case\
    \ \"-\" => result -= operand(i + 1)\n                case \"*\" => result *= operand(i\
    \ + 1)\n                case \"//\" => result /= operand(i + 1)\n            \
    \    case \"**\" => result = pow(result, operand(i + 1)).toLong\n            }\n\
    \        }\n        result", "        var result = operand(0)\n        for (i\
    \ <- 0 until op.length) {\n            if (op(i) == \"+\") result += operand(i\
    \ + 1)\n            else if (op(i) == \"-\") result -= operand(i + 1)\n      \
    \      else if (op(i) == \"*\") result *= operand(i + 1)\n            else if\
    \ (op(i) == \"//\") result /= operand(i + 1)\n            else if (op(i) == \"\
    **\") result = pow(result, operand(i + 1)).toLong\n        }\n        return result",
  "        var stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n \
    \           val a = stack.pop\n            val b = operand(i + 1)\n          \
    \  val c = op(i) match {\n                case \"+\" => a + b\n              \
    \  case \"-\" => a - b\n                case \"*\" => a * b\n                case\
    \ \"//\" => a / b\n                case \"**\" => pow(a, b).toLong\n         \
    \   }\n            stack.push(c)\n        }\n        stack.pop", "        var\
    \ stack = new Stack[Long]\n        for (i <- 0 until op.length) {\n          \
    \  val a = stack.pop\n            val b = operand(i + 1)\n            val c =\
    \ op(i) match {\n                case \"+\" => a + b\n                case \"\
    -\" => a - b\n                case \"*\" => a * b\n                case \"//\"\
    \ => a / b\n                case \"**\" => pow(a, b).toLong\n            }\n \
    \           stack.push(c)\n        }\n        stack.pop"]
stop_tokens:
- "\n    }\n"
