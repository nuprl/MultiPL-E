language: scala
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    for (j <- i.toString) {\n                if (j.toString.toInt % 2 == 0) {\n\
    \                    flag = false\n                }\n            }\n        \
    \    if (flag) {\n                result = result :+ i\n            }\n      \
    \  }\n        result.sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong,\
    \ 15l.toLong, 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong,\
    \ 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(i =>\
    \ i.toString.forall(c => c.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val result =\
    \ x.filter(x => x.toString.forall(x => x.asDigit % 2 != 0))\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val l = x.filter(y\
    \ => y.toString.forall(z => z.asDigit % 2 != 0))\n        l.sorted\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique(_)).sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var list = List[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var temp = i\n\
    \            while (temp > 0) {\n                if (temp % 10 % 2 == 0) {\n \
    \                   flag = false\n                    temp = 0\n             \
    \   }\n                else temp /= 10\n            }\n            if (flag) list\
    \ = list :+ i\n        }\n        list.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var result = new ListBuffer[Long]()\n\
    \        for (i <- x) {\n            var hasEven = false\n            var num\
    \ = i\n            while (num > 0) {\n                if (num % 2 == 0) {\n  \
    \                  hasEven = true\n                    num = 0\n             \
    \   }\n                else num /= 10\n            }\n            if (!hasEven)\
    \ result += i\n        }\n        result.toList.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ y.toString.forall(z => z.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ y.toString.forall(z => z.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.toString.toInt\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def isEven(x\
    \ : Long) : Boolean = {\n            if (x % 2 == 0) true else false\n       \
    \ }\n        def isUnique(x : Long) : Boolean = {\n            var s = x.toString\n\
    \            var flag = true\n            for (i <- 0 until s.length) {\n    \
    \            if (isEven(s(i).toLong - 48)) {\n                    flag = false\n\
    \                    return flag\n                }\n            }\n         \
    \   flag\n        }\n        var ans = List[Long]()\n        for (i <- 0 until\
    \ x.length) {\n            if (isUnique(x(i))) ans = ans :+ x(i)\n        }\n\
    \        ans.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val evenDigits\
    \ = List(0, 2, 4, 6, 8)\n        val result = x.filter(n => !n.toString.exists(evenDigits.contains(_)))\n\
    \        result.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpab6j34g0.scala:20)\n\tat Problem.main(tmpab6j34g0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            var flag = true\n\
    \            var temp = i\n            while (temp > 0) {\n                if\
    \ (temp % 10 % 2 == 0) {\n                    flag = false\n                 \
    \   temp = 0\n                }\n                else temp /= 10\n           \
    \ }\n            if (flag) result += i\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ y.toString.forall(z => z.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else {\n                    temp /= 10\n\
    \                }\n            }\n            if (flag) {\n                result\
    \ = result :+ i\n            }\n        }\n        result.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.toString.toInt\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else {\n                    temp /= 10\n\
    \                }\n            }\n            if (flag) result = result :+ i\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else {\n                    temp /= 10\n\
    \                }\n            }\n            if (flag) {\n                result\
    \ = result :+ i\n            }\n        }\n        result.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val evenDigits\
    \ = List(0, 2, 4, 6, 8)\n        val result = new ListBuffer[Long]()\n       \
    \ for (i <- x) {\n            var hasEvenDigit = false\n            var j = i\n\
    \            while (j > 0) {\n                if (evenDigits.contains(j % 10))\
    \ {\n                    hasEvenDigit = true\n                    j = 0\n    \
    \            }\n                j /= 10\n            }\n            if (!hasEvenDigit)\
    \ result += i\n        }\n        result.toList.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val result =\
    \ x.filter(y => y.toString.forall(z => z.asDigit % 2 != 0))\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def isUnique(x\
    \ : Long) : Boolean = {\n            var y = x\n            while (y > 0) {\n\
    \                if (y % 2 == 0) return false\n                y /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            var flag = true\n\
    \            var temp = i\n            while (temp > 0) {\n                if\
    \ (temp % 10 % 2 == 0) {\n                    flag = false\n                 \
    \   temp = 0\n                }\n                else temp /= 10\n           \
    \ }\n            if (flag) result += i\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result:List[Long]\
    \ = List()\n        for(i <- x) {\n            var flag = true\n            var\
    \ temp = i\n            while(temp != 0) {\n                if(temp % 10 % 2 ==\
    \ 0) {\n                    flag = false\n                    break\n        \
    \        }\n                temp /= 10\n            }\n            if(flag) result\
    \ = result :+ i\n        }\n        result.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphglx72wh.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.toString.toInt\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val result =\
    \ x.filter(y => y.toString.forall(z => z.asDigit % 2 != 0))\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var y = List[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var j = i\n\
    \            while (j > 0) {\n                if (j % 2 == 0) {\n            \
    \        flag = false\n                    j = 0\n                }\n        \
    \        j /= 10\n            }\n            if (flag) y = y :+ i\n        }\n\
    \        y.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(c => c.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for\
    \ (i <- x) {\n            var flag = true\n            for (j <- i.toString) {\n\
    \                if (j.toString.toInt % 2 == 0) {\n                    flag =\
    \ false\n                    break\n                }\n            }\n       \
    \     if (flag) result = result :+ i\n        }\n        result.sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0uvab77p.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659792979
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ !x.toString.contains(\"2\") && !x.toString.contains(\"4\") && !x.toString.contains(\"\
    6\") && !x.toString.contains(\"8\")).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpufcnc4ir.scala:19)\n\tat Problem.main(tmpufcnc4ir.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var list = List[Long]()\n\
    \        for (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2\
    \ != 0)) {\n                list = list :+ i\n            }\n        }\n     \
    \   list.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ y.toString.forall(z => z.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def uniqueDigits(x : Long) : Boolean =\
    \ {\n            def uniqueDigits(x : Long, y : Boolean) : Boolean = {\n     \
    \           if (x == 0) y\n                else if (x % 10 % 2 == 0) false\n \
    \               else uniqueDigits(x / 10, y)\n            }\n            uniqueDigits(x,\
    \ true)\n        }\n        x.filter(uniqueDigits).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            true\n        }\n        x.filter(isUnique).sorted\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.asDigit\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            var flag = true\n\
    \            var num = i\n            while (num > 0) {\n                if (num\
    \ % 10 % 2 == 0) {\n                    flag = false\n                    num\
    \ = 0\n                }\n                else num /= 10\n            }\n    \
    \        if (flag) result += i\n        }\n        result.toList.sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.toString.toInt\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            var flag = true\n\
    \            var num = i\n            while (num > 0) {\n                if (num\
    \ % 10 % 2 == 0) {\n                    flag = false\n                    num\
    \ = 0\n                }\n                else num /= 10\n            }\n    \
    \        if (flag) result += i\n        }\n        result.toList.sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ y.toString.forall(z => z.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val l = x.filter(y\
    \ => y.toString.forall(z => z.toString.toInt % 2 != 0))\n        l.sorted\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ y.toString.forall(z => z.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.contains(\"\
    2\") || i.toString.contains(\"4\") || i.toString.contains(\"6\") || i.toString.contains(\"\
    8\") || i.toString.contains(\"0\")) {\n            } else {\n                result\
    \ = result :+ i\n            }\n        }\n        result.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(x => x.toString.forall(x => x.toString.toInt\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) result = result :+ i\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ !x.toString.exists(x => x.toString.toInt % 2 == 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def isUnique(n\
    \ : Long) : Boolean = {\n            var flag = true\n            var m = n\n\
    \            while (m > 0) {\n                if (m % 2 == 0) {\n            \
    \        flag = false\n                    return flag\n                }\n  \
    \              m /= 10\n            }\n            flag\n        }\n        x.filter(isUnique).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def hasEvenDigit(n : Long) : Boolean =\
    \ {\n            def hasEvenDigit(n : Long, d : Long) : Boolean = {\n        \
    \        if (n == 0) false\n                else if (n % 10 == d) true\n     \
    \           else hasEvenDigit(n / 10, d)\n            }\n            hasEvenDigit(n,\
    \ 2) || hasEvenDigit(n, 4) || hasEvenDigit(n, 6) || hasEvenDigit(n, 8)\n     \
    \   }\n        x.filter(!hasEvenDigit(_)).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfy8povhf.scala:25)\n\tat Problem.main(tmpfy8povhf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659792980
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var list = List[Long]()\n\
    \        for (i <- x) {\n            if (i.toString.forall(_.asDigit % 2 != 0))\
    \ {\n                list = list :+ i\n            }\n        }\n        list.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 != 0)) {\n                result += i\n            }\n    \
    \    }\n        result.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ !x.toString.exists(x => x.toString.toInt % 2 == 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ y.toString.forall(z => z.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val result =\
    \ x.filter(x => !x.toString.exists(x => x.toString.toInt % 2 == 0))\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var j = i\n            while (j > 0) {\n                if (j % 2 == 0) {\n\
    \                    flag = false\n                    j = 0\n               \
    \ }\n                j /= 10\n            }\n            if (flag) result = result\
    \ :+ i\n        }\n        result.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var res = List[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var temp = i\n\
    \            while (temp > 0) {\n                if (temp % 10 % 2 == 0) {\n \
    \                   flag = false\n                    temp = 0\n             \
    \   }\n                else temp /= 10\n            }\n            if (flag) res\
    \ = res :+ i\n        }\n        res.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def isUnique(x\
    \ : Long) : Boolean = {\n            var y = x\n            while (y > 0) {\n\
    \                if (y % 2 == 0) return false\n                y /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.toString.toInt\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) result = result :+ i\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) result = result :+ i\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result: List[Long]\
    \ = List()\n        for (i <- x) {\n            var flag = true\n            var\
    \ num = i\n            while (num > 0) {\n                if (num % 10 % 2 ==\
    \ 0) {\n                    flag = false\n                    num = 0\n      \
    \          }\n                else {\n                    num /= 10\n        \
    \        }\n            }\n            if (flag) {\n                result = result\
    \ :+ i\n            }\n        }\n        result.sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(x =>\
    \ x.asDigit % 2 != 0)) result = result :+ i\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792983
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.toList.forall(x\
    \ => x.asDigit % 2 != 0)) {\n                result = result :+ i\n          \
    \  }\n        }\n        result.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792983
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def isUnique(x\
    \ : Long) : Boolean = {\n            var flag = true\n            var temp = x\n\
    \            while (temp > 0) {\n                if (temp % 2 == 0) {\n      \
    \              flag = false\n                    return flag\n               \
    \ }\n                temp /= 10\n            }\n            flag\n        }\n\
    \        x.filter(isUnique).sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            var flag = true\n\
    \            for (j <- i.toString) {\n                if (j.toString.toInt % 2\
    \ == 0) {\n                    flag = false\n                }\n            }\n\
    \            if (flag) {\n                result += i\n            }\n       \
    \ }\n        result.toList.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def isUnique(n\
    \ : Long) : Boolean = {\n            var isUnique = true\n            var num\
    \ = n\n            while (num > 0) {\n                if (num % 2 == 0) {\n  \
    \                  isUnique = false\n                    return isUnique\n   \
    \             }\n                num /= 10\n            }\n            isUnique\n\
    \        }\n        x.filter(isUnique).sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(x => x.toString.forall(x => x.asDigit\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def hasEvenDigit(x : Long) : Boolean =\
    \ {\n            var y = x\n            while (y > 0) {\n                if (y\
    \ % 2 == 0) return true\n                y /= 10\n            }\n            return\
    \ false\n        }\n        x.filter(hasEvenDigit(_) == false).sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            if (i.toString.toCharArray.forall(x\
    \ => x.toString.toInt % 2 != 0)) {\n                result += i\n            }\n\
    \        }\n        result.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ !y.toString.exists(z => z.toString.toInt % 2 == 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(n : Long) : Boolean = {\n\
    \            n.toString.forall(c => c.asDigit % 2 == 1)\n        }\n        x.filter(isUnique).sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            if (i.toString.forall(_.asDigit\
    \ % 2 != 0)) result += i\n        }\n        result.toList.sorted\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var isEven = false\n     \
    \       var num = i\n            while (num > 0) {\n                if (num %\
    \ 10 % 2 == 0) {\n                    isEven = true\n                    num =\
    \ 0\n                }\n                else num /= 10\n            }\n      \
    \      if (!isEven) result = result :+ i\n        }\n        result.sorted\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(i => i.toString.forall(c => c.asDigit\
    \ % 2 == 1)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(i =>\
    \ i.toString.forall(c => c.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.asDigit\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(x =>\
    \ x.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => !y.toString.exists(z =>\
    \ z % 2 == 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.asDigit\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var j = i\n            while (j > 0) {\n                if (j % 2 == 0) {\n\
    \                    flag = false\n                    j = 0\n               \
    \ }\n                j /= 10\n            }\n            if (flag) result = result\
    \ :+ i\n        }\n        result.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.toString.toInt\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) result = result :+ i\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(_.asDigit\
    \ % 2 != 0)) {\n                result = result :+ i\n            }\n        }\n\
    \        result.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var list = List[Long]()\n\
    \        for (i <- x) {\n            if (i.toString.toList.forall(x => x.toString.toInt\
    \ % 2 != 0)) {\n                list = list :+ i\n            }\n        }\n \
    \       list.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var ans = List[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var temp = i\n\
    \            while (temp > 0) {\n                if (temp % 10 % 2 == 0) {\n \
    \                   flag = false\n                    temp = 0\n             \
    \   }\n                temp /= 10\n            }\n            if (flag) ans =\
    \ ans :+ i\n        }\n        ans.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 != 0)) {\n                result += i\n            }\n    \
    \    }\n        result.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) result = result :+ i\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ y.toString.forall(z => z.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val result =\
    \ ListBuffer[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 != 0)) result += i\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            var flag = true\n\
    \            var temp = i\n            while (temp > 0) {\n                if\
    \ (temp % 10 % 2 == 0) {\n                    flag = false\n                 \
    \   temp = 0\n                }\n                else temp /= 10\n           \
    \ }\n            if (flag) result += i\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val result =\
    \ x.filter(x => x.toString.forall(x => x.asDigit % 2 != 0))\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => !y.toString.exists(z =>\
    \ z % 2 == 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ y.toString.forall(z => z.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for\
    \ (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 != 0)) result\
    \ = result :+ i\n        }\n        result.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else {\n                    temp /= 10\n\
    \                }\n            }\n            if (flag) {\n                result\
    \ = result :+ i\n            }\n        }\n        result.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val result =\
    \ ListBuffer[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 != 0)) result += i\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var ret = List[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var temp = i\n\
    \            while (temp > 0) {\n                if (temp % 10 % 2 == 0) {\n \
    \                   flag = false\n                    temp = 0\n             \
    \   }\n                else temp /= 10\n            }\n            if (flag) ret\
    \ = ret :+ i\n        }\n        ret.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => !y.toString.exists(z =>\
    \ z % 2 == 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for\
    \ (i <- x) {\n            if (i.toString.filter(c => c.toString.toInt % 2 == 0).length\
    \ == 0) result = result :+ i\n        }\n        result.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var l = List[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var n = i\n\
    \            while (n > 0) {\n                if (n % 10 % 2 == 0) {\n       \
    \             flag = false\n                    n = 0\n                }\n   \
    \             n /= 10\n            }\n            if (flag) l = l :+ i\n     \
    \   }\n        l.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            var flag = true\n\
    \            var num = i\n            while (num > 0) {\n                if (num\
    \ % 10 % 2 == 0) {\n                    flag = false\n                    num\
    \ = 0\n                }\n                else {\n                    num /= 10\n\
    \                }\n            }\n            if (flag) {\n                result\
    \ += i\n            }\n        }\n        result.toList.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var l = List[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var temp = i\n\
    \            while (temp > 0) {\n                if (temp % 10 % 2 == 0) {\n \
    \                   flag = false\n                    temp = 0\n             \
    \   }\n                else temp /= 10\n            }\n            if (flag) l\
    \ = l :+ i\n        }\n        l.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else {\n                    temp /= 10\n\
    \                }\n            }\n            if (flag) {\n                result\
    \ = result :+ i\n            }\n        }\n        result.sorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else {\n                    temp /= 10\n\
    \                }\n            }\n            if (flag) result = result :+ i\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792884
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) result = result :+ i\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(i => i.toString.forall(j => j.toString.toInt\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var num = i\n            while (num > 0) {\n                if (num % 10\
    \ % 2 == 0) {\n                    flag = false\n                    num = 0\n\
    \                }\n                else num /= 10\n            }\n          \
    \  if (flag) result = result :+ i\n        }\n        result.sorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(i =>\
    \ !i.toString.exists(c => c.toString.toInt % 2 == 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var l = List[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var n = i\n\
    \            while (n > 0) {\n                if (n % 10 % 2 == 0) {\n       \
    \             flag = false\n                    n = 0\n                }\n   \
    \             n /= 10\n            }\n            if (flag) l = l :+ i\n     \
    \   }\n        l.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) result = result :+ i\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            var flag = true\n\
    \            var temp = i\n            while (temp > 0) {\n                if\
    \ (temp % 10 % 2 == 0) {\n                    flag = false\n                 \
    \   temp = 0\n                }\n                else temp /= 10\n           \
    \ }\n            if (flag) result += i\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            var flag = true\n\
    \            var temp = i\n            while (temp > 0) {\n                if\
    \ (temp % 10 % 2 == 0) {\n                    flag = false\n                 \
    \   temp = 0\n                }\n                else temp /= 10\n           \
    \ }\n            if (flag) result += i\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.asDigit\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(y =>\
    \ y.toString.forall(z => z.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def hasEvenDigit(n : Long) : Boolean =\
    \ {\n            var m = n\n            while (m > 0) {\n                if (m\
    \ % 2 == 0) return true\n                m /= 10\n            }\n            return\
    \ false\n        }\n        return x.filter(!hasEvenDigit(_)).sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.asDigit\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792876
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            true\n        }\n        x.filter(isUnique).sorted\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var num = i\n            while (num > 0) {\n                if (num % 10\
    \ % 2 == 0) {\n                    flag = false\n                    num = 0\n\
    \                }\n                else num /= 10\n            }\n          \
    \  if (flag) result = result :+ i\n        }\n        result.sorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.toString.toInt\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for\
    \ (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 != 0)) {\n\
    \                result = result :+ i\n            }\n        }\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792986
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 != 0)) {\n                result = result :+ i\n            }\n\
    \        }\n        result.sorted\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            var flag = true\n\
    \            var temp = i\n            while (temp > 0) {\n                if\
    \ (temp % 10 % 2 == 0) {\n                    flag = false\n                 \
    \   temp = 0\n                }\n                else {\n                    temp\
    \ /= 10\n                }\n            }\n            if (flag) {\n         \
    \       result += i\n            }\n        }\n        result.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def isUnique(n\
    \ : Long) : Boolean = {\n            var s = n.toString\n            for (i <-\
    \ 0 until s.length) {\n                if (s(i) == '0' || s(i) == '2' || s(i)\
    \ == '4' || s(i) == '6' || s(i) == '8') return false\n            }\n        \
    \    return true\n        }\n        return x.filter(isUnique).sorted\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            true\n        }\n        x.filter(isUnique).sorted\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        val result =\
    \ x.filter(x => x.toString.forall(x => x.asDigit % 2 != 0))\n        result.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792981
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var ans = new\
    \ ListBuffer[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) ans += i\n        }\n        ans.toList.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(_.asDigit\
    \ % 2 != 0)) result = result :+ i\n        }\n        result.sorted\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792882
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var flag = true\n        \
    \    var temp = i\n            while (temp > 0) {\n                if (temp %\
    \ 10 % 2 == 0) {\n                    flag = false\n                    temp =\
    \ 0\n                }\n                else temp /= 10\n            }\n     \
    \       if (flag) result = result :+ i\n        }\n        result.sorted\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        x.filter(y => y.toString.forall(z => z.toString.toInt\
    \ % 2 != 0)).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
    \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
    \ 135l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792878
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        x.filter(x =>\
    \ x.toString.forall(x => x.asDigit % 2 != 0)).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(n : Long) : Boolean = {\n\
    \            var x = n\n            while (x > 0) {\n                if (x % 2\
    \ == 0) return false\n                x /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792987
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        def isUnique(n : Long) : Boolean = {\n\
    \            var m = n\n            while (m > 0) {\n                if (m % 2\
    \ == 0) return false\n                m /= 10\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong,\
    \ 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n\
    \    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792984
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of positive integers x. return a sorted list of all \n\
    \    // elements that hasn't any even digit.\n    // Note: Returned list should\
    \ be sorted in increasing order.\n    // For example:\n    // >>> uniqueDigits((List[Long](15l.toLong,\
    \ 33l.toLong, 1422l.toLong, 1l.toLong)))\n    // (List[Long](1l.toLong, 15l.toLong,\
    \ 33l.toLong))\n    // >>> uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
    \ 1422l.toLong, 10l.toLong)))\n    // (List[Long]())\n    def uniqueDigits(x :\
    \ List[Long]) : List[Long] = {\n        // Fill up this function body\n      \
    \  // You can add another function as well, if required\n        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 != 0)) {\n                result += i\n            }\n    \
    \    }\n        result.toList.sorted\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(uniqueDigits((List[Long](15l.toLong, 33l.toLong, 1422l.toLong,\
    \ 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong, 33l.toLong))));\n   \
    \ assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong, 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n\
    \    assert(uniqueDigits((List[Long](12345l.toLong, 2033l.toLong, 111l.toLong,\
    \ 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n    assert(uniqueDigits((List[Long](135l.toLong,\
    \ 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong, 135l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659792874
