name: HumanEval_82_prime_length
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a string and returns True if the string\n  \
  \  // length is a prime number or False otherwise\n    // Examples\n    // >>> primeLength((\"\
  Hello\"))\n    // (true)\n    // >>> primeLength((\"abcdcba\"))\n    // (true)\n\
  \    // >>> primeLength((\"kittens\"))\n    // (true)\n    // >>> primeLength((\"\
  orange\"))\n    // (false)\n    def primeLength(string : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(primeLength((\"Hello\"\
  )) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"\
  kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n   \
  \ assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\"))\
  \ == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"\
  Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"\
  HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"\
  gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n\
  \    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\"\
  )) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n"
completions: ["        def isPrime(n : Int) : Boolean = {\n            if (n <= 1)\
    \ false\n            else if (n == 2) true\n            else !(2 until n).exists(x\
    \ => n % x == 0)\n        }\n        isPrime(string.length)", "        def isPrime(n\
    \ : Int) : Boolean = {\n            if (n <= 1) return false\n            if (n\
    \ == 2) return true\n            for (i <- 2 to sqrt(n).toInt) {\n           \
    \     if (n % i == 0) return false\n            }\n            return true\n \
    \       }\n        return isPrime(string.length)", "        def isPrime(n : Int)\
    \ : Boolean = {\n            if (n == 1) return false\n            if (n == 2)\
    \ return true\n            for (i <- 2 to sqrt(n).toInt) {\n                if\
    \ (n % i == 0) return false\n            }\n            return true\n        }\n\
    \        return isPrime(string.length)", "        def isPrime(n : Int) : Boolean\
    \ = {\n            if (n <= 1) return false\n            if (n == 2) return true\n\
    \            for (i <- 2 to sqrt(n).toInt) {\n                if (n % i == 0)\
    \ return false\n            }\n            return true\n        }\n        return\
    \ isPrime(string.length)", "        def isPrime(n : Int) : Boolean = {\n     \
    \       if (n <= 1) false\n            else if (n == 2) true\n            else\
    \ !(2 until n).exists(x => n % x == 0)\n        }\n        isPrime(string.length)",
  "        val n = string.length\n        if (n == 2) return true\n        for (i\
    \ <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return false\n       \
    \ }\n        return true", "        def isPrime(num : Int) : Boolean = {\n   \
    \         if (num == 1) false\n            else if (num == 2) true\n         \
    \   else !(2 to (num - 1)).exists(x => num % x == 0)\n        }\n        isPrime(string.length)",
  "        def isPrime(n : Int) : Boolean = {\n            if (n <= 1) false\n   \
    \         else if (n == 2) true\n            else !(2 until n).exists(x => n %\
    \ x == 0)\n        }\n        isPrime(string.length)", "        val len = string.length\n\
    \        if (len == 1) return false\n        for (i <- 2 to len / 2) {\n     \
    \       if (len % i == 0) return false\n        }\n        return true", "   \
    \     val length = string.length\n        if (length == 2) return true\n     \
    \   for (i <- 2 to length - 1) {\n            if (length % i == 0) return false\n\
    \        }\n        return true", "        def isPrime(n : Int) : Boolean = {\n\
    \            if (n <= 1) return false\n            for (i <- 2 to sqrt(n).toInt)\
    \ {\n                if (n % i == 0) return false\n            }\n           \
    \ return true\n        }\n        return isPrime(string.length)", "        def\
    \ isPrime(n : Int) : Boolean = {\n            if (n <= 1) return false\n     \
    \       if (n == 2) return true\n            for (i <- 2 to sqrt(n).toInt) {\n\
    \                if (n % i == 0) return false\n            }\n            return\
    \ true\n        }\n        return isPrime(string.length)", "        def isPrime(n\
    \ : Int) : Boolean = {\n            if (n == 1) return false\n            if (n\
    \ == 2) return true\n            for (i <- 2 to sqrt(n).toInt) {\n           \
    \     if (n % i == 0) return false\n            }\n            return true\n \
    \       }\n        return isPrime(string.length)", "        def isPrime(n : Int)\
    \ : Boolean = {\n            if (n <= 1) return false\n            if (n == 2)\
    \ return true\n            for (i <- 2 to sqrt(n).toInt) {\n                if\
    \ (n % i == 0) return false\n            }\n            return true\n        }\n\
    \        return isPrime(string.length)", "        def isPrime(n : Int) : Boolean\
    \ = {\n            if (n == 1) false\n            else if (n == 2) true\n    \
    \        else !(2 to (n - 1)).exists(x => n % x == 0)\n        }\n        isPrime(string.length)",
  "        def isPrime(n : Int) : Boolean = {\n            if (n <= 1) false\n   \
    \         else if (n == 2) true\n            else !(2 until n).exists(x => n %\
    \ x == 0)\n        }\n        isPrime(string.length)", "        def isPrime(n\
    \ : Int) : Boolean = {\n            if (n <= 1) return false\n            if (n\
    \ == 2) return true\n            for (i <- 2 to sqrt(n).toInt) {\n           \
    \     if (n % i == 0) return false\n            }\n            return true\n \
    \       }\n        return isPrime(string.length)", "        def isPrime(n : Int)\
    \ : Boolean = {\n            if (n == 2) return true\n            if (n % 2 ==\
    \ 0) return false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n        \
    \        if (n % i == 0) return false\n            }\n            return true\n\
    \        }\n        return isPrime(string.length)", "        def isPrime(n : Int)\
    \ : Boolean = {\n            if (n <= 1) return false\n            if (n == 2)\
    \ return true\n            for (i <- 2 to sqrt(n).toInt) {\n                if\
    \ (n % i == 0) return false\n            }\n            return true\n        }\n\
    \        return isPrime(string.length)", "        def isPrime(n : Int) : Boolean\
    \ = {\n            if (n <= 1) false\n            else if (n == 2) true\n    \
    \        else !(2 until n).exists(x => n % x == 0)\n        }\n        isPrime(string.length)"]
stop_tokens:
- "\n    }\n"
