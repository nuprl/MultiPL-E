name: HumanEval_78_hex_key
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You have been tasked to write a function that receives \n    // a hexadecimal\
  \ number as a string and counts the number of hexadecimal \n    // digits that are\
  \ primes (prime number, or a prime, is a natural number \n    // greater than 1\
  \ that is not a product of two smaller natural numbers).\n    // Hexadecimal digits\
  \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    // Prime numbers are\
  \ 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine a number of the following\
  \ digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal 13).\n    // Note: you\
  \ may assume the input is always correct or empty string, \n    // and symbols A,B,C,D,E,F\
  \ are always uppercase.\n    // Examples:\n    // >>> hexKey((\"AB\"))\n    // (1l)\n\
  \    // >>> hexKey((\"1077E\"))\n    // (2l)\n    // >>> hexKey((\"ABED1A33\"))\n\
  \    // (4l)\n    // >>> hexKey((\"123456789ABCDEF0\"))\n    // (6l)\n    // >>>\
  \ hexKey((\"2020\"))\n    // (2l)\n    def hexKey(num : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(hexKey((\"AB\"))\
  \ == (1l));\n    assert(hexKey((\"1077E\")) == (2l));\n    assert(hexKey((\"ABED1A33\"\
  )) == (4l));\n    assert(hexKey((\"2020\")) == (2l));\n    assert(hexKey((\"123456789ABCDEF0\"\
  )) == (6l));\n    assert(hexKey((\"112233445566778899AABBCCDDEEFF00\")) == (12l));\n\
  \    }\n\n}\n"
completions: ["        val primes = Array(2, 3, 5, 7, 11, 13)\n        val hex = Array(0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n        val hexMap = Map(0\
    \ -> 0, 1 -> 1, 2 -> 2, 3 -> 3, 4 -> 4, 5 -> 5, 6 -> 6, 7 -> 7, 8 -> 8, 9 -> 9,\
    \ 10 -> 10, 11 -> 11, 12 -> 12, 13 -> 13, 14 -> 14, 15 -> 15)\n        val hexPrimes\
    \ = Array(2, 3, 5, 7, 11, 13)\n        val hexPrimesMap = Map(2 -> 2, 3 -> 3,\
    \ 5 -> 5, 7 -> 7, 11 -> 11, 13 -> 13)\n        var count = 0\n        for (i <-\
    \ 0 until num.length) {\n            if (hexPrimesMap.contains(hexMap(num(i).toString.toInt)))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val primes = Array(2, 3, 5, 7, 11, 13)\n\
    \        val hex = Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',\
    \ 'B', 'C', 'D', 'E', 'F')\n        val map = new HashMap[Char, Int]\n       \
    \ for (i <- 0 until hex.length) map += (hex(i) -> i)\n        num.map(map(_)).filter(primes.contains(_)).length",
  "        var count = 0\n        for (i <- 0 until num.length) {\n            val\
    \ c = num(i)\n            if (c == '2' || c == '3' || c == '5' || c == '7' ||\
    \ c == 'B' || c == 'D') count += 1\n        }\n        count", "        val primes\
    \ = Array(2, 3, 5, 7, 11, 13)\n        val hex = Array('0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')\n        val hexMap =\
    \ hex.zipWithIndex.toMap\n        num.map(x => hexMap(x)).map(x => primes.contains(x)).count(x\
    \ => x)", "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val primes = Array(2, 3, 5, 7, 11, 13)\n        val hex = Array('0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')\n    \
    \    val hexToInt = hex.zipWithIndex.toMap\n        num.map(hexToInt(_)).map(primes.contains(_)).count(_\
    \ == true)", "        val hex = Map('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4'\
    \ -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11,\
    \ 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n        val primes = List(2, 3,\
    \ 5, 7, 11, 13)\n        num.map(c => hex(c)).filter(x => primes.contains(x)).length",
  "        var count = 0\n        for (i <- 0 until num.length) {\n            val\
    \ c = num(i)\n            if (c == '2' || c == '3' || c == '5' || c == '7' ||\
    \ c == 'B' || c == 'D') count += 1\n        }\n        count", "        val hex\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    val map = new HashMap[Char, Int]\n        for (i <- 0 until hex.length) map(hex(i))\
    \ = i\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      val digit = map(num(i))\n            if (primes.contains(digit)) count\
    \ += 1\n        }\n        count", "        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n\
    \            '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n       \
    \     '5' -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8'\
    \ -> 8,\n            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n\
    \            'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n    \
    \        'F' -> 15\n        )\n        num.map(c => hex(c)).count(x => primes.contains(x))",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n      \
    \      if (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n     \
    \   count", "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toString.toInt(16)).filter(x\
    \ => primes.contains(x)).length", "        var count = 0\n        for (i <- 0\
    \ until num.length) {\n            val c = num(i)\n            if (c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') count += 1\n     \
    \   }\n        count", "        val hex = \"0123456789ABCDEF\"\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i =>\
    \ primes.contains(i)).length", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(c => c.toString.toInt).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val map = hex.zipWithIndex.toMap\n        num.map(x => map(x)).filter(x\
    \ => primes.contains(x)).length", "        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(x => hexDigits.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = Map(\n            '0' ->\
    \ 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n  \
    \          '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n         \
    \   '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' ->\
    \ 10,\n            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n\
    \            'E' -> 14,\n            'F' -> 15\n        )\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.toList.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toInt).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val prime = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => prime.contains(i)).length", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = List(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val nums =\
    \ num.map(x => hex.indexOf(x.toString)).filter(x => primes.contains(x))\n    \
    \    nums.length", "        val hexDigits = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hexDigits.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        var count = 0l\n        for (i <- 0\
    \ until num.length) {\n            val c = num(i)\n            if (c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') count += 1\n     \
    \   }\n        count", "        val hex = \"0123456789ABCDEF\"\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i =>\
    \ primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n     \
    \   val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(hexDigits.indexOf(_)).filter(primes.contains(_)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toString.toInt).filter(x\
    \ => primes.contains(x)).length", "        // Your code here\n        0l", " \
    \       val hex = \"0123456789ABCDEF\"\n        val prime = \"2357BDF\"\n    \
    \    num.map(c => if (prime.contains(c)) 1 else 0).sum", "        // Your code\
    \ here\n        0", "        val hex = Map(\n            '0' -> 0,\n         \
    \   '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n            '4' ->\
    \ 4,\n            '5' -> 5,\n            '6' -> 6,\n            '7' -> 7,\n  \
    \          '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n        \
    \    'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n            'E'\
    \ -> 14,\n            'F' -> 15\n        )\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        num.map(hex(_)).filter(primes.contains(_)).length", "  \
    \      val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val primes = Array(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toInt -\
    \ 48).filter(x => x >= 0 && x <= 15).map(x => if (x > 9) x - 7 else x).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = \"0123456789ABCDEF\"\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hex = Map(\n            '0' ->\
    \ 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n  \
    \          '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n         \
    \   '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' ->\
    \ 10,\n            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n\
    \            'E' -> 14,\n            'F' -> 15\n        )\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).count(primes.contains(_))",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        // Your code here\n        0", "        val hex = Map(\"0\" -> 0, \"1\"\
    \ -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" -> 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7,\
    \ \"8\" -> 8, \"9\" -> 9, \"A\" -> 10, \"B\" -> 11, \"C\" -> 12, \"D\" -> 13,\
    \ \"E\" -> 14, \"F\" -> 15)\n        val primes = List(2, 3, 5, 7, 11, 13)\n \
    \       num.map(x => hex(x.toString)).filter(x => primes.contains(x)).size", " \
    \       val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7,\
    \ 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        num.map(c => hexDigits.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toString.toInt).filter(x\
    \ => primes.contains(x)).length", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hex = \"0123456789ABCDEF\"\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = Set(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = Map('0' -> 0, '1' -> 1, '2'\
    \ -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' -> 8, '9' -> 9,\
    \ 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).filter(primes.contains(_)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toInt - 48).filter(x\
    \ => x > 9).map(x => x - 7).filter(x => primes.contains(x)).size", "        val\
    \ hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n            '2' ->\
    \ 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5' -> 5,\n  \
    \          '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n         \
    \   '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n            'C'\
    \ -> 12,\n            'D' -> 13,\n            'E' -> 14,\n            'F' -> 15\n\
    \        )\n        val primes = Array(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).count(primes.contains(_))",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        num.toList.map(x => hexDigits.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n        \
    \    '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(hex(_)).filter(primes.contains(_)).length", "        val hex = \"\
    0123456789ABCDEF\"\n        val prime = List(2, 3, 5, 7, 11, 13)\n        num.map(x\
    \ => hex.indexOf(x)).filter(x => prime.contains(x)).length", "        var count\
    \ = 0l\n        for (i <- 0 until num.length) {\n            val c = num(i)\n\
    \            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c\
    \ == 'D') count += 1\n        }\n        count", "        var count = 0l\n   \
    \     for (i <- 0 until num.length) {\n            val digit = num(i)\n      \
    \      if (digit == '2' || digit == '3' || digit == '5' || digit == '7' || digit\
    \ == 'B' || digit == 'D') count += 1\n        }\n        count", "        val\
    \ hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size", " \
    \       val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7,\
    \ 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val primes = Array(2, 3, 5, 7, 11, 13)\n        val hex = Array('0', '1',\
    \ '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')\n    \
    \    var count = 0\n        for (i <- 0 until num.length) {\n            val index\
    \ = hex.indexOf(num(i))\n            if (primes.contains(index)) count += 1\n\
    \        }\n        count", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hexDigits = num.toList.map(x =>\
    \ x.toString.toInt(16))\n        hexDigits.filter(x => x == 2 || x == 3 || x ==\
    \ 5 || x == 7 || x == 11 || x == 13).length", "        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.toUpperCase.map(c\
    \ => hexDigits.indexOf(c)).filter(primes.contains(_)).size", "        val hex\
    \ = Map(\n            '0' -> 0,\n            '1' -> 1,\n            '2' -> 2,\n\
    \            '3' -> 3,\n            '4' -> 4,\n            '5' -> 5,\n       \
    \     '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n            '9'\
    \ -> 9,\n            'A' -> 10,\n            'B' -> 11,\n            'C' -> 12,\n\
    \            'D' -> 13,\n            'E' -> 14,\n            'F' -> 15\n     \
    \   )\n        val primes = Set(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).count(primes.contains(_))",
  "        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n        \
    \    '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(hex(_)).filter(primes.contains(_)).length", "        val hex = Map(\n\
    \            '0' -> 0,\n            '1' -> 1,\n            '2' -> 2,\n       \
    \     '3' -> 3,\n            '4' -> 4,\n            '5' -> 5,\n            '6'\
    \ -> 6,\n            '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n\
    \            'A' -> 10,\n            'B' -> 11,\n            'C' -> 12,\n    \
    \        'D' -> 13,\n            'E' -> 14,\n            'F' -> 15\n        )\n\
    \        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).filter(primes.contains(_)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).size",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = Map('0' -> 0,\
    \ '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' ->\
    \ 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n\
    \        var count = 0\n        for (i <- 0 until num.length) {\n            if\
    \ (primes.contains(hex(num(i)))) count += 1\n        }\n        count", "    \
    \    val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        num.toUpperCase.map(c => hexDigits.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        // Fill in the code here\n        val\
    \ hex = \"0123456789ABCDEF\"\n        val primes = Array(2, 3, 5, 7, 11, 13)\n\
    \        var count = 0\n        for (i <- 0 until num.length) {\n            if\
    \ (primes.contains(hex.indexOf(num(i)))) count += 1\n        }\n        count",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = List(0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n        val hexToInt = Map(\"\
    0\" -> 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" -> 4, \"5\" -> 5, \"6\" ->\
    \ 6, \"7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" -> 10, \"B\" -> 11, \"C\" -> 12,\
    \ \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        val intToHex = Map(0 -> \"0\"\
    , 1 -> \"1\", 2 -> \"2\", 3 -> \"3\", 4 -> \"4\", 5 -> \"5\", 6 -> \"6\", 7 ->\
    \ \"7\", 8 -> \"8\", 9 -> \"9\", 10 -> \"A\", 11 -> \"B\", 12 -> \"C\", 13 ->\
    \ \"D\", 14 -> \"E\", 15 -> \"F\")\n        val hexDigits = num.toList.map(x =>\
    \ hexToInt(x.toString))\n        hexDigits.filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hexDigits = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13)\n        val hexDigitsToPrimes = hexDigits.zip(primes).toMap\n\
    \        num.map(x => hexDigitsToPrimes(x.toString)).filter(x => x != 0).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hexDigits = \"0123456789ABCDEF\"\n        val hexPrimes = \"2357BDF\"\
    \n        num.filter(hexPrimes.contains(_)).length", "        val hexDigits =\
    \ Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\
    \ \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val primeDigits = Array(\"\
    2\", \"3\", \"5\", \"7\", \"B\", \"D\")\n        val hexDigitsSet = hexDigits.toSet\n\
    \        val primeDigitsSet = primeDigits.toSet\n        val numSet = num.toSet\n\
    \        if (numSet.subsetOf(hexDigitsSet)) {\n            num.filter(primeDigitsSet.contains(_)).length.toLong\n\
    \        } else {\n            0\n        }", "        val primes = List(2, 3,\
    \ 5, 7, 11, 13)\n        val hex = Map(\"A\" -> 10, \"B\" -> 11, \"C\" -> 12,\
    \ \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n        num.map(c => if (c.isDigit)\
    \ c.asDigit else hex(c.toString)).filter(primes.contains(_)).length", "      \
    \  val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size", " \
    \       val hex = num.toUpperCase\n        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexPrimes = primes.map(x\
    \ => hexDigits(x))\n        hex.filter(x => hexPrimes.contains(x)).length", " \
    \       val primes = Set(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toInt - '0'.toInt).filter(x\
    \ => x >= 0 && x <= 9 || x >= 11 && x <= 13).count(x => primes.contains(x))",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(primes.contains(_)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = Map('0' -> 0,\
    \ '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8' ->\
    \ 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' -> 15)\n\
    \        num.map(c => hex(c)).filter(x => primes.contains(x)).size", "       \
    \ // Your code here\n        var count = 0\n        for (i <- 0 until num.length)\
    \ {\n            if (num(i) == '2' || num(i) == '3' || num(i) == '5' || num(i)\
    \ == '7' || num(i) == 'B' || num(i) == 'D') count += 1\n        }\n        count",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n        \
    \    '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(c => hex(c)).filter(i => primes.contains(i)).length", "        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toInt).filter(x =>\
    \ primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n     \
    \   val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = \"2357BDF\"\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).size", "        val primes = Array(2, 3, 5, 7, 11, 13)\n\
    \        val hex = Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A',\
    \ 'B', 'C', 'D', 'E', 'F')\n        val map = new HashMap[Char, Int]\n       \
    \ for (i <- 0 until hex.length) map += hex(i) -> i\n        var count = 0l\n \
    \       for (i <- 0 until num.length) {\n            val n = map(num(i))\n   \
    \         if (primes.contains(n)) count += 1\n        }\n        count", "   \
    \     var count = 0\n        for (i <- 0 until num.length) {\n            val\
    \ c = num(i)\n            if (c == '2' || c == '3' || c == '5' || c == '7' ||\
    \ c == 'B' || c == 'D') count += 1\n        }\n        count", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        val hex = Map(\n            '0' -> 0,\n\
    \            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n       \
    \     '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n            '7'\
    \ -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' -> 10,\n\
    \            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n    \
    \        'E' -> 14,\n            'F' -> 15\n        )\n        num.map(x => hex(x)).filter(x\
    \ => primes.contains(x)).length", "        var count = 0\n        for (i <- 0\
    \ until num.length) {\n            val c = num(i)\n            if (c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') count += 1\n     \
    \   }\n        count", "        val hexDigits = List(0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15)\n        val hexPrimes = List(2, 3, 5, 7, 11, 13)\n\
    \        val hexDigitsMap = hexDigits.zipWithIndex.toMap\n        val hexPrimesMap\
    \ = hexPrimes.zipWithIndex.toMap\n        val hexDigitsSet = hexDigits.toSet\n\
    \        val hexPrimesSet = hexPrimes.toSet\n        num.map(c => hexDigitsMap(c.toString.toInt)).filter(x\
    \ => hexPrimesSet.contains(x)).length", "        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexDigitsToPrimes\
    \ = hexDigits.zip(primes).toMap\n        num.map(hexDigitsToPrimes(_)).filter(_\
    \ != 0).length", "        val hex = \"0123456789ABCDEF\"\n        val primes =\
    \ List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"\
    , \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\n        val prime =\
    \ Array(2, 3, 5, 7, 11, 13)\n        var count = 0\n        for (i <- 0 until\
    \ num.length) {\n            val index = hex.indexOf(num(i).toString)\n      \
    \      if (prime.contains(index)) count += 1\n        }\n        count", "   \
    \     val hex = Map('0' -> 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5,\
    \ '6' -> 6, '7' -> 7, '8' -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D'\
    \ -> 13, 'E' -> 14, 'F' -> 15)\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(hex(_)).count(primes.contains(_))", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13)\n        num.map(x => x.toString.toInt).filter(x => primes.contains(x)).length",
  "        // Your code here\n        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val primes = Array(2, 3, 5, 7, 11, 13)\n\
    \        val hex = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n\
    \        val hexToInt = Map(\"0\" -> 0, \"1\" -> 1, \"2\" -> 2, \"3\" -> 3, \"\
    4\" -> 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7, \"8\" -> 8, \"9\" -> 9, \"A\" ->\
    \ 10, \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\" -> 14, \"F\" -> 15)\n     \
    \   val intToHex = Map(0 -> \"0\", 1 -> \"1\", 2 -> \"2\", 3 -> \"3\", 4 -> \"\
    4\", 5 -> \"5\", 6 -> \"6\", 7 -> \"7\", 8 -> \"8\", 9 -> \"9\", 10 -> \"A\",\
    \ 11 -> \"B\", 12 -> \"C\", 13 -> \"D\", 14 -> \"E\", 15 -> \"F\")\n        def\
    \ isPrime(n : Int) : Boolean = {\n            if (n == 2) return true\n      \
    \      if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        var count = 0\n        for (i <- 0 until\
    \ num.length) {\n            if (primes.contains(hexToInt(num(i).toString))) count\
    \ += 1\n        }\n        return count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.toUpperCase.map(c\
    \ => hex.indexOf(c)).filter(i => primes.contains(i)).length", "        val hex\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size", "   \
    \     val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = \"0123456789ABCDEF\"\
    \n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.toList.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        var count = 0\n        for (i <- 0 until num.length) {\n            val\
    \ c = num(i)\n            if (c == '2' || c == '3' || c == '5' || c == '7' ||\
    \ c == 'B' || c == 'D') count += 1\n        }\n        count", "        val hex\
    \ = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length", " \
    \       val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3,\
    \ 5, 7, 11, 13)\n        num.map(c => hexDigits.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val hexPrimes = primes.map(x => hex(x))\n        num.filter(x =>\
    \ hexPrimes.contains(x)).length", "        val hex = num.toUpperCase\n       \
    \ val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7,\
    \ 11, 13)\n        val hexPrimes = primes.map(x => hexDigits(x))\n        hex.count(x\
    \ => hexPrimes.contains(x))", "        val hex = \"0123456789ABCDEF\"\n      \
    \  val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(primes.contains(_)).length",
  "        val hexDigits = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15)\n        val primes = Array(2, 3, 5, 7, 11, 13)\n        val hexDigitsToPrimes\
    \ = hexDigits.zip(primes).toMap\n        num.map(c => hexDigitsToPrimes.getOrElse(c.toString.toInt,\
    \ 0)).count(x => x != 0)", "        val hex = \"0123456789ABCDEF\"\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        var count = 0\n        for\
    \ (i <- 0 until num.length) {\n            if (primes.contains(hex.indexOf(num(i))))\
    \ count += 1\n        }\n        count", "        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = Set(2, 3, 5, 7, 11, 13)\n        num.map(x => hexDigits.indexOf(x)).filter(x\
    \ => primes.contains(x)).size", "        var count = 0\n        for (i <- 0 until\
    \ num.length) {\n            val n = num(i)\n            if (n == '2' || n ==\
    \ '3' || n == '5' || n == '7' || n == 'B' || n == 'D') count += 1\n        }\n\
    \        count", "        val hex = \"0123456789ABCDEF\"\n        val primes =\
    \ List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        // Your code here\n        0", '        num.toList.map(x => x.toString.toInt(16)).filter(x
    => x == 2 || x == 3 || x == 5 || x == 7 || x == 11 || x == 13).length', "    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = \"0123456789ABCDEF\"\
    \n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = Map(\"A\" -> 10, \"B\" -> 11, \"C\" -> 12, \"D\" -> 13, \"E\"\
    \ -> 14, \"F\" -> 15)\n        val primes = Array(2, 3, 5, 7, 11, 13)\n      \
    \  var count = 0\n        for (i <- 0 until num.length) {\n            val n =\
    \ if (hex.contains(num(i).toString)) hex(num(i).toString) else num(i).toString.toInt\n\
    \            if (primes.contains(n)) count += 1\n        }\n        count", " \
    \       val hexDigits = \"0123456789ABCDEF\"\n        val hexPrimes = \"2357BDF\"\
    \n        var count = 0\n        for (i <- 0 until num.length) {\n           \
    \ if (hexPrimes.contains(num(i))) count += 1\n        }\n        count", "   \
    \     val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toInt).filter(x\
    \ => primes.contains(x)).length", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(x => x.toString.toInt).filter(x => primes.contains(x)).size",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => x.toString.toInt).filter(x\
    \ => primes.contains(x)).length", "        val hexDigits = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hexDigits.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        val hex = \"0123456789ABCDEF\"\n    \
    \    val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => hex.indexOf(x)).filter(x\
    \ => primes.contains(x)).length", "        var count = 0\n        for (i <- 0\
    \ until num.length) {\n            val c = num(i)\n            if (c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') count += 1\n     \
    \   }\n        count", "        val hex = Array(\"0\", \"1\", \"2\", \"3\", \"\
    4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\")\n        val primes = Array(2, 3, 5, 7, 11, 13)\n        var count = 0\n\
    \        for (i <- 0 until num.length) {\n            if (primes.contains(hex.indexOf(num(i).toString)))\
    \ count += 1\n        }\n        count", "        val hexPrimes = List(2, 3, 5,\
    \ 7, 11, 13)\n        num.map(x => x.toInt).map(x => x - 48).filter(x => x >=\
    \ 0 && x <= 15).map(x => if (x > 9) x - 7 else x).filter(x => hexPrimes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hexDigits = Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15)\n        val hexPrimes = Array(2, 3, 5, 7, 11, 13)\n        val hexDigitsMap\
    \ = hexDigits.zipWithIndex.toMap\n        val hexPrimesMap = hexPrimes.zipWithIndex.toMap\n\
    \        num.map(c => hexDigitsMap(c.toString.toInt)).filter(x => hexPrimesMap.contains(x)).size",
  "        val hex = Map(\n            '0' -> 0,\n            '1' -> 1,\n        \
    \    '2' -> 2,\n            '3' -> 3,\n            '4' -> 4,\n            '5'\
    \ -> 5,\n            '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n\
    \            '9' -> 9,\n            'A' -> 10,\n            'B' -> 11,\n     \
    \       'C' -> 12,\n            'D' -> 13,\n            'E' -> 14,\n         \
    \   'F' -> 15\n        )\n        val primes = List(2, 3, 5, 7, 11, 13)\n    \
    \    num.map(x => hex(x)).filter(x => primes.contains(x)).length", "        val\
    \ hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.toList.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        val map = hex.zipWithIndex.toMap\n        num.map(map(_)).map(primes.contains(_)).count(_\
    \ == true)", "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hexDigits\
    \ = List(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)\n        val hexToDec\
    \ = Map(\n            '0' -> 0,\n            '1' -> 1,\n            '2' -> 2,\n\
    \            '3' -> 3,\n            '4' -> 4,\n            '5' -> 5,\n       \
    \     '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n            '9'\
    \ -> 9,\n            'A' -> 10,\n            'B' -> 11,\n            'C' -> 12,\n\
    \            'D' -> 13,\n            'E' -> 14,\n            'F' -> 15\n     \
    \   )\n        num.map(c => hexToDec(c)).filter(x => primes.contains(x)).length",
  "        // Your code here\n        0", "        val hex = Map(\"0\" -> 0, \"1\"\
    \ -> 1, \"2\" -> 2, \"3\" -> 3, \"4\" -> 4, \"5\" -> 5, \"6\" -> 6, \"7\" -> 7,\
    \ \"8\" -> 8, \"9\" -> 9, \"A\" -> 10, \"B\" -> 11, \"C\" -> 12, \"D\" -> 13,\
    \ \"E\" -> 14, \"F\" -> 15)\n        val primes = List(2, 3, 5, 7, 11, 13)\n \
    \       num.map(x => hex(x.toString)).filter(x => primes.contains(x)).length",
  "        val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        num.map(c => hexDigits.indexOf(c)).filter(i => primes.contains(i)).length",
  "        var count = 0l\n        for (i <- 0 until num.length) {\n            val\
    \ c = num(i)\n            if (c == '2' || c == '3' || c == '5' || c == '7' ||\
    \ c == 'B' || c == 'D') count += 1\n        }\n        count", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(x => x.toString.toInt).filter(x\
    \ => primes.contains(x)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).size", "        // Your code here\n        return 0l",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        var count = 0\n        for (i <- 0 until num.length) {\n\
    \            val c = num(i)\n            if (primes.contains(hexDigits.indexOf(c)))\
    \ count += 1\n        }\n        count", "        val hex = \"0123456789ABCDEF\"\
    \n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.toList.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = \"0123456789ABCDEF\"\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(c => hex.indexOf(c)).filter(i\
    \ => primes.contains(i)).length", "        val hex = Map(\n            '0' ->\
    \ 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3' -> 3,\n  \
    \          '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n         \
    \   '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n            'A' ->\
    \ 10,\n            'B' -> 11,\n            'C' -> 12,\n            'D' -> 13,\n\
    \            'E' -> 14,\n            'F' -> 15\n        )\n        val primes\
    \ = List(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).count(primes.contains(_))",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(x => hex.indexOf(x)).filter(x => primes.contains(x)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hexDigits = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5,\
    \ 7, 11, 13)\n        num.map(c => hexDigits.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).size",
  "        val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(x => Integer.parseInt(x.toString,\
    \ 16)).filter(primes.contains(_)).length", "        var count = 0l\n        for\
    \ (i <- 0 until num.length) {\n            if (num(i) == '2' || num(i) == '3'\
    \ || num(i) == '5' || num(i) == '7' || num(i) == 'B' || num(i) == 'D') count +=\
    \ 1\n        }\n        count", "        val primes = List(2, 3, 5, 7, 11, 13)\n\
    \        num.map(x => x.toInt).filter(x => primes.contains(x)).length", "    \
    \    val hex = \"0123456789ABCDEF\"\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13)\n        num.map(c => hex.indexOf(c)).filter(i => primes.contains(i)).length",
  "        val primes = List(2, 3, 5, 7, 11, 13)\n        val hex = Map(\n       \
    \     '0' -> 0,\n            '1' -> 1,\n            '2' -> 2,\n            '3'\
    \ -> 3,\n            '4' -> 4,\n            '5' -> 5,\n            '6' -> 6,\n\
    \            '7' -> 7,\n            '8' -> 8,\n            '9' -> 9,\n       \
    \     'A' -> 10,\n            'B' -> 11,\n            'C' -> 12,\n           \
    \ 'D' -> 13,\n            'E' -> 14,\n            'F' -> 15\n        )\n     \
    \   num.map(hex(_)).count(primes.contains(_))", "        val hex = Map('0' ->\
    \ 0, '1' -> 1, '2' -> 2, '3' -> 3, '4' -> 4, '5' -> 5, '6' -> 6, '7' -> 7, '8'\
    \ -> 8, '9' -> 9, 'A' -> 10, 'B' -> 11, 'C' -> 12, 'D' -> 13, 'E' -> 14, 'F' ->\
    \ 15)\n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).count(primes.contains(_))",
  "        var count = 0l\n        for (i <- 0 until num.length) {\n            val\
    \ c = num(i)\n            if (c == '2' || c == '3' || c == '5' || c == '7' ||\
    \ c == 'B' || c == 'D') count += 1\n        }\n        count", "        val hex\
    \ = Map(\n            '0' -> 0,\n            '1' -> 1,\n            '2' -> 2,\n\
    \            '3' -> 3,\n            '4' -> 4,\n            '5' -> 5,\n       \
    \     '6' -> 6,\n            '7' -> 7,\n            '8' -> 8,\n            '9'\
    \ -> 9,\n            'A' -> 10,\n            'B' -> 11,\n            'C' -> 12,\n\
    \            'D' -> 13,\n            'E' -> 14,\n            'F' -> 15\n     \
    \   )\n        val primes = List(2, 3, 5, 7, 11, 13)\n        num.map(hex(_)).count(primes.contains(_))",
  "        var count = 0l\n        for (i <- 0 until num.length) {\n            val\
    \ c = num(i)\n            if (c == '2' || c == '3' || c == '5' || c == '7' ||\
    \ c == 'B' || c == 'D') count += 1\n        }\n        count", "        // Your\
    \ code here\n        return 0l"]
stop_tokens:
- "\n    }\n"
