name: HumanEval_7_filter_by_substring
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter an input list of strings only for ones that contain given substring\n\
  \    // >>> filterBySubstring((List[String]()), (\"a\"))\n    // (List[String]())\n\
  \    // >>> filterBySubstring((List[String](\"abc\", \"bacd\", \"cde\", \"array\"\
  )), (\"a\"))\n    // (List[String](\"abc\", \"bacd\", \"array\"))\n    def filterBySubstring(strings\
  \ : List[String], substring : String) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterBySubstring((List[String]()),\
  \ (\"john\")).equals((List[String]())));\n    assert(filterBySubstring((List[String](\"\
  xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xxx\")).equals((List[String](\"\
  xxx\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"xxx\"\
  , \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\")), (\"xx\")).equals((List[String](\"\
  xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"))));\n    assert(filterBySubstring((List[String](\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\")), (\"run\")).equals((List[String](\"\
  grunt\", \"prune\"))));\n    }\n\n}\n"
completions: ['        strings.filter((s : String) => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        strings.filter((x) => x.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(string
    => string.contains(substring))', '        strings.filter(string => string.contains(substring))',
  "        // TODO: Implement me\n        strings.filter(x => x.contains(substring))",
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(x => x.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', "        var result : List[String] = List[String]()\n\
    \        for (string <- strings) {\n            if (string.contains(substring))\
    \ {\n                result = string :: result\n            }\n        }\n   \
    \     return result", '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        strings.filter(x => x.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(x => x.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(string
    => string.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(x => x.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter((s
    : String) => s.contains(substring))', '        return strings.filter(x => x.contains(substring))',
  '        return strings.filter(x => x.contains(substring))', '        strings.filter((s
    : String) => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  "        var result : List[String] = List()\n        for (string <- strings) {\n\
    \            if (string.contains(substring)) {\n                result = string\
    \ :: result\n            }\n        }\n        return result", '        strings.filter(s
    => s.contains(substring))', '        strings.filter(x => x.contains(substring))',
  "        var result : List[String] = List[String]()\n        for (string <- strings)\
    \ {\n            if (string.contains(substring)) {\n                result = result\
    \ :+ string\n            }\n        }\n        return result", "        var result\
    \ : List[String] = List[String]()\n        for (string <- strings) {\n       \
    \     if (string.contains(substring)) {\n                result = result :+ string\n\
    \            }\n        }\n        return result", '        strings.filter(s =>
    s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', "        var result : List[String]\
    \ = List[String]()\n        for (string <- strings) {\n            if (string.contains(substring))\
    \ {\n                result = result :+ string\n            }\n        }\n   \
    \     return result", '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        return strings.filter(x
    => x.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        return strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        strings.filter(string => string.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(str => str.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(x => x.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(str
    => str.contains(substring))', '        return strings.filter(s => s.contains(substring))',
  "        var result : List[String] = List()\n        for (string <- strings) {\n\
    \            if (string.contains(substring)) {\n                result = result\
    \ :+ string\n            }\n        }\n        return result", '        strings.filter(s
    => s.contains(substring))', '        strings.filter(x => x.contains(substring))',
  "        var result : List[String] = List[String]()\n        for (string <- strings)\
    \ {\n            if (string.contains(substring)) {\n                result = result\
    \ :+ string\n            }\n        }\n        return result", '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        return strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', "        // Filter the input list of strings only\
    \ for ones that contain given substring\n        strings.filter(s => s.contains(substring))",
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', "        var result : List[String] = List[String]()\n\
    \        for (string <- strings) {\n            if (string.contains(substring))\
    \ {\n                result = string :: result\n            }\n        }\n   \
    \     return result", '        strings.filter((s : String) => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter((s
    : String) => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(_.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        strings.filter(s => s.contains(substring))',
  "        var result : List[String] = List[String]()\n        for (string <- strings)\
    \ {\n            if (string.contains(substring)) {\n                result = string\
    \ :: result\n            }\n        }\n        return result", '        strings.filter(s
    => s.contains(substring))', '        strings.filter(x => x.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(x
    => x.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter((s : String) => s.contains(substring))',
  '        strings.filter(x => x.contains(substring))', '        strings.filter(s
    => s.contains(substring))', '        strings.filter(s => s.contains(substring))',
  '        strings.filter(s => s.contains(substring))']
stop_tokens:
- "\n    }\n"
