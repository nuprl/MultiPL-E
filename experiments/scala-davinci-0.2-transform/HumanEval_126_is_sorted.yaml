name: HumanEval_126_is_sorted
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of numbers, return whether or not they are sorted\n    // in\
  \ ascending order. If list has more than 1 duplicate of the same\n    // number,\
  \ return False. Assume no negative numbers and only integers.\n    // Examples\n\
  \    // >>> isSorted((List[Long](5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong)))\n    // (false)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong)))\n    // (true)\n    //\
  \ >>> isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong,\
  \ 6l.toLong, 7l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong)))\n    // (false)\n\
  \    // >>> isSorted((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong,\
  \ 4l.toLong)))\n    // (true)\n    // >>> isSorted((List[Long](1l.toLong, 2l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (false)\n    def isSorted(lst\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isSorted((List[Long](5l.toLong)))\
  \ == (true));\n    assert(isSorted((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong))) == (true));\n\
  \    assert(isSorted((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 5l.toLong,\
  \ 6l.toLong, 7l.toLong))) == (false));\n    assert(isSorted((List[Long]())) == (true));\n\
  \    assert(isSorted((List[Long](1l.toLong))) == (true));\n    assert(isSorted((List[Long](3l.toLong,\
  \ 2l.toLong, 1l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (false));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    assert(isSorted((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))) == (true));\n    }\n\n}\n"
completions: ["        var sorted = true\n        var prev = -1l\n        for (i <-\
    \ lst) {\n            if (i <= prev) {\n                sorted = false\n     \
    \       }\n            prev = i\n        }\n        return sorted", "        var\
    \ sorted = true\n        var prev = 0l\n        for (i <- lst) {\n           \
    \ if (i < prev) {\n                sorted = false\n            }\n           \
    \ prev = i\n        }\n        return sorted", "        // Fill in the code here\n\
    \        var sorted = true\n        var prev = 0l\n        var count = 0\n   \
    \     for (i <- lst) {\n            if (i < prev) {\n                sorted =\
    \ false\n            }\n            if (i == prev) {\n                count +=\
    \ 1\n            }\n            if (count > 1) {\n                sorted = false\n\
    \            }\n            prev = i\n        }\n        return sorted", "   \
    \     var sorted = true\n        var prev = 0l\n        for (i <- lst) {\n   \
    \         if (i < prev) {\n                sorted = false\n            }\n   \
    \         prev = i\n        }\n        return sorted", "        var sorted = true\n\
    \        var prev = lst(0)\n        var count = 0\n        for (i <- 1 until lst.length)\
    \ {\n            if (lst(i) < prev) {\n                sorted = false\n      \
    \      }\n            if (lst(i) == prev) {\n                count += 1\n    \
    \        }\n            prev = lst(i)\n        }\n        if (count > 0) {\n \
    \           sorted = false\n        }\n        return sorted", "        var sorted\
    \ = true\n        var last = 0l\n        var count = 0\n        for (x <- lst)\
    \ {\n            if (x < last) {\n                sorted = false\n           \
    \ }\n            if (x == last) {\n                count += 1\n            }\n\
    \            if (count > 1) {\n                sorted = false\n            }\n\
    \            last = x\n        }\n        return sorted", "        var sorted\
    \ = true\n        var prev = lst(0)\n        var count = 0\n        for (i <-\
    \ lst) {\n            if (i < prev) {\n                sorted = false\n      \
    \      }\n            if (i == prev) {\n                count += 1\n         \
    \   }\n            prev = i\n        }\n        if (count > 1) {\n           \
    \ sorted = false\n        }\n        return sorted", "        var sorted = true\n\
    \        var prev = -1\n        for (x <- lst) {\n            if (x == prev) {\n\
    \                sorted = false\n            }\n            if (x < prev) {\n\
    \                sorted = false\n            }\n            prev = x\n       \
    \ }\n        return sorted", "        var sorted = true\n        var prev = 0l\n\
    \        var count = 0\n        for (i <- lst) {\n            if (i < prev) {\n\
    \                sorted = false\n            }\n            if (i == prev) {\n\
    \                count += 1\n            }\n            if (count > 1) {\n   \
    \             sorted = false\n            }\n            prev = i\n        }\n\
    \        sorted", "        var sorted = true\n        var prev = 0l\n        for\
    \ (i <- lst) {\n            if (i < prev) {\n                sorted = false\n\
    \            }\n            prev = i\n        }\n        return sorted", "   \
    \     val sorted = lst.sorted\n        val set = lst.toSet\n        val setSorted\
    \ = sorted.toSet\n        return sorted == lst && set == setSorted", "       \
    \ if (lst.length == 1) {\n            return true\n        }\n        var prev\
    \ = lst(0)\n        for (i <- 1 until lst.length) {\n            if (lst(i) <\
    \ prev) {\n                return false\n            }\n            prev = lst(i)\n\
    \        }\n        return true", "        var sorted = true\n        var prev\
    \ = 0l\n        var count = 0\n        for (i <- lst) {\n            if (count\
    \ > 0) {\n                if (i <= prev) {\n                    sorted = false\n\
    \                }\n            }\n            prev = i\n            count +=\
    \ 1\n        }\n        return sorted", "        val sorted = lst.sorted\n   \
    \     val set = lst.toSet\n        sorted == lst && set.size == lst.size", " \
    \       var sorted = true\n        var prev = 0l\n        for (i <- lst) {\n \
    \           if (i < prev) {\n                sorted = false\n            }\n \
    \           prev = i\n        }\n        return sorted", "        var sorted =\
    \ true\n        var prev = lst(0)\n        for (i <- 1 until lst.length) {\n \
    \           if (lst(i) <= prev) {\n                sorted = false\n          \
    \  }\n            prev = lst(i)\n        }\n        return sorted", "        var\
    \ sorted = true\n        var prev = lst(0)\n        var count = 0\n        for\
    \ (i <- 1 until lst.length) {\n            if (lst(i) < prev) {\n            \
    \    sorted = false\n            }\n            if (lst(i) == prev) {\n      \
    \          count += 1\n            }\n            if (count > 1) {\n         \
    \       sorted = false\n            }\n            prev = lst(i)\n        }\n\
    \        return sorted", "        var sorted = true\n        var prev = -1l\n\
    \        for (i <- lst) {\n            if (i == prev) {\n                sorted\
    \ = false\n            }\n            if (i < prev) {\n                sorted\
    \ = false\n            }\n            prev = i\n        }\n        return sorted",
  "        var sorted = true\n        var prev = 0l\n        for (i <- lst) {\n  \
    \          if (i < prev) {\n                sorted = false\n            }\n  \
    \          prev = i\n        }\n        return sorted", "        var sorted =\
    \ true\n        var last = lst(0)\n        var count = 0\n        for (i <- 1\
    \ until lst.length) {\n            if (lst(i) == last) {\n                count\
    \ += 1\n                if (count > 1) {\n                    sorted = false\n\
    \                }\n            }\n            else {\n                count =\
    \ 0\n            }\n            if (lst(i) < last) {\n                sorted =\
    \ false\n            }\n            last = lst(i)\n        }\n        sorted"]
stop_tokens:
- "\n    }\n"
