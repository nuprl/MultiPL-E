name: HumanEval_116_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this Kata, you have to sort an array of non-negative integers according\
  \ to\n    // number of ones in their binary representation in ascending order.\n\
  \    // For similar number of ones, sort based on decimal value.\n    // It must\
  \ be implemented like this:\n    // >>> sortArray((List[Long](1l.toLong, 5l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))\n    // >>> sortArray((List[Long](-2l.toLong, -3l.toLong,\
  \ -4l.toLong, -5l.toLong, -6l.toLong)))\n    // (List[Long](-6l.toLong, -5l.toLong,\
  \ -4l.toLong, -3l.toLong, -2l.toLong))\n    // >>> sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))\n    def sortArray(arr : List[Long]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long](1l.toLong,\
  \ 5l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 2l.toLong,\
  \ 4l.toLong, 3l.toLong, 5l.toLong))));\n    assert(sortArray((List[Long](-2l.toLong,\
  \ -3l.toLong, -4l.toLong, -5l.toLong, -6l.toLong))).equals((List[Long](-4l.toLong,\
  \ -2l.toLong, -6l.toLong, -5l.toLong, -3l.toLong))));\n    assert(sortArray((List[Long](1l.toLong,\
  \ 0l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](0l.toLong, 1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong))));\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](2l.toLong, 5l.toLong, 77l.toLong, 4l.toLong, 5l.toLong,\
  \ 3l.toLong, 5l.toLong, 7l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 4l.toLong, 4l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 5l.toLong,\
  \ 7l.toLong, 77l.toLong))));\n    assert(sortArray((List[Long](3l.toLong, 6l.toLong,\
  \ 44l.toLong, 12l.toLong, 32l.toLong, 5l.toLong))).equals((List[Long](32l.toLong,\
  \ 3l.toLong, 5l.toLong, 6l.toLong, 12l.toLong, 44l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))).equals((List[Long](2l.toLong,\
  \ 4l.toLong, 8l.toLong, 16l.toLong, 32l.toLong))));\n    }\n\n}\n"
completions: ["        arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n\
    \            val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((x, y)\
    \ => {\n            val xs = x.toBinaryString.count(_ == '1')\n            val\
    \ ys = y.toBinaryString.count(_ == '1')\n            if (xs == ys) x < y else\
    \ xs < ys\n        })", "        arr.sortWith((a, b) => {\n            val a1\
    \ = a.toBinaryString.count(_ == '1')\n            val b1 = b.toBinaryString.count(_\
    \ == '1')\n            if (a1 == b1) a < b else a1 < b1\n        })", "      \
    \  val sorted = arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n\
    \            val bBin = b.toBinaryString\n            val aOnes = aBin.count(_\
    \ == '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })\n        sorted", "        arr.sortWith((x,\
    \ y) => {\n            val x1 = x.toBinaryString.count(_ == '1')\n           \
    \ val y1 = y.toBinaryString.count(_ == '1')\n            if (x1 == y1) x < y else\
    \ x1 < y1\n        })", "        arr.sortWith((a, b) => {\n            val aBinary\
    \ = a.toBinaryString\n            val bBinary = b.toBinaryString\n           \
    \ val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        arr.sortWith((a, b) => {\n            val aBin\
    \ = a.toBinaryString\n            val bBin = b.toBinaryString\n            val\
    \ aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ == '1')\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((a, b) => {\n            val aBinary = a.toBinaryString\n  \
    \          val bBinary = b.toBinaryString\n            val aOnes = aBinary.count(_\
    \ == '1')\n            val bOnes = bBinary.count(_ == '1')\n            if (aOnes\
    \ == bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((x, y)\
    \ => {\n            val x1 = x.toBinaryString.count(_ == '1')\n            val\
    \ y1 = y.toBinaryString.count(_ == '1')\n            if (x1 == y1) x < y else\
    \ x1 < y1\n        })", "        arr.sortWith((a, b) => {\n            val aBin\
    \ = a.toBinaryString\n            val bBin = b.toBinaryString\n            val\
    \ aOnes = aBin.count(_ == '1')\n            val bOnes = bBin.count(_ == '1')\n\
    \            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })", "    \
    \    arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_ ==\
    \ '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n            if\
    \ (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n\
    \            val aOnes = aBinary.filter(_ == '1').length\n            val bOnes\
    \ = bBinary.filter(_ == '1').length\n            if (aOnes == bOnes) a < b else\
    \ aOnes < bOnes\n        })", "        arr.sortWith((a, b) => {\n            val\
    \ aBinary = a.toBinaryString\n            val bBinary = b.toBinaryString\n   \
    \         val aOnes = aBinary.count(_ == '1')\n            val bOnes = bBinary.count(_\
    \ == '1')\n            if (aOnes == bOnes) a < b else aOnes < bOnes\n        })",
  "        arr.sortWith((a, b) => {\n            val a1 = a.toBinaryString.count(_\
    \ == '1')\n            val b1 = b.toBinaryString.count(_ == '1')\n           \
    \ if (a1 == b1) a < b else a1 < b1\n        })", "        arr.sortWith((a, b)\
    \ => {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val\
    \ b1 = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else\
    \ a1 < b1\n        })", "        val ones = arr.map(x => (x, x.toBinaryString.count(_\
    \ == '1'))).sortBy(_._2)\n        val zeros = ones.filter(_._2 == 0).sortBy(_._1)\n\
    \        val ones_ = ones.filter(_._2 != 0).sortBy(_._1)\n        zeros ++ ones_",
  "        arr.sortWith((a, b) => {\n            val aBin = a.toBinaryString\n   \
    \         val bBin = b.toBinaryString\n            val aOnes = aBin.count(_ ==\
    \ '1')\n            val bOnes = bBin.count(_ == '1')\n            if (aOnes ==\
    \ bOnes) a < b else aOnes < bOnes\n        })", "        arr.sortWith((a, b) =>\
    \ {\n            val a1 = a.toBinaryString.count(_ == '1')\n            val b1\
    \ = b.toBinaryString.count(_ == '1')\n            if (a1 == b1) a < b else a1\
    \ < b1\n        })"]
stop_tokens:
- "\n    }\n"
