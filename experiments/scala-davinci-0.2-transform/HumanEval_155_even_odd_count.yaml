name: HumanEval_155_even_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n    // ((1l,\
  \ 1l))\n    // >>> evenOddCount((123l))\n    // ((1l, 2l))\n    def evenOddCount(num\
  \ : Long) : Tuple2[Long, Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddCount((7l)).equals(((0l,\
  \ 1l))));\n    assert(evenOddCount((-78l)).equals(((1l, 1l))));\n    assert(evenOddCount((3452l)).equals(((2l,\
  \ 2l))));\n    assert(evenOddCount((346211l)).equals(((3l, 3l))));\n    assert(evenOddCount((-345821l)).equals(((3l,\
  \ 3l))));\n    assert(evenOddCount((-2l)).equals(((1l, 0l))));\n    assert(evenOddCount((-45347l)).equals(((2l,\
  \ 3l))));\n    assert(evenOddCount((0l)).equals(((1l, 0l))));\n    }\n\n}\n"
completions: ["        var evenCount = 0l\n        var oddCount = 0l\n        var\
    \ n = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        (evenCount, oddCount)", "        val nums = num.toString.map(_.asDigit)\n\
    \        val evens = nums.filter(_ % 2 == 0)\n        val odds = nums.filter(_\
    \ % 2 == 1)\n        (evens.length, odds.length)", "        val digits = num.toString.map(_.asDigit)\n\
    \        val even = digits.filter(_ % 2 == 0).length\n        val odd = digits.filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        var evenCount = 0l\n      \
    \  var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n       \
    \ while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        return (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        var evenCount = 0l\n        var\
    \ oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            val digit = n % 10\n            if (digit % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        return (evenCount, oddCount)", " \
    \       var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n \
    \       if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        return (evenCount, oddCount)", "        var evenCount = 0l\n   \
    \     var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n    \
    \    while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n           \
    \ else oddCount += 1\n            n /= 10\n        }\n        return ((evenCount,\
    \ oddCount))", "        val s = num.toString\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 0 until s.length) {\n            if (s(i) % 2 ==\
    \ 0) even += 1\n            else odd += 1\n        }\n        (even, odd)", " \
    \       var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n \
    \       while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n       \
    \     else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        return (evenCount, oddCount)", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var n = num\n        if (n < 0) n =\
    \ -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n  \
    \          else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var even = 0l\n        var odd = 0l\n        var n = num\n\
    \        while (n != 0) {\n            if (n % 2 == 0) even += 1\n           \
    \ else odd += 1\n            n /= 10\n        }\n        (even, odd)", "     \
    \   var evenCount = 0l\n        var oddCount = 0l\n        var numCopy = num\n\
    \        while (numCopy != 0) {\n            if (abs(numCopy % 10) % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            numCopy /= 10\n        }\n\
    \        (evenCount, oddCount)", "        var even = 0l\n        var odd = 0l\n\
    \        var n = num\n        while (n != 0) {\n            if (n % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        val numStr = num.toString\n        val evenCount = numStr.filter(c\
    \ => c.toInt % 2 == 0).length\n        val oddCount = numStr.filter(c => c.toInt\
    \ % 2 == 1).length\n        (evenCount, oddCount)", "        var evenCount = 0l\n\
    \        var oddCount = 0l\n        var num2 = num\n        while (num2 != 0)\
    \ {\n            if (num2 % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            num2 /= 10\n        }\n        (evenCount, oddCount)", " \
    \       var evenCount = 0l\n        var oddCount = 0l\n        var numAbs = abs(num)\n\
    \        while (numAbs > 0) {\n            if (numAbs % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            numAbs /= 10\n        }\n       \
    \ (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount =\
    \ 0l\n        var numCopy = num\n        if (num < 0) numCopy = -num\n       \
    \ while (numCopy > 0) {\n            if (numCopy % 2 == 0) evenCount += 1\n  \
    \          else oddCount += 1\n            numCopy /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        val digits = num.toString.map(_.asDigit)\n        val even\
    \ = digits.filter(_ % 2 == 0).length\n        val odd = digits.filter(_ % 2 ==\
    \ 1).length\n        (even, odd)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        return (evenCount, oddCount)", "        var evenCount = 0l\n\
    \        var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n \
    \       while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n        \
    \    else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            val digit = n %\
    \ 10\n            if (digit % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    val even = num.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2 ==\
    \ 0).length\n        val odd = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        var evenCount = 0l\n      \
    \  var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n       \
    \ while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        return (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        val even = num.toString.filter(c\
    \ => c.asDigit % 2 == 0).length\n        val odd = num.toString.filter(c => c.asDigit\
    \ % 2 == 1).length\n        (even, odd)", "        val str = num.toString\n  \
    \      val even = str.filter(c => c.asDigit % 2 == 0).length\n        val odd\
    \ = str.filter(c => c.asDigit % 2 == 1).length\n        (even, odd)", "      \
    \  var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n      \
    \  if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var even = 0l\n        var odd = 0l\n   \
    \     var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n      \
    \      if (n % 2 == 0) even += 1\n            else odd += 1\n            n /=\
    \ 10\n        }\n        (even, odd)", "        var evenCount = 0l\n        var\
    \ oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0l\n        var oddCount = 0l\n        var num2 = num\n \
    \       while (num2 != 0) {\n            if (num2 % 2 == 0) evenCount += 1\n \
    \           else oddCount += 1\n            num2 /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var numCopy = num\n        if (num < 0) numCopy = -num\n        while (numCopy\
    \ > 0) {\n            if (numCopy % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            numCopy /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        var evenCount = 0l\n        var\
    \ oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n    \
    \    while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n          \
    \  else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        val digits = num.toString.map(_.asDigit)\n        val evens = digits.filter(_\
    \ % 2 == 0).length\n        val odds = digits.filter(_ % 2 == 1).length\n    \
    \    (evens, odds)", "        val numStr = num.toString\n        val evenCount\
    \ = numStr.filter(c => c.toInt % 2 == 0).length\n        val oddCount = numStr.filter(c\
    \ => c.toInt % 2 == 1).length\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var n = num\n        while (n != 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n       \
    \ if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n       \
    \ while (n != 0) {\n            val digit = n % 10\n            if (digit % 2\
    \ == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var evenCount = 0l\n    \
    \    var oddCount = 0l\n        var num2 = num\n        if (num < 0) num2 = -num\n\
    \        while (num2 > 0) {\n            if (num2 % 2 == 0) evenCount += 1\n \
    \           else oddCount += 1\n            num2 /= 10\n        }\n        return\
    \ (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount =\
    \ 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n\
    \            val digit = n % 10\n            if (digit % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            n /= 10\n        }\n        return\
    \ (evenCount, oddCount)", "        val digits = num.toString.map(_.asDigit)\n\
    \        val evens = digits.filter(_ % 2 == 0).length\n        val odds = digits.filter(_\
    \ % 2 == 1).length\n        (evens, odds)", "        var evenCount = 0l\n    \
    \    var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n     \
    \   while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n        \
    \    else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var num2 = num\n\
    \        if (num2 < 0) num2 = -num2\n        while (num2 > 0) {\n            if\
    \ (num2 % 2 == 0) evenCount += 1\n            else oddCount += 1\n           \
    \ num2 /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var n = num\n        if (n < 0) n =\
    \ -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n  \
    \          else oddCount += 1\n            n /= 10\n        }\n        return\
    \ (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount =\
    \ 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n\
    \            if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0l\n        var oddCount = 0l\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   return (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        val numStr = num.toString\n\
    \        val evenCount = numStr.filter(c => c.asDigit % 2 == 0).length\n     \
    \   val oddCount = numStr.filter(c => c.asDigit % 2 == 1).length\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var n = num\n        while (n != 0) {\n            val digit = n % 10\n    \
    \        if (digit % 2 == 0) evenCount += 1\n            else oddCount += 1\n\
    \            n /= 10\n        }\n        (evenCount, oddCount)", "        val\
    \ numString = num.toString\n        val evenCount = numString.count(c => c.asDigit\
    \ % 2 == 0)\n        val oddCount = numString.count(c => c.asDigit % 2 == 1)\n\
    \        (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        return (evenCount, oddCount)", " \
    \       val str = num.toString\n        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        for (i <- 0 until str.length) {\n            val digit = str(i).asDigit\n\
    \            if (digit % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n        }\n        (evenCount, oddCount)", "        var evenCount = 0l\n\
    \        var oddCount = 0l\n        var num2 = num\n        if (num < 0) num2\
    \ = -num\n        while (num2 > 0) {\n            if (num2 % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            num2 /= 10\n        }\n  \
    \      (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n       \
    \ if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n       \
    \ if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n       \
    \ if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0l\n       \
    \ var oddCount = 0l\n        var n = num\n        while (n != 0) {\n         \
    \   if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n         \
    \   n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var n = num\n        if (n < 0) n =\
    \ -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n  \
    \          else oddCount += 1\n            n /= 10\n        }\n        return\
    \ (evenCount, oddCount)", "        var evenCount = 0\n        var oddCount = 0\n\
    \        var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n   \
    \         if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var n = num\n        if (n < 0) n =\
    \ -n\n        while (n > 0) {\n            val d = n % 10\n            if (d %\
    \ 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        val even = num.toString.filter(c\
    \ => c.asDigit % 2 == 0).length\n        val odd = num.toString.filter(c => c.asDigit\
    \ % 2 == 1).length\n        (even, odd)", "        var evenCount = 0l\n      \
    \  var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n       \
    \ while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        return (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        var evenCount = 0l\n        var\
    \ oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var even = 0l\n        var odd = 0l\n        var n = num\n        if (n <\
    \ 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var numAbs = abs(num)\n\
    \        while (numAbs > 0) {\n            val digit = numAbs % 10\n         \
    \   if (digit % 2 == 0) evenCount += 1\n            else oddCount += 1\n     \
    \       numAbs /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0l\n        var oddCount = 0l\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0l\n       \
    \ var oddCount = 0l\n        var num2 = num\n        if (num < 0) num2 = -num\n\
    \        while (num2 > 0) {\n            if (num2 % 2 == 0) evenCount += 1\n \
    \           else oddCount += 1\n            num2 /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var n = num\n        if (n < 0) n =\
    \ -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n  \
    \          else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        val even = num.toString.filter(c => c.asDigit % 2 == 0).length\n\
    \        val odd = num.toString.filter(c => c.asDigit % 2 == 1).length\n     \
    \   (even, odd)", "        var evenCount = 0l\n        var oddCount = 0l\n   \
    \     var numCopy = num\n        while (numCopy != 0) {\n            if (numCopy\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            numCopy\
    \ /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount = 0l\n\
    \        var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n \
    \       while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n        \
    \    else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        val numStr = num.toString\n        val numStrLen = numStr.length\n    \
    \    var evenCount = 0l\n        var oddCount = 0l\n        for (i <- 0 until\
    \ numStrLen) {\n            val digit = numStr(i).asDigit\n            if (digit\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n        }\n      \
    \  (evenCount, oddCount)", "        val numStr = num.toString\n        val evenCount\
    \ = numStr.filter(c => c.toInt % 2 == 0).length\n        val oddCount = numStr.filter(c\
    \ => c.toInt % 2 == 1).length\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var n = num\n        while (n != 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n       \
    \ if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        return (evenCount, oddCount)", " \
    \       val digits = num.toString.map(_.asDigit)\n        val evenCount = digits.filter(_\
    \ % 2 == 0).length\n        val oddCount = digits.filter(_ % 2 == 1).length\n\
    \        (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            val digit = n % 10\n            if (digit % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        return (evenCount, oddCount)", " \
    \       var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n \
    \       while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n       \
    \     else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        return (evenCount, oddCount)", "        val digits\
    \ = num.toString.map(_.asDigit)\n        val even = digits.filter(_ % 2 == 0).length\n\
    \        val odd = digits.filter(_ % 2 == 1).length\n        (even, odd)", " \
    \       var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n \
    \       while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n       \
    \     else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var num_ = abs(num)\n        while (num_ > 0) {\n            if (num_ % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            num_ /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var evenCount = 0l\n    \
    \    var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n     \
    \   while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            val digit = n %\
    \ 10\n            if (digit % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        return (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        var evens = 0l\n        var odds\
    \ = 0l\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evens += 1\n            else odds += 1\n            n /= 10\n        }\n\
    \        (evens, odds)", "        var evenCount = 0l\n        var oddCount = 0l\n\
    \        var n = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        return (evenCount, oddCount)", " \
    \       var evenCount = 0l\n        var oddCount = 0l\n        var numCopy = num\n\
    \        while (numCopy != 0) {\n            if (numCopy % 2 == 0) evenCount +=\
    \ 1\n            else oddCount += 1\n            numCopy /= 10\n        }\n  \
    \      (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        val even = num.toString.filter(c\
    \ => c.asDigit % 2 == 0).length\n        val odd = num.toString.filter(c => c.asDigit\
    \ % 2 == 1).length\n        (even, odd)", "        var evenCount = 0l\n      \
    \  var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n       \
    \ while (n > 0) {\n            val digit = n % 10\n            if (digit % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0l\n       \
    \ var oddCount = 0l\n        var n = num\n        while (n != 0) {\n         \
    \   if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n         \
    \   n /= 10\n        }\n        (evenCount, oddCount)", "        val even = num.toString.filter(c\
    \ => c.asDigit % 2 == 0).length\n        val odd = num.toString.filter(c => c.asDigit\
    \ % 2 == 1).length\n        (even, odd)", "        var evenCount = 0l\n      \
    \  var oddCount = 0l\n        var numCopy = num\n        while (numCopy != 0)\
    \ {\n            if (numCopy % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            numCopy /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        var evenCount = 0l\n        var\
    \ oddCount = 0l\n        var n = num\n        while (n != 0) {\n            if\
    \ (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /=\
    \ 10\n        }\n        (evenCount, oddCount)", "        val digits = num.toString.toList.map(_.asDigit)\n\
    \        val evenCount = digits.filter(_ % 2 == 0).length\n        val oddCount\
    \ = digits.filter(_ % 2 == 1).length\n        (evenCount, oddCount)", "      \
    \  val nums = num.toString.map(_.asDigit).toList\n        val evens = nums.filter(_\
    \ % 2 == 0).length\n        val odds = nums.filter(_ % 2 == 1).length\n      \
    \  (evens, odds)", "        val nums = num.toString.map(_.asDigit)\n        val\
    \ evens = nums.filter(_ % 2 == 0)\n        val odds = nums.filter(_ % 2 == 1)\n\
    \        (evens.length, odds.length)", "        var even = 0l\n        var odd\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            val d = n % 10\n            if (d % 2 == 0) even += 1\n     \
    \       else odd += 1\n            n /= 10\n        }\n        (even, odd)", " \
    \       val even = num.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2\
    \ == 0).length\n        val odd = num.toString.filter(_.isDigit).map(_.asDigit).filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        val evenCount = num.toString.filter(x\
    \ => x.asDigit % 2 == 0).length\n        val oddCount = num.toString.filter(x\
    \ => x.asDigit % 2 == 1).length\n        return (evenCount, oddCount)", "    \
    \    var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n    \
    \    while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n          \
    \  else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var even = 0l\n        var odd = 0l\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var num2 = num\n\
    \        if (num2 < 0) num2 = -num2\n        while (num2 > 0) {\n            if\
    \ (num2 % 2 == 0) evenCount += 1\n            else oddCount += 1\n           \
    \ num2 /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var n = num\n        if (n < 0) n =\
    \ -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n  \
    \          else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        (evenCount, oddCount)", "        var even = 0l\n\
    \        var odd = 0l\n        var n = num\n        while (n != 0) {\n       \
    \     if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0l\n        var oddCount = 0l\n        var numCopy = num\n \
    \       if (num < 0) numCopy = -num\n        while (numCopy > 0) {\n         \
    \   if (numCopy % 2 == 0) evenCount += 1\n            else oddCount += 1\n   \
    \         numCopy /= 10\n        }\n        (evenCount, oddCount)", "        var\
    \ evenCount = 0l\n        var oddCount = 0l\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n       \
    \ if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   return (evenCount, oddCount)", "        var even = 0l\n        var odd = 0l\n\
    \        var n = num\n        while (n != 0) {\n            if (n % 2 == 0) even\
    \ += 1\n            else odd += 1\n            n /= 10\n        }\n        (even,\
    \ odd)", "        var evenCount = 0l\n        var oddCount = 0l\n        var n\
    \ = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var n = num\n        while (n != 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n       \
    \ if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   return (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        return (evenCount, oddCount)", " \
    \       var evenCount : Long = 0\n        var oddCount : Long = 0\n        var\
    \ n : Long = abs(num)\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0l\n       \
    \ var oddCount = 0l\n        var n = num\n        while (n != 0) {\n         \
    \   if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n         \
    \   n /= 10\n        }\n        return (evenCount, oddCount)", "        val numStr\
    \ = num.toString\n        val evenCount = numStr.filter(c => (c - '0') % 2 ==\
    \ 0).length\n        val oddCount = numStr.filter(c => (c - '0') % 2 == 1).length\n\
    \        (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ val even = num.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2 == 0).length\n\
    \        val odd = num.toString.filter(_.isDigit).map(_.asDigit).filter(_ % 2\
    \ == 1).length\n        (even, odd)", "        val even = num.toString.filter(c\
    \ => c.toInt % 2 == 0).length\n        val odd = num.toString.filter(c => c.toInt\
    \ % 2 == 1).length\n        (even, odd)", "        val even = num.toString.filter(x\
    \ => x.asDigit % 2 == 0).length\n        val odd = num.toString.filter(x => x.asDigit\
    \ % 2 == 1).length\n        (even, odd)", "        val digits = num.toString.map(_.asDigit)\n\
    \        val evenCount = digits.filter(_ % 2 == 0).length\n        val oddCount\
    \ = digits.filter(_ % 2 == 1).length\n        (evenCount, oddCount)", "      \
    \  val s = num.toString\n        val even = s.filter(c => c.toInt % 2 == 0).length\n\
    \        val odd = s.filter(c => c.toInt % 2 == 1).length\n        (even, odd)",
  "        var even = 0l\n        var odd = 0l\n        var n = num\n        if (n\
    \ < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) even += 1\n\
    \            else odd += 1\n            n /= 10\n        }\n        (even, odd)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        val digits = num.toString.map(c\
    \ => c.asDigit)\n        val evenCount = digits.filter(d => d % 2 == 0).length\n\
    \        val oddCount = digits.filter(d => d % 2 == 1).length\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var n = num\n        if (n < 0) n = -n\n        while (n > 0) {\n          \
    \  if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n          \
    \  n /= 10\n        }\n        (evenCount, oddCount)", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var n = num\n        if (n < 0) n =\
    \ -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n  \
    \          else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var n = num\n        while (n != 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n       \
    \ while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        return (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      while (n != 0) {\n            val digit = n % 10\n            if (digit\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        var evenCount = 0l\n    \
    \    var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n     \
    \   while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        var evenCount = 0l\n        var\
    \ oddCount = 0l\n        var num2 = num\n        if (num < 0) num2 = -num\n  \
    \      while (num2 > 0) {\n            if (num2 % 2 == 0) evenCount += 1\n   \
    \         else oddCount += 1\n            num2 /= 10\n        }\n        return\
    \ (evenCount, oddCount)", "        val digits = num.toString.map(_.asDigit)\n\
    \        val even = digits.filter(_ % 2 == 0).length\n        val odd = digits.filter(_\
    \ % 2 == 1).length\n        (even, odd)", "        val digits = num.toString.toList.map(_.asDigit)\n\
    \        val evens = digits.filter(_ % 2 == 0).length\n        val odds = digits.filter(_\
    \ % 2 == 1).length\n        (evens, odds)", "        var evenCount = 0l\n    \
    \    var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n     \
    \   while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        val digits = num.toString.map(_.asDigit)\n        val evens = digits.filter(_\
    \ % 2 == 0).length\n        val odds = digits.filter(_ % 2 == 1).length\n    \
    \    (evens, odds)", "        var evenCount = 0l\n        var oddCount = 0l\n\
    \        var temp = num\n        if (temp < 0) temp = -temp\n        while (temp\
    \ > 0) {\n            if (temp % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            temp /= 10\n        }\n        (evenCount, oddCount)", " \
    \       val even = num.toString.filter(x => x.toInt % 2 == 0).length\n       \
    \ val odd = num.toString.filter(x => x.toInt % 2 == 1).length\n        (even,\
    \ odd)", "        var evenCount = 0l\n        var oddCount = 0l\n        var n\
    \ = num\n        if (n < 0) n = -n\n        while (n > 0) {\n            val digit\
    \ = n % 10\n            if (digit % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n    \
    \    if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        while (n != 0) {\n            if (n % 2 ==\
    \ 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0l\n       \
    \ var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n    \
    \    if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n       \
    \ while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        return (evenCount, oddCount)", "        var evenCount = 0l\n   \
    \     var oddCount = 0l\n        var num2 = num\n        if (num < 0) num2 = -num\n\
    \        while (num2 > 0) {\n            if (num2 % 2 == 0) evenCount += 1\n \
    \           else oddCount += 1\n            num2 /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        val digits = num.toString.map(_.asDigit)\n        (digits.filter(_\
    \ % 2 == 0).length, digits.filter(_ % 2 == 1).length)", "        var evenCount\
    \ = 0l\n        var oddCount = 0l\n        var n = num\n        if (n < 0) n =\
    \ -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n  \
    \          else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        val n = abs(num)\n        var evenCount = 0l\n        var\
    \ oddCount = 0l\n        var m = n\n        while (m > 0) {\n            val d\
    \ = m % 10\n            if (d % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            m /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n    \
    \    while (n != 0) {\n            if (n % 2 == 0) evenCount += 1\n          \
    \  else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            val digit = n %\
    \ 10\n            if (digit % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0l\n        var oddCount = 0l\n        var num1 = num\n \
    \       if (num1 < 0) num1 = -num1\n        while (num1 > 0) {\n            if\
    \ (num1 % 2 == 0) evenCount += 1\n            else oddCount += 1\n           \
    \ num1 /= 10\n        }\n        (evenCount, oddCount)", "        var even = 0l\n\
    \        var odd = 0l\n        var n = num\n        while (n != 0) {\n       \
    \     if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var num2 = num\n        if (num < 0) num2 = -num\n        while\
    \ (num2 > 0) {\n            if (num2 % 2 == 0) evenCount += 1\n            else\
    \ oddCount += 1\n            num2 /= 10\n        }\n        return (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var temp = num\n        if (temp < 0) {\n            temp = -temp\n        }\n\
    \        while (temp > 0) {\n            if (temp % 2 == 0) {\n              \
    \  evenCount += 1\n            } else {\n                oddCount += 1\n     \
    \       }\n            temp /= 10\n        }\n        return (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        return (evenCount, oddCount)", "        var evenCount = 0l\n   \
    \     var oddCount = 0l\n        var n = abs(num)\n        while (n > 0) {\n \
    \           if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n \
    \           n /= 10\n        }\n        (evenCount, oddCount)", "        var even\
    \ = 0l\n        var odd = 0l\n        var n = num\n        while (n != 0) {\n\
    \            if (n % 2 == 0) even += 1\n            else odd += 1\n          \
    \  n /= 10\n        }\n        (even, odd)", "        var even = 0l\n        var\
    \ odd = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n >\
    \ 0) {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n   \
    \         n /= 10\n        }\n        (even, odd)", "        var evenCount = 0l\n\
    \        var oddCount = 0l\n        var temp = num\n        if (temp < 0) temp\
    \ = -temp\n        while (temp > 0) {\n            if (temp % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            temp /= 10\n        }\n  \
    \      (evenCount, oddCount)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            val d = n % 10\n            if (d % 2 == 0) evenCount += 1\n\
    \            else oddCount += 1\n            n /= 10\n        }\n        (evenCount,\
    \ oddCount)", "        var evenCount = 0l\n        var oddCount = 0l\n       \
    \ var num1 = num\n        while (num1 != 0) {\n            if (num1 % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            num1 /= 10\n   \
    \     }\n        (evenCount, oddCount)", "        var evenCount = 0l\n       \
    \ var oddCount = 0l\n        var n = num\n        while (n != 0) {\n         \
    \   if (n % 2 == 0) evenCount += 1\n            else oddCount += 1\n         \
    \   n /= 10\n        }\n        (evenCount, oddCount)", "        var even = 0l\n\
    \        var odd = 0l\n        var n = num\n        while (n != 0) {\n       \
    \     if (n % 2 == 0) even += 1\n            else odd += 1\n            n /= 10\n\
    \        }\n        (even, odd)", "        var evenCount = 0l\n        var oddCount\
    \ = 0l\n        var n = num\n        if (n < 0) n = -n\n        while (n > 0)\
    \ {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount +=\
    \ 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "       \
    \ val even = num.toString.filter(x => x.toInt % 2 == 0).length\n        val odd\
    \ = num.toString.filter(x => x.toInt % 2 == 1).length\n        (even, odd)", " \
    \       var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n \
    \       while (n != 0) {\n            val digit = n % 10\n            if (digit\
    \ % 2 == 0) evenCount += 1\n            else oddCount += 1\n            n /= 10\n\
    \        }\n        (evenCount, oddCount)", "        val evenCount = num.toString.filter(x\
    \ => x.asDigit % 2 == 0).length\n        val oddCount = num.toString.filter(x\
    \ => x.asDigit % 2 == 1).length\n        (evenCount, oddCount)", "        var\
    \ even = 0l\n        var odd = 0l\n        var n = num\n        while (n != 0)\
    \ {\n            if (n % 2 == 0) even += 1\n            else odd += 1\n      \
    \      n /= 10\n        }\n        (even, odd)", "        var evenCount = 0l\n\
    \        var oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n \
    \       while (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n        \
    \    else oddCount += 1\n            n /= 10\n        }\n        (evenCount, oddCount)",
  "        var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n  \
    \      if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0)\
    \ evenCount += 1\n            else oddCount += 1\n            n /= 10\n      \
    \  }\n        (evenCount, oddCount)", "        var evenCount = 0l\n        var\
    \ oddCount = 0l\n        var n = num\n        if (n < 0) n = -n\n        while\
    \ (n > 0) {\n            if (n % 2 == 0) evenCount += 1\n            else oddCount\
    \ += 1\n            n /= 10\n        }\n        (evenCount, oddCount)", "    \
    \    var evenCount = 0l\n        var oddCount = 0l\n        var n = num\n    \
    \    if (n < 0) n = -n\n        while (n > 0) {\n            if (n % 2 == 0) evenCount\
    \ += 1\n            else oddCount += 1\n            n /= 10\n        }\n     \
    \   (evenCount, oddCount)"]
stop_tokens:
- "\n    }\n"
