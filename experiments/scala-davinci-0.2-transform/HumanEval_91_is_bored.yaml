name: HumanEval_91_is_bored
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You'll be given a string of words, and your task is to count the number\n\
  \    // of boredoms. A boredom is a sentence that starts with the word \"I\".\n\
  \    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n    //\
  \ >>> isBored((\"Hello world\"))\n    // (0l)\n    // >>> isBored((\"The sky is\
  \ blue. The sun is shining. I love this weather\"))\n    // (1l)\n    def isBored(S\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isBored((\"Hello\
  \ world\")) == (0l));\n    assert(isBored((\"Is the sky blue?\")) == (0l));\n  \
  \  assert(isBored((\"I love It !\")) == (1l));\n    assert(isBored((\"bIt\")) ==\
  \ (0l));\n    assert(isBored((\"I feel good today. I will be productive. will kill\
  \ It\")) == (2l));\n    assert(isBored((\"You and I are going for a walk\")) ==\
  \ (0l));\n    }\n\n}\n"
completions: ["        val words = S.split(\"[.?!]\")\n        var count = 0\n   \
    \     for (word <- words) {\n            if (word.startsWith(\"I\")) count +=\
    \ 1\n        }\n        count", "        val sentences = S.split(\"[.?!]\")\n\
    \        val boredoms = sentences.filter(s => s.trim.startsWith(\"I\"))\n    \
    \    return boredoms.length.toLong", "        var count = 0l\n        var i =\
    \ 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n        \
    \        count += 1\n                while (i < S.length && S(i) != '.' && S(i)\
    \ != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val words = S.split(\"[.?!]\")\n        var count\
    \ = 0l\n        for (word <- words) {\n            if (word.startsWith(\"I\"))\
    \ count += 1\n        }\n        count", "        val words = S.split(\"[.?!]\"\
    )\n        var count = 0l\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "   \
    \     val words = S.split(\"[.?!]\")\n        var count = 0\n        for (word\
    \ <- words) {\n            if (word.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val words = S.split(\"[.?!]\")\n        var count = 0l\n        for (word\
    \ <- words) {\n            if (word.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) {\n                count += 1\n            }\n        }\n        count",
  "        val words = S.split(\"[.?!]\")\n        var count = 0\n        for (word\
    \ <- words) {\n            if (word.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val words = S.split(\"[.?!]\")\n        var count = 0\n        for (word\
    \ <- words) {\n            if (word.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val words = S.split(\"[.?!]\")\n        var count =\
    \ 0l\n        for (word <- words) {\n            if (word.trim.startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        var count = 0l\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val sentences = S.split(\"[.?!]\")\n        var\
    \ boredoms = 0l\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) {\n                boredoms += 1\n            }\n        }\n        boredoms",
  "        val words = S.split(\"[.?!]\")\n        var count = 0\n        for (word\
    \ <- words) {\n            if (word.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var boredoms = 0l\n        for (sentence <- sentences) {\n \
    \           if (sentence.trim().startsWith(\"I\")) {\n                boredoms\
    \ += 1\n            }\n        }\n        boredoms", '        S.split("[.?!]").filter(x
    => x.startsWith("I")).size', "        val sentences = S.split(\"[.?!]\")\n   \
    \     sentences.filter(s => s.trim.startsWith(\"I\")).size", "        val sentences\
    \ = S.split(\"[.?!]\")\n        sentences.count(s => s.trim.startsWith(\"I\"))",
  "        var count = 0l\n        var i = 0\n        while (i < S.length) {\n   \
    \         if (S(i) == 'I') {\n                count += 1\n                while\
    \ (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n       \
    \     }\n            i += 1\n        }\n        count", "        val words = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (word <- words) {\n            if\
    \ (word.startsWith(\"I\")) count += 1\n        }\n        count", "        val\
    \ sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val words = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (word <- words) {\n            if (word.startsWith(\"I\")) {\n  \
    \              count += 1\n            }\n        }\n        count", "       \
    \ val words = S.split(\"[.?!]\")\n        var count = 0l\n        for (word <-\
    \ words) {\n            if (word.startsWith(\"I\")) {\n                count +=\
    \ 1\n            }\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "   \
    \     val words = S.split(\"[.?!]\")\n        var count = 0\n        for (word\
    \ <- words) {\n            if (word.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        var boredoms = 0\n        var sentence = \"\"\n    \
    \    for (c <- S) {\n            if (c == '.' || c == '?' || c == '!') {\n   \
    \             if (sentence.startsWith(\"I\")) boredoms += 1\n                sentence\
    \ = \"\"\n            } else {\n                sentence += c\n            }\n\
    \        }\n        boredoms", "        var count = 0\n        var i = 0\n   \
    \     while (i < S.length) {\n            if (S(i) == 'I') {\n               \
    \ count += 1\n                while (i < S.length && S(i) != '.' && S(i) != '?'\
    \ && S(i) != '!') i += 1\n            }\n            else i += 1\n        }\n\
    \        count", "        val words = S.split(\"[.?!]\")\n        var count =\
    \ 0\n        for (word <- words) {\n            if (word.startsWith(\"I\")) count\
    \ += 1\n        }\n        count", "        val sentences = S.split(\"[.?!]\"\
    )\n        var boredoms = 0l\n        for (sentence <- sentences) {\n        \
    \    if (sentence.startsWith(\"I\")) {\n                boredoms += 1\n      \
    \      }\n        }\n        boredoms", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.startsWith(\"I\")) count += 1\n        }\n        count", "      \
    \  val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence\
    \ <- sentences) {\n            if (sentence.trim.startsWith(\"I\")) count += 1\n\
    \        }\n        count", "        val s = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (i <- 0 until s.length) {\n            if (s(i).startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0l\n       \
    \ for (s <- S.split(\"[.?!]\")) {\n            if (s.startsWith(\"I\")) count\
    \ += 1\n        }\n        count", "        val s = S.split(\"[.?!]\")\n     \
    \   var c = 0\n        for (i <- 0 until s.length) {\n            if (s(i).startsWith(\"\
    I\")) c += 1\n        }\n        c", "        val words = S.split(\"[.?!]\")\n\
    \        var count = 0\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val words = S.split(\"[.?!]\"\
    )\n        var boredoms = 0\n        for (word <- words) {\n            if (word.trim.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0l\n        for (sentence <- sentences) {\n    \
    \        if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n      \
    \  count", "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n\
    \        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var boredoms = 0\n     \
    \   var i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n\
    \                var j = i + 1\n                while (j < S.length && S(j) !=\
    \ '.' && S(j) != '?' && S(j) != '!') {\n                    j += 1\n         \
    \       }\n                if (j == S.length || S(j) == '.') {\n             \
    \       boredoms += 1\n                }\n                i = j\n            }\n\
    \            i += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0l\n        for (sentence <- sentences) {\n    \
    \        if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n      \
    \  count", "        val words = S.split(\" \")\n        var boredoms = 0l\n  \
    \      for (i <- 0 until words.length) {\n            if (words(i) == \"I\") {\n\
    \                boredoms += 1\n            }\n        }\n        boredoms", " \
    \       val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        val words = S.split(\"[.?!]\"\
    )\n        words.filter(w => w.startsWith(\"I\")).size", "        val sentences\
    \ = S.split(\"[.?!]\")\n        var count = 0l\n        for (sentence <- sentences)\
    \ {\n            if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val words = S.split(\"\\\\.|\\\\?|\\\\!\")\n       \
    \ var count = 0\n        for (word <- words) {\n            val w = word.trim\n\
    \            if (w.length > 0 && w.charAt(0) == 'I') count += 1\n        }\n \
    \       count", "        val words = S.split(\"\\\\.|\\\\?|\\\\!\")\n        var\
    \ count = 0\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n       \
    \ count", "        val sentences = S.split(\"[.?!]\")\n        var boredoms =\
    \ 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) {\n                boredoms += 1\n            }\n        }\n        boredoms",
  "        val sentences = S.split(\"[.?!]\")\n        var boredoms = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"I\"))\
    \ boredoms += 1\n        }\n        boredoms", "        val s = S.split(\"[.?!]\"\
    )\n        var count = 0l\n        for (i <- 0 until s.length) {\n           \
    \ if (s(i).trim().startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        var count = 0l\n        val sentences = S.split(\"[.?!]\")\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"I\"))\
    \ count += 1\n        }\n        count", "        val sentences = S.split(\"[.!?]\"\
    )\n        var boredoms = 0\n        for (sentence <- sentences) {\n         \
    \   if (sentence.trim().startsWith(\"I\")) {\n                boredoms += 1\n\
    \            }\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        var boredoms = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.startsWith(\"I\")) boredoms\
    \ += 1\n        }\n        boredoms", "        val words = S.split(\"[.?!]\")\n\
    \        var count = 0\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val words = S.split(\" \"\
    )\n        var count = 0\n        for (i <- 0 until words.length) {\n        \
    \    if (words(i) == \"I\") {\n                count += 1\n            }\n   \
    \     }\n        return count", "        val sentences = S.split(\"[.?!]\")\n\
    \        sentences.filter(s => s.trim.startsWith(\"I\")).size", "        val words\
    \ = S.split(\"[.?!]\")\n        var count = 0\n        for (word <- words) {\n\
    \            if (word.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val words = S.split(\"\\\\.|\\\\?|\\\\!\")\n        var boredoms = 0\n\
    \        for (word <- words) {\n            if (word.trim().startsWith(\"I\"))\
    \ boredoms += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(_.startsWith(\"\
    I\")).size", "        val s = S.split(\"[.?!]\")\n        var count = 0\n    \
    \    for (i <- 0 until s.length) {\n            if (s(i).startsWith(\"I\")) count\
    \ += 1\n        }\n        count", "        var count = 0\n        var i = 0\n\
    \        while (i < S.length) {\n            if (S(i) == 'I') {\n            \
    \    count += 1\n                while (i < S.length && S(i) != '.' && S(i) !=\
    \ '?' && S(i) != '!') i += 1\n            }\n            i += 1\n        }\n \
    \       count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        val words = S.split(\"[.?!]\")\n\
    \        var count = 0l\n        for (word <- words) {\n            if (word.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "   \
    \     val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence\
    \ <- sentences) {\n            if (sentence.startsWith(\"I\")) count += 1\n  \
    \      }\n        count", "        val words = S.split(\"[.?!]\")\n        var\
    \ count = 0l\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val words = S.split(\"[.?!]\")\n        var count = 0\n        for (word\
    \ <- words) {\n            if (word.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var count = 0l\n       \
    \ var i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n\
    \                count += 1\n                while (i < S.length && S(i) != '.'\
    \ && S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n \
    \       }\n        count", "        var boredoms = 0l\n        var i = 0\n   \
    \     while (i < S.length) {\n            if (S(i) == 'I') {\n               \
    \ boredoms += 1\n                while (i < S.length && S(i) != '.' && S(i) !=\
    \ '?' && S(i) != '!') i += 1\n            }\n            i += 1\n        }\n \
    \       boredoms", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "   \
    \     val sentences = S.split(\"[.?!]\")\n        var boredoms = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.startsWith(\"I\")) boredoms\
    \ += 1\n        }\n        boredoms", "        val sentences = S.split(\"[.!?]\"\
    )\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "        val\
    \ words = S.split(\"[.?!]\")\n        var count = 0l\n        for (word <- words)\
    \ {\n            if (word.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val words = S.split(\"[.?!]\")\n        var count = 0\n        for (word\
    \ <- words) {\n            if (word.trim.startsWith(\"I\")) count += 1\n     \
    \   }\n        count", "        var count = 0l\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count", " \
    \       val sentences = S.split(\"[.?!]\")\n        val boredoms = sentences.filter(s\
    \ => s.trim().startsWith(\"I\"))\n        return boredoms.length.toLong", "  \
    \      var boredoms = 0l\n        var i = 0\n        while (i < S.length) {\n\
    \            if (S(i) == 'I') {\n                boredoms += 1\n             \
    \   while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n\
    \            }\n            i += 1\n        }\n        boredoms", "        var\
    \ count = 0\n        var i = 0\n        while (i < S.length) {\n            if\
    \ (S(i) == 'I') {\n                count += 1\n                while (i < S.length\
    \ && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n            }\n      \
    \      i += 1\n        }\n        count", "        val words = S.split(\"[.?!]\"\
    )\n        var boredoms = 0\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "   \
    \     val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence\
    \ <- sentences) {\n            if (sentence.trim.startsWith(\"I\")) count += 1\n\
    \        }\n        count", "        var boredoms = 0\n        var isBored = false\n\
    \        for (c <- S) {\n            if (c == '.' || c == '?' || c == '!') {\n\
    \                isBored = false\n            } else if (c == 'I') {\n       \
    \         isBored = true\n            } else if (isBored && c == ' ') {\n    \
    \            boredoms += 1\n                isBored = false\n            }\n \
    \       }\n        boredoms", "        val words = S.split(\"[.?!]\")\n      \
    \  var count = 0\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.trim.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.startsWith(\"I\")) count += 1\n        }\n        count", "      \
    \  val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence\
    \ <- sentences) {\n            if (sentence.trim().startsWith(\"I\")) count +=\
    \ 1\n        }\n        count", "        val sentences = S.split(\"[.?!]\")\n\
    \        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.trim().startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       var count = 0l\n        var i = 0\n        while (i < S.length) {\n  \
    \          if (S(i) == 'I') {\n                count += 1\n                while\
    \ (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n       \
    \     }\n            i += 1\n        }\n        count", "        val s = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (i <- 0 until s.length) {\n     \
    \       if (s(i).startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       val words = S.split(\"[.?!]\")\n        words.filter(_.startsWith(\"I\"\
    )).length", "        var boredoms = 0l\n        var i = 0\n        while (i <\
    \ S.length) {\n            if (S(i) == 'I') {\n                boredoms += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        boredoms",
  "        val s = S.split(\"[.?!]\")\n        var c = 0l\n        for (i <- 0 until\
    \ s.length) {\n            if (s(i).startsWith(\"I\")) c += 1\n        }\n   \
    \     c", "        val sentences = S.split(\"[.?!]\")\n        var boredoms =\
    \ 0l\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) boredoms += 1\n        }\n        boredoms", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "   \
    \     val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence\
    \ <- sentences) {\n            if (sentence.trim().startsWith(\"I\")) count +=\
    \ 1\n        }\n        count", "        val sentences = S.split(\"[.?!]\")\n\
    \        var boredoms = 0l\n        for (sentence <- sentences) {\n          \
    \  if (sentence.startsWith(\"I\")) boredoms += 1\n        }\n        boredoms",
  "        val words = S.split(\"[.?!]\")\n        var count = 0\n        for (word\
    \ <- words) {\n            if (word.trim().startsWith(\"I\")) count += 1\n   \
    \     }\n        count", "        val sentences = S.split(\"[.?!]\")\n       \
    \ var count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0l\n        for (sentence <- sentences) {\n    \
    \        if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(_.startsWith(\"I\")).size", "        val s\
    \ = S.split(\"[.?!]\")\n        s.filter(x => x.startsWith(\"I\")).length", " \
    \       val words = S.split(\"[.?!]\")\n        words.filter(x => x.split(\" \"\
    )(0) == \"I\").length", "        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"I\"))\
    \ count += 1\n        }\n        count", "        val s = S.split(\"[.?!]\")\n\
    \        var count = 0l\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).startsWith(\"I\")) count += 1\n        }\n        count", "        val\
    \ sentences = S.split(\"[.?!]\")\n        var count = 0\n        for (sentence\
    \ <- sentences) {\n            if (sentence.trim.startsWith(\"I\")) count += 1\n\
    \        }\n        count", "        val sentences = S.split(\"[.?!]\")\n    \
    \    var count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size", "   \
    \     val sentences = S.split(\"[.?!]\")\n        var count = 0l\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        val words = S.split(\"[.?!]\"\
    )\n        var count = 0l\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val words = S.split(\" \"\
    )\n        var count = 0l\n        for (i <- 0 until words.length) {\n       \
    \     if (words(i) == \"I\") {\n                count += 1\n            }\n  \
    \      }\n        return count", "        val sentences = S.split(\"[.?!]\")\n\
    \        var count = 0l\n        for (sentence <- sentences) {\n            if\
    \ (sentence.trim().startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       val words = S.split(\"[.?!]\")\n        var boredoms = 0l\n        for\
    \ (word <- words) {\n            if (word.startsWith(\"I\")) boredoms += 1\n \
    \       }\n        boredoms", "        val sentences = S.split(\"[.?!]\")\n  \
    \      var count = 0l\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        val boredoms = sentences.filter(s\
    \ => s.trim.startsWith(\"I\"))\n        boredoms.length", "        val words =\
    \ S.split(\"[.?!]\")\n        var count = 0\n        for (word <- words) {\n \
    \           if (word.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val s = S.toLowerCase\n        var count = 0\n        var i = 0\n     \
    \   while (i < s.length) {\n            if (s(i) == 'i') {\n                var\
    \ j = i + 1\n                while (j < s.length && s(j) != '.' && s(j) != '?'\
    \ && s(j) != '!') j += 1\n                if (j < s.length && s(j) == '.') {\n\
    \                    count += 1\n                    i = j + 1\n             \
    \   }\n                else i += 1\n            }\n            else i += 1\n \
    \       }\n        count", "        val s = S.split(\"[.?!]\")\n        s.filter(x\
    \ => x.startsWith(\"I\")).length", "        var count = 0\n        for (s <- S.split(\"\
    [.?!]\")) {\n            if (s.trim().startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val words = S.split(\"[.?!]\")\n        words.filter(w\
    \ => w.trim.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.trim().startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       val sentences = S.split(\"[.?!]\")\n        var count = 0l\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        var count = 0\n        var\
    \ i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n    \
    \            count += 1\n                while (i < S.length && S(i) != '.' &&\
    \ S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n    \
    \    }\n        count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        var count = 0\n        var i =\
    \ 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n        \
    \        count += 1\n                while (i < S.length && S(i) != '.' && S(i)\
    \ != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        var count\
    \ = 0\n        for (sentence <- sentences) {\n            if (sentence.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var boredoms = 0l\n        for (sentence <- sentences) {\n \
    \           if (sentence.trim().startsWith(\"I\")) {\n                boredoms\
    \ += 1\n            }\n        }\n        boredoms", "        val sentences =\
    \ S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"I\")).size",
  "        val words = S.split(\"[.?!]\")\n        var count = 0\n        for (word\
    \ <- words) {\n            if (word.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0l\n        for (sentence <- sentences) {\n           \
    \ if (sentence.trim().startsWith(\"I\")) {\n                count += 1\n     \
    \       }\n        }\n        count", "        val words = S.split(\" \")\n  \
    \      var count = 0\n        for (i <- 0 until words.length) {\n            if\
    \ (words(i) == \"I\") {\n                count += 1\n            }\n        }\n\
    \        return count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\")\n\
    \        var count = 0\n        for (s <- sentences) {\n            if (s.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var boredoms = 0\n        for (sentence <- sentences) {\n  \
    \          if (sentence.trim.startsWith(\"I\")) boredoms += 1\n        }\n   \
    \     boredoms", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(x\
    \ => x.trim.startsWith(\"I\")).size", "        val words = S.split(\" \")\n  \
    \      var count = 0\n        for (i <- 0 until words.length) {\n            if\
    \ (words(i) == \"I\") {\n                count += 1\n            }\n        }\n\
    \        return count", "        val sentences = S.split(\"[.?!]\")\n        var\
    \ count = 0\n        for (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        var boredoms = 0l\n    \
    \    var i = 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n\
    \                boredoms += 1\n                while (i < S.length && S(i) !=\
    \ '.' && S(i) != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n\
    \        }\n        boredoms", "        val sentences = S.split(\"[.?!]\")\n \
    \       sentences.filter(s => s.trim.startsWith(\"I\")).size", "        var count\
    \ = 0l\n        for (s <- S.split(\"[.?!]\")) {\n            if (s.trim.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val s = S.split(\"[.?!]\")\n        var c = 0l\n        for (i <- 0 until\
    \ s.length) {\n            if (s(i).startsWith(\"I\")) c += 1\n        }\n   \
    \     c", "        val sentences = S.split(\"[.?!]\")\n        var count = 0l\n\
    \        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val words = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) {\n                count += 1\n            }\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        var count =\
    \ 0l\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var boredoms = 0\n        for (sentence <- sentences) {\n  \
    \          if (sentence.trim.startsWith(\"I\")) boredoms += 1\n        }\n   \
    \     boredoms", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.trim().startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       val words = S.split(\"[.?!]\")\n        words.filter(s => s.startsWith(\"\
    I\")).size", "        val words = S.split(\"[.?!]\")\n        words.filter(_.startsWith(\"\
    I\")).size", "        var count = 0l\n        var i = 0\n        while (i < S.length)\
    \ {\n            if (S(i) == 'I') {\n                count += 1\n            \
    \    while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) != '!') i += 1\n\
    \            }\n            i += 1\n        }\n        count", '        S.split("\\.|\\?|\\!").count(_.startsWith("I"))',
  "        val sentences = S.split(\"[.?!]\")\n        var boredoms = 0l\n       \
    \ for (sentence <- sentences) {\n            if (sentence.startsWith(\"I\")) {\n\
    \                boredoms += 1\n            }\n        }\n        boredoms", " \
    \       val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        var count =\
    \ 0\n        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s => s.trim.startsWith(\"\
    I\")).size", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.startsWith(\"I\")) count += 1\n        }\n        count", "      \
    \  val words = S.split(\" \")\n        var boredoms = 0l\n        for (i <- 0\
    \ until words.length) {\n            if (words(i) == \"I\") {\n              \
    \  boredoms += 1\n            }\n        }\n        boredoms", "        val sentences\
    \ = S.split(\"[.?!]\")\n        val boredoms = sentences.filter(s => s.trim.startsWith(\"\
    I\"))\n        boredoms.length", "        val words = S.split(\"[.?!]\")\n   \
    \     var count = 0l\n        for (word <- words) {\n            if (word.startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0l\n        for (sentence <- sentences) {\n    \
    \        if (sentence.trim().startsWith(\"I\")) count += 1\n        }\n      \
    \  count", "        val sentences = S.split(\"[.?!]\")\n        var count = 0l\n\
    \        for (sentence <- sentences) {\n            if (sentence.trim().startsWith(\"\
    I\")) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) count += 1\n        }\n        count",
  "        val sentences = S.split(\"[.?!]\")\n        var count = 0\n        for\
    \ (sentence <- sentences) {\n            if (sentence.trim.startsWith(\"I\"))\
    \ count += 1\n        }\n        count", "        val sentences = S.split(\"[.?!]\"\
    )\n        var count = 0\n        for (sentence <- sentences) {\n            if\
    \ (sentence.trim.startsWith(\"I\")) count += 1\n        }\n        count", " \
    \       val words = S.split(\"[.?!]\")\n        var count = 0l\n        for (word\
    \ <- words) {\n            if (word.startsWith(\"I\")) count += 1\n        }\n\
    \        count", "        val words = S.split(\"[.!?]\")\n        words.filter(w\
    \ => w.trim.startsWith(\"I\")).size", "        val words = S.split(\"[.?!]\").map(_.trim)\n\
    \        words.filter(_.startsWith(\"I\")).size", "        var count = 0l\n  \
    \      for (s <- S.split(\"[.?!]\")) {\n            if (s.trim.startsWith(\"I\"\
    )) count += 1\n        }\n        count", "        val sentences = S.split(\"\
    [.?!]\")\n        var count = 0\n        for (sentence <- sentences) {\n     \
    \       if (sentence.startsWith(\"I\")) {\n                count += 1\n      \
    \      }\n        }\n        count", "        var count = 0l\n        var i =\
    \ 0\n        while (i < S.length) {\n            if (S(i) == 'I') {\n        \
    \        count += 1\n                while (i < S.length && S(i) != '.' && S(i)\
    \ != '?' && S(i) != '!') i += 1\n            }\n            i += 1\n        }\n\
    \        count", "        val sentences = S.split(\"[.?!]\")\n        sentences.filter(s\
    \ => s.trim.startsWith(\"I\")).size", "        val sentences = S.split(\"[.?!]\"\
    )\n        var boredoms = 0\n        for (sentence <- sentences) {\n         \
    \   if (sentence.trim.startsWith(\"I\")) boredoms += 1\n        }\n        boredoms",
  "        val words = S.split(\"[.?!]\")\n        var boredoms = 0\n        for (word\
    \ <- words) {\n            if (word.startsWith(\"I\")) boredoms += 1\n       \
    \ }\n        boredoms", "        var count = 0l\n        var i = 0\n        while\
    \ (i < S.length) {\n            if (S(i) == 'I') {\n                count += 1\n\
    \                while (i < S.length && S(i) != '.' && S(i) != '?' && S(i) !=\
    \ '!') i += 1\n            }\n            i += 1\n        }\n        count", " \
    \       val words = S.split(\"[.?!]\")\n        var boredoms = 0\n        for\
    \ (word <- words) {\n            if (word.startsWith(\"I\")) {\n             \
    \   boredoms += 1\n            }\n        }\n        boredoms"]
stop_tokens:
- "\n    }\n"
