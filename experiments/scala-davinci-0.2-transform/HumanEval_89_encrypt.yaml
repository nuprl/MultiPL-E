name: HumanEval_89_encrypt
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function encrypt that takes a string as an argument and\n    //\
  \ returns a string encrypted with the alphabet being rotated. \n    // The alphabet\
  \ should be rotated in a manner such that the letters \n    // shift down by two\
  \ multiplied to two places.\n    // For example:\n    // >>> encrypt((\"hi\"))\n\
  \    // (\"lm\")\n    // >>> encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n\
  \    // >>> encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> encrypt((\"et\"))\n \
  \   // (\"ix\")\n    def encrypt(s : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(encrypt((\"hi\")).equals((\"\
  lm\")));\n    assert(encrypt((\"asdfghjkl\")).equals((\"ewhjklnop\")));\n    assert(encrypt((\"\
  gf\")).equals((\"kj\")));\n    assert(encrypt((\"et\")).equals((\"ix\")));\n   \
  \ assert(encrypt((\"faewfawefaewg\")).equals((\"jeiajeaijeiak\")));\n    assert(encrypt((\"\
  hellomyfriend\")).equals((\"lippsqcjvmirh\")));\n    assert(encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  )).equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n    assert(encrypt((\"\
  a\")).equals((\"e\")));\n    }\n\n}\n"
completions: ["        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n        var\
    \ result = \"\"\n        for (i <- 0 until s.length) {\n            val index\
    \ = alphabet.indexOf(s(i))\n            val newIndex = (index + 2 * 2) % alphabet.length\n\
    \            result += alphabet(newIndex)\n        }\n        result", "     \
    \   var result = \"\"\n        for (i <- 0 until s.length) {\n            result\
    \ += ((s(i) + 2 * 2).toChar)\n        }\n        return result", "        var\
    \ result = \"\"\n        for (i <- 0 until s.length) {\n            result +=\
    \ (s(i).toInt + 2 * 2).toChar\n        }\n        result", "        // Write your\
    \ code here\n        return \"\"", "        // Write your code here\n        return\
    \ \"\";", "        var result = \"\"\n        for (c <- s) {\n            result\
    \ += (c + 2).toChar\n        }\n        return result", "        var result =\
    \ \"\"\n        for (i <- 0 until s.length) {\n            result += ((s(i).toInt\
    \ + 2 * 2).toChar)\n        }\n        return result", "        var result = \"\
    \"\n        for (c <- s) {\n            result += ((c - 'a' + 2) % 26 + 'a').toChar\n\
    \        }\n        result", "        var result = \"\"\n        for (i <- 0 until\
    \ s.length) {\n            result += (s(i) + 2 * 2).toChar\n        }\n      \
    \  result", "        var result = \"\"\n        for (c <- s) {\n            result\
    \ += ((c.toInt - 97 + 2 * 2) % 26 + 97).toChar\n        }\n        result", " \
    \       var res = \"\"\n        for (c <- s) {\n            res += ((c + 2 * 2).toChar)\n\
    \        }\n        res", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        var encrypted = \"\"\n        for (i <- 0 until s.length) {\n      \
    \      val index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index\
    \ + 2) % 26)\n        }\n        encrypted", "        var result = \"\"\n    \
    \    for (i <- 0 until s.length) {\n            var c = s(i)\n            if (c\
    \ >= 'a' && c <= 'z') {\n                c = (c - 'a' + 2 * 2) % 26 + 'a'\n  \
    \          }\n            else if (c >= 'A' && c <= 'Z') {\n                c\
    \ = (c - 'A' + 2 * 2) % 26 + 'A'\n            }\n            result += c\n   \
    \     }\n        return result", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        var encrypted = \"\"\n        for (i <- 0 until s.length) {\n      \
    \      val index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index\
    \ + 2 * 2) % alphabet.length)\n        }\n        encrypted", "        var result\
    \ = \"\"\n        for (i <- 0 until s.length) {\n            var c = s(i)\n  \
    \          if (c >= 'a' && c <= 'z') {\n                c = (c - 'a' + 2 * 2)\
    \ % 26 + 'a'\n            }\n            result += c\n        }\n        result",
  "        var result = \"\"\n        for (c <- s) {\n            var newChar = c\
    \ + 2 * 2\n            if (newChar > 'z') {\n                newChar = newChar\
    \ - 26\n            }\n            result += newChar\n        }\n        return\
    \ result", "        var result : String = \"\"\n        for (i <- 0 until s.length)\
    \ {\n            var c : Char = s(i)\n            if (c >= 'a' && c <= 'z') {\n\
    \                var newC : Char = ((c - 'a' + 2) % 26 + 'a').toChar\n       \
    \         result += newC\n            } else if (c >= 'A' && c <= 'Z') {\n   \
    \             var newC : Char = ((c - 'A' + 2) % 26 + 'A').toChar\n          \
    \      result += newC\n            } else {\n                result += c\n   \
    \         }\n        }\n        return result", "        var result = \"\"\n \
    \       for (c <- s) {\n            result += ((c + 2 * 2).toChar)\n        }\n\
    \        return result", "        val alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n        var encrypted = \"\"\n        for (i <- 0 until s.length) {\n      \
    \      val index = alphabet.indexOf(s(i))\n            encrypted += alphabet((index\
    \ + 2) % 26)\n        }\n        encrypted", "        var result = \"\"\n    \
    \    for (i <- 0 until s.length) {\n            val c = s(i)\n            val\
    \ index = c - 'a'\n            val newIndex = (index + 2 * 2) % 26\n         \
    \   val newC = (newIndex + 'a').toChar\n            result += newC\n        }\n\
    \        result"]
stop_tokens:
- "\n    }\n"
