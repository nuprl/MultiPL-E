language: scala
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val x = List(a, b, c)\n        val y = x.sorted\n        if (y(0)\
    \ * y(0) + y(1) * y(1) == y(2) * y(2)) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) +\
    \ sides(1) * sides(1) == sides(2) * sides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ true else false\n        } else if (b > a && b > c) {\n            if (b * b\
    \ == a * a + c * c) true else false\n        } else {\n            if (c * c ==\
    \ a * a + b * b) true else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val max = sides(2)\n\
    \        val min = sides(0)\n        val mid = sides(1)\n        max * max ==\
    \ min * min + mid * mid\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val x = sides(0)\n  \
    \      val y = sides(1)\n        val z = sides(2)\n        if (x + y <= z) return\
    \ false\n        val x2 = x * x\n        val y2 = y * y\n        val z2 = z *\
    \ z\n        if (x2 + y2 == z2) return true\n        return false\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        if (a2 + b2 == c2)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = Array(a, b, c)\n        val sorted = sides.sortWith(_\
    \ < _)\n        val hypotenuse = sorted(2)\n        val cathetus1 = sorted(1)\n\
    \        val cathetus2 = sorted(0)\n        val squareHypotenuse = hypotenuse\
    \ * hypotenuse\n        val squareCathetus1 = cathetus1 * cathetus1\n        val\
    \ squareCathetus2 = cathetus2 * cathetus2\n        return squareHypotenuse ==\
    \ squareCathetus1 + squareCathetus2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val catheti = sides(0) + sides(1)\n        hypotenuse * hypotenuse ==\
    \ catheti * catheti\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnqjmzh8.scala:20)\n\tat Problem.main(tmppnqjmzh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        if (a > b && a > c) {\n            if\
    \ (a*a == b*b + c*c) true else false\n        } else if (b > a && b > c) {\n \
    \           if (b*b == a*a + c*c) true else false\n        } else {\n        \
    \    if (c*c == a*a + b*b) true else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill in the code here\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb73bcy6m.scala:18)\n\tat Problem.main(tmpb73bcy6m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) +\
    \ sides(1) * sides(1) == sides(2) * sides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = Array(a, b, c)\n        val max = sides.max\n     \
    \   val maxIndex = sides.indexOf(max)\n        val otherSides = sides.filter(_\
    \ != max)\n        val otherSidesSum = otherSides.sum\n        max == otherSidesSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7xepkx0.scala:22)\n\tat Problem.main(tmpm7xepkx0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val catheti = sides(0) + sides(1)\n        hypotenuse * hypotenuse ==\
    \ catheti * catheti\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppnqjmzh8.scala:20)\n\tat Problem.main(tmppnqjmzh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the three sides of a triangle\n        // You have to return\
    \ True if the three sides form a right-angled triangle,\n        // False otherwise\n\
    \        if (a > b && a > c) {\n            if (a * a == b * b + c * c) return\
    \ true\n        } else if (b > a && b > c) {\n            if (b * b == a * a +\
    \ c * c) return true\n        } else if (c > a && c > b) {\n            if (c\
    \ * c == a * a + b * b) return true\n        }\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of the triangle\n        // return true if the triangle\
    \ is right-angled, false otherwise\n        val sides = List(a, b, c)\n      \
    \  val maxSide = sides.max\n        val maxSideIndex = sides.indexOf(maxSide)\n\
    \        val otherSides = sides.take(maxSideIndex) ++ sides.drop(maxSideIndex\
    \ + 1)\n        val otherSidesSum = otherSides.sum\n        val maxSideSquare\
    \ = maxSide * maxSide\n        maxSideSquare == otherSidesSum * otherSidesSum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptyk44pwl.scala:26)\n\tat Problem.main(tmptyk44pwl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val x = List(a,\
    \ b, c)\n        val y = x.sorted\n        val z = y(0) * y(0) + y(1) * y(1)\n\
    \        y(2) * y(2) == z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0),\
    \ sides(1), sides(2))\n        a * a + b * b == c * c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm8yqfe7w.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m),\
    \ sides(\e[31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpm8yqfe7w.scala:15:35 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e[31m1\e\
    [0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e\
    [33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpm8yqfe7w.scala:15:45 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e\
    [31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \           Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpm8yqfe7w.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm8yqfe7w.scala:16:10 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        a * a + b * b == c * c\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        if (a > b && a > c) {\n            if (a\
    \ * a == b * b + c * c) true else false\n        } else if (b > a && b > c) {\n\
    \            if (b * b == a * a + c * c) true else false\n        } else {\n \
    \           if (c * c == a * a + b * b) true else false\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794073
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val catheti = sides(0) * sides(0) + sides(1) * sides(1)\n        hypotenuse\
    \ * hypotenuse == catheti\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val x = sides(0)\n  \
    \      val y = sides(1)\n        val z = sides(2)\n        x * x + y * y == z\
    \ * z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` represents the length\
    \ of side `a`\n        // `b` represents the length of side `b`\n        // `c`\
    \ represents the length of side `c`\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c)\n        val maxSide = sides.max\n        val maxSideIndex = sides.indexOf(maxSide)\n\
    \        val otherSides = sides.take(maxSideIndex) ++ sides.drop(maxSideIndex\
    \ + 1)\n        val otherSidesSum = otherSides.sum\n        maxSide * maxSide\
    \ == otherSidesSum * otherSidesSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpebg4kp9t.scala:27)\n\tat Problem.main(tmpebg4kp9t.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val x = List(a, b, c)\n        val y = x.sorted\n        y(0) *\
    \ y(0) + y(1) * y(1) == y(2) * y(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a == 0 || b == 0 || c == 0) return false\n        val max =\
    \ max(a, max(b, c))\n        val min = min(a, min(b, c))\n        val mid = a\
    \ + b + c - max - min\n        if (max * max == mid * mid + min * min) return\
    \ true\n        return false\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpysjjr6me.scala:15:18 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m        \
    \          Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpysjjr6me.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m \
    \                        Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpysjjr6me.scala:16:18\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmin\e[0m = min(a, min(b, c))\n\e[31m\e[31m   |\e[0m                  ^\e\
    [0m\n\e[31m   |\e[0m                  Recursive \e[33mvalue\e[0m \e[35mmin\e[0m\
    \ needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpysjjr6me.scala:16:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m\
    \ \e[36mmin\e[0m = min(a, min(b, c))\n\e[31m\e[31m   |\e[0m                  \
    \       ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mmin\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1659794077
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        if (x + y < z) return false\n        if (x * x\
    \ + y * y == z * z) return true\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794083
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = Array(a,\
    \ b, c)\n        val sortedSides = sides.sorted\n        val hyp = sortedSides(2)\n\
    \        val cat1 = sortedSides(0)\n        val cat2 = sortedSides(1)\n      \
    \  val hyp2 = hyp * hyp\n        val cat12 = cat1 * cat1\n        val cat22 =\
    \ cat2 * cat2\n        hyp2 == cat12 + cat22\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = Array(a, b, c)\n        sides.sortWith(_ > _)\n   \
    \     val (a, b, c) = (sides(0), sides(1), sides(2))\n        a * a == b * b +\
    \ c * c\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpjyy5b7w7.scala:16:25 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m),\
    \ sides(\e[31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpjyy5b7w7.scala:16:35 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e[31m1\e\
    [0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e\
    [33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpjyy5b7w7.scala:16:45 ---------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e\
    [31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \           Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E051] Reference Error: /tmp/tmpjyy5b7w7.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = Array(a, b,\
    \ c)\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35mapply\e[0m\
    \ in \e[33mobject\e[0m \e[35mArray\e[0m with types\n\e[31m   |\e[0m (x: Unit,\
    \ xs: Unit*): Array[Unit]\n\e[31m   |\e[0m (x: Double, xs: Double*): Array[Double]\n\
    \e[31m   |\e[0m (x: Float, xs: Float*): Array[Float]\n\e[31m   |\e[0m (x: Long,\
    \ xs: Long*): Array[Long]\n\e[31m   |\e[0m (x: Int, xs: Int*): Array[Int]\n\e\
    [31m   |\e[0m (x: Char, xs: Char*): Array[Char]\n\e[31m   |\e[0m (x: Short, xs:\
    \ Short*): Array[Short]\n\e[31m   "
  stdout: ''
  timestamp: 1659794084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` `b` `c` are the lengths\
    \ of the sides of the triangle\n        if (a > b && a > c) {\n            return\
    \ (a * a == b * b + c * c)\n        } else if (b > a && b > c) {\n           \
    \ return (b * b == a * a + c * c)\n        } else {\n            return (c * c\
    \ == a * a + b * b)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794083
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        val sides = List(a, b, c)\n        val maxSide\
    \ = sides.max\n        val otherSides = sides.filter(_ != maxSide)\n        val\
    \ sumOfOtherSides = otherSides.sum\n        maxSide * maxSide == otherSides(0)\
    \ * otherSides(0) + otherSides(1) * otherSides(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.rightAngleTriangle(tmph4s8ys2w.scala:20)\n\tat Problem$.main(tmph4s8ys2w.scala:26)\n\
    \tat Problem.main(tmph4s8ys2w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        return (a * a + b * b == c * c)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_i8cvghe.scala:19)\n\tat Problem.main(tmp_i8cvghe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794083
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        return a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ adjacent to the right angle\n        // `c` is the length of the hypotenuse\n\
    \        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 - `c`^2 = 0\n    \
    \    val a2 = a * a\n        val b2 = b * b\n        val c2 = c * c\n        if\
    \ (a2 + b2 - c2 == 0) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr26cqs8j.scala:28)\n\tat Problem.main(tmpr26cqs8j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l = List(a, b, c)\n        val s = l.sorted\n        val (x,\
    \ y, z) = (s(0), s(1), s(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // You can add another function\
    \ as well, if required\n        if (a > b && a > c) {\n            if (a * a ==\
    \ b * b + c * c) true else false\n        } else if (b > a && b > c) {\n     \
    \       if (b * b == a * a + c * c) true else false\n        } else {\n      \
    \      if (c * c == a * a + b * b) true else false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return True if the three\
    \ sides form a right-angled triangle, False otherwise.\n        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxnveldyk.scala:18)\n\tat Problem.main(tmpxnveldyk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` `b` `c` are the side\
    \ lengths of the triangle\n        val list = List(a, b, c)\n        val max =\
    \ list.max\n        val sum = list.sum - max\n        max * max == sum * sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpghbf48u0.scala:22)\n\tat Problem.main(tmpghbf48u0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus = sides(1)\n        val base = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + base * base\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0),\
    \ sides(1), sides(2))\n        a * a + b * b == c * c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm8yqfe7w.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m),\
    \ sides(\e[31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpm8yqfe7w.scala:15:35 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e[31m1\e\
    [0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e\
    [33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpm8yqfe7w.scala:15:45 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e\
    [31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \           Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpm8yqfe7w.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm8yqfe7w.scala:16:10 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        a * a + b * b == c * c\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        val sides = List(a, b, c)\n\
    \        val max = sides.max\n        val maxIndex = sides.indexOf(max)\n    \
    \    val otherSides = sides.filter(_ != max)\n        val sumOfSquares = otherSides.map(x\
    \ => x * x).sum\n        val maxSquare = max * max\n        sumOfSquares == maxSquare\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sorted = List(a, b, c).sorted\n        val (x, y, z) = (sorted(0),\
    \ sorted(1), sorted(2))\n        if (x + y <= z) return false\n        if (x *\
    \ x + y * y == z * z) return true\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the sides of a triangle\n        // You have to return True if\
    \ the three sides form a right-angled triangle,\n        // False otherwise\n\
    \        // You can access the value of a variable by writing the variable name\n\
    \        // For example, to access the value of `a`, you can write `a`\n     \
    \   // You can perform arithmetic operations on numbers like this:\n        //\
    \ >>> 1 + 1\n        // (2)\n        // >>> 2 * 3\n        // (6)\n        //\
    \ >>> 5 / 2\n        // (2)\n        // >>> 5.0 / 2\n        // (2.5)\n      \
    \  // >>> 5 / 2.0\n        // (2.5)\n        // >>> 5.0 / 2.0\n        // (2.5)\n\
    \        // You can also perform arithmetic operations on variables like this:\n\
    \        // >>> a = 1\n        // (1)\n        // >>> b = 2\n        // (2)\n\
    \        // >>> a + b\n        // (3)\n        // >>> a * b\n        // (2)\n\
    \        // >>> a / b\n        // (0)\n        // >>> a.toFloat / b\n        //\
    \ (0.5)\n        // >>> a.toFloat / b.toFloat\n        // (0.5)\n        // You\
    \ can compare two numbers using the following operators:\n        // >>> 1 ==\
    \ 1\n        // (true)\n        // >>> 2 == 1\n        // (false)\n        //\
    \ >>> 1 != 1\n        // (false)\n        // >>> 2 != 1\n        // (true)\n \
    \       // >>> 1 > 1\n        // (false)\n        // >>> 1 < 1\n        // (false)\n\
    \        // >>> 1 >= 1\n        // (true)\n        // >>> 1 <= 1\n        // (true)\n\
    \        // You can compare two variables using the following operators:\n   \
    \     // >>> a = 1\n        // (1)\n        // >>> b = 2\n        // (2)\n   \
    \     // >>> a == b\n        // (false)\n        // >>> a != b\n        // (true)\n\
    \        // >>> a > b\n        // (false)\n        // >>>\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4_fnje64.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Fill up this function body\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// `a`, `b` and `c` are the lengths of the sides of\
    \ a triangle\e[0m\n\e[31m16 |\e[0m        \e[34m// You have to return True if\
    \ the three sides form a right-angled triangle,\e[0m\n\e[31m17 |\e[0m        \e\
    [34m// False otherwise\e[0m\n\e[31m18 |\e[0m        \e[34m// You can access the\
    \ value of a variable by writing the variable name\e[0m\n\e[31m19 |\e[0m     \
    \   \e[34m// For example, to access the value of `a`, you can write `a`\e[0m\n\
    \e[31m20 |\e[0m        \e[34m// You can perform arithmetic operations on numbers\
    \ like this:\e[0m\n\e[31m21 |\e[0m        \e[34m// >>> 1 + 1\e[0m\n\e[31m22 |\e\
    [0m        \e[34m// (2)\e[0m\n\e[31m23 |\e[0m        \e[34m// >>> 2 * 3\e[0m\n\
    \e[31m24 |\e[0m        \e[34m// (6)\e[0m\n\e[31m25 |\e[0m        \e[34m// >>>\
    \ 5 / 2\e[0m\n\e[31m26 |\e[0m        \e[34m// (2)\e[0m\n\e[31m27 |\e[0m      \
    \  \e[34m// >>> 5.0 / 2\e[0m\n\e[31m28 |\e[0m        \e[34m// (2.5)\e[0m\n\e[31m29\
    \ |\e[0m        \e[34m// >>> 5 / 2.0\e[0m\n\e[31m30 |\e[0m        \e[34m// (2.5)\e\
    [0m\n\e[31m31 |\e[0m        \e[34m// >>> 5.0 / 2.0\e[0m\n\e[31m32 |\e[0m     \
    \   \e[34m// (2.5)\e[0m\n\e[31m33 |\e[0m        \e[34m// You can also perform\
    \ arithmetic operations on variables like this:\e[0m\n\e[31m34 |\e[0m        \e\
    [34m// >>> a = 1\e[0m\n\e[31m35 |\e[0m        \e[34m// (1)\e[0m\n\e[31m36 |\e\
    [0m        \e[34m// >>> b = 2\e[0m\n\e[31m37 |\e[0m        \e[34m// (2)\e[0m\n\
    \e[31m38 |\e[0m        \e[34m// >>> a + b\e[0m\n\e[31m39 |\e[0m        \e[34m//\
    \ (3)\e[0m\n\e[31m40 |\e[0m        \e[34m// >>> a * b\e[0m\n\e[31m41 |\e[0m  \
    \      \e[34m// (2)\e[0m\n\e[31m42 |\e[0m "
  stdout: ''
  timestamp: 1659794084
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side of the triangle opposite to the right angle\n        // `b` is the\
    \ length of the side of the triangle opposite to the right angle\n        // `c`\
    \ is the length of the side of the triangle opposite to the right angle\n    \
    \    // Return True if the three sides form a right-angled triangle, False otherwise\n\
    \        val sides = List(a, b, c).sorted\n        val a = sides(0)\n        val\
    \ b = sides(1)\n        val c = sides(2)\n        if (a * a + b * b == c * c)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmfi79ysu.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = sides(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmfi79ysu.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = sides(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmfi79ysu.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = sides(\e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpmfi79ysu.scala:19:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659794082
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l = List(a, b, c)\n        val max = l.max\n        val min\
    \ = l.min\n        val mid = l.filter(x => x != max && x != min).head\n      \
    \  val res = pow(max, 2) == pow(min, 2) + pow(mid, 2)\n        return res\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.rightAngleTriangle(tmpp_etftkk.scala:17)\n\
    \tat Problem$.main(tmpp_etftkk.scala:25)\n\tat Problem.main(tmpp_etftkk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        if (a2 + b2 == c2) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` `b` `c` are the sides\
    \ of the triangle\n        val sorted = List(a, b, c).sorted\n        sorted(0)\
    \ * sorted(0) + sorted(1) * sorted(1) == sorted(2) * sorted(2)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Write your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2vb6chbn.scala:18)\n\tat Problem.main(tmp2vb6chbn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794087
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) +\
    \ sides(1) * sides(1) == sides(2) * sides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        val sides = List(a, b, c).sorted\n        val (a,\
    \ b, c) = (sides(0), sides(1), sides(2))\n        a * a + b * b == c * c\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp5aoijcwf.scala:19:25 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m),\
    \ sides(\e[31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp5aoijcwf.scala:19:35 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e[31m1\e\
    [0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e\
    [33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp5aoijcwf.scala:19:45 ---------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e\
    [31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \           Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmp5aoijcwf.scala:18:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5aoijcwf.scala:20:10 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        a * a + b * b == c * c\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659794092
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = Array(a, b, c)\n        val maxSide = sides.max\n \
    \       val maxSideIndex = sides.indexOf(maxSide)\n        val otherSides = sides.filter(_\
    \ != maxSide)\n        val otherSidesSum = otherSides.sum\n        otherSidesSum\
    \ * otherSidesSum == maxSide * maxSide\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahkr3hw1.scala:22)\n\tat Problem.main(tmpahkr3hw1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxnveldyk.scala:18)\n\tat Problem.main(tmpxnveldyk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0),\
    \ sides(1), sides(2))\n        a * a + b * b == c * c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm8yqfe7w.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m),\
    \ sides(\e[31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpm8yqfe7w.scala:15:35 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e[31m1\e\
    [0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e\
    [33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpm8yqfe7w.scala:15:45 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e\
    [31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \           Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpm8yqfe7w.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm8yqfe7w.scala:16:10 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        a * a + b * b == c * c\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        val sides = List(a, b, c).sorted\n      \
    \  sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return True if the three\
    \ sides form a right-angled triangle, False otherwise.\n        val sides = List(a,\
    \ b, c)\n        val maxSide = sides.max\n        val maxSideIndex = sides.indexOf(maxSide)\n\
    \        val otherSides = sides.take(maxSideIndex) ++ sides.drop(maxSideIndex\
    \ + 1)\n        val otherSidesSum = otherSides.sum\n        maxSide * maxSide\
    \ == otherSidesSum * otherSidesSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsc6cb7a.scala:25)\n\tat Problem.main(tmpbsc6cb7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l = List(a, b, c)\n        val max = l.max\n        val min\
    \ = l.min\n        val mid = l.filter(x => x != max && x != min).head\n      \
    \  if (max * max == min * min + mid * mid) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.rightAngleTriangle(tmppvuogqn0.scala:17)\n\
    \tat Problem$.main(tmppvuogqn0.scala:24)\n\tat Problem.main(tmppvuogqn0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0),\
    \ sides(1), sides(2))\n        a * a + b * b == c * c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm8yqfe7w.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m),\
    \ sides(\e[31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpm8yqfe7w.scala:15:35 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e[31m1\e\
    [0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e\
    [33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpm8yqfe7w.scala:15:45 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e\
    [31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \           Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpm8yqfe7w.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm8yqfe7w.scala:16:10 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        a * a + b * b == c * c\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val max = max(a, max(b, c))\n        val sum = a + b + c - max\n\
    \        max * max == sum * sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgvieuwxj.scala:14:18 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m        \
    \          Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgvieuwxj.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m \
    \                        Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // Return True if the three\
    \ sides form a right-angled triangle, False otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        // You can use `pow` function to compute the power\
    \ of a number.\n        // You can use `sqrt` function to compute the square root\
    \ of a number.\n        if (a == 0 || b == 0 || c == 0) return false\n       \
    \ val sides = Array(a, b, c).sorted\n        val a2 = pow(sides(0), 2)\n     \
    \   val b2 = pow(sides(1), 2)\n        val c2 = pow(sides(2), 2)\n        if (a2\
    \ + b2 == c2) true else false\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus = sides(1)\n        val base = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + base * base\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val max = sides(2)\n\
    \        val sum = sides.sum\n        val sumWithoutMax = sum - max\n        max\
    \ * max == sumWithoutMax * sumWithoutMax\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv7x1k7e9.scala:21)\n\tat Problem.main(tmpv7x1k7e9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        if (a > b && a > c) {\n        \
    \    if (a * a == b * b + c * c) true else false\n        } else if (b > a &&\
    \ b > c) {\n            if (b * b == a * a + c * c) true else false\n        }\
    \ else {\n            if (c * c == a * a + b * b) true else false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a <= 0 || b <= 0 || c <= 0) return false\n        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val x = sides(0)\n  \
    \      val y = sides(1)\n        val z = sides(2)\n        x * x + y * y == z\
    \ * z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus = sides(1)\n        val base = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + base * base\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the three sides of a triangle\n        // You have to return\
    \ True if the three sides form a right-angled triangle,\n        // False otherwise\n\
    \        // You can access the value of a variable by writing the variable name\n\
    \        // For example, to access the value of `a`, you can write `a`\n     \
    \   // You can perform mathematical operations on variables by using the\n   \
    \     // mathematical operators\n        // For example, to add `a` and `b`, you\
    \ can write `a + b`\n        // You can compare two values by using the comparison\
    \ operators\n        // For example, to check if `a` is greater than `b`, you\
    \ can write `a > b`\n        // You can check if two values are equal by using\
    \ the equality operator\n        // For example, to check if `a` is equal to `b`,\
    \ you can write `a == b`\n        // You can check if two values are not equal\
    \ by using the inequality operator\n        // For example, to check if `a` is\
    \ not equal to `b`, you can write `a != b`\n        // You can combine two or\
    \ more conditions by using the logical operators\n        // For example, to check\
    \ if `a` is greater than `b` and `b` is greater than `c`,\n        // you can\
    \ write `a > b && b > c`\n        // You can negate a condition by using the negation\
    \ operator\n        // For example, to check if `a` is not greater than `b`, you\
    \ can write `!(a > b)`\n        // You can use parentheses to group conditions\n\
    \        // For example, to check if `a` is greater than `b` or `b` is greater\
    \ than `c`,\n        // you can write `(a > b) || (b > c)`\n        // You can\
    \ use the if-else statement to execute different code depending on\n        //\
    \ the result of a condition\n        // For example, to check if `a` is greater\
    \ than `b`, you can write\n        // if (a > b) {\n        //     // Code to\
    \ execute if `a` is greater than `b`\n        // } else {\n        //     // Code\
    \ to execute if `a` is not greater than\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpotoa2lbt.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Fill up this function body\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// `a`, `b` and `c` are the lengths of the three sides\
    \ of a triangle\e[0m\n\e[31m16 |\e[0m        \e[34m// You have to return True\
    \ if the three sides form a right-angled triangle,\e[0m\n\e[31m17 |\e[0m     \
    \   \e[34m// False otherwise\e[0m\n\e[31m18 |\e[0m        \e[34m// You can access\
    \ the value of a variable by writing the variable name\e[0m\n\e[31m19 |\e[0m \
    \       \e[34m// For example, to access the value of `a`, you can write `a`\e\
    [0m\n\e[31m20 |\e[0m        \e[34m// You can perform mathematical operations on\
    \ variables by using the\e[0m\n\e[31m21 |\e[0m        \e[34m// mathematical operators\e\
    [0m\n\e[31m22 |\e[0m        \e[34m// For example, to add `a` and `b`, you can\
    \ write `a + b`\e[0m\n\e[31m23 |\e[0m        \e[34m// You can compare two values\
    \ by using the comparison operators\e[0m\n\e[31m24 |\e[0m        \e[34m// For\
    \ example, to check if `a` is greater than `b`, you can write `a > b`\e[0m\n\e\
    [31m25 |\e[0m        \e[34m// You can check if two values are equal by using the\
    \ equality operator\e[0m\n\e[31m26 |\e[0m        \e[34m// For example, to check\
    \ if `a` is equal to `b`, you can write `a == b`\e[0m\n\e[31m27 |\e[0m       \
    \ \e[34m// You can check if two values are not equal by using the inequality operator\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// For example, to check if `a` is not equal\
    \ to `b`, you can write `a != b`\e[0m\n\e[31m29 |\e[0m        \e[34m// You can\
    \ combine two or more conditions by using the logical operators\e[0m\n\e[31m30\
    \ |\e[0m        \e[34m// For example, to check i"
  stdout: ''
  timestamp: 1659794094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        // return true if the triangle is\
    \ right-angled, false otherwise\n        val list = List(a, b, c)\n        val\
    \ max = list.max\n        val min = list.min\n        val mid = list.filter(x\
    \ => x != max && x != min).head\n        if (max * max == min * min + mid * mid)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.rightAngleTriangle(tmpa0lj448_.scala:20)\n\
    \tat Problem$.main(tmpa0lj448_.scala:27)\n\tat Problem.main(tmpa0lj448_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return True if the three\
    \ sides form a right-angled triangle, False otherwise.\n        val sides = List(a,\
    \ b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2)\
    \ * sides(2)\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return True if the three\
    \ sides form a right-angled triangle, False otherwise.\n        val sides = List(a,\
    \ b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus = sides(1)\n\
    \        val base = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus\
    \ + base * base\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus = sides(1)\n        val base = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + base * base\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = Array(a, b, c)\n        val max = sides.max\n     \
    \   val index = sides.indexOf(max)\n        val otherSides = sides.filter(_ !=\
    \ max)\n        val sum = otherSides.sum\n        if (sum < max) return false\n\
    \        val diff = sum - max\n        if (diff == max) return true\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpakuzs3zd.scala:25)\n\tat Problem.main(tmpakuzs3zd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = Array(a, b, c)\n        val sorted = sides.sortWith(_\
    \ > _)\n        val hypotenuse = sorted(0)\n        val cathetus1 = sorted(1)\n\
    \        val cathetus2 = sorted(2)\n        val rightAngle = hypotenuse * hypotenuse\
    \ == cathetus1 * cathetus1 + cathetus2 * cathetus2\n        rightAngle\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l = List(a, b, c)\n        val max = l.max\n        val min\
    \ = l.min\n        val mid = l.filter(x => x != max && x != min).head\n      \
    \  if (max * max == mid * mid + min * min) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.rightAngleTriangle(tmphatlkqp2.scala:17)\n\
    \tat Problem$.main(tmphatlkqp2.scala:24)\n\tat Problem.main(tmphatlkqp2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) +\
    \ sides(1) * sides(1) == sides(2) * sides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0),\
    \ sides(1), sides(2))\n        a * a + b * b == c * c\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpm8yqfe7w.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m),\
    \ sides(\e[31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpm8yqfe7w.scala:15:35 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e[31m1\e\
    [0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e\
    [33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpm8yqfe7w.scala:15:45 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e\
    [31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \           Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpm8yqfe7w.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm8yqfe7w.scala:16:10 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        a * a + b * b == c * c\n\e[31m\e[31m   |\e"
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val catheti = sides(0) * sides(0) + sides(1) * sides(1)\n        hypotenuse\
    \ * hypotenuse == catheti\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        return a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the sides of a triangle\n        val sides = List(a, b, c)\n\
    \        val maxSide = sides.max\n        val otherSides = sides.filter(_ != maxSide)\n\
    \        val sumOfOtherSides = otherSides.sum\n        maxSide * maxSide == otherSides(0)\
    \ * otherSides(0) + otherSides(1) * otherSides(1)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.rightAngleTriangle(tmpub5f8ye9.scala:20)\n\tat Problem$.main(tmpub5f8ye9.scala:26)\n\
    \tat Problem.main(tmpub5f8ye9.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // Return True if the three\
    \ sides form a right-angled triangle, False otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val c2 = sides(2)\n        val c1 = sides(1)\n       \
    \ val c0 = sides(0)\n        c2 * c2 == c1 * c1 + c0 * c0\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = Array(a, b, c)\n        val sorted = sides.sortWith(_\
    \ < _)\n        val (x, y, z) = (sorted(0), sorted(1), sorted(2))\n        if\
    \ (x + y <= z) return false\n        val (x2, y2, z2) = (x * x, y * y, z * z)\n\
    \        if (x2 + y2 == z2) return true\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794096
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val x = sides(0)\n  \
    \      val y = sides(1)\n        val z = sides(2)\n        if (x * x + y * y ==\
    \ z * z) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794097
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        if (a == 0 || b == 0 || c == 0) return false\n    \
    \    val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        if (a2 + b2 == c2) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794101
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = Array(a,\
    \ b, c)\n        val max = sides.max\n        val sum = sides.sum - max\n    \
    \    max * max == sum * sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsqz5tv6e.scala:23)\n\tat Problem.main(tmpsqz5tv6e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794103
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794095
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a = sides(0)\n  \
    \      val b = sides(1)\n        val c = sides(2)\n        val result = pow(a,\
    \ 2) + pow(b, 2) == pow(c, 2)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp27lsdx90.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = sides(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp27lsdx90.scala:16:16 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = sides(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp27lsdx90.scala:17:16 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = sides(\e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp27lsdx90.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mBigDecimal\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659794100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // Return true if the three\
    \ sides form a right-angled triangle, False otherwise\n        val x = a * a\n\
    \        val y = b * b\n        val z = c * c\n        if (x + y == z || x + z\
    \ == y || y + z == x) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794103
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        return a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val (x, y, z) = (a, b, c)\n        val (x2, y2, z2) = (x * x, y\
    \ * y, z * z)\n        if (x2 + y2 == z2 || x2 + z2 == y2 || y2 + z2 == x2) true\
    \ else false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794102
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // Return True if the three sides form a right-angled\
    \ triangle, False otherwise.\n        val sides = List(a, b, c).sorted\n     \
    \   val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z\
    \ * z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794104
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val max = max(a, max(b, c))\n        val sum = a + b + c - max\n\
    \        max * max == sum * sum\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgvieuwxj.scala:14:18 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m        \
    \          Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgvieuwxj.scala:14:25 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmax\e[0m = max(a, max(b,\
    \ c))\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m \
    \                        Recursive \e[33mvalue\e[0m \e[35mmax\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659794089
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` `b` `c` are the lengths\
    \ of the three sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, False otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val x = List(a, b, c)\n        val y = x.sorted\n        val z\
    \ = y(0) * y(0) + y(1) * y(1)\n        z == y(2) * y(2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        if (a > b && a > c) {\n            return\
    \ (a * a == b * b + c * c)\n        } else if (b > a && b > c) {\n           \
    \ return (b * b == a * a + c * c)\n        } else {\n            return (c * c\
    \ == a * a + b * b)\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) +\
    \ sides(1) * sides(1) == sides(2) * sides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the three sides of a triangle\n        // You have to return\
    \ True if the three sides form a right-angled triangle,\n        // False otherwise\n\
    \        // You can use the `pow` function from the math library\n        // Example:\n\
    \        // >>> pow(2, 2)\n        // (4)\n        // >>> pow(3, 2)\n        //\
    \ (9)\n        // >>> pow(4, 2)\n        // (16)\n        // >>> pow(5, 2)\n \
    \       // (25)\n        // >>> pow(6, 2)\n        // (36)\n        // >>> pow(7,\
    \ 2)\n        // (49)\n        // >>> pow(8, 2)\n        // (64)\n        // >>>\
    \ pow(9, 2)\n        // (81)\n        // >>> pow(10, 2)\n        // (100)\n  \
    \      // >>> pow(11, 2)\n        // (121)\n        // >>> pow(12, 2)\n      \
    \  // (144)\n        // >>> pow(13, 2)\n        // (169)\n        // >>> pow(14,\
    \ 2)\n        // (196)\n        // >>> pow(15, 2)\n        // (225)\n        //\
    \ >>> pow(16, 2)\n        // (256)\n        // >>> pow(17, 2)\n        // (289)\n\
    \        // >>> pow(18, 2)\n        // (324)\n        // >>> pow(19, 2)\n    \
    \    // (361)\n        // >>> pow(20, 2)\n        // (400)\n        // >>> pow(21,\
    \ 2)\n        // (441)\n        // >>> pow(22, 2)\n        // (484)\n        //\
    \ >>> pow(23, 2)\n        // (529)\n        // >>> pow(24, 2)\n        // (576)\n\
    \        // >>> pow(25, 2)\n        // (625)\n        // >>> pow(26, 2)\n    \
    \    // (676)\n        // >>> pow(27, 2)\n        // (729)\n        // >>> pow(28,\
    \ 2)\n        // (784)\n        // >>>\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvunw_e3j.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m    \e[33mdef\e[0m \e[36mrightAngleTriangle\e\
    [0m(\e[36ma\e[0m : \e[35mLong\e[0m, \e[36mb\e[0m : \e[35mLong\e[0m, \e[36mc\e\
    [0m : \e[35mLong\e[0m) : \e[35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                                       Found:    Unit\n\
    \e[31m   |\e[0m                                                       Required:\
    \ Boolean\n\e[31m14 |\e[0m        \e[34m// Fill up this function body\e[0m\n\e\
    [31m15 |\e[0m        \e[34m// `a`, `b` and `c` are the lengths of the three sides\
    \ of a triangle\e[0m\n\e[31m16 |\e[0m        \e[34m// You have to return True\
    \ if the three sides form a right-angled triangle,\e[0m\n\e[31m17 |\e[0m     \
    \   \e[34m// False otherwise\e[0m\n\e[31m18 |\e[0m        \e[34m// You can use\
    \ the `pow` function from the math library\e[0m\n\e[31m19 |\e[0m        \e[34m//\
    \ Example:\e[0m\n\e[31m20 |\e[0m        \e[34m// >>> pow(2, 2)\e[0m\n\e[31m21\
    \ |\e[0m        \e[34m// (4)\e[0m\n\e[31m22 |\e[0m        \e[34m// >>> pow(3,\
    \ 2)\e[0m\n\e[31m23 |\e[0m        \e[34m// (9)\e[0m\n\e[31m24 |\e[0m        \e\
    [34m// >>> pow(4, 2)\e[0m\n\e[31m25 |\e[0m        \e[34m// (16)\e[0m\n\e[31m26\
    \ |\e[0m        \e[34m// >>> pow(5, 2)\e[0m\n\e[31m27 |\e[0m        \e[34m// (25)\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// >>> pow(6, 2)\e[0m\n\e[31m29 |\e[0m     \
    \   \e[34m// (36)\e[0m\n\e[31m30 |\e[0m        \e[34m// >>> pow(7, 2)\e[0m\n\e\
    [31m31 |\e[0m        \e[34m// (49)\e[0m\n\e[31m32 |\e[0m        \e[34m// >>> pow(8,\
    \ 2)\e[0m\n\e[31m33 |\e[0m        \e[34m// (64)\e[0m\n\e[31m34 |\e[0m        \e\
    [34m// >>> pow(9, 2)\e[0m\n\e[31m35 |\e[0m        \e[34m// (81)\e[0m\n\e[31m36\
    \ |\e[0m        \e[34m// >>> pow(10, 2)\e[0m\n\e[31m37 |\e[0m        \e[34m//\
    \ (100)\e[0m\n\e[31m38 |\e[0m        \e[34m// >>> pow(11, 2)\e[0m\n\e[31m39 |\e\
    [0m        \e[34m// (121)\e[0m\n\e[31m40 |\e[0m        \e[34m// >>> pow(12, 2)\e\
    [0m\n\e[31m41 |\e[0m        \e[34m// (144)\e[0m\n\e[31m42 |\e[0m        \e[34m//\
    \ >>> pow(13, 2)\e[0m\n\e[31m43 |\e[0m        \e[34m// (169)\e[0m\n\e[31m44 |\e\
    [0m        \e[34m// >>> pow(14, 2)\e[0m\n\e[31m4"
  stdout: ''
  timestamp: 1659794104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = Array(a, b, c)\n        sides.sortWith(_ < _)\n   \
    \     val (x, y, z) = (sides(0), sides(1), sides(2))\n        if (x + y <= z)\
    \ return false\n        if (x * x + y * y == z * z) return true\n        return\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7xb4z1jj.scala:24)\n\tat Problem.main(tmp7xb4z1jj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = Array(a, b, c)\n        val maxSide = sides.max\n \
    \       val maxSideIndex = sides.indexOf(maxSide)\n        val otherSides = sides.filter(_\
    \ != maxSide)\n        val otherSidesSum = otherSides.sum\n        otherSidesSum\
    \ * otherSidesSum == maxSide * maxSide\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpahkr3hw1.scala:22)\n\tat Problem.main(tmpahkr3hw1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794093
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) +\
    \ sides(1) * sides(1) == sides(2) * sides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        if (a2 + b2 == c2) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        // Return True if the three\
    \ sides form a right-angled triangle, False otherwise.\n        val sides = List(a,\
    \ b, c)\n        val maxSide = sides.max\n        val maxSideIndex = sides.indexOf(maxSide)\n\
    \        val otherSides = sides.take(maxSideIndex) ++ sides.drop(maxSideIndex\
    \ + 1)\n        val otherSidesSum = otherSides.sum\n        maxSide * maxSide\
    \ == otherSidesSum * otherSidesSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbsc6cb7a.scala:25)\n\tat Problem.main(tmpbsc6cb7a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794094
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l = List(a, b, c)\n        l.sortWith(_ > _) match {\n    \
    \        case List(x, y, z) => x * x == y * y + z * z\n            case _ => false\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val x = sides(0)\n  \
    \      val y = sides(1)\n        val z = sides(2)\n        if (x + y <= z) return\
    \ false\n        if (x * x + y * y == z * z) return true\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        // return true if the triangle is\
    \ right-angled, false otherwise\n        val sides = List(a, b, c).sorted\n  \
    \      val hypotenuse = sides(2)\n        val catheti = sides(0) * sides(1)\n\
    \        hypotenuse * hypotenuse == catheti\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2zrfuztt.scala:23)\n\tat Problem.main(tmp2zrfuztt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code goes here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwv23dkkl.scala:18)\n\tat Problem.main(tmpwv23dkkl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        if (a == 0 || b\
    \ == 0 || c == 0) return false\n        val sides = List(a, b, c).sorted\n   \
    \     val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n   \
    \     val c2 = sides(2) * sides(2)\n        if (a2 + b2 == c2) return true\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val x = a * a\n        val y = b * b\n        val z = c * c\n \
    \       if (x + y == z || x + z == y || y + z == x) true else false\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = Array(a, b, c)\n        val sortedSides = sides.sortWith(_\
    \ < _)\n        val hypotenuse = sortedSides(2)\n        val cathetus1 = sortedSides(1)\n\
    \        val cathetus2 = sortedSides(0)\n        hypotenuse * hypotenuse == cathetus1\
    \ * cathetus1 + cathetus2 * cathetus2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794107
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        return a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        return a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        if (a > b && a > c) {\n            if (a * a ==\
    \ b * b + c * c) true else false\n        } else if (b > a && b > c) {\n     \
    \       if (b * b == a * a + c * c) true else false\n        } else {\n      \
    \      if (c * c == a * a + b * b) true else false\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle.\n        // `b` is the length of the side\
    \ opposite to the right angle.\n        // `c` is the length of the side opposite\
    \ to the right angle.\n        val sides = List(a, b, c)\n        val hypotenuse\
    \ = sides.max\n        val catheti = sides.filter(_ != hypotenuse)\n        val\
    \ cathetiSum = catheti.sum\n        hypotenuse * hypotenuse == catheti(0) * catheti(0)\
    \ + catheti(1) * catheti(1)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.rightAngleTriangle(tmpq2c8u9v1.scala:22)\n\tat Problem$.main(tmpq2c8u9v1.scala:28)\n\
    \tat Problem.main(tmpq2c8u9v1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        val sides = List(a, b, c).sorted\n        val a\
    \ = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n        a *\
    \ a + b * b == c * c\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnt89h7zj.scala:19:16 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = sides(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnt89h7zj.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = sides(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmpnt89h7zj.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = sides(\e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmpnt89h7zj.scala:18:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val hyp = sides(2)\n        val cat1 = sides(0)\n    \
    \    val cat2 = sides(1)\n        hyp * hyp == cat1 * cat1 + cat2 * cat2\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794109
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxnveldyk.scala:18)\n\tat Problem.main(tmpxnveldyk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the three sides of a triangle\n        // You have to return\
    \ True if the three sides form a right-angled triangle,\n        // False otherwise\n\
    \        val list = List(a, b, c)\n        val max = list.max\n        val min\
    \ = list.min\n        val mid = list.sum - max - min\n        max * max == mid\
    \ * mid + min * min\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        val sides = List(a, b, c)\n    \
    \    val maxSide = sides.max\n        val otherSides = sides.filter(_ != maxSide)\n\
    \        val hypotenuse = maxSide\n        val sumOfSquares = otherSides.map(x\
    \ => x * x).sum\n        hypotenuse * hypotenuse == sumOfSquares\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0) +\
    \ sides(1) * sides(1) == sides(2) * sides(2)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val max = sides(2)\n\
    \        val sum = sides.sum\n        val max2 = max * max\n        val sum2 =\
    \ sum * sum\n        val max2sum2 = max2 + sum2\n        val max2sum2sqrt = sqrt(max2sum2)\n\
    \        max2sum2sqrt == max\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0r7s3yyj.scala:24)\n\tat Problem.main(tmp0r7s3yyj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794113
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        return (a * a + b * b == c * c)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_i8cvghe.scala:19)\n\tat Problem.main(tmp_i8cvghe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794083
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ side `a`\n        // `b` is the length of side `b`\n        // `c` is the length\
    \ of side `c`\n        // Do not change the function defination...\n        val\
    \ sides = List(a, b, c)\n        val maxSide = sides.max\n        val minSides\
    \ = sides.filter(_ != maxSide)\n        val sumOfMinSides = minSides.sum\n   \
    \     maxSide * maxSide == sumOfMinSides * sumOfMinSides\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp02vu592j.scala:26)\n\tat Problem.main(tmp02vu592j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794113
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        return a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val list = List(a, b, c)\n        val max = list.max\n        val\
    \ sum = list.sum - max\n        max * max == sum * sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpepw_a_gb.scala:20)\n\tat Problem.main(tmpepw_a_gb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a == 0 || b == 0 || c == 0) return false\n        val sides\
    \ = List(a, b, c).sorted\n        val x = sides(0)\n        val y = sides(1)\n\
    \        val z = sides(2)\n        if (x * x + y * y == z * z) return true\n \
    \       return false\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0),\
    \ sides(1), sides(2))\n        if (a + b <= c) return false\n        val c2 =\
    \ c * c\n        val a2 = a * a\n        val b2 = b * b\n        return a2 + b2\
    \ == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpee01udby.scala:15:25 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m),\
    \ sides(\e[31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m           \
    \              ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpee01udby.scala:15:35 ---------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e[31m1\e\
    [0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \       ^\e[0m\n\e[31m   |\e[0m                                   Recursive \e\
    [33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmpee01udby.scala:15:45 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        \e[33mval\e[0m (a, b, c) = (sides(\e[31m0\e[0m), sides(\e\
    [31m1\e[0m), sides(\e[31m2\e[0m))\n\e[31m\e[31m   |\e[0m                     \
    \                        ^\e[0m\n\e[31m   |\e[0m                             \
    \           Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpee01udby.scala:14:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mInt\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpee01udby.scala:16:14 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mif\e[0m (a + b <= c) \e[33mreturn\e[0m\
    \ \e[31"
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of the triangle\n        // return true if the triangle\
    \ is right-angled, false otherwise\n        val sides = List(a, b, c)\n      \
    \  val maxSide = sides.max\n        val maxSideIndex = sides.indexOf(maxSide)\n\
    \        val otherSides = sides.take(maxSideIndex) ++ sides.drop(maxSideIndex\
    \ + 1)\n        val otherSidesSum = otherSides.sum\n        maxSide * maxSide\
    \ == otherSidesSum * otherSidesSum\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq9fe2k53.scala:25)\n\tat Problem.main(tmpq9fe2k53.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxnveldyk.scala:18)\n\tat Problem.main(tmpxnveldyk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill up this function body\n        // `a`, `b` and `c` are\
    \ the lengths of the three sides of a triangle\n        // You have to return\
    \ True if the three sides form a right-angled triangle,\n        // False otherwise\n\
    \        val sides = List(a, b, c)\n        val max = sides.max\n        val sum\
    \ = sides.sum - max\n        max * max == sum * sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdxff_xsn.scala:24)\n\tat Problem.main(tmpdxff_xsn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l = List(a, b, c)\n        val max = l.max\n        val min\
    \ = l.min\n        val mid = l.filter(x => x != max && x != min).head\n      \
    \  max * max == min * min + mid * mid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: head of empty list\n\tat scala.collection.immutable.Nil$.head(List.scala:662)\n\
    \tat scala.collection.immutable.Nil$.head(List.scala:661)\n\tat Problem$.rightAngleTriangle(tmp9rosnv92.scala:17)\n\
    \tat Problem$.main(tmp9rosnv92.scala:24)\n\tat Problem.main(tmp9rosnv92.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val c2 = sides(2)\n \
    \       val c1 = sides(1)\n        val c0 = sides(0)\n        c2 * c2 == c1 *\
    \ c1 + c0 * c0\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sorted = List(a, b, c).sorted\n        val (x, y, z) = (sorted(0),\
    \ sorted(1), sorted(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        val sides = List(a, b, c)\n\
    \        val sortedSides = sides.sorted\n        val hypotenuse = sortedSides(2)\n\
    \        val cathetus1 = sortedSides(1)\n        val cathetus2 = sortedSides(0)\n\
    \        val hypotenuseSquared = hypotenuse * hypotenuse\n        val cathetus1Squared\
    \ = cathetus1 * cathetus1\n        val cathetus2Squared = cathetus2 * cathetus2\n\
    \        hypotenuseSquared == cathetus1Squared + cathetus2Squared\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l),\
    \ (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Your code here\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxnveldyk.scala:18)\n\tat Problem.main(tmpxnveldyk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794084
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        return a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ true else false\n        } else if (b > a && b > c) {\n            if (b * b\
    \ == a * a + c * c) true else false\n        } else {\n            if (c * c ==\
    \ a * a + b * b) true else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n\
    \        val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
    \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l))\
    \ == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n\
    \    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l),\
    \ (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l))\
    \ == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n\
    \    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2\n    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        // return true if the triangle is\
    \ right-angled, false otherwise\n        val sides = List(a, b, c).sorted\n  \
    \      val c2 = sides(2)\n        val c1 = sides(1)\n        val c0 = sides(0)\n\
    \        if (c2 * c2 == c1 * c1 + c0 * c0) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        val x = sides(0)\n        val y = sides(1)\n        val z\
    \ = sides(2)\n        x * x + y * y == z * z\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the sides of the triangle\n        // `a`, `b`, `c` are positive\
    \ integers\n        // return True if the three sides form a right-angled triangle,\
    \ False otherwise\n        if (a > 0 && b > 0 && c > 0) {\n            val sides\
    \ = List(a, b, c).sorted\n            val max = sides(2)\n            val sum\
    \ = sides(0) * sides(0) + sides(1) * sides(1)\n            val max2 = max * max\n\
    \            sum == max2\n        } else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794114
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val l = List(a, b, c)\n        val m = l.max\n        val s = l.filter(_\
    \ != m).sum\n        m * m == s * s\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpajn8mkoa.scala:20)\n\tat Problem.main(tmpajn8mkoa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659794115
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sorted = List(a, b, c).sorted\n        val (x, y, z) = (sorted(0),\
    \ sorted(1), sorted(2))\n        x * x + y * y == z * z\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794114
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        // Fill Up this function body\n        // `a` is the length of\
    \ the side opposite to the right angle\n        // `b` is the length of the side\
    \ opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        val sides = List(a, b, c).sorted\n      \
    \  val a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n    \
    \    a * a + b * b == c * c\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8m74ppiu.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = sides(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8m74ppiu.scala:21:16 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mb\e[0m = sides(\e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8m74ppiu.scala:22:16 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = sides(\e[31m2\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m   |\e[0m           \
    \     Recursive \e[33mvalue\e[0m \e[35msides\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- Error: /tmp/tmp8m74ppiu.scala:19:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36msides\e[0m = List(a, b,\
    \ c).sorted\n\e[31m\e[31m   |\e[0m                                        ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mLong\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35msorted\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e\
    [0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659794113
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ return true\n        } else if (b > a && b > c) {\n            if (b * b ==\
    \ a * a + c * c) return true\n        } else if (c > a && c > b) {\n         \
    \   if (c * c == a * a + b * b) return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
    \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) ==\
    \ (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n  \
    \  assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l),\
    \ (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l), (5l), (7l))\
    \ == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l)) == (true));\n\
    \    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n    assert(rightAngleTriangle((48l),\
    \ (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l), (1l), (1l)) ==\
    \ (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) == (false));\n \
    \   }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l),\
    \ (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) ==\
    \ (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n \
    \   assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
    \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l))\
    \ == (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n\
    \    assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
    \ (2l), (10l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n    // sides form a right-angled triangle, False otherwise.\n   \
    \ // A right-angled triangle is a triangle in which one angle is right angle or\
    \ \n    // 90 degree.\n    // Example:\n    // >>> rightAngleTriangle((3l), (4l),\
    \ (5l))\n    // (true)\n    // >>> rightAngleTriangle((1l), (2l), (3l))\n    //\
    \ (false)\n    def rightAngleTriangle(a : Long, b : Long, c : Long) : Boolean\
    \ = {\n        if (a > b && a > c) {\n            if (a * a == b * b + c * c)\
    \ true else false\n        } else if (b > a && b > c) {\n            if (b * b\
    \ == a * a + c * c) true else false\n        } else {\n            if (c * c ==\
    \ a * a + b * b) true else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(rightAngleTriangle((3l), (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (2l), (3l)) == (false));\n    assert(rightAngleTriangle((10l), (6l), (8l)) ==\
    \ (true));\n    assert(rightAngleTriangle((2l), (2l), (2l)) == (false));\n   \
    \ assert(rightAngleTriangle((7l), (24l), (25l)) == (true));\n    assert(rightAngleTriangle((10l),\
    \ (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l), (12l), (13l))\
    \ == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) == (true));\n\
    \    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n    assert(rightAngleTriangle((1l),\
    \ (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l), (2l), (10l)) ==\
    \ (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794074
