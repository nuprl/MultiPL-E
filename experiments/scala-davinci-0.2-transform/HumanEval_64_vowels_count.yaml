name: HumanEval_64_vowels_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function vowels_count which takes a string representing\n    //\
  \ a word as input and returns the number of vowels in the string.\n    // Vowels\
  \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    // vowel, but\
  \ only when it is at the end of the given word.\n    // Example:\n    // >>> vowelsCount((\"\
  abcde\"))\n    // (2l)\n    // >>> vowelsCount((\"ACEDY\"))\n    // (3l)\n    def\
  \ vowelsCount(s : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(vowelsCount((\"abcde\"\
  )) == (2l));\n    assert(vowelsCount((\"Alone\")) == (3l));\n    assert(vowelsCount((\"\
  key\")) == (2l));\n    assert(vowelsCount((\"bye\")) == (1l));\n    assert(vowelsCount((\"\
  keY\")) == (2l));\n    assert(vowelsCount((\"bYe\")) == (1l));\n    assert(vowelsCount((\"\
  ACEDY\")) == (3l));\n    }\n\n}\n"
completions: ["        // TODO: implement this function\n        return 0l", "   \
    \     // Fill in the code here\n        return 0l", "        // Fill in the code\
    \ here\n        var count = 0\n        for (i <- 0 until s.length) {\n       \
    \     if (s(i) == 'a' || s(i) == 'e' || s(i) == 'i' || s(i) == 'o' || s(i) ==\
    \ 'u') {\n                count += 1\n            }\n        }\n        if (s(s.length\
    \ - 1) == 'y') {\n            count += 1\n        }\n        return count", " \
    \       val vowels = List('a', 'e', 'i', 'o', 'u')\n        val count = s.toLowerCase.filter(vowels.contains(_)).length\n\
    \        if (s.toLowerCase.last == 'y') count + 1 else count", "        // Fill\
    \ in the code here\n        0", "        // Fill in the code here\n        return\
    \ 0l", "        // YOUR CODE HERE\n        return 0l", "        // Fill in the\
    \ code here\n        0", "        // Fill in the code here\n        0", "    \
    \    // Fill in the code here\n        0l", "        // Fill Up this function\
    \ body\n        // `s` contains only lower case letters\n        // 'y' is a vowel\
    \ only when it is at the end of the word\n        // For Example:\n        //\
    \ >>> vowelsCount(\"aeiou\")\n        // 5\n        // >>> vowelsCount(\"bcd\"\
    )\n        // 0\n        // >>> vowelsCount(\"aeiouy\")\n        // 6\n      \
    \  val vowels = List('a', 'e', 'i', 'o', 'u')\n        val vowelsSet = vowels.toSet\n\
    \        val lastChar = s.last\n        val count = s.count(vowelsSet.contains(_))\n\
    \        if (vowelsSet.contains(lastChar)) count + 1 else count", "        //\
    \ TODO: implement this function\n        0", "        // Fill in the code here\n\
    \        0", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last\
    \ = s.last\n        val count = s.count(vowels.contains(_))\n        if (vowels.contains(last))\
    \ count + 1 else count", "        // Your code here\n        return 0", "    \
    \    // Fill in the code here\n        0l", "        // YOUR CODE HERE\n     \
    \   return 0", "        val vowels = List('a', 'e', 'i', 'o', 'u')\n        s.filter(vowels.contains(_)).length",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val last = s.last\n\
    \        val count = s.filter(vowels.contains(_)).length\n        if (vowels.contains(last))\
    \ count + 1 else count", "        // Fill in the code here.\n        val vowels\
    \ = List('a', 'e', 'i', 'o', 'u')\n        val s_lower = s.toLowerCase\n     \
    \   val s_list = s_lower.toList\n        val s_vowels = s_list.filter(vowels.contains(_))\n\
    \        val s_vowels_count = s_vowels.length\n        if (s_vowels_count == 0)\
    \ {\n            return 0\n        }\n        else if (s_vowels_count == 1) {\n\
    \            return 1\n        }\n        else {\n            val s_vowels_last\
    \ = s_vowels.last\n            if (s_vowels_last == 'y') {\n                return\
    \ s_vowels_count\n            }\n            else {\n                return s_vowels_count\
    \ - 1\n            }\n        }"]
stop_tokens:
- "\n    }\n"
