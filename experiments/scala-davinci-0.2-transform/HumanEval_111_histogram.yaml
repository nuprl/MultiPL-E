name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    // of the letter with the most repetition and containing the\
  \ corresponding count.\n    // If several letters have the same occurrence, return\
  \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
  a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n   \
  \ // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"a b c\
  \ a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
  b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>> histogram((\"\"\
  ))\n    // (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val hist = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            hist(c) = hist.getOrElse(c, 0l) + 1l\n        }\n      \
    \  val max = hist.values.max\n        hist.filter(x => x._2 == max)", "      \
    \  val result = new HashMap[String,Long]\n        val words = test.split(\" \"\
    )\n        for (word <- words) {\n            if (result.contains(word)) {\n \
    \               result(word) += 1\n            } else {\n                result(word)\
    \ = 1\n            }\n        }\n        result", "        var histogram = Map[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        var max = 0\n\
    \        for (letter <- histogram.keys) {\n            max = max.max(histogram(letter))\n\
    \        }\n        var result = Map[String,Long]()\n        for (letter <- histogram.keys)\
    \ {\n            if (histogram(letter) == max) {\n                result(letter)\
    \ = histogram(letter)\n            }\n        }\n        return result", "   \
    \     // Fill in the code here\n        return Map[String,Long]()", "        var\
    \ result = Map[String,Long]()\n        for (letter <- test.split(\" \")) {\n \
    \           if (result.contains(letter)) {\n                result(letter) +=\
    \ 1\n            } else {\n                result(letter) = 1\n            }\n\
    \        }\n        result", "        val result = Map[String,Long]()\n      \
    \  val words = test.split(\" \")\n        for (word <- words) {\n            if\
    \ (result.contains(word)) {\n                result(word) += 1\n            }\
    \ else {\n                result(word) = 1\n            }\n        }\n       \
    \ result", "        var result = Map[String,Long]()\n        var max = 0l\n  \
    \      for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n\
    \                result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n            if (result(c) > max) {\n                max\
    \ = result(c)\n            }\n        }\n        result.filter(x => x._2 == max)",
  "        val result = new HashMap[String,Long]()\n        for (letter <- test.split(\"\
    \ \")) {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n        }\n        result", "        var map = Map[String,Long]()\n     \
    \   for (c <- test.split(\" \")) {\n            if (map.contains(c)) {\n     \
    \           map(c) += 1\n            } else {\n                map(c) = 1\n  \
    \          }\n        }\n        var max = 0l\n        for (v <- map.values) {\n\
    \            if (v > max) {\n                max = v\n            }\n        }\n\
    \        var result = Map[String,Long]()\n        for ((k,v) <- map) {\n     \
    \       if (v == max) {\n                result(k) = v\n            }\n      \
    \  }\n        return result", "        val histogram = Map[String,Long]()\n  \
    \      val words = test.split(\" \")\n        for (word <- words) {\n        \
    \    if (histogram.contains(word)) {\n                histogram(word) += 1\n \
    \           } else {\n                histogram(word) = 1\n            }\n   \
    \     }\n        val max = histogram.values.max\n        val result = Map[String,Long]()\n\
    \        for ((key, value) <- histogram) {\n            if (value == max) {\n\
    \                result(key) = value\n            }\n        }\n        result",
  "        var result = Map[String,Long]()\n        test.split(\" \").foreach(x =>\
    \ {\n            if (result.contains(x)) {\n                result(x) += 1\n \
    \           } else {\n                result(x) = 1\n            }\n        })\n\
    \        var max = 0l\n        result.foreach(x => {\n            if (x._2 > max)\
    \ {\n                max = x._2\n            }\n        })\n        result.filter(x\
    \ => x._2 == max)", "        var result = Map[String,Long]()\n        var letters\
    \ = test.split(\" \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ result = Map[String,Long]()\n        val words = test.split(\" \")\n       \
    \ for (word <- words) {\n            if (result.contains(word)) {\n          \
    \      result(word) += 1\n            } else {\n                result(word) =\
    \ 1\n            }\n        }\n        result", "        var result = Map[String,Long]()\n\
    \        for (i <- test.split(\" \")) {\n            if (result.contains(i)) {\n\
    \                result(i) += 1\n            } else {\n                result\
    \ += (i -> 1)\n            }\n        }\n        result", "        // Fill in\
    \ the code here\n        return Map[String,Long]()", "        val result = new\
    \ HashMap[String,Long]\n        test.split(\" \").foreach(x => {\n           \
    \ if (result.contains(x)) {\n                result(x) += 1\n            } else\
    \ {\n                result(x) = 1\n            }\n        })\n        result.filter(x\
    \ => x._2 == result.values.max)", "        val letters = test.split(\" \")\n \
    \       val histogram = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram(letter) = 1\n        \
    \    }\n        }\n        val max = histogram.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((letter, count) <- histogram) {\n \
    \           if (count == max) {\n                result(letter) = count\n    \
    \        }\n        }\n        result", "        val result = new HashMap[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n\
    \                result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n        }\n        result", "        val m = Map[String,Long]()\n\
    \        val l = test.split(\" \")\n        for (i <- 0 until l.length) {\n  \
    \          val c = l(i)\n            if (m.contains(c)) m(c) += 1l\n         \
    \   else m(c) = 1l\n        }\n        val max = m.values.max\n        val r =\
    \ Map[String,Long]()\n        for ((k,v) <- m) if (v == max) r(k) = v\n      \
    \  r", "        val result = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (result.contains(c)) result(c) += 1\n            else\
    \ result(c) = 1\n        }\n        result.filter(x => x._2 == result.values.max)",
  "        val counts = Map[String,Long]()\n        test.split(\" \").foreach(x =>\
    \ {\n            if (counts.contains(x)) {\n                counts(x) += 1\n \
    \           } else {\n                counts(x) = 1\n            }\n        })\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)",
  "        val letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val maxCount = counts.values.max\n        counts.filter(_._2 == maxCount)",
  "        var result = Map[String,Long]()\n        var max = 0\n        for (c <-\
    \ test.split(\" \")) {\n            if (result.contains(c)) {\n              \
    \  result(c) += 1\n            } else {\n                result(c) = 1\n     \
    \       }\n            if (result(c) > max) {\n                max = result(c).toInt\n\
    \            }\n        }\n        var result2 = Map[String,Long]()\n        for\
    \ (c <- result) {\n            if (c._2 == max) {\n                result2(c._1)\
    \ = c._2\n            }\n        }\n        return result2", "        val words\
    \ = test.split(\" \")\n        val map = new HashMap[String,Long]\n        for\
    \ (word <- words) {\n            if (map.contains(word)) {\n                map(word)\
    \ += 1\n            } else {\n                map(word) = 1\n            }\n \
    \       }\n        val max = map.values.max\n        map.filter(x => x._2 == max)",
  "        var result = Map[String,Long]()\n        var max = 0l\n        test.split(\"\
    \ \").foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \           if (result(x) > max) {\n                max = result(x)\n        \
    \    }\n        })\n        result.filter(x => x._2 == max)", "        var result\
    \ = Map[String,Long]()\n        var max = 0\n        for (letter <- test.split(\"\
    \ \")) {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n            if (result(letter) > max) {\n                max = result(letter).toInt\n\
    \            }\n        }\n        result.retain((k,v) => v == max)\n        return\
    \ result", "        val letters = test.split(\" \")\n        val letterCount =\
    \ Map[String,Long]()\n        for (letter <- letters) {\n            if (letterCount.contains(letter))\
    \ {\n                letterCount(letter) += 1\n            } else {\n        \
    \        letterCount(letter) = 1\n            }\n        }\n        val maxCount\
    \ = letterCount.values.max\n        val maxLetters = letterCount.filter(x => x._2\
    \ == maxCount)\n        maxLetters", "        var result = Map[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        var\
    \ result = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n      \
    \      result += (c -> (result.getOrElse(c, 0l) + 1l))\n        }\n        var\
    \ max = 0l\n        for (c <- result.values) {\n            max = max max c\n\
    \        }\n        var result2 = Map[String,Long]()\n        for ((k,v) <- result)\
    \ {\n            if (v == max) {\n                result2 += (k -> v)\n      \
    \      }\n        }\n        return result2", "        val result = new HashMap[String,Long]\n\
    \        for (c <- test.split(\" \")) {\n            if (result.contains(c)) result(c)\
    \ += 1l\n            else result(c) = 1l\n        }\n        result.filter(x =>\
    \ x._2 == result.values.max)", "        var result = Map[String,Long]()\n    \
    \    for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n \
    \               result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n        }\n        result", "        val words = test.split(\"\
    \ \")\n        val counts = words.map(word => (word, words.count(_ == word))).toMap\n\
    \        val max = counts.values.max\n        counts.filter(_._2 == max)", " \
    \       var result = Map[String,Long]()\n        if (test.length == 0) return\
    \ result\n        var letters = test.split(\" \")\n        for (letter <- letters)\
    \ {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result += (letter -> 1)\n      \
    \      }\n        }\n        var max = result.values.max\n        var max_letters\
    \ = result.filter(x => x._2 == max)\n        return max_letters", "        val\
    \ words = test.split(\" \")\n        var histogram = Map[String,Long]()\n    \
    \    for (word <- words) {\n            if (histogram.contains(word)) {\n    \
    \            histogram(word) += 1\n            } else {\n                histogram(word)\
    \ = 1\n            }\n        }\n        histogram", "        // Fill in the code\
    \ here\n        val a = test.split(\" \")\n        val b = a.groupBy(identity).mapValues(_.size)\n\
    \        val c = b.filter(x => x._2 == b.values.max)\n        c", "        //\
    \ Fill in the code here\n        var map = Map[String,Long]()\n        var max\
    \ = 0\n        var max_key = \"\"\n        for (i <- test.split(\" \")) {\n  \
    \          if (map.contains(i)) {\n                map(i) += 1\n            }\
    \ else {\n                map += (i -> 1)\n            }\n            if (map(i)\
    \ > max) {\n                max = map(i).toInt\n                max_key = i\n\
    \            }\n        }\n        var res = Map[String,Long]()\n        for (i\
    \ <- map.keys) {\n            if (map(i) == max) {\n                res += (i\
    \ -> max)\n            }\n        }\n        res", "        val letters = test.split(\"\
    \ \")\n        val letterMap = Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            if (letterMap.contains(letter)) {\n                letterMap(letter)\
    \ += 1\n            } else {\n                letterMap(letter) = 1\n        \
    \    }\n        }\n        val max = letterMap.values.max\n        letterMap.filter(x\
    \ => x._2 == max)", "        val result = new HashMap[String,Long]\n        test.split(\"\
    \ \").foreach(x => result(x) = result.getOrElse(x, 0l) + 1l)\n        result.filter(x\
    \ => x._2 == result.values.max)", "        val words = test.split(\" \")\n   \
    \     val wordCount = Map[String,Long]()\n        for (word <- words) {\n    \
    \        if (wordCount.contains(word)) {\n                wordCount(word) += 1\n\
    \            } else {\n                wordCount(word) = 1\n            }\n  \
    \      }\n        val maxCount = wordCount.values.max\n        val maxWords =\
    \ wordCount.filter(x => x._2 == maxCount)\n        maxWords", "        // Fill\
    \ in the code here\n        var result = Map[String,Long]()\n        var max =\
    \ 0\n        var max_count = 0\n        for (i <- 0 until test.length) {\n   \
    \         if (test(i) != ' ') {\n                var count = 0\n             \
    \   for (j <- 0 until test.length) {\n                    if (test(i) == test(j))\
    \ {\n                        count += 1\n                    }\n             \
    \   }\n                if (count > max_count) {\n                    max_count\
    \ = count\n                    max = i\n                }\n            }\n   \
    \     }\n        for (i <- 0 until test.length) {\n            if (test(i) ==\
    \ test(max)) {\n                result += (test(i).toString -> max_count.toLong)\n\
    \            }\n        }\n        return result", "        // TODO\n        return\
    \ Map[String,Long]()", "        val result = new HashMap[String,Long]\n      \
    \  for (c <- test.split(\" \")) {\n            if (result.contains(c)) result(c)\
    \ += 1\n            else result(c) = 1\n        }\n        result.filter(_._2\
    \ == result.values.max)", "        val result = new HashMap[String,Long]\n   \
    \     for (c <- test) {\n            if (result.contains(c.toString)) {\n    \
    \            result(c.toString) += 1\n            } else {\n                result(c.toString)\
    \ = 1\n            }\n        }\n        result.filter(x => x._2 == result.values.max)",
  "        var result = Map[String,Long]()\n        var count = 0l\n        var max\
    \ = 0l\n        var max_letters = List[String]()\n        var letters = test.split(\"\
    \ \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                count = result(letter) + 1\n                result += (letter\
    \ -> count)\n            } else {\n                result += (letter -> 1l)\n\
    \            }\n            if (count > max) {\n                max = count\n\
    \                max_letters = List(letter)\n            } else if (count == max)\
    \ {\n                max_letters = letter :: max_letters\n            }\n    \
    \    }\n        for (letter <- max_letters) {\n            result += (letter ->\
    \ max)\n        }\n        return result", "        var result = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n\
    \                result(c) += 1\n            } else {\n                result\
    \ += (c -> 1)\n            }\n        }\n        result.filter(x => x._2 == result.values.max)",
  "        val letters = test.split(\" \")\n        val histogram = new HashMap[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        val result = new HashMap[String,Long]()\n        for ((letter, count)\
    \ <- histogram) {\n            if (count == max) {\n                result(letter)\
    \ = count\n            }\n        }\n        result", "        val map = new HashMap[String,Long]()\n\
    \        test.split(\" \").foreach(x => {\n            if (map.contains(x)) {\n\
    \                map(x) += 1\n            } else {\n                map(x) = 1\n\
    \            }\n        })\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val result = new HashMap[String,Long]\n        for\
    \ (letter <- test.split(\" \")) {\n            if (result.contains(letter)) {\n\
    \                result(letter) += 1\n            } else {\n                result(letter)\
    \ = 1\n            }\n        }\n        result", "        var result = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n\
    \                result(c) += 1\n            } else {\n                result\
    \ += (c -> 1)\n            }\n        }\n        result", "        val result\
    \ = new HashMap[String,Long]\n        for (letter <- test.split(\" \")) {\n  \
    \          if (result.contains(letter)) {\n                result(letter) += 1\n\
    \            } else {\n                result(letter) = 1\n            }\n   \
    \     }\n        result", "        var histogram = Map[String,Long]()\n      \
    \  for (letter <- test.split(\" \")) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        var max = 0\n\
    \        for (letter <- histogram.keys) {\n            if (histogram(letter) >\
    \ max) {\n                max = histogram(letter).toInt\n            }\n     \
    \   }\n        var result = Map[String,Long]()\n        for (letter <- histogram.keys)\
    \ {\n            if (histogram(letter) == max) {\n                result(letter)\
    \ = histogram(letter)\n            }\n        }\n        return result", "   \
    \     val result = Map[String,Long]()\n        val letters = test.split(\" \"\
    )\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        val max = result.values.max\n\
    \        result.filter(x => x._2 == max)", "        var result = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n\
    \                result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n        }\n        result", "        val result = new HashMap[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            result(letter) = result.getOrElse(letter,\
    \ 0l) + 1l\n        }\n        result.filter(x => x._2 == result.values.max)",
  "        // Fill in the code here\n        val letters = test.split(\" \")\n   \
    \     val letterCounts = Map[String,Long]()\n        for (letter <- letters) {\n\
    \            if (letterCounts.contains(letter)) {\n                letterCounts(letter)\
    \ += 1\n            } else {\n                letterCounts(letter) = 1\n     \
    \       }\n        }\n        val maxCount = letterCounts.values.max\n       \
    \ val result = Map[String,Long]()\n        for ((letter, count) <- letterCounts)\
    \ {\n            if (count == maxCount) {\n                result(letter) = count\n\
    \            }\n        }\n        result", '        test.split(" ").groupBy(identity).mapValues(_.length)',
  "        val histogram = new HashMap[String,Long]()\n        for (letter <- test.split(\"\
    \ \")) {\n            if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram(letter) = 1\n        \
    \    }\n        }\n        val max = histogram.values.max\n        val result\
    \ = new HashMap[String,Long]()\n        for ((letter, count) <- histogram) {\n\
    \            if (count == max) {\n                result(letter) = count\n   \
    \         }\n        }\n        result", "        val words = test.split(\" \"\
    )\n        val map = Map[String,Long]()\n        for (word <- words) {\n     \
    \       if (map.contains(word)) {\n                map(word) += 1\n          \
    \  } else {\n                map(word) = 1\n            }\n        }\n       \
    \ map", "        val histogram = new HashMap[String,Long]\n        for (letter\
    \ <- test.split(\" \")) {\n            if (histogram.contains(letter)) {\n   \
    \             histogram.put(letter, histogram(letter) + 1)\n            } else\
    \ {\n                histogram.put(letter, 1)\n            }\n        }\n    \
    \    val max = histogram.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((letter, count) <- histogram) {\n            if (count == max) {\n\
    \                result.put(letter, count)\n            }\n        }\n       \
    \ result", "        var result = Map[String,Long]()\n        var count = Map[String,Long]()\n\
    \        var max = 0l\n        for (c <- test.split(\" \")) {\n            if\
    \ (count.contains(c)) {\n                count(c) += 1\n            } else {\n\
    \                count(c) = 1\n            }\n            if (count(c) > max)\
    \ {\n                max = count(c)\n            }\n        }\n        for ((k,v)\
    \ <- count) {\n            if (v == max) {\n                result(k) = v\n  \
    \          }\n        }\n        return result", "        val letters = test.split(\"\
    \ \")\n        val counts = Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            if (counts.contains(letter)) {\n                counts(letter)\
    \ += 1\n            } else {\n                counts(letter) = 1\n           \
    \ }\n        }\n        val max = counts.values.max\n        val result = Map[String,Long]()\n\
    \        for ((letter, count) <- counts) {\n            if (count == max) {\n\
    \                result(letter) = count\n            }\n        }\n        result",
  "        val result = new HashMap[String,Long]\n        for (letter <- test.split(\"\
    \ \")) {\n            if (result.contains(letter)) result(letter) += 1\n     \
    \       else result(letter) = 1\n        }\n        result.filter(x => x._2 ==\
    \ result.values.max)", "        var result = Map[String,Long]()\n        var letters\
    \ = test.split(\" \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result += (letter -> 1)\n            }\n        }\n        result", "    \
    \    val map = new HashMap[String,Long]\n        for (letter <- test.split(\"\
    \ \")) {\n            if (map.contains(letter)) map(letter) += 1\n           \
    \ else map(letter) = 1\n        }\n        map.filter(x => x._2 == map.values.max)",
  "        // Your code here\n        null", "        val letters = test.split(\"\
    \ \")\n        var histogram = Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram += (letter -> 1)\n   \
    \         }\n        }\n        val max = histogram.values.max\n        histogram.filter(x\
    \ => x._2 == max)", "        var result = Map[String,Long]()\n        if (test.length\
    \ == 0) {\n            return result\n        }\n        var max = 0l\n      \
    \  var count = 0l\n        var current = \"\"\n        for (c <- test) {\n   \
    \         if (c == ' ') {\n                if (count > max) {\n              \
    \      max = count\n                    result = Map[String,Long](current -> count)\n\
    \                } else if (count == max) {\n                    result += (current\
    \ -> count)\n                }\n                count = 0\n            } else\
    \ {\n                if (current != c.toString) {\n                    if (count\
    \ > max) {\n                        max = count\n                        result\
    \ = Map[String,Long](current -> count)\n                    } else if (count ==\
    \ max) {\n                        result += (current -> count)\n             \
    \       }\n                    current = c.toString\n                    count\
    \ = 0\n                }\n                count += 1\n            }\n        }\n\
    \        if (count > max) {\n            max = count\n            result = Map[String,Long](current\
    \ -> count)\n        } else if (count == max) {\n            result += (current\
    \ -> count)\n        }\n        return result", "        val letters = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (map.contains(letter)) {\n                map(letter) += 1\n\
    \            } else {\n                map(letter) = 1\n            }\n      \
    \  }\n        val max = map.values.max\n        val result = new HashMap[String,Long]\n\
    \        for ((letter, count) <- map) {\n            if (count == max) {\n   \
    \             result(letter) = count\n            }\n        }\n        result",
  "        var result = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (result.contains(c)) {\n                result(c) += 1\n     \
    \       } else {\n                result += (c -> 1)\n            }\n        }\n\
    \        result", "        var result = Map[String,Long]()\n        var count\
    \ = 0\n        var max = 0\n        var maxLetter = \"\"\n        for (letter\
    \ <- test.split(\" \")) {\n            if (result.contains(letter)) {\n      \
    \          count = result(letter)\n                result += (letter -> (count\
    \ + 1))\n            } else {\n                result += (letter -> 1)\n     \
    \       }\n        }\n        for ((k,v) <- result) {\n            if (v > max)\
    \ {\n                max = v\n                maxLetter = k\n            }\n \
    \       }\n        for ((k,v) <- result) {\n            if (v == max) {\n    \
    \            result += (k -> max)\n            } else {\n                result\
    \ -= k\n            }\n        }\n        return result", "        var result\
    \ = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n            if\
    \ (result.contains(c)) {\n                result(c) += 1\n            } else {\n\
    \                result += (c -> 1)\n            }\n        }\n        var max\
    \ = 0l\n        for (c <- result.keys) {\n            if (result(c) > max) {\n\
    \                max = result(c)\n            }\n        }\n        var result2\
    \ = Map[String,Long]()\n        for (c <- result.keys) {\n            if (result(c)\
    \ == max) {\n                result2 += (c -> max)\n            }\n        }\n\
    \        return result2", "        var histogram = Map[String,Long]()\n      \
    \  test.split(\" \").foreach(x => {\n            if (histogram.contains(x)) {\n\
    \                histogram(x) += 1\n            } else {\n                histogram\
    \ += (x -> 1)\n            }\n        })\n        var max = 0l\n        histogram.foreach(x\
    \ => {\n            if (x._2 > max) {\n                max = x._2\n          \
    \  }\n        })\n        var result = Map[String,Long]()\n        histogram.foreach(x\
    \ => {\n            if (x._2 == max) {\n                result += (x._1 -> x._2)\n\
    \            }\n        })\n        result", "        val letters = test.split(\"\
    \ \")\n        val counts = Map[String,Long]()\n        for (letter <- letters)\
    \ {\n            if (counts.contains(letter)) counts(letter) += 1\n          \
    \  else counts(letter) = 1\n        }\n        val max = counts.values.max\n \
    \       val maxLetters = for (letter <- counts.keys if counts(letter) == max)\
    \ yield letter\n        val result = Map[String,Long]()\n        for (letter <-\
    \ maxLetters) result(letter) = max\n        result", "        val m = new HashMap[String,Long]\n\
    \        for (c <- test.split(\" \")) {\n            if (m.contains(c)) {\n  \
    \              m(c) += 1\n            } else {\n                m(c) = 1\n   \
    \         }\n        }\n        val max = m.values.max\n        m.filter(_._2\
    \ == max)", "        val histogram = new HashMap[String,Long]\n        for (c\
    \ <- test.split(\" \")) {\n            if (histogram.contains(c)) {\n        \
    \        histogram(c) += 1\n            } else {\n                histogram(c)\
    \ = 1\n            }\n        }\n        val max = histogram.values.max\n    \
    \    histogram.filter(x => x._2 == max)", "        val result = new HashMap[String,Long]\n\
    \        val words = test.split(\" \")\n        for (word <- words) {\n      \
    \      if (result.contains(word)) {\n                result(word) += 1\n     \
    \       } else {\n                result(word) = 1\n            }\n        }\n\
    \        result", "        var result = Map[String,Long]()\n        for (c <-\
    \ test.split(\" \")) {\n            if (result.contains(c)) {\n              \
    \  result(c) += 1\n            } else {\n                result(c) = 1\n     \
    \       }\n        }\n        var max = result.values.max\n        var result2\
    \ = Map[String,Long]()\n        for ((k,v) <- result) {\n            if (v ==\
    \ max) {\n                result2(k) = v\n            }\n        }\n        return\
    \ result2", '        test.split(" ").groupBy(identity).mapValues(_.length)', " \
    \       var result = Map[String,Long]()\n        var max = 0\n        test.split(\"\
    \ \").foreach(x => {\n            if (result.contains(x)) {\n                result(x)\
    \ += 1\n            } else {\n                result(x) = 1\n            }\n \
    \           if (result(x) > max) {\n                max = result(x).toInt\n  \
    \          }\n        })\n        result.filter(x => x._2 == max)", "        val\
    \ hist = new HashMap[String,Long]\n        for (c <- test.split(\" \")) {\n  \
    \          if (hist.contains(c)) hist(c) += 1\n            else hist(c) = 1\n\
    \        }\n        hist.filter(_._2 == hist.values.max)", "        val map =\
    \ new HashMap[String,Long]\n        for (letter <- test.split(\" \")) {\n    \
    \        if (map.contains(letter)) {\n                map(letter) += 1\n     \
    \       } else {\n                map(letter) = 1\n            }\n        }\n\
    \        val max = map.values.max\n        map.filter(x => x._2 == max)", "  \
    \      val result = new HashMap[String,Long]\n        test.split(\" \").foreach(x\
    \ => result(x) = result.getOrElse(x, 0l) + 1l)\n        val max = result.values.max\n\
    \        result.filter(x => x._2 == max).toMap", "        val hist = new HashMap[String,Long]\n\
    \        for (c <- test) {\n            val count = hist.getOrElse(c.toString,\
    \ 0l)\n            hist.put(c.toString, count + 1)\n        }\n        val max\
    \ = hist.values.max\n        hist.filter(x => x._2 == max)", "        var result\
    \ = Map[String,Long]()\n        for (letter <- test.split(\" \")) {\n        \
    \    if (result.contains(letter)) result(letter) += 1\n            else result(letter)\
    \ = 1\n        }\n        result.filter(x => x._2 == result.values.max)", "  \
    \      val words = test.split(\" \")\n        val map = Map[String,Long]()\n \
    \       for (word <- words) {\n            if (map.contains(word)) {\n       \
    \         map(word) += 1\n            } else {\n                map += (word ->\
    \ 1)\n            }\n        }\n        val max = map.values.max\n        val\
    \ keys = map.filter(x => x._2 == max).keys\n        val result = Map[String,Long]()\n\
    \        for (key <- keys) {\n            result += (key -> max)\n        }\n\
    \        result", "        val testArray = test.split(\" \")\n        val testMap\
    \ = Map[String,Long]()\n        for (i <- 0 until testArray.length) {\n      \
    \      if (testMap.contains(testArray(i))) {\n                testMap(testArray(i))\
    \ += 1\n            } else {\n                testMap += (testArray(i) -> 1)\n\
    \            }\n        }\n        val max = testMap.values.max\n        testMap.filter(x\
    \ => x._2 == max)", "        val words = test.split(\" \")\n        val map =\
    \ new HashMap[String,Long]\n        for (word <- words) {\n            if (map.contains(word))\
    \ {\n                map(word) += 1\n            } else {\n                map(word)\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val result = new HashMap[String,Long]\n        for\
    \ (letter <- test.split(\" \")) {\n            if (result.contains(letter)) {\n\
    \                result(letter) += 1\n            } else {\n                result(letter)\
    \ = 1\n            }\n        }\n        result", "        var result = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (result.contains(c)) result(c)\
    \ += 1\n            else result += (c -> 1)\n        }\n        result.filter(x\
    \ => x._2 == result.values.max)", "        val result = new HashMap[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ arr = test.split(\" \")\n        val map = new HashMap[String,Long]\n      \
    \  for (i <- 0 until arr.length) {\n            if (map.contains(arr(i))) {\n\
    \                map(arr(i)) += 1\n            } else {\n                map(arr(i))\
    \ = 1\n            }\n        }\n        val max = map.values.max\n        map.filter(_._2\
    \ == max)", "        val result = Map[String,Long]()\n        for (letter <- test.split(\"\
    \ \")) {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n        }\n        result", "        val letters = test.split(\" \")\n  \
    \      var histogram = Map[String,Long]()\n        for (letter <- letters) {\n\
    \            if (histogram.contains(letter)) {\n                histogram += (letter\
    \ -> (histogram(letter) + 1))\n            } else {\n                histogram\
    \ += (letter -> 1)\n            }\n        }\n        histogram", "        val\
    \ result = new HashMap[String,Long]()\n        test.split(\" \").foreach(x =>\
    \ {\n            if (result.contains(x)) {\n                result(x) += 1\n \
    \           } else {\n                result(x) = 1\n            }\n        })\n\
    \        result.filter(x => x._2 == result.values.max)", "        // Fill in the\
    \ code here\n        Map[String,Long]()", "        var result = Map[String,Long]()\n\
    \        var count = 0l\n        var max = 0l\n        var maxLetters = List[String]()\n\
    \        test.split(\" \").foreach(x => {\n            count = result.getOrElse(x,\
    \ 0l)\n            count += 1\n            result += (x -> count)\n          \
    \  if (count > max) {\n                max = count\n                maxLetters\
    \ = List(x)\n            } else if (count == max) {\n                maxLetters\
    \ = x :: maxLetters\n            }\n        })\n        maxLetters.foreach(x =>\
    \ result += (x -> max))\n        result", "        val result = new HashMap[String,Long]\n\
    \        for (letter <- test.split(\" \")) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ result = new HashMap[String,Long]\n        for (letter <- test.split(\" \"))\
    \ {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n        }\n        result", "        var result = Map[String,Long]()\n  \
    \      for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n\
    \                result(c) += 1\n            } else {\n                result\
    \ += (c -> 1)\n            }\n        }\n        result", "        val histogram\
    \ = new HashMap[String,Long]\n        for (letter <- test.split(\" \")) {\n  \
    \          if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram(letter) = 1\n        \
    \    }\n        }\n        histogram", "        var result = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n\
    \                result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n        }\n        result", "        val result = new HashMap[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        //\
    \ Fill in the code here\n        return Map[String,Long]()", "        val histogram\
    \ = Map[String,Long]()\n        for (letter <- test.split(\" \")) {\n        \
    \    if (histogram.contains(letter)) {\n                histogram(letter) += 1\n\
    \            } else {\n                histogram(letter) = 1\n            }\n\
    \        }\n        histogram", "        val dict = new HashMap[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (dict.contains(letter))\
    \ {\n                dict(letter) += 1\n            } else {\n               \
    \ dict(letter) = 1\n            }\n        }\n        dict", "        var result\
    \ = Map[String,Long]()\n        var count = 0l\n        var max = 0l\n       \
    \ var max_letters = List[String]()\n        for (letter <- test.split(\" \"))\
    \ {\n            if (result.contains(letter)) {\n                count = result(letter)\n\
    \                result += (letter -> (count + 1))\n            } else {\n   \
    \             result += (letter -> 1)\n            }\n        }\n        for ((key,\
    \ value) <- result) {\n            if (value > max) {\n                max = value\n\
    \                max_letters = List(key)\n            } else if (value == max)\
    \ {\n                max_letters = max_letters :+ key\n            }\n       \
    \ }\n        var result2 = Map[String,Long]()\n        for (letter <- max_letters)\
    \ {\n            result2 += (letter -> max)\n        }\n        return result2",
  "        val words = test.split(\" \")\n        val wordCounts = words.map(word\
    \ => (word, 1l)).groupBy(_._1).map(kv => (kv._1, kv._2.map(_._2).sum))\n     \
    \   val maxCount = wordCounts.values.max\n        wordCounts.filter(kv => kv._2\
    \ == maxCount)", "        val result = new HashMap[String,Long]\n        for (c\
    \ <- test.split(\" \")) {\n            if (result.contains(c)) result(c) += 1l\n\
    \            else result(c) = 1l\n        }\n        result.filter(x => x._2 ==\
    \ result.values.max)", "        val list = test.split(\" \").toList\n        val\
    \ map = list.groupBy(identity).mapValues(_.size)\n        val max = map.values.max\n\
    \        map.filter(_._2 == max)", "        var result = Map[String,Long]()\n\
    \        var max = 0l\n        for (c <- test.split(\" \")) {\n            if\
    \ (result.contains(c)) {\n                result(c) += 1\n            } else {\n\
    \                result(c) = 1\n            }\n            if (result(c) > max)\
    \ {\n                max = result(c)\n            }\n        }\n        result.filter(x\
    \ => x._2 == max)", "        val words = test.split(\" \")\n        val histogram\
    \ = new HashMap[String,Long]\n        for (word <- words) {\n            if (histogram.contains(word))\
    \ {\n                histogram(word) += 1\n            } else {\n            \
    \    histogram(word) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        histogram.filter(x => x._2 == max)", "        // Fill in the code here\n\
    \        return Map[String,Long]()", "        val histogram = Map[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        histogram.filter(x => x._2 == max)", "        val result = new HashMap[String,Long]\n\
    \        test.split(\" \").foreach(x => result(x) = result.getOrElse(x, 0l) +\
    \ 1l)\n        result.filter(x => x._2 == result.values.max)", "        val m\
    \ = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n            if\
    \ (m.contains(c)) {\n                m(c) += 1\n            } else {\n       \
    \         m(c) = 1\n            }\n        }\n        val max = m.values.max\n\
    \        m.filter(x => x._2 == max)", "        val result = new HashMap[String,Long]()\n\
    \        val words = test.split(\" \")\n        for (word <- words) {\n      \
    \      if (result.contains(word)) {\n                result(word) += 1\n     \
    \       } else {\n                result(word) = 1\n            }\n        }\n\
    \        result", "        val result = new HashMap[String,Long]()\n        for\
    \ (letter <- test.split(\" \")) {\n            if (result.contains(letter)) result(letter)\
    \ += 1\n            else result(letter) = 1\n        }\n        result.filter(x\
    \ => x._2 == result.values.max)", "        var result = Map[String,Long]()\n \
    \       var max = 0l\n        for (letter <- test.split(\" \")) {\n          \
    \  if (result.contains(letter)) {\n                result(letter) += 1\n     \
    \       } else {\n                result(letter) = 1\n            }\n        \
    \    if (result(letter) > max) {\n                max = result(letter)\n     \
    \       }\n        }\n        result.filter(x => x._2 == max)", "        // Fill\
    \ in the code here\n        return Map[String,Long]()", "        val words = test.split(\"\
    \ \")\n        val map = new HashMap[String,Long]()\n        for (word <- words)\
    \ {\n            if (map.contains(word)) {\n                map(word) += 1\n \
    \           } else {\n                map(word) = 1\n            }\n        }\n\
    \        val max = map.values.max\n        val result = new HashMap[String,Long]()\n\
    \        for ((key,value) <- map) {\n            if (value == max) {\n       \
    \         result(key) = value\n            }\n        }\n        result", "  \
    \      val result = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (result.contains(c)) {\n                result(c) +=\
    \ 1\n            } else {\n                result(c) = 1\n            }\n    \
    \    }\n        result", "        var dict = Map[String,Long]()\n        for (letter\
    \ <- test.split(\" \")) {\n            if (dict.contains(letter)) {\n        \
    \        dict(letter) += 1\n            } else {\n                dict(letter)\
    \ = 1\n            }\n        }\n        dict", "        val result = new HashMap[String,Long]\n\
    \        test.split(\" \").foreach(x => result.put(x, result.getOrElse(x, 0l)\
    \ + 1l))\n        result.filter(x => x._2 == result.values.max)", "        val\
    \ result = new HashMap[String,Long]\n        for (letter <- test.split(\" \"))\
    \ {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n        }\n        result", "        val map = new HashMap[String,Long]\n\
    \        test.split(\" \").foreach(x => map(x) = map.getOrElse(x, 0l) + 1l)\n\
    \        val max = map.values.max\n        map.filter(x => x._2 == max)", "  \
    \      val result = Map[String,Long]()\n        test.split(\" \").foreach(x =>\
    \ {\n            if (result.contains(x)) {\n                result(x) += 1\n \
    \           } else {\n                result(x) = 1\n            }\n        })\n\
    \        result.filter(x => x._2 == result.values.max)", "        val result =\
    \ new HashMap[String,Long]\n        for (c <- test.split(\" \")) {\n         \
    \   if (result.contains(c)) {\n                result(c) += 1\n            } else\
    \ {\n                result(c) = 1\n            }\n        }\n        result",
  "        var result = Map[String,Long]()\n        for (letter <- test.split(\" \"\
    )) {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result += (letter -> 1)\n      \
    \      }\n        }\n        result", "        val result = Map[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ words = test.split(\" \")\n        val dict = Map[String,Long]()\n        for\
    \ (word <- words) {\n            if (dict.contains(word)) {\n                dict(word)\
    \ += 1\n            } else {\n                dict(word) = 1\n            }\n\
    \        }\n        dict", "        val testArray = test.split(\" \")\n      \
    \  val testMap = Map[String,Long]()\n        for (i <- 0 until testArray.length)\
    \ {\n            if (testMap.contains(testArray(i))) {\n                testMap(testArray(i))\
    \ += 1\n            } else {\n                testMap += (testArray(i) -> 1)\n\
    \            }\n        }\n        val max = testMap.values.max\n        val result\
    \ = Map[String,Long]()\n        for (i <- 0 until testArray.length) {\n      \
    \      if (testMap(testArray(i)) == max) {\n                result += (testArray(i)\
    \ -> max)\n            }\n        }\n        result", "        // Fill in the\
    \ code here\n        Map[String,Long]()", "        val result = new HashMap[String,Long]\n\
    \        for (letter <- test.split(\" \")) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ letters = test.split(\" \")\n        val counts = letters.groupBy(identity).mapValues(_.length)\n\
    \        val max = counts.values.max\n        counts.filter(x => x._2 == max)",
  "        val words = test.split(\" \")\n        val histogram = Map[String,Long]()\n\
    \        for (word <- words) {\n            if (histogram.contains(word)) {\n\
    \                histogram(word) += 1\n            } else {\n                histogram(word)\
    \ = 1\n            }\n        }\n        val max = histogram.values.max\n    \
    \    histogram.filter(x => x._2 == max)", "        var map = Map[String,Long]()\n\
    \        for (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n\
    \                map(i) += 1\n            } else {\n                map += (i\
    \ -> 1)\n            }\n        }\n        var max = 0l\n        for (i <- map.values)\
    \ {\n            if (i > max) {\n                max = i\n            }\n    \
    \    }\n        var result = Map[String,Long]()\n        for ((k,v) <- map) {\n\
    \            if (v == max) {\n                result += (k -> v)\n           \
    \ }\n        }\n        return result", "        var result = Map[String,Long]()\n\
    \        for (i <- test.split(\" \")) {\n            if (result.contains(i)) {\n\
    \                result(i) += 1\n            } else {\n                result\
    \ += (i -> 1)\n            }\n        }\n        result", "        var result\
    \ = Map[String,Long]()\n        if (test.length > 0) {\n            val letters\
    \ = test.split(\" \")\n            val letterCounts = letters.groupBy(identity).mapValues(_.size)\n\
    \            val maxCount = letterCounts.values.max\n            for ((letter,\
    \ count) <- letterCounts) {\n                if (count == maxCount) {\n      \
    \              result += (letter -> count)\n                }\n            }\n\
    \        }\n        return result", "        val histogram = Map[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val maxCount =\
    \ histogram.values.max\n        val maxLetters = histogram.filter(x => x._2 ==\
    \ maxCount)\n        maxLetters", "        var result = Map[String,Long]()\n \
    \       var max = 0\n        for (i <- test.split(\" \")) {\n            if (result.contains(i))\
    \ result(i) += 1\n            else result(i) = 1\n            if (result(i) >\
    \ max) max = result(i).toInt\n        }\n        result.filter(x => x._2 == max)",
  "        var map = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n\
    \            if (map.contains(i)) {\n                map(i) += 1\n           \
    \ } else {\n                map += (i -> 1)\n            }\n        }\n      \
    \  var max = 0\n        for (i <- map.values) {\n            if (i > max) {\n\
    \                max = i\n            }\n        }\n        var result = Map[String,Long]()\n\
    \        for ((k,v) <- map) {\n            if (v == max) {\n                result\
    \ += (k -> v)\n            }\n        }\n        return result", "        val\
    \ result = new HashMap[String,Long]\n        for (c <- test.split(\" \")) {\n\
    \            result(c) = result.getOrElse(c, 0l) + 1l\n        }\n        result.filter(x\
    \ => x._2 == result.values.max)", "        if (test.isEmpty) return Map[String,Long]()\n\
    \        val letters = test.split(\" \")\n        val counts = letters.groupBy(x\
    \ => x).mapValues(x => x.length)\n        val maxCount = counts.values.max\n \
    \       return counts.filter(x => x._2 == maxCount)", "        val map = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) {\n\
    \                map(c) += 1\n            } else {\n                map(c) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        var result = Map[String,Long]()\n        if (test.length\
    \ == 0) {\n            return result\n        }\n        var max = 0\n       \
    \ var max_list = List[String]()\n        var count = 0\n        var current =\
    \ \"\"\n        for (c <- test) {\n            if (c == ' ') {\n             \
    \   if (count > max) {\n                    max = count\n                    max_list\
    \ = List[String](current)\n                } else if (count == max) {\n      \
    \              max_list = current :: max_list\n                }\n           \
    \     count = 0\n                current = \"\"\n            } else {\n      \
    \          count += 1\n                current += c\n            }\n        }\n\
    \        if (count > max) {\n            max = count\n            max_list = List[String](current)\n\
    \        } else if (count == max) {\n            max_list = current :: max_list\n\
    \        }\n        for (c <- max_list) {\n            result += (c -> max)\n\
    \        }\n        return result", "        val histogram = new HashMap[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        val result = new HashMap[String,Long]()\n        for ((letter, count)\
    \ <- histogram) {\n            if (count == max) {\n                result(letter)\
    \ = count\n            }\n        }\n        result", "        val map = Map[String,Long]()\n\
    \        for (i <- test.split(\" \")) {\n            if (map.contains(i)) {\n\
    \                map(i) += 1\n            } else {\n                map(i) = 1\n\
    \            }\n        }\n        val max = map.values.max\n        map.filter(x\
    \ => x._2 == max)", "        val result = new HashMap[String,Long]()\n       \
    \ for (letter <- test.split(\" \")) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        val max = result.values.max\n\
    \        val keys = result.filter(x => x._2 == max).keys\n        val result2\
    \ = new HashMap[String,Long]()\n        for (key <- keys) {\n            result2(key)\
    \ = max\n        }\n        result2", "        var result = Map[String,Long]()\n\
    \        var max = 0l\n        for (letter <- test.split(\" \")) {\n         \
    \   if (result.contains(letter)) {\n                result(letter) += 1\n    \
    \        } else {\n                result(letter) = 1\n            }\n       \
    \     if (result(letter) > max) {\n                max = result(letter)\n    \
    \        }\n        }\n        result.filter(x => x._2 == max)", "        // Fill\
    \ in the code here\n        val result = Map[String,Long]()\n        val words\
    \ = test.split(\" \")\n        for (word <- words) {\n            if (result.contains(word))\
    \ {\n                result(word) += 1\n            } else {\n               \
    \ result(word) = 1\n            }\n        }\n        result", "        val result\
    \ = Map[String,Long]()\n        val letters = test.split(\" \")\n        for (letter\
    \ <- letters) {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n        }\n        result", "        var result = Map[String,Long]()\n  \
    \      if (test.length > 0) {\n            var max = 0l\n            var maxs\
    \ = List[String]()\n            test.split(\" \").foreach(x => {\n           \
    \     if (result.contains(x)) {\n                    result(x) += 1\n        \
    \        } else {\n                    result(x) = 1\n                }\n    \
    \            if (result(x) > max) {\n                    max = result(x)\n   \
    \                 maxs = List[String](x)\n                } else if (result(x)\
    \ == max) {\n                    maxs = x :: maxs\n                }\n       \
    \     })\n            result = result.filterKeys(x => maxs.contains(x))\n    \
    \    }\n        result", "        // Fill in the code here\n        return Map()",
  "        val map = Map[String,Long]()\n        val list = test.split(\" \")\n  \
    \      for (i <- 0 until list.length) {\n            if (map.contains(list(i)))\
    \ {\n                map(list(i)) += 1\n            } else {\n               \
    \ map(list(i)) = 1\n            }\n        }\n        val max = map.values.max\n\
    \        map.filter(x => x._2 == max)", "        // Fill in the code here\n  \
    \      var result = Map[String,Long]()\n        var testArray = test.split(\"\
    \ \")\n        for (i <- 0 until testArray.length) {\n            if (result.contains(testArray(i)))\
    \ {\n                result(testArray(i)) += 1\n            } else {\n       \
    \         result += (testArray(i) -> 1)\n            }\n        }\n        result",
  "        val letters = test.split(\" \")\n        val counts = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (counts.contains(letter)) {\n\
    \                counts(letter) += 1\n            } else {\n                counts(letter)\
    \ = 1\n            }\n        }\n        val max = counts.values.max\n       \
    \ val maxKeys = counts.filter(x => x._2 == max).keys\n        val result = Map[String,Long]()\n\
    \        for (key <- maxKeys) {\n            result(key) = max\n        }\n  \
    \      result", "        val result = new HashMap[String,Long]\n        for (letter\
    \ <- test.split(\" \")) {\n            if (result.contains(letter)) {\n      \
    \          result(letter) += 1\n            } else {\n                result(letter)\
    \ = 1\n            }\n        }\n        result", "        var result = Map[String,Long]()\n\
    \        var max = 0\n        for (c <- test.split(\" \")) {\n            if (result.contains(c))\
    \ {\n                result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n            if (result(c) > max) {\n                max\
    \ = result(c).toInt\n            }\n        }\n        result.filter(x => x._2\
    \ == max)", "        val hist = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (hist.contains(c)) hist(c) += 1l\n            else hist(c)\
    \ = 1l\n        }\n        hist.filter(x => x._2 == hist.values.max)", "     \
    \   var result = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n\
    \            if (result.contains(i)) result(i) += 1\n            else result +=\
    \ (i -> 1)\n        }\n        result.filter(x => x._2 == result.values.max)",
  "        var map = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (map.contains(c)) {\n                map(c) += 1\n           \
    \ } else {\n                map(c) = 1\n            }\n        }\n        var\
    \ max = 0l\n        for (c <- map.keys) {\n            if (map(c) > max) {\n \
    \               max = map(c)\n            }\n        }\n        var result = Map[String,Long]()\n\
    \        for (c <- map.keys) {\n            if (map(c) == max) {\n           \
    \     result(c) = max\n            }\n        }\n        return result", "   \
    \     var result = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n\
    \            if (result.contains(i)) result(i) += 1\n            else result +=\
    \ (i -> 1)\n        }\n        result.filter(x => x._2 == result.values.max)",
  "        // Fill in the code here\n        val hist = new HashMap[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (hist.contains(c)) {\n\
    \                hist(c) += 1\n            } else {\n                hist(c) =\
    \ 1\n            }\n        }\n        val max = hist.values.max\n        val\
    \ keys = hist.filter(x => x._2 == max).keys\n        keys.map(x => (x, max)).toMap",
  "        val letters = test.split(\" \")\n        val counts = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (counts.contains(letter)) {\n\
    \                counts(letter) += 1\n            } else {\n                counts(letter)\
    \ = 1\n            }\n        }\n        val max = counts.values.max\n       \
    \ return counts.filter(x => x._2 == max)", "        val map = new HashMap[String,Long]\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c)\
    \ += 1\n            else map(c) = 1\n        }\n        map.filter(x => x._2 ==\
    \ map.values.max)", "        val result = Map[String,Long]()\n        for (letter\
    \ <- test.split(\" \")) {\n            if (result.contains(letter)) {\n      \
    \          result(letter) += 1\n            } else {\n                result(letter)\
    \ = 1\n            }\n        }\n        result", "        val histogram = new\
    \ HashMap[String,Long]\n        for (letter <- test.split(\" \")) {\n        \
    \    if (histogram.contains(letter)) {\n                histogram(letter) += 1\n\
    \            } else {\n                histogram(letter) = 1\n            }\n\
    \        }\n        val max = histogram.values.max\n        histogram.filter(x\
    \ => x._2 == max)", "        // Fill in the code here\n        return Map[String,Long]()",
  "        val words = test.split(\" \")\n        val map = Map[String,Long]()\n \
    \       var max = 0\n        for (word <- words) {\n            if (map.contains(word))\
    \ {\n                val count = map(word) + 1\n                map(word) = count\n\
    \                if (count > max) max = count\n            } else {\n        \
    \        map(word) = 1\n                if (1 > max) max = 1\n            }\n\
    \        }\n        val result = Map[String,Long]()\n        for ((key, value)\
    \ <- map) {\n            if (value == max) result(key) = value\n        }\n  \
    \      result", "        val map = new HashMap[String,Long]\n        for (c <-\
    \ test.split(\" \")) {\n            if (map.contains(c)) {\n                map(c)\
    \ += 1\n            } else {\n                map(c) = 1\n            }\n    \
    \    }\n        val max = map.values.max\n        map.filter(x => x._2 == max)",
  "        val letters = test.split(\" \")\n        var map = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (map.contains(letter)) {\n\
    \                map(letter) += 1\n            } else {\n                map +=\
    \ (letter -> 1)\n            }\n        }\n        map", "        val result =\
    \ new HashMap[String,Long]\n        for (c <- test.split(\" \")) {\n         \
    \   if (result.contains(c)) result(c) += 1\n            else result(c) = 1\n \
    \       }\n        result.filter(x => x._2 == result.values.max)", "        val\
    \ result = new HashMap[String,Long]\n        for (c <- test.split(\" \")) {\n\
    \            if (result.contains(c)) result(c) += 1\n            else result(c)\
    \ = 1\n        }\n        result.filter(x => x._2 == result.values.max)", "  \
    \      var result = Map[String,Long]()\n        var count = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (count.contains(c)) {\n\
    \                count(c) += 1\n            } else {\n                count(c)\
    \ = 1\n            }\n        }\n        var max = 0l\n        for ((k,v) <- count)\
    \ {\n            if (v > max) {\n                max = v\n            }\n    \
    \    }\n        for ((k,v) <- count) {\n            if (v == max) {\n        \
    \        result(k) = v\n            }\n        }\n        return result", "  \
    \      val letters = test.split(\" \")\n        var histogram = Map[String,Long]()\n\
    \        for (letter <- letters) {\n            if (histogram.contains(letter))\
    \ {\n                histogram = histogram + (letter -> (histogram(letter) + 1))\n\
    \            } else {\n                histogram = histogram + (letter -> 1)\n\
    \            }\n        }\n        val max = histogram.values.max\n        histogram.filter(x\
    \ => x._2 == max)", "        val histogram = new HashMap[String,Long]()\n    \
    \    for (letter <- test.split(\" \")) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        val max = histogram.values.max\n\
    \        val result = new HashMap[String,Long]()\n        for ((letter, count)\
    \ <- histogram) {\n            if (count == max) {\n                result(letter)\
    \ = count\n            }\n        }\n        result", "        val result = new\
    \ HashMap[String,Long]\n        for (c <- test.split(\" \")) {\n            if\
    \ (result.contains(c)) {\n                result(c) += 1\n            } else {\n\
    \                result(c) = 1\n            }\n        }\n        result", " \
    \       val hist = new HashMap[String,Long]()\n        for (c <- test.split(\"\
    \ \")) {\n            if (hist.contains(c)) hist(c) += 1\n            else hist(c)\
    \ = 1\n        }\n        val max = hist.values.max\n        hist.filter(x =>\
    \ x._2 == max)", "        val result = Map[String,Long]()\n        val letters\
    \ = test.split(\" \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        var\
    \ map = Map[String,Long]()\n        for (i <- test.split(\" \")) {\n         \
    \   if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n     \
    \   }\n        var max = 0l\n        for (i <- map.values) max = max.max(i)\n\
    \        var result = Map[String,Long]()\n        for (i <- map.keys) if (map(i)\
    \ == max) result += (i -> max)\n        return result", "        val words = test.split(\"\
    \ \")\n        val map = Map[String,Long]()\n        for (word <- words) {\n \
    \           if (map.contains(word)) {\n                map(word) += 1\n      \
    \      } else {\n                map(word) = 1\n            }\n        }\n   \
    \     map", "        val result = new HashMap[String,Long]()\n        for (c <-\
    \ test.split(\" \")) {\n            if (result.contains(c)) {\n              \
    \  result(c) += 1\n            } else {\n                result(c) = 1\n     \
    \       }\n        }\n        result", "        var map = Map[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (map.contains(c)) map(c)\
    \ += 1\n            else map += (c -> 1)\n        }\n        var max = 0l\n  \
    \      for (c <- map.keys) {\n            if (map(c) > max) max = map(c)\n   \
    \     }\n        var result = Map[String,Long]()\n        for (c <- map.keys)\
    \ {\n            if (map(c) == max) result += (c -> max)\n        }\n        return\
    \ result", "        val result = Map[String,Long]()\n        val letters = test.split(\"\
    \ \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ result = new HashMap[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (result.contains(c)) {\n                result(c) += 1\n     \
    \       } else {\n                result(c) = 1\n            }\n        }\n  \
    \      result", "        val result = new HashMap[String,Long]()\n        for\
    \ (letter <- test.split(\" \")) {\n            if (result.contains(letter)) {\n\
    \                result(letter) += 1\n            } else {\n                result(letter)\
    \ = 1\n            }\n        }\n        result", "        var result = Map[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result += (letter -> 1)\n            }\n        }\n        result", "    \
    \    var result = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (result.contains(c)) {\n                result(c) += 1\n     \
    \       } else {\n                result(c) = 1\n            }\n        }\n  \
    \      result", "        var result = Map[String,Long]()\n        for (letter\
    \ <- test.split(\" \")) {\n            if (result.contains(letter)) {\n      \
    \          result(letter) += 1\n            } else {\n                result(letter)\
    \ = 1\n            }\n        }\n        result", "        val histogram = new\
    \ HashMap[String,Long]\n        for (letter <- test.split(\" \")) {\n        \
    \    if (histogram.contains(letter)) {\n                histogram(letter) += 1\n\
    \            } else {\n                histogram(letter) = 1\n            }\n\
    \        }\n        val max = histogram.values.max\n        histogram.filter(x\
    \ => x._2 == max)", "        val map = new HashMap[String,Long]\n        for (c\
    \ <- test.split(\" \")) {\n            if (map.contains(c)) map(c) += 1\n    \
    \        else map(c) = 1\n        }\n        map.filter(x => x._2 == map.values.max)",
  "        var result = Map[String,Long]()\n        for (c <- test.split(\" \")) {\n\
    \            if (result.contains(c)) {\n                result(c) += 1\n     \
    \       } else {\n                result += (c -> 1)\n            }\n        }\n\
    \        var max = 0l\n        for (c <- result.keys) {\n            if (result(c)\
    \ > max) {\n                max = result(c)\n            }\n        }\n      \
    \  var finalResult = Map[String,Long]()\n        for (c <- result.keys) {\n  \
    \          if (result(c) == max) {\n                finalResult += (c -> max)\n\
    \            }\n        }\n        return finalResult", "        var result =\
    \ Map[String,Long]()\n        var max = 0l\n        for (letter <- test.split(\"\
    \ \")) {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n            if (result(letter) > max) {\n                max = result(letter)\n\
    \            }\n        }\n        result.filter(_._2 == max)", "        var result\
    \ = Map[String,Long]()\n        for (letter <- test.split(\" \")) {\n        \
    \    if (result.contains(letter)) {\n                result(letter) += 1\n   \
    \         } else {\n                result(letter) = 1\n            }\n      \
    \  }\n        result", "        var result = Map[String,Long]()\n        for (c\
    \ <- test.split(\" \")) {\n            if (result.contains(c)) {\n           \
    \     result(c) += 1\n            } else {\n                result += (c -> 1)\n\
    \            }\n        }\n        result", "        if (test.length == 0) return\
    \ Map[String,Long]()\n        val letters = test.split(\" \")\n        val counts\
    \ = Map[String,Long]()\n        for (letter <- letters) {\n            if (counts.contains(letter))\
    \ {\n                counts(letter) += 1\n            } else {\n             \
    \   counts(letter) = 1\n            }\n        }\n        val max = counts.values.max\n\
    \        return counts.filter(x => x._2 == max)", "        var result = Map[String,Long]()\n\
    \        var max = 0l\n        for (c <- test.split(\" \")) {\n            if\
    \ (result.contains(c)) {\n                result(c) += 1\n            } else {\n\
    \                result(c) = 1\n            }\n            if (result(c) > max)\
    \ {\n                max = result(c)\n            }\n        }\n        result.filter(e\
    \ => e._2 == max)", "        // Fill in the code here\n        return Map[String,Long]()",
  "        val result = new HashMap[String,Long]\n        for (letter <- test.split(\"\
    \ \")) {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n        }\n        result", "        var result = Map[String,Long]()\n  \
    \      var max = 0\n        for (letter <- test.split(\" \")) {\n            if\
    \ (result.contains(letter)) {\n                result(letter) += 1\n         \
    \   } else {\n                result(letter) = 1\n            }\n            if\
    \ (result(letter) > max) {\n                max = result(letter).toInt\n     \
    \       }\n        }\n        result.filter(x => x._2 == max)"]
stop_tokens:
- "\n    }\n"
