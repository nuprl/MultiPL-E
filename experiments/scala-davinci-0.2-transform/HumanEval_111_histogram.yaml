name: HumanEval_111_histogram
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    // of the letter with the most repetition and containing the\
  \ corresponding count.\n    // If several letters have the same occurrence, return\
  \ all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    // (Map[String,Long](\"\
  a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l))\n    // >>> histogram((\"a b b a\"))\n   \
  \ // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"a b c\
  \ a b\"))\n    // (Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))\n    // >>> histogram((\"\
  b b b b a\"))\n    // (Map[String,Long](\"b\" -> 4l))\n    // >>> histogram((\"\"\
  ))\n    // (Map[String,Long]())\n    def histogram(test : String) : Map[String,Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(histogram((\"a b\
  \ b a\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c a b\")).equals((Map[String,Long](\"a\" -> 2l, \"b\" -> 2l))));\n    assert(histogram((\"\
  a b c d g\")).equals((Map[String,Long](\"a\" -> 1l, \"b\" -> 1l, \"c\" -> 1l, \"\
  d\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"\
  r\" -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"b b b b a\")).equals((Map[String,Long](\"\
  b\" -> 4l))));\n    assert(histogram((\"r t g\")).equals((Map[String,Long](\"r\"\
  \ -> 1l, \"t\" -> 1l, \"g\" -> 1l))));\n    assert(histogram((\"\")).equals((Map[String,Long]())));\n\
  \    assert(histogram((\"a\")).equals((Map[String,Long](\"a\" -> 1l))));\n    }\n\
  \n}\n"
completions: ["        val hist = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            hist(c) = hist.getOrElse(c, 0l) + 1l\n        }\n      \
    \  val max = hist.values.max\n        hist.filter(x => x._2 == max)", "      \
    \  val result = new HashMap[String,Long]\n        val words = test.split(\" \"\
    )\n        for (word <- words) {\n            if (result.contains(word)) {\n \
    \               result(word) += 1\n            } else {\n                result(word)\
    \ = 1\n            }\n        }\n        result", "        var histogram = Map[String,Long]()\n\
    \        for (letter <- test.split(\" \")) {\n            if (histogram.contains(letter))\
    \ {\n                histogram(letter) += 1\n            } else {\n          \
    \      histogram(letter) = 1\n            }\n        }\n        var max = 0\n\
    \        for (letter <- histogram.keys) {\n            max = max.max(histogram(letter))\n\
    \        }\n        var result = Map[String,Long]()\n        for (letter <- histogram.keys)\
    \ {\n            if (histogram(letter) == max) {\n                result(letter)\
    \ = histogram(letter)\n            }\n        }\n        return result", "   \
    \     // Fill in the code here\n        return Map[String,Long]()", "        var\
    \ result = Map[String,Long]()\n        for (letter <- test.split(\" \")) {\n \
    \           if (result.contains(letter)) {\n                result(letter) +=\
    \ 1\n            } else {\n                result(letter) = 1\n            }\n\
    \        }\n        result", "        val result = Map[String,Long]()\n      \
    \  val words = test.split(\" \")\n        for (word <- words) {\n            if\
    \ (result.contains(word)) {\n                result(word) += 1\n            }\
    \ else {\n                result(word) = 1\n            }\n        }\n       \
    \ result", "        var result = Map[String,Long]()\n        var max = 0l\n  \
    \      for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n\
    \                result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n            if (result(c) > max) {\n                max\
    \ = result(c)\n            }\n        }\n        result.filter(x => x._2 == max)",
  "        val result = new HashMap[String,Long]()\n        for (letter <- test.split(\"\
    \ \")) {\n            if (result.contains(letter)) {\n                result(letter)\
    \ += 1\n            } else {\n                result(letter) = 1\n           \
    \ }\n        }\n        result", "        var map = Map[String,Long]()\n     \
    \   for (c <- test.split(\" \")) {\n            if (map.contains(c)) {\n     \
    \           map(c) += 1\n            } else {\n                map(c) = 1\n  \
    \          }\n        }\n        var max = 0l\n        for (v <- map.values) {\n\
    \            if (v > max) {\n                max = v\n            }\n        }\n\
    \        var result = Map[String,Long]()\n        for ((k,v) <- map) {\n     \
    \       if (v == max) {\n                result(k) = v\n            }\n      \
    \  }\n        return result", "        val histogram = Map[String,Long]()\n  \
    \      val words = test.split(\" \")\n        for (word <- words) {\n        \
    \    if (histogram.contains(word)) {\n                histogram(word) += 1\n \
    \           } else {\n                histogram(word) = 1\n            }\n   \
    \     }\n        val max = histogram.values.max\n        val result = Map[String,Long]()\n\
    \        for ((key, value) <- histogram) {\n            if (value == max) {\n\
    \                result(key) = value\n            }\n        }\n        result",
  "        var result = Map[String,Long]()\n        test.split(\" \").foreach(x =>\
    \ {\n            if (result.contains(x)) {\n                result(x) += 1\n \
    \           } else {\n                result(x) = 1\n            }\n        })\n\
    \        var max = 0l\n        result.foreach(x => {\n            if (x._2 > max)\
    \ {\n                max = x._2\n            }\n        })\n        result.filter(x\
    \ => x._2 == max)", "        var result = Map[String,Long]()\n        var letters\
    \ = test.split(\" \")\n        for (letter <- letters) {\n            if (result.contains(letter))\
    \ {\n                result(letter) += 1\n            } else {\n             \
    \   result(letter) = 1\n            }\n        }\n        result", "        val\
    \ result = Map[String,Long]()\n        val words = test.split(\" \")\n       \
    \ for (word <- words) {\n            if (result.contains(word)) {\n          \
    \      result(word) += 1\n            } else {\n                result(word) =\
    \ 1\n            }\n        }\n        result", "        var result = Map[String,Long]()\n\
    \        for (i <- test.split(\" \")) {\n            if (result.contains(i)) {\n\
    \                result(i) += 1\n            } else {\n                result\
    \ += (i -> 1)\n            }\n        }\n        result", "        // Fill in\
    \ the code here\n        return Map[String,Long]()", "        val result = new\
    \ HashMap[String,Long]\n        test.split(\" \").foreach(x => {\n           \
    \ if (result.contains(x)) {\n                result(x) += 1\n            } else\
    \ {\n                result(x) = 1\n            }\n        })\n        result.filter(x\
    \ => x._2 == result.values.max)", "        val letters = test.split(\" \")\n \
    \       val histogram = new HashMap[String,Long]\n        for (letter <- letters)\
    \ {\n            if (histogram.contains(letter)) {\n                histogram(letter)\
    \ += 1\n            } else {\n                histogram(letter) = 1\n        \
    \    }\n        }\n        val max = histogram.values.max\n        val result\
    \ = new HashMap[String,Long]\n        for ((letter, count) <- histogram) {\n \
    \           if (count == max) {\n                result(letter) = count\n    \
    \        }\n        }\n        result", "        val result = new HashMap[String,Long]()\n\
    \        for (c <- test.split(\" \")) {\n            if (result.contains(c)) {\n\
    \                result(c) += 1\n            } else {\n                result(c)\
    \ = 1\n            }\n        }\n        result", "        val m = Map[String,Long]()\n\
    \        val l = test.split(\" \")\n        for (i <- 0 until l.length) {\n  \
    \          val c = l(i)\n            if (m.contains(c)) m(c) += 1l\n         \
    \   else m(c) = 1l\n        }\n        val max = m.values.max\n        val r =\
    \ Map[String,Long]()\n        for ((k,v) <- m) if (v == max) r(k) = v\n      \
    \  r", "        val result = new HashMap[String,Long]\n        for (c <- test.split(\"\
    \ \")) {\n            if (result.contains(c)) result(c) += 1\n            else\
    \ result(c) = 1\n        }\n        result.filter(x => x._2 == result.values.max)"]
stop_tokens:
- "\n    }\n"
