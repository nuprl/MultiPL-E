name: HumanEval_61_correct_bracketing
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // brackets is a string of \"(\" and \")\".\n    // return True if every opening\
  \ bracket has a corresponding closing bracket.\n    // >>> correctBracketing((\"\
  (\"))\n    // (false)\n    // >>> correctBracketing((\"()\"))\n    // (true)\n \
  \   // >>> correctBracketing((\"(()())\"))\n    // (true)\n    // >>> correctBracketing((\"\
  )(()\"))\n    // (false)\n    def correctBracketing(brackets : String) : Boolean\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(correctBracketing((\"\
  ()\")) == (true));\n    assert(correctBracketing((\"(()())\")) == (true));\n   \
  \ assert(correctBracketing((\"()()(()())()\")) == (true));\n    assert(correctBracketing((\"\
  ()()((()()())())(()()(()))\")) == (true));\n    assert(correctBracketing((\"((()())))\"\
  )) == (false));\n    assert(correctBracketing((\")(()\")) == (false));\n    assert(correctBracketing((\"\
  (\")) == (false));\n    assert(correctBracketing((\"((((\")) == (false));\n    assert(correctBracketing((\"\
  )\")) == (false));\n    assert(correctBracketing((\"(()\")) == (false));\n    assert(correctBracketing((\"\
  ()()(()())())(()\")) == (false));\n    assert(correctBracketing((\"()()(()())()))()\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        var stack = new Stack[Char]\n        for (c <- brackets) {\n\
    \            if (c == '(') stack.push(c)\n            else if (c == ')') {\n \
    \               if (stack.isEmpty) return false\n                stack.pop\n \
    \           }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]()\n\
    \        for (c <- brackets) {\n            if (c == '(') {\n                stack.push(c)\n\
    \            } else if (c == ')') {\n                if (stack.isEmpty) return\
    \ false\n                stack.pop\n            }\n        }\n        stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        stack.isEmpty",
  "        var count = 0\n        for (c <- brackets) {\n            if (c == '(')\
    \ count += 1\n            else if (c == ')') count -= 1\n            if (count\
    \ < 0) return false\n        }\n        return count == 0", "        var stack\
    \ = new Stack[Char]\n        for (c <- brackets) {\n            if (c == '(')\
    \ stack.push(c)\n            else if (c == ')') {\n                if (stack.isEmpty)\
    \ return false\n                else stack.pop\n            }\n        }\n   \
    \     stack.isEmpty", "        var stack = new Stack[Char]()\n        for (c <-\
    \ brackets) {\n            if (c == '(') stack.push(c)\n            else if (c\
    \ == ')') {\n                if (stack.isEmpty) return false\n               \
    \ stack.pop\n            }\n        }\n        return stack.isEmpty", "      \
    \  var stack = new Stack[Char]\n        for (c <- brackets) {\n            if\
    \ (c == '(') stack.push(c)\n            else if (c == ')') {\n               \
    \ if (stack.isEmpty) return false\n                stack.pop\n            }\n\
    \        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') {\n                stack.push(c)\n\
    \            } else if (c == ')') {\n                if (stack.isEmpty) {\n  \
    \                  return false\n                } else {\n                  \
    \  stack.pop\n                }\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                stack.pop\n           \
    \ }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                stack.pop\n           \
    \ }\n        }\n        stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') stack.push(c)\n    \
    \        else if (c == ')') {\n                if (stack.isEmpty) return false\n\
    \                else stack.pop\n            }\n        }\n        return stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') stack.push(c)\n            else if (c == ')') {\n           \
    \     if (stack.isEmpty) return false\n                else stack.pop\n      \
    \      }\n        }\n        return stack.isEmpty", "        var stack = new Stack[Char]\n\
    \        for (c <- brackets) {\n            if (c == '(') {\n                stack.push(c)\n\
    \            } else if (c == ')') {\n                if (stack.isEmpty) return\
    \ false\n                stack.pop\n            }\n        }\n        stack.isEmpty",
  "        var stack = new Stack[Char]\n        for (c <- brackets) {\n          \
    \  if (c == '(') {\n                stack.push(c)\n            } else if (c ==\
    \ ')') {\n                if (stack.isEmpty) return false\n                stack.pop\n\
    \            }\n        }\n        return stack.isEmpty"]
stop_tokens:
- "\n    }\n"
