name: HumanEval_49_modp
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l), (5l))\n\
  \    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>> modp((0l),\
  \ (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n    // >>> modp((100l),\
  \ (101l))\n    // (1l)\n    def modp(n : Long, p : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
  \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
  \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
  \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
  \ == (3l));\n    }\n\n}\n"
completions: ["        var result : Long = 1\n        var base : Long = 2\n      \
    \  var exponent : Long = n\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            exponent >>= 1\n            base = (base * base) % p\n        }\n\
    \        return result", "        var result : Long = 1\n        var k : Long\
    \ = n\n        var m : Long = p\n        while (k > 0) {\n            if ((k &\
    \ 1) == 1) {\n                result = (result * n) % p\n            }\n     \
    \       k >>= 1\n            n = (n * n) % p\n        }\n        return result",
  "        if (n == 0) return 1\n        var result = 1l\n        var nn = n\n   \
    \     while (nn > 0) {\n            if ((nn & 1) == 1) result = (result * 2) %\
    \ p\n            nn >>= 1\n        }\n        return result", "        var result\
    \ : Long = 1\n        var b : Long = 2\n        var p2 : Long = p\n        var\
    \ n2 : Long = n\n        while (n2 > 0) {\n            if ((n2 & 1) == 1) {\n\
    \                result = (result * b) % p2\n            }\n            n2 >>=\
    \ 1\n            b = (b * b) % p2\n        }\n        return result", "      \
    \  var result : Long = 1\n        var base : Long = 2\n        var exp : Long\
    \ = n\n        while (exp > 0) {\n            if ((exp & 1) == 1) {\n        \
    \        result = (result * base) % p\n            }\n            exp >>= 1\n\
    \            base = (base * base) % p\n        }\n        return result", "  \
    \      var result : Long = 1\n        var b : Long = 2\n        var e : Long =\
    \ n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n              \
    \  result = (result * b) % p\n            }\n            e = e >> 1\n        \
    \    b = (b * b) % p\n        }\n        return result", "        var result :\
    \ Long = 1\n        var base : Long = 2\n        var exp : Long = n\n        while\
    \ (exp > 0) {\n            if ((exp & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exp >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var base : Long = 2\n        var exp : Long = n\n        while (exp\
    \ > 0) {\n            if ((exp & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exp >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var base : Long = 2\n        var exponent : Long = n\n        while\
    \ (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result\
    \ = (result * base) % p\n            }\n            exponent >>= 1\n         \
    \   base = (base * base) % p\n        }\n        return result", "        if (n\
    \ == 0) return 1\n        var r = 1l\n        var b = 2l\n        var e = n\n\
    \        while (e > 0) {\n            if (e % 2 == 1) r = (r * b) % p\n      \
    \      e /= 2\n            b = (b * b) % p\n        }\n        return r", "  \
    \      var result : Long = 1\n        var b : Long = 2\n        var e : Long =\
    \ n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n              \
    \  result = (result * b) % p\n            }\n            e = e >> 1\n        \
    \    b = (b * b) % p\n        }\n        return result", "        if (n == 0)\
    \ return 1\n        if (n % 2 == 0) {\n            val x = modp(n / 2, p)\n  \
    \          return (x * x) % p\n        }\n        else {\n            return (2\
    \ * modp(n - 1, p)) % p\n        }", "        var result : Long = 1\n        var\
    \ base : Long = 2\n        var exp : Long = n\n        while (exp > 0) {\n   \
    \         if ((exp & 1) == 1) {\n                result = (result * base) % p\n\
    \            }\n            exp >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result", "        var result : Long = 1\n        var\
    \ b : Long = 2\n        var p2 : Long = p\n        var n2 : Long = n\n       \
    \ while (n2 > 0) {\n            if ((n2 & 1) == 1) {\n                result =\
    \ (result * b) % p2\n            }\n            n2 >>= 1\n            b = (b *\
    \ b) % p2\n        }\n        return result", "        var result : Long = 1\n\
    \        var base : Long = 2\n        var exponent : Long = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var base : Long = 2\n        var exponent : Long = n\n        while\
    \ (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result\
    \ = (result * base) % p\n            }\n            exponent >>= 1\n         \
    \   base = (base * base) % p\n        }\n        return result", "        var\
    \ result : Long = 1\n        var base : Long = 2\n        var exponent : Long\
    \ = n\n        while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n\
    \                result = (result * base) % p\n            }\n            exponent\
    \ >>= 1\n            base = (base * base) % p\n        }\n        return result",
  "        if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x = (x *\
    \ x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", "      \
    \  var result : Long = 1\n        var base : Long = 2\n        var exponent :\
    \ Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        if (n == 0) 1\n        else {\n            var res\
    \ = 1l\n            var x = n\n            var y = p\n            while (x > 0)\
    \ {\n                if ((x & 1) == 1) res = (res * y) % p\n                x\
    \ >>= 1\n                y = (y * y) % p\n            }\n            res\n   \
    \     }"]
stop_tokens:
- "\n    }\n"
