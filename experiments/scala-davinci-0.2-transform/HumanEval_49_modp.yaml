name: HumanEval_49_modp
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp((3l), (5l))\n\
  \    // (3l)\n    // >>> modp((1101l), (101l))\n    // (2l)\n    // >>> modp((0l),\
  \ (101l))\n    // (1l)\n    // >>> modp((3l), (11l))\n    // (8l)\n    // >>> modp((100l),\
  \ (101l))\n    // (1l)\n    def modp(n : Long, p : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(modp((3l), (5l))\
  \ == (3l));\n    assert(modp((1101l), (101l)) == (2l));\n    assert(modp((0l), (101l))\
  \ == (1l));\n    assert(modp((3l), (11l)) == (8l));\n    assert(modp((100l), (101l))\
  \ == (1l));\n    assert(modp((30l), (5l)) == (4l));\n    assert(modp((31l), (5l))\
  \ == (3l));\n    }\n\n}\n"
completions: ["        var result : Long = 1\n        var base : Long = 2\n      \
    \  var exponent : Long = n\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            exponent >>= 1\n            base = (base * base) % p\n        }\n\
    \        return result", "        var result : Long = 1\n        var k : Long\
    \ = n\n        var m : Long = p\n        while (k > 0) {\n            if ((k &\
    \ 1) == 1) {\n                result = (result * n) % p\n            }\n     \
    \       k >>= 1\n            n = (n * n) % p\n        }\n        return result",
  "        if (n == 0) return 1\n        var result = 1l\n        var nn = n\n   \
    \     while (nn > 0) {\n            if ((nn & 1) == 1) result = (result * 2) %\
    \ p\n            nn >>= 1\n        }\n        return result", "        var result\
    \ : Long = 1\n        var b : Long = 2\n        var p2 : Long = p\n        var\
    \ n2 : Long = n\n        while (n2 > 0) {\n            if ((n2 & 1) == 1) {\n\
    \                result = (result * b) % p2\n            }\n            n2 >>=\
    \ 1\n            b = (b * b) % p2\n        }\n        return result", "      \
    \  var result : Long = 1\n        var base : Long = 2\n        var exp : Long\
    \ = n\n        while (exp > 0) {\n            if ((exp & 1) == 1) {\n        \
    \        result = (result * base) % p\n            }\n            exp >>= 1\n\
    \            base = (base * base) % p\n        }\n        return result", "  \
    \      var result : Long = 1\n        var b : Long = 2\n        var e : Long =\
    \ n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n              \
    \  result = (result * b) % p\n            }\n            e = e >> 1\n        \
    \    b = (b * b) % p\n        }\n        return result", "        var result :\
    \ Long = 1\n        var base : Long = 2\n        var exp : Long = n\n        while\
    \ (exp > 0) {\n            if ((exp & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exp >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var base : Long = 2\n        var exp : Long = n\n        while (exp\
    \ > 0) {\n            if ((exp & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exp >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var base : Long = 2\n        var exponent : Long = n\n        while\
    \ (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result\
    \ = (result * base) % p\n            }\n            exponent >>= 1\n         \
    \   base = (base * base) % p\n        }\n        return result", "        if (n\
    \ == 0) return 1\n        var r = 1l\n        var b = 2l\n        var e = n\n\
    \        while (e > 0) {\n            if (e % 2 == 1) r = (r * b) % p\n      \
    \      e /= 2\n            b = (b * b) % p\n        }\n        return r", "  \
    \      var result : Long = 1\n        var b : Long = 2\n        var e : Long =\
    \ n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n              \
    \  result = (result * b) % p\n            }\n            e = e >> 1\n        \
    \    b = (b * b) % p\n        }\n        return result", "        if (n == 0)\
    \ return 1\n        if (n % 2 == 0) {\n            val x = modp(n / 2, p)\n  \
    \          return (x * x) % p\n        }\n        else {\n            return (2\
    \ * modp(n - 1, p)) % p\n        }", "        var result : Long = 1\n        var\
    \ base : Long = 2\n        var exp : Long = n\n        while (exp > 0) {\n   \
    \         if ((exp & 1) == 1) {\n                result = (result * base) % p\n\
    \            }\n            exp >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result", "        var result : Long = 1\n        var\
    \ b : Long = 2\n        var p2 : Long = p\n        var n2 : Long = n\n       \
    \ while (n2 > 0) {\n            if ((n2 & 1) == 1) {\n                result =\
    \ (result * b) % p2\n            }\n            n2 >>= 1\n            b = (b *\
    \ b) % p2\n        }\n        return result", "        var result : Long = 1\n\
    \        var base : Long = 2\n        var exponent : Long = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var base : Long = 2\n        var exponent : Long = n\n        while\
    \ (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result\
    \ = (result * base) % p\n            }\n            exponent >>= 1\n         \
    \   base = (base * base) % p\n        }\n        return result", "        var\
    \ result : Long = 1\n        var base : Long = 2\n        var exponent : Long\
    \ = n\n        while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n\
    \                result = (result * base) % p\n            }\n            exponent\
    \ >>= 1\n            base = (base * base) % p\n        }\n        return result",
  "        if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x = (x *\
    \ x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", "      \
    \  var result : Long = 1\n        var base : Long = 2\n        var exponent :\
    \ Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        if (n == 0) 1\n        else {\n            var res\
    \ = 1l\n            var x = n\n            var y = p\n            while (x > 0)\
    \ {\n                if ((x & 1) == 1) res = (res * y) % p\n                x\
    \ >>= 1\n                y = (y * y) % p\n            }\n            res\n   \
    \     }", "        var result : Long = 1\n        var b : Long = 2\n        var\
    \ p2 : Long = p\n        var n2 : Long = n\n        while (n2 > 0) {\n       \
    \     if ((n2 & 1) == 1) {\n                result = (result * b) % p2\n     \
    \       }\n            n2 >>= 1\n            b = (b * b) % p2\n        }\n   \
    \     return result", "        var result : Long = 1\n        var b : Long = 2\n\
    \        var m : Long = n\n        while (m > 0) {\n            if ((m & 1) ==\
    \ 1) {\n                result = (result * b) % p\n            }\n           \
    \ m >>= 1\n            b = (b * b) % p\n        }\n        return result", " \
    \       var result : Long = 1\n        var base : Long = 2\n        var exp :\
    \ Long = n\n        while (exp > 0) {\n            if ((exp & 1) == 1) {\n   \
    \             result = (result * base) % p\n            }\n            exp >>=\
    \ 1\n            base = (base * base) % p\n        }\n        return result",
  "        var result : Long = 1\n        var power : Long = n\n        var mod :\
    \ Long = p\n        while (power > 0) {\n            if ((power & 1) == 1) {\n\
    \                result = (result * n) % p\n            }\n            power >>=\
    \ 1\n            n = (n * n) % p\n        }\n        return result", "       \
    \ var res = 1l\n        var x = n\n        var y = p\n        while (x > 0) {\n\
    \            if ((x & 1) == 1) {\n                res = (res * y) % p\n      \
    \      }\n            x >>= 1\n            y = (y * y) % p\n        }\n      \
    \  res", "        var result : Long = 1\n        var x : Long = n\n        var\
    \ y : Long = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n   \
    \             result = (result * y) % p\n            }\n            x >>= 1\n\
    \            y = (y * y) % p\n        }\n        return result", "        var\
    \ result : Long = 1\n        var b : Long = 2\n        var e : Long = n\n    \
    \    while (e > 0) {\n            if ((e & 1) == 1) {\n                result\
    \ = (result * b) % p\n            }\n            e = e >> 1\n            b = (b\
    \ * b) % p\n        }\n        return result", "        var result : Long = 1\n\
    \        var base : Long = 2\n        var exp : Long = n\n        while (exp >\
    \ 0) {\n            if ((exp & 1) == 1) {\n                result = (result *\
    \ base) % p\n            }\n            exp >>= 1\n            base = (base *\
    \ base) % p\n        }\n        return result", "        if (n == 0) return 1\n\
    \        var res = 1l\n        var x = n\n        var y = p\n        while (x\
    \ > 1) {\n            if ((x & 1) == 1) res = (res * n) % p\n            x >>=\
    \ 1\n            n = (n * n) % p\n        }\n        return res", "        var\
    \ result : Long = 1\n        var base : Long = 2\n        var exponent : Long\
    \ = n\n        while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n\
    \                result = (result * base) % p\n            }\n            exponent\
    \ >>= 1\n            base = (base * base) % p\n        }\n        return result",
  "        var res = 1l\n        var nn = n\n        while (nn > 0) {\n          \
    \  if ((nn & 1) == 1) res = (res * n) % p\n            nn >>= 1\n            n\
    \ = (n * n) % p\n        }\n        res", "        var result : Long = 1\n   \
    \     var base : Long = 2\n        var exp : Long = n\n        while (exp > 0)\
    \ {\n            if ((exp & 1) == 1) {\n                result = (result * base)\
    \ % p\n            }\n            exp >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        var result : Long = 1\n   \
    \     var x : Long = n\n        var y : Long = p\n        while (x > 0) {\n  \
    \          if ((x & 1) == 1) {\n                result = (result * x) % y\n  \
    \          }\n            x = x >> 1\n            y = (y * y) % p\n        }\n\
    \        return result", "        var result : Long = 1\n        var base : Long\
    \ = 2\n        var exponent : Long = n\n        while (exponent > 0) {\n     \
    \       if ((exponent & 1) == 1) {\n                result = (result * base) %\
    \ p\n            }\n            exponent >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        if (n == 0) return 1\n    \
    \    var result = 1l\n        var base = 2l\n        var exp = n\n        while\
    \ (exp > 0) {\n            if (exp % 2 == 1) {\n                result = (result\
    \ * base) % p\n            }\n            base = (base * base) % p\n         \
    \   exp /= 2\n        }\n        return result", "        var result : Long =\
    \ 1\n        var base : Long = 2\n        var exponent : Long = n\n        while\
    \ (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result\
    \ = (result * base) % p\n            }\n            exponent >>= 1\n         \
    \   base = (base * base) % p\n        }\n        return result", "        var\
    \ result : Long = 1\n        var power : Long = n\n        var mod : Long = p\n\
    \        while (power > 0) {\n            if ((power & 1) == 1) {\n          \
    \      result = (result * n) % p\n            }\n            power >>= 1\n   \
    \         n = (n * n) % p\n        }\n        return result", "        var result\
    \ : Long = 1\n        var base : Long = 2\n        var exp : Long = n\n      \
    \  while (exp > 0) {\n            if ((exp & 1) == 1) {\n                result\
    \ = (result * base) % p\n            }\n            exp >>= 1\n            base\
    \ = (base * base) % p\n        }\n        return result", "        if (n == 0)\
    \ return 1\n        var x = modp(n / 2, p)\n        x = (x * x) % p\n        if\
    \ (n % 2 == 1) x = (x * 2) % p\n        return x", "        var result : Long\
    \ = 1\n        var base : Long = 2\n        var exponent : Long = n\n        while\
    \ (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result\
    \ = (result * base) % p\n            }\n            exponent >>= 1\n         \
    \   base = (base * base) % p\n        }\n        return result", "        var\
    \ result : Long = 1\n        var power : Long = n\n        var mod : Long = p\n\
    \        while (power > 0) {\n            if ((power & 1) == 1) {\n          \
    \      result = (result * n) % p\n            }\n            power >>= 1\n   \
    \         n = (n * n) % p\n        }\n        return result", "        var result\
    \ : Long = 1\n        var base : Long = 2\n        var exponent : Long = n\n \
    \       while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n     \
    \           result = (result * base) % p\n            }\n            exponent\
    \ >>= 1\n            base = (base * base) % p\n        }\n        return result",
  "        var result : Long = 1\n        var base : Long = 2\n        var exp : Long\
    \ = n\n        while (exp > 0) {\n            if ((exp & 1) == 1) {\n        \
    \        result = (result * base) % p\n            }\n            exp >>= 1\n\
    \            base = (base * base) % p\n        }\n        return result", "  \
    \      var result : Long = 1\n        var base : Long = 2\n        var exp : Long\
    \ = n\n        while (exp > 0) {\n            if ((exp & 1) == 1) {\n        \
    \        result = (result * base) % p\n            }\n            exp >>= 1\n\
    \            base = (base * base) % p\n        }\n        return result", "  \
    \      var result : Long = 1\n        var base : Long = 2\n        var exponent\
    \ : Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        var result : Long = 1\n        var b : Long = 2\n \
    \       var e : Long = n\n        while (e > 0) {\n            if ((e & 1) ==\
    \ 1) {\n                result = (result * b) % p\n            }\n           \
    \ e = e >> 1\n            b = (b * b) % p\n        }\n        return result",
  "        if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            return (x * x) % p\n        }\n        else return (2 *\
    \ modp(n - 1, p)) % p", "        if (n == 0) return 1\n        if (n % 2 == 0)\
    \ {\n            val x = modp(n / 2, p)\n            return (x * x) % p\n    \
    \    }\n        else {\n            return (2 * modp(n - 1, p)) % p\n        }",
  "        var result : Long = 1\n        var base : Long = 2\n        var exponent\
    \ : Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        var result : Long = 1\n        var base : Long = 2\n\
    \        var exponent : Long = n\n        while (exponent > 0) {\n           \
    \ if ((exponent & 1) == 1) {\n                result = (result * base) % p\n \
    \           }\n            exponent >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        var result : Long = 1\n     \
    \   var base : Long = 2\n        var exponent : Long = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        if (n == 0) return\
    \ 1\n        var res = 1l\n        var x = n\n        var y = p\n        while\
    \ (x > 1) {\n            if ((x & 1) == 1) {\n                res = (res * x)\
    \ % y\n            }\n            x = (x * x) % y\n        }\n        return res",
  "        if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x = (x *\
    \ x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", "      \
    \  var result : Long = 1\n        var base : Long = 2\n        var exponent :\
    \ Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        var result : Long = 1\n        var power : Long = n\n\
    \        var divisor : Long = p\n        while (power > 0) {\n            if ((power\
    \ & 1) == 1) {\n                result = (result * divisor) % p\n            }\n\
    \            divisor = (divisor * divisor) % p\n            power >>= 1\n    \
    \    }\n        return result", "        var result : Long = 1\n        var b\
    \ : Long = 2\n        var m : Long = n\n        while (m > 0) {\n            if\
    \ ((m & 1) == 1) {\n                result = (result * b) % p\n            }\n\
    \            m >>= 1\n            b = (b * b) % p\n        }\n        return result",
  "        var result : Long = 1\n        var power : Long = n\n        var divisor\
    \ : Long = p\n        while (power > 0) {\n            if ((power & 1) == 1) {\n\
    \                result = (result * power) % p\n            }\n            power\
    \ = (power * power) % p\n            divisor = (divisor * divisor) % p\n     \
    \   }\n        return result", "        var result : Long = 1\n        var b :\
    \ Long = 2\n        var e : Long = n\n        while (e > 0) {\n            if\
    \ ((e & 1) == 1) {\n                result = (result * b) % p\n            }\n\
    \            e = e >> 1\n            b = (b * b) % p\n        }\n        return\
    \ result", "        var result : Long = 1\n        var base : Long = 2\n     \
    \   var exponent : Long = n\n        while (exponent > 0) {\n            if ((exponent\
    \ & 1) == 1) {\n                result = (result * base) % p\n            }\n\
    \            exponent >>= 1\n            base = (base * base) % p\n        }\n\
    \        return result", "        var result : Long = 1\n        var base : Long\
    \ = 2\n        var exponent : Long = n\n        while (exponent > 0) {\n     \
    \       if ((exponent & 1) == 1) {\n                result = (result * base) %\
    \ p\n            }\n            exponent >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        if (n == 0) return 1\n    \
    \    var x = modp(n / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1)\
    \ x = (x * 2) % p\n        return x", "        var result : Long = 1\n       \
    \ var base : Long = 2\n        var exponent : Long = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        if (n == 0) 1\n   \
    \     else if (n % 2 == 0) modp(n / 2, p) * modp(n / 2, p) % p\n        else modp(n\
    \ / 2, p) * modp(n / 2, p) * 2 % p", "        var result : Long = 1\n        var\
    \ base : Long = 2\n        var exponent : Long = n\n        while (exponent >\
    \ 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var x : Long = n\n        var y : Long = p\n        while (x > 0)\
    \ {\n            if ((x & 1) == 1) {\n                result = (result * x) %\
    \ y\n            }\n            x = x >> 1\n            y = (y * y) % p\n    \
    \    }\n        return result", "        var result : Long = 1\n        var x\
    \ : Long = n\n        var y : Long = p\n        while (x > 0) {\n            if\
    \ ((x & 1) == 1) {\n                result = (result * y) % p\n            }\n\
    \            x >>= 1\n            y = (y * y) % p\n        }\n        return result",
  "        var result : Long = 1\n        var x : Long = n\n        var y : Long =\
    \ p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n              \
    \  result = (result * x) % y\n            }\n            x = x >> 1\n        \
    \    y = (y * y) % p\n        }\n        return result", "        if (n == 0)\
    \ return 1\n        if (n % 2 == 0) {\n            val t = modp(n / 2, p)\n  \
    \          return (t * t) % p\n        }\n        return (modp(n - 1, p) * n)\
    \ % p", "        if (n == 0) return 1\n        var result = 1l\n        var b\
    \ = n\n        var e = p - 2\n        while (e > 0) {\n            if ((e & 1)\
    \ == 1) result = (result * b) % p\n            b = (b * b) % p\n            e\
    \ >>= 1\n        }\n        return result", "        var result : Long = 1\n \
    \       var i : Long = 0\n        while (i < n) {\n            result = (result\
    \ * 2) % p\n            i += 1\n        }\n        return result", "        if\
    \ (n == 0) return 1\n        var x = modp(n / 2, p)\n        x = (x * x) % p\n\
    \        if (n % 2 == 1) x = (x * 2) % p\n        return x", "        var result\
    \ : Long = 1\n        var b : Long = 2\n        var e : Long = n\n        while\
    \ (e > 0) {\n            if ((e & 1) == 1) {\n                result = (result\
    \ * b) % p\n            }\n            e = e >> 1\n            b = (b * b) % p\n\
    \        }\n        return result", "        var result : Long = 1\n        var\
    \ base : Long = 2\n        var exp : Long = n\n        while (exp > 0) {\n   \
    \         if ((exp & 1) == 1) {\n                result = (result * base) % p\n\
    \            }\n            exp >>= 1\n            base = (base * base) % p\n\
    \        }\n        return result", "        var result : Long = 1\n        var\
    \ x : Long = n\n        var y : Long = p\n        while (x > 0) {\n          \
    \  if ((x & 1) == 1) {\n                result = (result * y) % p\n          \
    \  }\n            x >>= 1\n            y = (y * y) % p\n        }\n        return\
    \ result", "        var result : Long = 1\n        var base : Long = 2\n     \
    \   var exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exp >>= 1\n            base = (base * base) % p\n        }\n        return\
    \ result", "        var result : Long = 1\n        var b : Long = 2\n        var\
    \ m : Long = n\n        while (m > 0) {\n            if ((m & 1) == 1) {\n   \
    \             result = (result * b) % p\n            }\n            m >>= 1\n\
    \            b = (b * b) % p\n        }\n        return result", "        if (n\
    \ == 0) return 1\n        var result = 1l\n        var b = 2l\n        var m =\
    \ n\n        while (m > 0) {\n            if ((m & 1) == 1) result = (result *\
    \ b) % p\n            b = (b * b) % p\n            m >>= 1\n        }\n      \
    \  return result", "        var result : Long = 1\n        var x : Long = n\n\
    \        var y : Long = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) {\n                result = (result * x) % y\n            }\n           \
    \ x = x >> 1\n            y = (y * y) % p\n        }\n        return result",
  "        var result : Long = 1\n        var base : Long = 2\n        var exp : Long\
    \ = n\n        while (exp > 0) {\n            if ((exp & 1) == 1) {\n        \
    \        result = (result * base) % p\n            }\n            exp >>= 1\n\
    \            base = (base * base) % p\n        }\n        return result", "  \
    \      var result : Long = 1\n        var b : Long = 2\n        var p2 : Long\
    \ = p\n        var n2 : Long = n\n        while (n2 > 0) {\n            if ((n2\
    \ & 1) == 1) {\n                result = (result * b) % p2\n            }\n  \
    \          n2 >>= 1\n            b = (b * b) % p2\n        }\n        return result",
  "        var result : Long = 1\n        var b : Long = 2\n        var p2 : Long\
    \ = p\n        var n2 : Long = n\n        while (n2 > 0) {\n            if ((n2\
    \ & 1) == 1) {\n                result = (result * b) % p2\n            }\n  \
    \          n2 >>= 1\n            b = (b * b) % p2\n        }\n        return result",
  "        var result : Long = 1\n        var base : Long = 2\n        var exponent\
    \ : Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        var result : Long = 1\n        var base : Long = 2\n\
    \        var exponent : Long = n\n        while (exponent > 0) {\n           \
    \ if ((exponent & 1) == 1) {\n                result = (result * base) % p\n \
    \           }\n            exponent >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        var result : Long = 1\n     \
    \   var base : Long = 2\n        var exponent : Long = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        if (n == 0) return\
    \ 1\n        if (n % 2 == 0) {\n            val t = modp(n / 2, p)\n         \
    \   return (t * t) % p\n        }\n        return (modp(n - 1, p) * n) % p", " \
    \       if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x = (x *\
    \ x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", "      \
    \  var result : Long = 1\n        var base : Long = 2\n        var exponent :\
    \ Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        var result : Long = 1\n        var base : Long = 2\n\
    \        var exp : Long = n\n        while (exp > 0) {\n            if ((exp &\
    \ 1) == 1) {\n                result = (result * base) % p\n            }\n  \
    \          exp >>= 1\n            base = (base * base) % p\n        }\n      \
    \  return result", "        var result : Long = 1\n        var power : Long =\
    \ n\n        var divisor : Long = p\n        while (power > 0) {\n           \
    \ if ((power & 1) == 1) {\n                result = (result * power) % p\n   \
    \         }\n            power = (power * power) % p\n            divisor = (divisor\
    \ * divisor) % p\n        }\n        return result", "        var result : Long\
    \ = 1\n        var base : Long = 2\n        var exp : Long = n\n        while\
    \ (exp > 0) {\n            if ((exp & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exp >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var base : Long = 2\n        var exponent : Long = n\n        while\
    \ (exponent > 0) {\n            if ((exponent & 1) == 1) {\n                result\
    \ = (result * base) % p\n            }\n            exponent >>= 1\n         \
    \   base = (base * base) % p\n        }\n        return result", "        var\
    \ result : Long = 1\n        var a : Long = 2\n        var b : Long = n\n    \
    \    while (b > 0) {\n            if ((b & 1) == 1) {\n                result\
    \ = (result * a) % p\n            }\n            a = (a * a) % p\n           \
    \ b >>= 1\n        }\n        return result", "        var result : Long = 1\n\
    \        var base : Long = 2\n        var exponent : Long = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var x : Long = n\n        var y : Long = p\n        while (x > 0)\
    \ {\n            if ((x & 1) == 1) {\n                result = (result * x) %\
    \ y\n            }\n            x = x >> 1\n            y = (y * y) % p\n    \
    \    }\n        return result", "        var result : Long = 1\n        var b\
    \ : Long = 2\n        var e : Long = n\n        while (e > 0) {\n            if\
    \ ((e & 1) == 1) {\n                result = (result * b) % p\n            }\n\
    \            e = e >> 1\n            b = (b * b) % p\n        }\n        return\
    \ result", "        var result : Long = 1\n        var power : Long = n\n    \
    \    var divisor : Long = p\n        while (power > 0) {\n            if ((power\
    \ & 1) == 1) {\n                result = (result * power) % p\n            }\n\
    \            power = (power * power) % p\n            divisor = (divisor * divisor)\
    \ % p\n        }\n        return result", "        var result : Long = 1\n   \
    \     var b : Long = 2\n        var e : Long = n\n        while (e > 0) {\n  \
    \          if ((e & 1) == 1) {\n                result = (result * b) % p\n  \
    \          }\n            e = e >> 1\n            b = (b * b) % p\n        }\n\
    \        return result", "        var result : Long = 1\n        var base : Long\
    \ = 2\n        var exponent : Long = n\n        while (exponent > 0) {\n     \
    \       if ((exponent & 1) == 1) {\n                result = (result * base) %\
    \ p\n            }\n            exponent >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        var res = 1l\n        var nn\
    \ = n\n        var pp = p\n        while (nn > 0) {\n            if ((nn & 1)\
    \ == 1) {\n                res = (res * nn) % pp\n            }\n            nn\
    \ = nn >> 1\n            nn = (nn * nn) % pp\n        }\n        return res",
  "        if (n == 0) return 1\n        if (n % 2 == 0) {\n            val t = modp(n\
    \ / 2, p)\n            return (t * t) % p\n        }\n        else return (modp(n\
    \ - 1, p) * 2) % p", "        var result : Long = 1\n        var x : Long = n\n\
    \        var y : Long = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) {\n                result = (result * y) % p\n            }\n           \
    \ x >>= 1\n            y = (y * y) % p\n        }\n        return result", " \
    \       if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            return (x * x) % p\n        }\n        return (modp(n -\
    \ 1, p) * n) % p", "        var result : Long = 1\n        var base : Long = 2\n\
    \        var exp : Long = n\n        while (exp > 0) {\n            if ((exp &\
    \ 1) == 1) {\n                result = (result * base) % p\n            }\n  \
    \          exp >>= 1\n            base = (base * base) % p\n        }\n      \
    \  return result", "        var result : Long = 1\n        var base : Long = 2\n\
    \        var exponent : Long = n\n        while (exponent > 0) {\n           \
    \ if ((exponent & 1) == 1) {\n                result = (result * base) % p\n \
    \           }\n            exponent >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        var result : Long = 1\n     \
    \   var base : Long = 2\n        var exp : Long = n\n        while (exp > 0) {\n\
    \            if ((exp & 1) == 1) {\n                result = (result * base) %\
    \ p\n            }\n            exp >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        var result : Long = 1\n     \
    \   var base : Long = 2\n        var exponent : Long = n\n        while (exponent\
    \ > 0) {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var x : Long = n\n        var y : Long = p\n        while (x > 0)\
    \ {\n            if ((x & 1) == 1) {\n                result = (result * y) %\
    \ p\n            }\n            x >>= 1\n            y = (y * y) % p\n       \
    \ }\n        return result", "        var result : Long = 1\n        var base\
    \ : Long = 2\n        var exponent : Long = n\n        while (exponent > 0) {\n\
    \            if ((exponent & 1) == 1) {\n                result = (result * base)\
    \ % p\n            }\n            exponent >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        var result : Long = 1\n   \
    \     var power : Long = n\n        var mod : Long = p\n        while (power >\
    \ 0) {\n            if ((power & 1) == 1) {\n                result = (result\
    \ * n) % p\n            }\n            power >>= 1\n            n = (n * n) %\
    \ p\n        }\n        return result", "        var x = 1l\n        var y = n\n\
    \        while (y > 0) {\n            if ((y & 1) == 1) x = (x * n) % p\n    \
    \        y >>= 1\n            n = (n * n) % p\n        }\n        return x", " \
    \       var result : Long = 1\n        var x : Long = n\n        var y : Long\
    \ = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n            \
    \    result = (result * y) % p\n            }\n            x >>= 1\n         \
    \   y = (y * y) % p\n        }\n        return result", "        if (n == 0) return\
    \ 1\n        var result = 1l\n        var b = n\n        var e = p - 2\n     \
    \   while (e > 0) {\n            if ((e & 1) == 1) result = (result * b) % p\n\
    \            b = (b * b) % p\n            e >>= 1\n        }\n        return result",
  "        var result : Long = 1\n        var base : Long = 2\n        var exponent\
    \ : Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        var result : Long = 1\n        var base : Long = 2\n\
    \        var exp : Long = n\n        while (exp > 0) {\n            if ((exp &\
    \ 1) == 1) {\n                result = (result * base) % p\n            }\n  \
    \          exp >>= 1\n            base = (base * base) % p\n        }\n      \
    \  return result", "        var result : Long = 1\n        var base : Long = 2\n\
    \        var exponent : Long = n\n        while (exponent > 0) {\n           \
    \ if ((exponent & 1) == 1) {\n                result = (result * base) % p\n \
    \           }\n            exponent >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        var result : Long = 1\n     \
    \   var base : Long = 2\n        var exp : Long = n\n        while (exp > 0) {\n\
    \            if ((exp & 1) == 1) {\n                result = (result * base) %\
    \ p\n            }\n            exp >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        if (n == 0) return 1\n      \
    \  var result = 1l\n        var power = n\n        var value = 2l\n        while\
    \ (power > 0) {\n            if (power % 2 == 1) {\n                result = (result\
    \ * value) % p\n            }\n            value = (value * value) % p\n     \
    \       power /= 2\n        }\n        return result", "        if (n == 0) 1\n\
    \        else {\n            val x = modp(n / 2, p)\n            val x2 = (x *\
    \ x) % p\n            if (n % 2 == 0) x2\n            else (x2 * n) % p\n    \
    \    }", "        var result : Long = 1\n        var b : Long = 2\n        var\
    \ m : Long = n\n        while (m > 0) {\n            if ((m & 1) == 1) {\n   \
    \             result = (result * b) % p\n            }\n            m >>= 1\n\
    \            b = (b * b) % p\n        }\n        return result", "        var\
    \ result : Long = 1\n        var b : Long = 2\n        var e : Long = n\n    \
    \    while (e > 0) {\n            if ((e & 1) == 1) {\n                result\
    \ = (result * b) % p\n            }\n            e = e >> 1\n            b = (b\
    \ * b) % p\n        }\n        return result", "        var result : Long = 1\n\
    \        var x : Long = n\n        var y : Long = p\n        while (x > 0) {\n\
    \            if ((x & 1) != 0) {\n                result = (result * x) % y\n\
    \            }\n            x = x >> 1\n            y = (y * y) % p\n        }\n\
    \        return result", "        var result : Long = 1\n        var b : Long\
    \ = 2\n        var e : Long = n\n        while (e > 0) {\n            if ((e &\
    \ 1) == 1) {\n                result = (result * b) % p\n            }\n     \
    \       e = e >> 1\n            b = (b * b) % p\n        }\n        return result",
  "        var result : Long = 1\n        var power : Long = n\n        var mod :\
    \ Long = p\n        while (power > 0) {\n            if ((power & 1) == 1) {\n\
    \                result = (result * n) % p\n            }\n            power >>=\
    \ 1\n            n = (n * n) % p\n        }\n        return result", "       \
    \ var result : Long = 1\n        var x : Long = n\n        var y : Long = p\n\
    \        while (x > 0) {\n            if ((x & 1) == 1) {\n                result\
    \ = (result * x) % y\n            }\n            x = x >> 1\n            y = (y\
    \ * y) % p\n        }\n        return result", "        var result : Long = 1\n\
    \        var b : Long = 2\n        var e : Long = n\n        while (e > 0) {\n\
    \            if ((e & 1) == 1) {\n                result = (result * b) % p\n\
    \            }\n            e = e >> 1\n            b = (b * b) % p\n        }\n\
    \        return result", "        var result : Long = 1\n        var b : Long\
    \ = 2\n        var e : Long = n\n        while (e > 0) {\n            if ((e &\
    \ 1) == 1) {\n                result = (result * b) % p\n            }\n     \
    \       e = e >> 1\n            b = (b * b) % p\n        }\n        return result",
  "        if (n == 0) return 1\n        var x = modp(n / 2, p)\n        x = (x *\
    \ x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return x", "      \
    \  var result : Long = 1\n        var base : Long = 2\n        var exponent :\
    \ Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        var result : Long = 1\n        var x : Long = n\n \
    \       var y : Long = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) {\n                result = (result * y) % p\n            }\n           \
    \ x >>= 1\n            y = (y * y) % p\n        }\n        return result", " \
    \       var result : Long = 1\n        var power : Long = n\n        var divisor\
    \ : Long = p\n        while (power > 0) {\n            if ((power & 1) == 1) {\n\
    \                result = (result * power) % p\n            }\n            power\
    \ = (power * power) % p\n            divisor = (divisor * divisor) % p\n     \
    \   }\n        return result", "        var result : Long = 1\n        var base\
    \ : Long = 2\n        var exponent : Long = n\n        while (exponent > 0) {\n\
    \            if ((exponent & 1) == 1) {\n                result = (result * base)\
    \ % p\n            }\n            exponent >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        var result : Long = 1\n   \
    \     var base : Long = 2\n        var exp : Long = n\n        while (exp > 0)\
    \ {\n            if ((exp & 1) == 1) {\n                result = (result * base)\
    \ % p\n            }\n            exp >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        var r = 1l\n        var b =\
    \ n\n        var e = p - 2l\n        while (e > 0) {\n            if (e % 2 ==\
    \ 1) {\n                r = (r * b) % p\n            }\n            b = (b * b)\
    \ % p\n            e = e / 2\n        }\n        return r", "        var result\
    \ : Long = 1\n        var x : Long = n\n        var y : Long = p\n        while\
    \ (x > 0) {\n            if ((x & 1) == 1) {\n                result = (result\
    \ * y) % p\n            }\n            x >>= 1\n            y = (y * y) % p\n\
    \        }\n        return result", "        if (n == 0) return 1\n        var\
    \ result = 1l\n        var b = n\n        var e = p - 2\n        while (e > 0)\
    \ {\n            if ((e & 1) == 1) result = (result * b) % p\n            b =\
    \ (b * b) % p\n            e >>= 1\n        }\n        return result", "     \
    \   var result : Long = 1\n        var b : Long = 2\n        var p2 : Long = p\n\
    \        var n2 : Long = n\n        while (n2 > 0) {\n            if ((n2 & 1)\
    \ == 1) {\n                result = (result * b) % p2\n            }\n       \
    \     n2 >>= 1\n            b = (b * b) % p2\n        }\n        return result",
  "        var result : Long = 1\n        var base : Long = 2\n        var exponent\
    \ : Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        var result : Long = 1\n        var b : Long = 2\n \
    \       var m : Long = n\n        while (m > 0) {\n            if ((m & 1) ==\
    \ 1) {\n                result = (result * b) % p\n            }\n           \
    \ m >>= 1\n            b = (b * b) % p\n        }\n        return result", " \
    \       var result : Long = 1\n        var x : Long = n\n        var y : Long\
    \ = p\n        while (x > 0) {\n            if ((x & 1) == 1) {\n            \
    \    result = (result * y) % p\n            }\n            x >>= 1\n         \
    \   y = (y * y) % p\n        }\n        return result", "        if (n == 0) return\
    \ 1\n        var t = modp(n / 2, p)\n        if (n % 2 == 0) return (t * t) %\
    \ p\n        else return (t * t * 2) % p", "        var res = 1l\n        var\
    \ nn = n\n        while (nn > 0) {\n            if ((nn & 1) == 1) res = (res\
    \ * n) % p\n            nn >>= 1\n            n = (n * n) % p\n        }\n   \
    \     res", "        if (n == 0) return 1\n        if (n % 2 == 0) {\n       \
    \     val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n    \
    \    else return (2 * modp(n - 1, p)) % p", "        var r = 1l\n        var b\
    \ = n\n        var e = p - 2l\n        while (e > 0) {\n            if (e % 2\
    \ == 1) {\n                r = (r * b) % p\n            }\n            b = (b\
    \ * b) % p\n            e = e / 2\n        }\n        return r", "        var\
    \ result : Long = 1\n        var base : Long = 2\n        var exp : Long = n\n\
    \        while (exp > 0) {\n            if ((exp & 1) == 1) {\n              \
    \  result = (result * base) % p\n            }\n            exp >>= 1\n      \
    \      base = (base * base) % p\n        }\n        return result", "        var\
    \ result : Long = 1\n        var b : Long = 2\n        var e : Long = n\n    \
    \    while (e > 0) {\n            if ((e & 1) == 1) {\n                result\
    \ = (result * b) % p\n            }\n            e = e >> 1\n            b = (b\
    \ * b) % p\n        }\n        return result", "        var result : Long = 1\n\
    \        var base : Long = 2\n        var exp : Long = n\n        while (exp >\
    \ 0) {\n            if ((exp & 1) == 1) {\n                result = (result *\
    \ base) % p\n            }\n            exp >>= 1\n            base = (base *\
    \ base) % p\n        }\n        return result", "        if (n == 0) return 1\n\
    \        if (n % 2 == 0) {\n            val x = modp(n / 2, p)\n            return\
    \ (x * x) % p\n        }\n        else return (2 * modp(n - 1, p)) % p", "   \
    \     var result : Long = 1\n        var base : Long = 2\n        var exponent\
    \ : Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        if (n == 0) return 1\n        if (n % 2 == 0) {\n \
    \           val t = modp(n / 2, p)\n            return (t * t) % p\n        }\n\
    \        else {\n            return (2 * modp(n - 1, p)) % p\n        }", "  \
    \      var r = 1l\n        var x = n\n        var y = p\n        while (x > 0)\
    \ {\n            if ((x & 1) == 1) {\n                r = (r * y) % p\n      \
    \      }\n            x = x >> 1\n            y = (y * y) % p\n        }\n   \
    \     return r", "        var result : Long = 1\n        var base : Long = 2\n\
    \        var exp : Long = n\n        while (exp > 0) {\n            if ((exp &\
    \ 1) == 1) {\n                result = (result * base) % p\n            }\n  \
    \          exp >>= 1\n            base = (base * base) % p\n        }\n      \
    \  return result", "        if (n == 0) return 1\n        val x = modp(n / 2,\
    \ p)\n        if (n % 2 == 0) return (x * x) % p\n        else return (((x * x)\
    \ % p) * 2) % p", "        if (n == 0) return 1\n        var x = modp(n / 2, p)\n\
    \        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n        return\
    \ x", "        var result : Long = 1\n        var base : Long = 2\n        var\
    \ exp : Long = n\n        while (exp > 0) {\n            if ((exp & 1) == 1) {\n\
    \                result = (result * base) % p\n            }\n            exp\
    \ >>= 1\n            base = (base * base) % p\n        }\n        return result",
  "        if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            return (x * x) % p\n        }\n        else return (modp(n\
    \ - 1, p) * n) % p", "        if (n == 0) return 1\n        if (n % 2 == 0) {\n\
    \            val x = modp(n / 2, p)\n            return (x * x) % p\n        }\n\
    \        return (modp(n - 1, p) * n) % p", "        if (n == 0) return 1\n   \
    \     var x = modp(n / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1)\
    \ x = (x * 2) % p\n        return x", "        var r = 1l\n        var b = n\n\
    \        var e = p - 2l\n        while (e > 0) {\n            if (e % 2 == 1)\
    \ {\n                r = (r * b) % p\n            }\n            b = (b * b) %\
    \ p\n            e = e / 2\n        }\n        return r", "        var nn = n\n\
    \        var pp = p\n        var result = 1l\n        while (nn > 0) {\n     \
    \       if ((nn & 1) == 1) {\n                result = (result * pp) % p\n   \
    \         }\n            nn >>= 1\n            pp = (pp * pp) % p\n        }\n\
    \        return result", "        if (n == 0) return 1\n        if (n % 2 == 0)\
    \ {\n            val x = modp(n / 2, p)\n            return (x * x) % p\n    \
    \    }\n        return (modp(n - 1, p) * n) % p", "        if (n == 0) 1\n   \
    \     else if (n % 2 == 0) {\n            val t = modp(n / 2, p)\n           \
    \ (t * t) % p\n        } else {\n            (2 * modp(n - 1, p)) % p\n      \
    \  }", "        var result : Long = 1\n        var b : Long = 2\n        var e\
    \ : Long = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n     \
    \           result = (result * b) % p\n            }\n            e = e >> 1\n\
    \            b = (b * b) % p\n        }\n        return result", "        var\
    \ result : Long = 1\n        var base : Long = 2\n        var exp : Long = n\n\
    \        while (exp > 0) {\n            if ((exp & 1) == 1) {\n              \
    \  result = (result * base) % p\n            }\n            exp >>= 1\n      \
    \      base = (base * base) % p\n        }\n        return result", "        if\
    \ (n == 0) return 1\n        var result = 1l\n        var x = n\n        var y\
    \ = p\n        while (x > 0) {\n            if ((x & 1) == 1) result = (result\
    \ * n) % p\n            x >>= 1\n            n = (n * n) % p\n        }\n    \
    \    return result", "        var result : Long = 1\n        var base : Long =\
    \ 2\n        var exponent : Long = n\n        while (exponent > 0) {\n       \
    \     if ((exponent & 1) == 1) {\n                result = (result * base) % p\n\
    \            }\n            exponent >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        var result : Long = 1\n     \
    \   var b : Long = 2\n        var e : Long = n\n        while (e > 0) {\n    \
    \        if ((e & 1) == 1) {\n                result = (result * b) % p\n    \
    \        }\n            e = e >> 1\n            b = (b * b) % p\n        }\n \
    \       return result", "        var result : Long = 1\n        var base : Long\
    \ = 2\n        var exponent : Long = n\n        while (exponent > 0) {\n     \
    \       if ((exponent & 1) == 1) {\n                result = (result * base) %\
    \ p\n            }\n            exponent >>= 1\n            base = (base * base)\
    \ % p\n        }\n        return result", "        var result : Long = 1\n   \
    \     var b : Long = 2\n        var m : Long = n\n        while (m > 0) {\n  \
    \          if ((m & 1) == 1) {\n                result = (result * b) % p\n  \
    \          }\n            m >>= 1\n            b = (b * b) % p\n        }\n  \
    \      return result", "        var nn = n\n        var pp = p\n        var result\
    \ = 1l\n        while (nn > 0) {\n            if ((nn & 1) == 1) result = (result\
    \ * n) % p\n            nn >>= 1\n            n = (n * n) % p\n        }\n   \
    \     return result", "        var result : Long = 1\n        var x : Long = n\n\
    \        var y : Long = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) {\n                result = (result * x) % y\n            }\n           \
    \ x = x >> 1\n            y = (y * y) % p\n        }\n        return result",
  "        var result : Long = 1\n        var b : Long = 2\n        var p2 : Long\
    \ = p\n        var n2 : Long = n\n        while (n2 > 0) {\n            if ((n2\
    \ & 1) == 1) {\n                result = (result * b) % p2\n            }\n  \
    \          n2 >>= 1\n            b = (b * b) % p2\n        }\n        return result",
  "        var result : Long = 1\n        var base : Long = 2\n        var exponent\
    \ : Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        var result : Long = 1\n        var b : Long = 2\n \
    \       var p2 : Long = p\n        var n2 : Long = n\n        while (n2 > 0) {\n\
    \            if ((n2 & 1) == 1) {\n                result = (result * b) % p2\n\
    \            }\n            n2 >>= 1\n            b = (b * b) % p2\n        }\n\
    \        return result", "        if (n == 0) return 1\n        var x = modp(n\
    \ / 2, p)\n        x = (x * x) % p\n        if (n % 2 == 1) x = (x * 2) % p\n\
    \        return x", "        var result : Long = 1\n        var x : Long = n\n\
    \        var y : Long = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) {\n                result = (result * x) % y\n            }\n           \
    \ x = x >> 1\n            y = (y * y) % p\n        }\n        return result",
  "        var result : Long = 1\n        var base : Long = 2\n        var exp : Long\
    \ = n\n        while (exp > 0) {\n            if ((exp & 1) == 1) {\n        \
    \        result = (result * base) % p\n            }\n            exp >>= 1\n\
    \            base = (base * base) % p\n        }\n        return result", "  \
    \      var result : Long = 1\n        var base : Long = 2\n        var exponent\
    \ : Long = n\n        while (exponent > 0) {\n            if ((exponent & 1) ==\
    \ 1) {\n                result = (result * base) % p\n            }\n        \
    \    exponent >>= 1\n            base = (base * base) % p\n        }\n       \
    \ return result", "        var result : Long = 1\n        var b : Long = 2\n \
    \       var e : Long = n\n        while (e > 0) {\n            if ((e & 1) ==\
    \ 1) result = (result * b) % p\n            e >>= 1\n            b = (b * b) %\
    \ p\n        }\n        return result", "        var result : Long = 1\n     \
    \   var base : Long = 2\n        var exp : Long = n\n        while (exp > 0) {\n\
    \            if ((exp & 1) == 1) {\n                result = (result * base) %\
    \ p\n            }\n            exp >>= 1\n            base = (base * base) %\
    \ p\n        }\n        return result", "        if (n == 0) return 1\n      \
    \  if (n % 2 == 0) {\n            val t = modp(n / 2, p)\n            return (t\
    \ * t) % p\n        }\n        return (modp(n - 1, p) * n) % p", "        var\
    \ result : Long = 1\n        var power : Long = n\n        var mod : Long = p\n\
    \        while (power > 0) {\n            if ((power & 1) == 1) {\n          \
    \      result = (result * n) % p\n            }\n            power >>= 1\n   \
    \         n = (n * n) % p\n        }\n        return result", "        var result\
    \ : Long = 1\n        var b : Long = 2\n        var e : Long = n\n        while\
    \ (e > 0) {\n            if ((e & 1) == 1) {\n                result = (result\
    \ * b) % p\n            }\n            e = e >> 1\n            b = (b * b) % p\n\
    \        }\n        return result", "        var nn = n\n        var pp = p\n\
    \        var res = 1l\n        while (nn > 0) {\n            if ((nn & 1) == 1)\
    \ res = (res * n) % p\n            nn >>= 1\n            n = (n * n) % p\n   \
    \     }\n        res", "        var result : Long = 1\n        var b : Long =\
    \ 2\n        var e : Long = n\n        while (e > 0) {\n            if ((e & 1)\
    \ == 1) {\n                result = (result * b) % p\n            }\n        \
    \    e = e >> 1\n            b = (b * b) % p\n        }\n        return result",
  "        if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            return (x * x) % p\n        }\n        else {\n       \
    \     return (2 * modp(n - 1, p)) % p\n        }", "        var result : Long\
    \ = 1\n        var b : Long = 2\n        var e : Long = n\n        while (e >\
    \ 0) {\n            if ((e & 1) == 1) {\n                result = (result * b)\
    \ % p\n            }\n            e = e >> 1\n            b = (b * b) % p\n  \
    \      }\n        return result", "        if (n == 0) 1\n        else {\n   \
    \         var res = 1l\n            var i = 0\n            while (i < n) {\n \
    \               res = (res * 2) % p\n                i += 1\n            }\n \
    \           res\n        }", "        var result : Long = 1\n        var x : Long\
    \ = n\n        var y : Long = p\n        while (x > 0) {\n            if ((x &\
    \ 1) == 1) {\n                result = (result * x) % y\n            }\n     \
    \       x = x >> 1\n            y = (y * y) % p\n        }\n        return result",
  "        var result : Long = 1\n        var base : Long = 2\n        var power :\
    \ Long = n\n        while (power > 0) {\n            if (power % 2 == 1) {\n \
    \               result = (result * base) % p\n            }\n            base\
    \ = (base * base) % p\n            power /= 2\n        }\n        return result",
  "        var result : Long = 1\n        var base : Long = 2\n        var exp : Long\
    \ = n\n        while (exp > 0) {\n            if ((exp & 1) == 1) {\n        \
    \        result = (result * base) % p\n            }\n            exp >>= 1\n\
    \            base = (base * base) % p\n        }\n        return result", "  \
    \      if (n == 0) return 1\n        if (n % 2 == 0) {\n            val x = modp(n\
    \ / 2, p)\n            return (x * x) % p\n        }\n        else return (modp(n\
    \ - 1, p) * n) % p", "        if (n == 0) return 1\n        var result = 1l\n\
    \        var base = 2l\n        var exponent = n\n        while (exponent > 0)\
    \ {\n            if ((exponent & 1) == 1) {\n                result = (result\
    \ * base) % p\n            }\n            exponent >>= 1\n            base = (base\
    \ * base) % p\n        }\n        return result", "        var result : Long =\
    \ 1\n        var power : Long = n\n        var divisor : Long = p\n        while\
    \ (power > 0) {\n            if ((power & 1) == 1) {\n                result =\
    \ (result * divisor) % p\n            }\n            divisor = (divisor * divisor)\
    \ % p\n            power >>= 1\n        }\n        return result", "        if\
    \ (n == 0) return 1\n        var result = 1l\n        var b = n\n        var e\
    \ = p - 2\n        while (e > 0) {\n            if ((e & 1) == 1) result = (result\
    \ * b) % p\n            b = (b * b) % p\n            e >>= 1\n        }\n    \
    \    return result", "        var result : Long = 1\n        var x : Long = n\n\
    \        var y : Long = p\n        while (x > 0) {\n            if ((x & 1) ==\
    \ 1) {\n                result = (result * x) % y\n            }\n           \
    \ x = x >> 1\n            y = (y * y) % p\n        }\n        return result",
  "        var result : Long = 1l\n        var b : Long = 2l\n        var e : Long\
    \ = n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n            \
    \    result = (result * b) % p\n            }\n            e = e >> 1\n      \
    \      b = (b * b) % p\n        }\n        return result", "        var result\
    \ : Long = 1\n        var base : Long = 2\n        var exponent : Long = n\n \
    \       while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n     \
    \           result = (result * base) % p\n            }\n            exponent\
    \ >>= 1\n            base = (base * base) % p\n        }\n        return result",
  "        var result : Long = 1\n        var b : Long = 2\n        var e : Long =\
    \ n\n        while (e > 0) {\n            if ((e & 1) == 1) {\n              \
    \  result = (result * b) % p\n            }\n            e = e >> 1\n        \
    \    b = (b * b) % p\n        }\n        return result", "        var result :\
    \ Long = 1\n        var base : Long = 2\n        var power : Long = n\n      \
    \  while (power > 0) {\n            if (power % 2 == 1) {\n                result\
    \ = (result * base) % p\n            }\n            base = (base * base) % p\n\
    \            power /= 2\n        }\n        return result", "        var result\
    \ : Long = 1\n        var base : Long = 2\n        var exponent : Long = n\n \
    \       while (exponent > 0) {\n            if ((exponent & 1) == 1) {\n     \
    \           result = (result * base) % p\n            }\n            exponent\
    \ >>= 1\n            base = (base * base) % p\n        }\n        return result"]
stop_tokens:
- "\n    }\n"
