name: HumanEval_159_eat
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n\
  \    // but now you need to eat more carrots to complete the day's meals.\n    //\
  \ you should return an array of [ total number of eaten carrots after your meals,\n\
  \    // the number of carrots left after your meals ]\n    // if there are not enough\
  \ remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\
  \    // Example:\n    // >>> eat((5l), (6l), (10l))\n    // (List[Long](11l.toLong,\
  \ 4l.toLong))\n    // >>> eat((4l), (8l), (9l))\n    // (List[Long](12l.toLong,\
  \ 1l.toLong))\n    // >>> eat((1l), (10l), (10l))\n    // (List[Long](11l.toLong,\
  \ 0l.toLong))\n    // >>> eat((2l), (11l), (5l))\n    // (List[Long](7l.toLong,\
  \ 0l.toLong))\n    // Variables:\n    // @number : integer\n    // the number of\
  \ carrots that you have eaten.\n    // @need : integer\n    // the number of carrots\
  \ that you need to eat.\n    // @remaining : integer\n    // the number of remaining\
  \ carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n\
  \    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n\
  \    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong,\
  \ 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong,\
  \ 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong,\
  \ 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong,\
  \ 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong,\
  \ 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong,\
  \ 0l.toLong))));\n    }\n\n}\n"
completions: ["        val total = number + need\n        if (total > remaining) List(remaining,\
    \ 0)\n        else List(total, remaining - total)", "        var result : List[Long]\
    \ = List()\n        if (remaining < need) {\n            result = List(number\
    \ + remaining, 0)\n        } else {\n            result = List(number + need,\
    \ remaining - need)\n        }\n        return result", "        // your code\
    \ here\n        var result = List[Long]()\n        if (remaining >= need) {\n\
    \            result = List[Long](number + need, remaining - need)\n        } else\
    \ {\n            result = List[Long](number + remaining, 0)\n        }\n     \
    \   result", "        var result = List[Long]()\n        if (remaining >= need)\
    \ {\n            result = List(number + need, remaining - need)\n        } else\
    \ {\n            result = List(number + remaining, 0)\n        }\n        return\
    \ result", "        val total = number + min(need, remaining)\n        List(total,\
    \ max(0, remaining - need))", "        // Write your code here\n        // To\
    \ print results to the standard output you can use Console.println\n        //\
    \ Example:\n        // Console.println(\"Hello world\")\n        val total = number\
    \ + need\n        if (total > remaining) {\n            List(remaining, 0)\n \
    \       } else {\n            List(total, remaining - total)\n        }", "  \
    \      // your code here\n        val total = number + need\n        if (total\
    \ > remaining) List(remaining, 0)\n        else List(total, remaining - total)",
  "        // Your code here\n        return List(0l, 0l)", "        var result =\
    \ List[Long]()\n        if (remaining >= need) {\n            result = List[Long](number\
    \ + need, remaining - need)\n        } else {\n            result = List[Long](number\
    \ + remaining, 0)\n        }\n        return result", "        var result = List[Long]()\n\
    \        if (remaining < need) {\n            result = List(number + remaining,\
    \ 0)\n        } else {\n            result = List(number + need, remaining - need)\n\
    \        }\n        result", "        val total = number + min(need, remaining)\n\
    \        List(total, max(0, remaining - need))", "        val total = number +\
    \ remaining\n        val eaten = if (total >= need) need else total\n        List(eaten,\
    \ total - eaten)", "        // your code here\n        val eaten = number + min(need,\
    \ remaining)\n        val left = max(0, remaining - need)\n        List(eaten,\
    \ left)", "        var result = List[Long]()\n        if (remaining >= need) {\n\
    \            result = List(number + need, remaining - need)\n        } else {\n\
    \            result = List(number + remaining, 0)\n        }\n        return result",
  "        val total = number + need\n        if (total > remaining) {\n         \
    \   List(remaining, 0)\n        } else {\n            List(total, remaining -\
    \ total)\n        }", "        var result = List[Long]()\n        var total =\
    \ number + need\n        if (total > remaining) {\n            total = remaining\n\
    \        }\n        result = List(total, remaining - total)\n        return result",
  "        // your code here\n        val total = number + need\n        if (total\
    \ > remaining) {\n            List(remaining, 0)\n        } else {\n         \
    \   List(total, remaining - total)\n        }", "        var result = List[Long]()\n\
    \        var total = number + remaining\n        if (total >= need) {\n      \
    \      result = List[Long](need, total - need)\n        } else {\n           \
    \ result = List[Long](total, 0)\n        }\n        return result", "        val\
    \ total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        // Your code here\n        return List(0l, 0l)", "     \
    \   var result = List[Long]()\n        if (remaining < need) {\n            result\
    \ = List(number + remaining, 0)\n        } else {\n            result = List(number\
    \ + need, remaining - need)\n        }\n        result", "        var result =\
    \ List[Long]()\n        var total = number + need\n        var left = remaining\
    \ - need\n        if (total > remaining) {\n            total = remaining\n  \
    \          left = 0\n        }\n        result = total :: left :: result\n   \
    \     result", "        val total = number + min(need, remaining)\n        List(total,\
    \ max(0, remaining - need))", "        var result = List[Long]()\n        var\
    \ total = number + need\n        var left = remaining - need\n        if (left\
    \ < 0) {\n            total = total + left\n            left = 0\n        }\n\
    \        result = result :+ total\n        result = result :+ left\n        return\
    \ result", "        var result : List[Long] = List()\n        if (remaining >=\
    \ need) {\n            result = List(number + need, remaining - need)\n      \
    \  } else {\n            result = List(number + remaining, 0)\n        }\n   \
    \     return result", "        var result = List[Long]()\n        if (number +\
    \ need <= remaining) {\n            result = List[Long](number + need, remaining\
    \ - (number + need))\n        } else {\n            result = List[Long](remaining,\
    \ 0)\n        }\n        return result", "        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List[Long](number + need,\
    \ remaining - need)\n        } else {\n            result = List[Long](number\
    \ + remaining, 0)\n        }\n        return result", "        val total = number\
    \ + min(need, remaining)\n        List(total, remaining - min(need, remaining))",
  "        var result = List[Long]()\n        result = result :+ (number + min(need,\
    \ remaining))\n        result = result :+ (max(remaining - need, 0))\n       \
    \ return result", "        // your code here\n        List[Long](0, 0)", "   \
    \     val total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        var result = List[Long]()\n        var total = number +\
    \ remaining\n        if (total >= need) {\n            result = List(need, total\
    \ - need)\n        } else {\n            result = List(total, 0)\n        }\n\
    \        result", "        // Your code here\n        val total = number + remaining\n\
    \        val eaten = if (total < need) total else need\n        List(eaten, total\
    \ - eaten)", "        if (remaining >= need) {\n            List(number + need,\
    \ remaining - need)\n        } else {\n            List(number + remaining, 0)\n\
    \        }", "        var result = List[Long]()\n        var total = number +\
    \ need\n        if (total > remaining) {\n            result = List(remaining,\
    \ 0)\n        } else {\n            result = List(total, remaining - total)\n\
    \        }\n        result", "        // your code here\n        List(0, 0)",
  "        val eaten = number + min(need, remaining)\n        val left = max(0, remaining\
    \ - need)\n        List(eaten, left)", "        val total = number + need\n  \
    \      if (total <= remaining) List(total, remaining - total)\n        else List(remaining\
    \ + number, 0)", "        var eaten = number\n        var left = remaining\n \
    \       if (left < need) {\n            eaten += left\n            left = 0\n\
    \        } else {\n            eaten += need\n            left -= need\n     \
    \   }\n        List(eaten, left)", "        val eaten = number + min(need, remaining)\n\
    \        List(eaten, max(0, remaining - need))", "        // your code here\n\
    \        var result = List[Long]()\n        if (remaining >= need) {\n       \
    \     result = List(number + need, remaining - need)\n        } else {\n     \
    \       result = List(number + remaining, 0)\n        }\n        result", "  \
    \      var result = List[Long]()\n        var eaten = number\n        var left\
    \ = remaining\n        if (left >= need) {\n            eaten += need\n      \
    \      left -= need\n        } else {\n            eaten += left\n           \
    \ left = 0\n        }\n        result = eaten :: left :: result\n        result",
  "        val total = number + min(need, remaining)\n        List(total, remaining\
    \ - min(need, remaining))", "        var result = List[Long]()\n        if (remaining\
    \ >= need) {\n            result = List(number + need, remaining - need)\n   \
    \     } else {\n            result = List(number + remaining, 0)\n        }\n\
    \        return result", "        var result = List[Long]()\n        var total\
    \ = number + need\n        if (total > remaining) {\n            result = List(remaining,\
    \ 0)\n        } else {\n            result = List(total, remaining - total)\n\
    \        }\n        result", "        // Write your code here\n        // To print\
    \ results to the standard output you can use Console.println\n        // Example:\n\
    \        // Console.println(\"Hello world\")\n        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List[Long](number + need,\
    \ remaining - need)\n        } else {\n            result = List[Long](number\
    \ + remaining, 0)\n        }\n        result", "        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List[Long](number + need,\
    \ remaining - need)\n        } else {\n            result = List[Long](number\
    \ + remaining, 0)\n        }\n        return result", "        // your code here\n\
    \        List(0l, 0l)", "        // your code here\n        var total = number\
    \ + need\n        if (total > remaining) {\n            total = remaining\n  \
    \      }\n        List(total, remaining - total)", "        // Write your code\
    \ here\n        // To print results to the standard output you can use Console.println\n\
    \        // Example:\n        // Console.println(\"Hello world\")\n        List(number\
    \ + need, remaining - need)", "        var result = List[Long]()\n        if (remaining\
    \ >= need) {\n            result = List(number + need, remaining - need)\n   \
    \     } else {\n            result = List(number + remaining, 0)\n        }\n\
    \        return result", "        val eaten = number + min(need, remaining)\n\
    \        val left = max(0, remaining - need)\n        List(eaten, left)", "  \
    \      // Your code here\n        List(number + need, remaining - need)", "  \
    \      var eaten = number\n        var left = remaining\n        if (need > remaining)\
    \ {\n            eaten += remaining\n            left = 0\n        } else {\n\
    \            eaten += need\n            left -= need\n        }\n        return\
    \ List(eaten, left)", "        // Your code here\n        List(0l, 0l)", "   \
    \     val result = List(number + min(need, remaining), max(0, remaining - need))\n\
    \        result", "        var result = List[Long]()\n        var total = number\
    \ + need\n        var left = remaining - need\n        if (left < 0) {\n     \
    \       total = number + remaining\n            left = 0\n        }\n        result\
    \ = total :: left :: result\n        result.reverse", "        var result = List[Long]()\n\
    \        if (remaining < need) {\n            result = List(number + remaining,\
    \ 0)\n        } else {\n            result = List(number + need, remaining - need)\n\
    \        }\n        result", "        // Write your code here\n        // To print\
    \ results to the standard output you can use Console.println\n        // Example:\n\
    \        // Console.println(\"Hello world\")\n        List(number + need, remaining\
    \ - need)", "        var total = number + need\n        if (total > remaining)\
    \ {\n            total = remaining\n        }\n        List(total, remaining -\
    \ total)", "        // Write your code here\n        // To print results to the\
    \ standard output you can use Console.println\n        // Example:\n        //\
    \ Console.println(\"Hello world\")\n        var result = List[Long]()\n      \
    \  if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        result", "        var result = List[Long]()\n        if (remaining\
    \ < need) {\n            result = List(number + remaining, 0)\n        } else\
    \ {\n            result = List(number + need, remaining - need)\n        }\n \
    \       result", "        // Your code here\n        var result = List[Long]()\n\
    \        if (remaining < need) {\n            result = List(number + remaining,\
    \ 0)\n        } else {\n            result = List(number + need, remaining - need)\n\
    \        }\n        result", "        // your code here\n        List(0, 0)",
  "        var result = List[Long]()\n        if (number + need <= remaining) {\n\
    \            result = List(number + need, remaining - (number + need))\n     \
    \   } else {\n            result = List(remaining, 0)\n        }\n        return\
    \ result", "        var result = List[Long]()\n        if (remaining >= need)\
    \ {\n            result = List(number + need, remaining - need)\n        } else\
    \ {\n            result = List(number + remaining, 0)\n        }\n        return\
    \ result", "        // Your code here\n        val total = number + need\n   \
    \     if (total <= remaining) List(total, remaining - total)\n        else List(remaining\
    \ + number, 0)", "        val total = number + need\n        if (total <= remaining)\
    \ List(total, remaining - total)\n        else List(remaining + number, 0)", " \
    \       // your code here\n        List[Long](0l, 0l)", "        // Your code\
    \ here\n        val total = number + need\n        val left = total - remaining\n\
    \        if (left > 0) List(total, 0)\n        else List(total, -left)", "   \
    \     var result = List[Long]()\n        if (remaining >= need) {\n          \
    \  result = List(number + need, remaining - need)\n        } else {\n        \
    \    result = List(number + remaining, 0)\n        }\n        return result",
  "        // your code here\n        List[Long](number + need, remaining - need)",
  "        // your code here\n        List(0l, 0l)", "        var total : Long = number\
    \ + need\n        if (total > remaining) {\n            total = remaining\n  \
    \      }\n        return List(total, remaining - total)", "        // your code\
    \ here\n        List(0, 0)", "        var result = List[Long]()\n        if (remaining\
    \ >= need) {\n            result = List(number + need, remaining - need)\n   \
    \     } else {\n            result = List(number + remaining, 0)\n        }\n\
    \        return result", "        // your code here\n        List(0, 0)", "  \
    \      if (remaining >= need) {\n            List(number + need, remaining - need)\n\
    \        } else {\n            List(number + remaining, 0)\n        }", "    \
    \    var result = List[Long]()\n        if (remaining >= need) {\n           \
    \ result = List(number + need, remaining - need)\n        } else {\n         \
    \   result = List(number + remaining, 0)\n        }\n        return result", " \
    \       var result = List[Long]()\n        if (remaining >= need) {\n        \
    \    result = List[Long](number + need, remaining - need)\n        } else {\n\
    \            result = List[Long](number + remaining, 0)\n        }\n        return\
    \ result", "        if (number + need <= remaining) {\n            List(number\
    \ + need, remaining - (number + need))\n        } else {\n            List(remaining\
    \ + number, 0)\n        }", "        var result : List[Long] = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List[Long](number + need,\
    \ remaining - need)\n        } else {\n            result = List[Long](number\
    \ + remaining, 0)\n        }\n        return result", "        val total = number\
    \ + min(need, remaining)\n        List(total, max(0, remaining - need))", "  \
    \      var result = List[Long]()\n        if (number + need <= remaining) {\n\
    \            result = List[Long](number + need, remaining - (number + need))\n\
    \        } else {\n            result = List[Long](remaining, 0)\n        }\n\
    \        return result", "        val total = number + need\n        if (total\
    \ > remaining) List(remaining, 0)\n        else List(total, remaining - total)",
  "        var result = List[Long]()\n        if (number + need <= remaining) {\n\
    \            result = List(number + need, remaining - (number + need))\n     \
    \   } else {\n            result = List(remaining, 0)\n        }\n        return\
    \ result", "        var result : List[Long] = List()\n        var total : Long\
    \ = number + need\n        if (total > remaining) {\n            result = List(remaining,\
    \ 0)\n        } else {\n            result = List(total, remaining - total)\n\
    \        }\n        return result", "        val total = number + remaining\n\
    \        if (total >= need) {\n            List(need, total - need)\n        }\
    \ else {\n            List(total, 0)\n        }", "        var total = number\
    \ + need\n        var left = remaining - need\n        if (left < 0) {\n     \
    \       total = total + left\n            left = 0\n        }\n        List(total,\
    \ left)", "        var result = List[Long]()\n        if (remaining >= need) {\n\
    \            result = List(number + need, remaining - need)\n        } else {\n\
    \            result = List(number + remaining, 0)\n        }\n        return result",
  "        val total = number + need\n        if (total <= remaining) List(total,\
    \ remaining - total)\n        else List(remaining + number, 0)", "        // Your\
    \ code here\n        List(0l, 0l)", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        // Your code\
    \ here\n        List[Long](0l, 0l)", "        var result = List[Long]()\n    \
    \    if (remaining >= need) {\n            result = List[Long](number + need,\
    \ remaining - need)\n        } else {\n            result = List[Long](number\
    \ + remaining, 0)\n        }\n        return result", "        // your code here\n\
    \        val result = List(number + min(need, remaining), max(0, remaining - need))\n\
    \        result", "        val total = number + min(need, remaining)\n       \
    \ List(total, remaining - min(need, remaining))", "        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        return result", "        // Your code here\n        var result\
    \ = List[Long]()\n        var total = number + need\n        if (total > remaining)\
    \ {\n            total = remaining\n        }\n        result = result :+ total\n\
    \        result = result :+ (remaining - total)\n        result", "        var\
    \ result : List[Long] = List()\n        if (remaining >= need) {\n           \
    \ result = List(number + need, remaining - need)\n        } else {\n         \
    \   result = List(number + remaining, 0)\n        }\n        return result", " \
    \       // Your code here\n        List(0, 0)", "        // your code here\n \
    \       val total = number + need\n        val left = total - remaining\n    \
    \    if (left > 0) List(total, 0)\n        else List(total, -left)", "       \
    \ var result = List[Long]()\n        result = result :+ (number + min(need, remaining))\n\
    \        result = result :+ (max(remaining - need, 0))\n        return result",
  "        val total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        val total = number + need\n        if (total > remaining)\
    \ List(remaining, 0)\n        else List(total, remaining - total)", "        val\
    \ total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        var result = List[Long]()\n        if (number >= need) {\n\
    \            result = List(number, remaining)\n        } else {\n            if\
    \ (remaining >= need - number) {\n                result = List(number + need\
    \ - number, remaining - need + number)\n            } else {\n               \
    \ result = List(number + remaining, 0)\n            }\n        }\n        result",
  "        var result = List[Long]()\n        var total = number + need\n        if\
    \ (total > remaining) {\n            result = List(remaining, 0)\n        } else\
    \ {\n            result = List(total, remaining - total)\n        }\n        result",
  "        var result = List[Long]()\n        if (remaining >= need) {\n         \
    \   result = List(number + need, remaining - need)\n        } else {\n       \
    \     result = List(number + remaining, 0)\n        }\n        return result",
  "        // your code here\n        return List(0l, 0l)", "        // your code\
    \ here\n        List(number + need, remaining - need)", "        // your code\
    \ here\n        return List[Long](0, 0)", "        var result = List[Long]()\n\
    \        var total = number + need\n        if (total > remaining) {\n       \
    \     result = List(remaining, 0)\n        } else {\n            result = List(total,\
    \ remaining - total)\n        }\n        result", "        // Write your code\
    \ here\n        // To print results to the standard output you can use Console.println\n\
    \        // Example:\n        // Console.println(\"Hello world\")\n        var\
    \ result = List[Long]()\n        result = result :+ (number + need)\n        if\
    \ (remaining < need) {\n            result = result :+ 0\n        } else {\n \
    \           result = result :+ (remaining - need)\n        }\n        return result",
  "        val total = number + need\n        if (total <= remaining) List(total,\
    \ remaining - total)\n        else List(remaining + number, 0)", "        var\
    \ result : List[Long] = List()\n        if (remaining >= need) {\n           \
    \ result = List(number + need, remaining - need)\n        } else {\n         \
    \   result = List(number + remaining, 0)\n        }\n        return result", " \
    \       // your code here\n        List(0, 0)", "        // Write your code here\n\
    \        // To print results to the standard output you can use Console.println\n\
    \        // Example:\n        // Console.println(\"Hello world\")\n        var\
    \ result = List[Long]()\n        if (remaining >= need) {\n            result\
    \ = List(number + need, remaining - need)\n        } else {\n            result\
    \ = List(number + remaining, 0)\n        }\n        result", "        // Write\
    \ your code here\n        // To print results to the standard output you can use\
    \ Console.println\n        // Example:\n        // Console.println(\"Hello world\"\
    )\n        val total = number + need\n        if (total > remaining) {\n     \
    \       List(remaining, 0)\n        } else {\n            List(total, remaining\
    \ - total)\n        }", "        val total = number + min(need, remaining)\n \
    \       List(total, max(0, remaining - need))", "        // Your code here\n \
    \       List(0l, 0l)", "        // your code here\n        var num = number\n\
    \        var rem = remaining\n        var nee = need\n        if (rem < nee) {\n\
    \            num += rem\n            rem = 0\n        } else {\n            num\
    \ += nee\n            rem -= nee\n        }\n        List(num, rem)", "      \
    \  // Write your code here\n        // To print results to the standard output\
    \ you can use Console.println\n        // Example:\n        // Console.println(\"\
    Hello world\")\n        val total = number + need\n        if (total > remaining)\
    \ {\n            List(remaining, 0)\n        } else {\n            List(total,\
    \ remaining - total)\n        }", "        // your code here\n        List(0l,\
    \ 0l)", "        // your code here\n        List[Long](0l, 0l)", "        // your\
    \ code here\n        List[Long](0l, 0l)", "        // Write your code here\n \
    \       // To print results to the standard output you can use Console.println\n\
    \        // Example:\n        // Console.println(\"Hello world\")\n        val\
    \ total = number + need\n        val left = if (total > remaining) 0 else remaining\
    \ - total\n        List(total, left)", "        // your code here\n        List(0l,\
    \ 0l)", "        var result = List[Long]()\n        if (number + need <= remaining)\
    \ {\n            result = List[Long](number + need, remaining - (number + need))\n\
    \        } else {\n            result = List[Long](remaining, 0)\n        }\n\
    \        return result", "        // Your code here\n        var result = List[Long]()\n\
    \        if (number + need <= remaining) {\n            result = List[Long](number\
    \ + need, remaining - (number + need))\n        } else {\n            result =\
    \ List[Long](remaining + number, 0)\n        }\n        return result", "    \
    \    val total = number + need\n        if (total > remaining) List(remaining,\
    \ 0)\n        else List(total, remaining - total)", "        // your code here\n\
    \        val total = number + remaining\n        val eaten = if (total >= need)\
    \ need else total\n        List(eaten, total - eaten)", "        val total = number\
    \ + min(need, remaining)\n        List(total, max(0, remaining - need))", "  \
    \      // your code here\n        List(0l, 0l)", "        var result = List[Long]()\n\
    \        if (remaining >= need) {\n            result = List(number + need, remaining\
    \ - need)\n        } else {\n            result = List(number + remaining, 0)\n\
    \        }\n        return result", "        val total = number + need\n     \
    \   if (total > remaining) List(remaining, 0)\n        else List(total, remaining\
    \ - total)", "        // your code here\n        var result = List[Long]()\n \
    \       var total = number + need\n        if (total > remaining) {\n        \
    \    result = List[Long](remaining, 0)\n        } else {\n            result =\
    \ List[Long](total, remaining - total)\n        }\n        result", "        val\
    \ total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        // your code here\n        List[Long](number + need, remaining\
    \ - need)", "        val total = number + need\n        if (total > remaining)\
    \ List(remaining, 0)\n        else List(total, remaining - total)", "        val\
    \ result = number + min(need, remaining)\n        List(result, max(0, remaining\
    \ - need))", "        var result = List[Long]()\n        var total = number +\
    \ need\n        if (total > remaining) {\n            total = remaining\n    \
    \    }\n        result = List(total, remaining - total)\n        return result",
  "        // your code here\n        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        // your code\
    \ here\n        List(0l, 0l)", "        // your code here\n        List(0l, 0l)",
  "        var result : List[Long] = List(0l, 0l)\n        if (number < 0 || number\
    \ > 1000 || need < 0 || need > 1000 || remaining < 0 || remaining > 1000) {\n\
    \            return result\n        }\n        var total : Long = number + need\n\
    \        if (total > remaining) {\n            total = remaining\n        }\n\
    \        result = List(total, remaining - total)\n        return result", "  \
    \      // your code here\n        return List[Long](0l, 0l)", "        var result\
    \ = List[Long]()\n        if (remaining < need) {\n            result = List(number\
    \ + remaining, 0)\n        } else {\n            result = List(number + need,\
    \ remaining - need)\n        }\n        result", "        // your code here\n\
    \        var result = List[Long]()\n        if (number + need <= remaining) {\n\
    \            result = List(number + need, remaining - (number + need))\n     \
    \   } else {\n            result = List(remaining, 0)\n        }\n        result",
  "        val total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        var result = List[Long]()\n        var total = number +\
    \ need\n        if (total > remaining) {\n            result = List(remaining,\
    \ 0)\n        } else {\n            result = List(total, remaining - total)\n\
    \        }\n        result", "        // your code here\n        List(0l, 0l)",
  "        val total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        var result = List[Long]()\n        if (remaining >= need)\
    \ {\n            result = List(number + need, remaining - need)\n        } else\
    \ {\n            result = List(number + remaining, 0)\n        }\n        return\
    \ result", "        var result : List[Long] = List()\n        if (remaining <\
    \ need) {\n            result = List(number + remaining, 0)\n        } else {\n\
    \            result = List(number + need, remaining - need)\n        }\n     \
    \   return result", "        // your code here\n        return List(0l, 0l)",
  "        // Write your code here\n        // To print results to the standard output\
    \ you can use Console.println\n        // Example:\n        // Console.println(\"\
    Hello world\")\n        var result = List[Long]()\n        var total = number\
    \ + remaining\n        if (total >= need) {\n            result = List(need, total\
    \ - need)\n        } else {\n            result = List(total, 0)\n        }\n\
    \        result", "        // Your code here\n        val total = number + need\n\
    \        val left = total - remaining\n        if (left > 0) List(total, 0)\n\
    \        else List(total, -left)", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))", "        // your code\
    \ here\n        val total = number + need\n        if (total <= remaining) List(total,\
    \ remaining - total)\n        else List(remaining + number, 0)", "        var\
    \ result : List[Long] = List()\n        if (remaining < need) {\n            result\
    \ = List(number + remaining, 0)\n        } else {\n            result = List(number\
    \ + need, remaining - need)\n        }\n        return result", "        var result\
    \ = List[Long]()\n        if (remaining >= need) {\n            result = List(number\
    \ + need, remaining - need)\n        } else {\n            result = List(number\
    \ + remaining, 0)\n        }\n        return result", "        val total = number\
    \ + min(need, remaining)\n        List(total, max(0, remaining - need))", "  \
    \      val total = number + need\n        val left = if (total > remaining) 0\
    \ else remaining - total\n        List(total, left)", "        // your code here\n\
    \        List(0l, 0l)", "        // Write your code here\n        // To print\
    \ results to the standard output you can use Console.println\n        // Example:\n\
    \        // Console.println(\"Hello world\")\n        val total = number + need\n\
    \        if (total <= remaining) {\n            List(total, remaining - total)\n\
    \        } else {\n            List(remaining + number, 0)\n        }", "    \
    \    // Your code here\n        val total = number + need\n        val left =\
    \ if (total > remaining) 0 else remaining - total\n        List(total, left)",
  "        // your code here\n        List(0l, 0l)", "        val total = number +\
    \ min(need, remaining)\n        List(total, max(0, remaining - need))", "    \
    \    // Your code here\n        List(0, 0)", "        // your code here\n    \
    \    List[Long](0, 0)", "        // Write your code here\n        // To print\
    \ results to the standard output you can use Console.println\n        // Example:\n\
    \        // Console.println(\"Hello world\")\n        List(number + need, remaining\
    \ - need)", "        // your code here\n        val total = number + min(need,\
    \ remaining)\n        List(total, max(0, remaining - need))", "        // your\
    \ code here\n        List(0l, 0l)", "        var result = List[Long]()\n     \
    \   if (remaining >= need) {\n            result = List[Long](number + need, remaining\
    \ - need)\n        } else {\n            result = List[Long](number + remaining,\
    \ 0)\n        }\n        return result", "        // your code here\n        var\
    \ result = List[Long]()\n        if (number + need <= remaining) {\n         \
    \   result = List(number + need, remaining - (number + need))\n        } else\
    \ {\n            result = List(remaining, 0)\n        }\n        result", "  \
    \      if (remaining < need) {\n            List(number + remaining, 0)\n    \
    \    } else {\n            List(number + need, remaining - need)\n        }",
  "        var result = List[Long]()\n        var total = number + need\n        if\
    \ (total > remaining) {\n            result = List(remaining, 0)\n        } else\
    \ {\n            result = List(total, remaining - total)\n        }\n        result",
  "        // Your code here\n        var result = List[Long]()\n        var total\
    \ = number + need\n        if (total > remaining) {\n            result = List(remaining,\
    \ 0)\n        } else {\n            result = List(total, remaining - total)\n\
    \        }\n        result", "        val total = number + min(need, remaining)\n\
    \        List(total, max(0, remaining - need))", "        // your code here\n\
    \        var result = List[Long]()\n        if (number + need <= remaining) {\n\
    \            result = List(number + need, remaining - (number + need))\n     \
    \   } else {\n            result = List(remaining, 0)\n        }\n        result",
  "        if (number + need > remaining) List(remaining, 0)\n        else List(number\
    \ + need, remaining - (number + need))", "        var result = List[Long]()\n\
    \        var total = number + need\n        if (total <= remaining) {\n      \
    \      result = List(total, remaining - total)\n        } else {\n           \
    \ result = List(remaining + number, 0)\n        }\n        result", "        var\
    \ result = List[Long]()\n        if (remaining < need) {\n            result =\
    \ List[Long](number + remaining, 0)\n        } else {\n            result = List[Long](number\
    \ + need, remaining - need)\n        }\n        return result", "        var result\
    \ : List[Long] = List()\n        if (remaining >= need) {\n            result\
    \ = List(number + need, remaining - need)\n        } else {\n            result\
    \ = List(number + remaining, 0)\n        }\n        return result", "        val\
    \ total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        val total = number + min(need, remaining)\n        List(total,\
    \ max(0, remaining - need))", "        var result = List[Long]()\n        var\
    \ total = number + remaining\n        if (total >= need) {\n            result\
    \ = List(need, total - need)\n        } else {\n            result = List(total,\
    \ 0)\n        }\n        result", "        // your code here\n        val result\
    \ = List[Long](number + need, remaining - need)\n        if (result(1) < 0) {\n\
    \            List[Long](number + remaining, 0)\n        } else {\n           \
    \ result\n        }", "        // your code here\n        List(number + need,\
    \ remaining - need)", "        var result = List[Long]()\n        var total =\
    \ number + need\n        if (total > remaining) {\n            total = remaining\n\
    \        }\n        result = result :+ total\n        result = result :+ (remaining\
    \ - total)\n        return result", "        val total = number + remaining\n\
    \        val eaten = if (need > total) total else need\n        List(eaten, total\
    \ - eaten)", "        // Your code here\n        var result = List[Long]()\n \
    \       if (number + need <= remaining) {\n            result = List(number +\
    \ need, remaining - (number + need))\n        } else {\n            result = List(remaining,\
    \ 0)\n        }\n        result", "        // Your code here\n        var result\
    \ = List[Long]()\n        var total = number + need\n        var left = remaining\
    \ - need\n        if (left < 0) {\n            total = total + left\n        \
    \    left = 0\n        }\n        result = List(total, left)\n        return result",
  "        val total = number + need\n        val left = if (total > remaining) 0\
    \ else remaining - total\n        List(total, left)", "        val total = number\
    \ + remaining\n        val eaten = if (total >= need) need else total\n      \
    \  List(eaten, total - eaten)", "        // Your code here\n        var total\
    \ = number + need\n        if (total > remaining) {\n            total = remaining\n\
    \        }\n        List(total, remaining - total)", "        // Write your code\
    \ here\n        // To print results to the standard output you can use Console.println\n\
    \        // Example:\n        // Console.println(\"Hello world\")\n        var\
    \ result = List[Long]()\n        if (remaining < need) {\n            result =\
    \ List[Long](number + remaining, 0)\n        } else {\n            result = List[Long](number\
    \ + need, remaining - need)\n        }\n        result", "        // Your code\
    \ here\n        List(0, 0)", "        val total = number + min(need, remaining)\n\
    \        List(total, remaining - min(need, remaining))"]
stop_tokens:
- "\n    }\n"
