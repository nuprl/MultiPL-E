name: HumanEval_159_eat
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You're a hungry rabbit, and you already have eaten a certain number of carrots,\n\
  \    // but now you need to eat more carrots to complete the day's meals.\n    //\
  \ you should return an array of [ total number of eaten carrots after your meals,\n\
  \    // the number of carrots left after your meals ]\n    // if there are not enough\
  \ remaining carrots, you will eat all remaining carrots, but will still be hungry.\n\
  \    // Example:\n    // >>> eat((5l), (6l), (10l))\n    // (List[Long](11l.toLong,\
  \ 4l.toLong))\n    // >>> eat((4l), (8l), (9l))\n    // (List[Long](12l.toLong,\
  \ 1l.toLong))\n    // >>> eat((1l), (10l), (10l))\n    // (List[Long](11l.toLong,\
  \ 0l.toLong))\n    // >>> eat((2l), (11l), (5l))\n    // (List[Long](7l.toLong,\
  \ 0l.toLong))\n    // Variables:\n    // @number : integer\n    // the number of\
  \ carrots that you have eaten.\n    // @need : integer\n    // the number of carrots\
  \ that you need to eat.\n    // @remaining : integer\n    // the number of remaining\
  \ carrots thet exist in stock\n    // Constrain:\n    // * 0 <= number <= 1000\n\
  \    // * 0 <= need <= 1000\n    // * 0 <= remaining <= 1000\n    // Have fun :)\n\
  \    def eat(number : Long, need : Long, remaining : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(eat((5l), (6l), (10l)).equals((List[Long](11l.toLong,\
  \ 4l.toLong))));\n    assert(eat((4l), (8l), (9l)).equals((List[Long](12l.toLong,\
  \ 1l.toLong))));\n    assert(eat((1l), (10l), (10l)).equals((List[Long](11l.toLong,\
  \ 0l.toLong))));\n    assert(eat((2l), (11l), (5l)).equals((List[Long](7l.toLong,\
  \ 0l.toLong))));\n    assert(eat((4l), (5l), (7l)).equals((List[Long](9l.toLong,\
  \ 2l.toLong))));\n    assert(eat((4l), (5l), (1l)).equals((List[Long](5l.toLong,\
  \ 0l.toLong))));\n    }\n\n}\n"
completions: ["        val total = number + need\n        if (total > remaining) List(remaining,\
    \ 0)\n        else List(total, remaining - total)", "        var result : List[Long]\
    \ = List()\n        if (remaining < need) {\n            result = List(number\
    \ + remaining, 0)\n        } else {\n            result = List(number + need,\
    \ remaining - need)\n        }\n        return result", "        // your code\
    \ here\n        var result = List[Long]()\n        if (remaining >= need) {\n\
    \            result = List[Long](number + need, remaining - need)\n        } else\
    \ {\n            result = List[Long](number + remaining, 0)\n        }\n     \
    \   result", "        var result = List[Long]()\n        if (remaining >= need)\
    \ {\n            result = List(number + need, remaining - need)\n        } else\
    \ {\n            result = List(number + remaining, 0)\n        }\n        return\
    \ result", "        val total = number + min(need, remaining)\n        List(total,\
    \ max(0, remaining - need))", "        // Write your code here\n        // To\
    \ print results to the standard output you can use Console.println\n        //\
    \ Example:\n        // Console.println(\"Hello world\")\n        val total = number\
    \ + need\n        if (total > remaining) {\n            List(remaining, 0)\n \
    \       } else {\n            List(total, remaining - total)\n        }", "  \
    \      // your code here\n        val total = number + need\n        if (total\
    \ > remaining) List(remaining, 0)\n        else List(total, remaining - total)",
  "        // Your code here\n        return List(0l, 0l)", "        var result =\
    \ List[Long]()\n        if (remaining >= need) {\n            result = List[Long](number\
    \ + need, remaining - need)\n        } else {\n            result = List[Long](number\
    \ + remaining, 0)\n        }\n        return result", "        var result = List[Long]()\n\
    \        if (remaining < need) {\n            result = List(number + remaining,\
    \ 0)\n        } else {\n            result = List(number + need, remaining - need)\n\
    \        }\n        result", "        val total = number + min(need, remaining)\n\
    \        List(total, max(0, remaining - need))", "        val total = number +\
    \ remaining\n        val eaten = if (total >= need) need else total\n        List(eaten,\
    \ total - eaten)", "        // your code here\n        val eaten = number + min(need,\
    \ remaining)\n        val left = max(0, remaining - need)\n        List(eaten,\
    \ left)", "        var result = List[Long]()\n        if (remaining >= need) {\n\
    \            result = List(number + need, remaining - need)\n        } else {\n\
    \            result = List(number + remaining, 0)\n        }\n        return result",
  "        val total = number + need\n        if (total > remaining) {\n         \
    \   List(remaining, 0)\n        } else {\n            List(total, remaining -\
    \ total)\n        }", "        var result = List[Long]()\n        var total =\
    \ number + need\n        if (total > remaining) {\n            total = remaining\n\
    \        }\n        result = List(total, remaining - total)\n        return result",
  "        // your code here\n        val total = number + need\n        if (total\
    \ > remaining) {\n            List(remaining, 0)\n        } else {\n         \
    \   List(total, remaining - total)\n        }", "        var result = List[Long]()\n\
    \        var total = number + remaining\n        if (total >= need) {\n      \
    \      result = List[Long](need, total - need)\n        } else {\n           \
    \ result = List[Long](total, 0)\n        }\n        return result", "        val\
    \ total = number + min(need, remaining)\n        List(total, max(0, remaining\
    \ - need))", "        // Your code here\n        return List(0l, 0l)"]
stop_tokens:
- "\n    }\n"
