language: scala
name: HumanEval_143_words_in_sentence
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word)\n                result.append(\" \")\n \
    \           }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to i - 1) {\n                if (i %\
    \ j == 0) {\n                    isPrime = false\n                    break\n\
    \                }\n            }\n            if (isPrime) primes += i\n    \
    \    }\n        val result = ArrayBuffer[String]()\n        for (word <- words)\
    \ {\n            if (primes.contains(word.length)) result += word\n        }\n\
    \        result.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw6mpmohj.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        var\
    \ result = \"\"\n        for (word <- words) {\n            if (isPrime(word.length))\
    \ {\n                result += word + \" \"\n            }\n        }\n      \
    \  result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw59jh83v.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(word.length)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val sb = new StringBuilder\n      \
    \  for (word <- words) {\n            if (primes.contains(word.length)) {\n  \
    \              sb.append(word)\n                sb.append(\" \")\n           \
    \ }\n        }\n        sb.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n : Int) : Boolean = {\n       \
    \     if (n <= 1) return false\n            if (n == 2) return true\n        \
    \    for (i <- 2 to sqrt(n).toInt) if (n % i == 0) return false\n            return\
    \ true\n        }\n        val words = sentence.split(\" \")\n        val result\
    \ = new StringBuilder\n        for (word <- words) {\n            if (isPrime(word.length))\
    \ {\n                if (result.length > 0) result.append(\" \")\n           \
    \     result.append(word)\n            }\n        }\n        return result.toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n              \
    \  if (i % j == 0) {\n                    isPrime = false\n                  \
    \  break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        val result = new StringBuilder\n        for (word <- words)\
    \ {\n            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn543v2o.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n   \
    \     val result = new StringBuilder\n        for (word <- words) {\n        \
    \    if (primes.contains(word.length)) {\n                result.append(word +\
    \ \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm2t0qbgl.scala:21:39 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val words = sentence.split(\" \")\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkd0obc4v.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793779
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        null\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"String.equals(Object)\"\
    \ because the return value of \"Problem$.wordsInSentence(String)\" is null\n\t\
    at Problem$.main(tmprxoemghe.scala:23)\n\tat Problem.main(tmprxoemghe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (i <- 0 until words.length) {\n\
    \            if (primes.contains(words(i).length)) {\n                result.append(words(i)\
    \ + \" \")\n            }\n        }\n        result.toString.trim\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        null\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"String.equals(Object)\"\
    \ because the return value of \"Problem$.wordsInSentence(String)\" is null\n\t\
    at Problem$.main(tmprxoemghe.scala:23)\n\tat Problem.main(tmprxoemghe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = words.filter(w => isPrime(w.length))\n\
    \        primes.mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ghs9kop.scala:21:39 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.filter(\e\
    [36mw\e[0m => isPrime(w.length))\n\e[31m\e[31m   |\e[0m                      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \         Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  var result = \"\"\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result += word + \" \"\n            }\n        }\n      \
    \  result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793798
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n              \
    \  if (i % j == 0) {\n                    isPrime = false\n                  \
    \  break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        val result = ArrayBuffer[String]()\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) result += word\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmddwy2pw.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = (2 to 100).filter(isPrime)\n        words.filter(w => primes.contains(w.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74druqdz.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx6wo8gx7.scala:23)\n\tat Problem.main(tmpx6wo8gx7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n : Int) : Boolean = {\n       \
    \     if (n == 1) false\n            else if (n == 2) true\n            else !(2\
    \ to (sqrt(n).toInt)).exists(x => n % x == 0)\n        }\n        sentence.split(\"\
    \ \").filter(x => isPrime(x.length)).mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793897
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        null\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"String.equals(Object)\"\
    \ because the return value of \"Problem$.wordsInSentence(String)\" is null\n\t\
    at Problem$.main(tmprxoemghe.scala:23)\n\tat Problem.main(tmprxoemghe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793791
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        var result = List[String]()\n        for (word\
    \ <- words) {\n            if (isPrime(word.length)) {\n                result\
    \ = word :: result\n            }\n        }\n        result.reverse.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36qb7bum.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(word.length)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = (2 to 100).filter(isPrime(_))\n        val result = words.filter(w\
    \ => primes.contains(w.length))\n        result.mkString(\" \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5i5tlzve.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime(_))\n\e[31m\e[31m   |\e[0m             \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (i <- 0 until words.length) {\n            if (primes.contains(words(i).length))\
    \ {\n                result.append(words(i))\n                result.append(\"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        var s = sentence.split(\"\
    \ \")\n        var res = \"\"\n        for (i <- 0 until s.length) {\n       \
    \     if (isPrime(s(i).length)) {\n                res += s(i) + \" \"\n     \
    \       }\n        }\n        res.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpigy_63wm.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(s(i).length)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) {\n                result += word\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word)\n                result.append(\" \")\n \
    \           }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val primeLengths = words.map(word => word.length).filter(length => primes.contains(length))\n\
    \        val primeWords = words.filter(word => primeLengths.contains(word.length))\n\
    \        primeWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n              \
    \  if (i % j == 0) {\n                    isPrime = false\n                  \
    \  break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        val result = new StringBuilder\n        for (word <- words)\
    \ {\n            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn543v2o.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793796
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to i - 1) {\n                if (i %\
    \ j == 0) {\n                    isPrime = false\n                    break\n\
    \                }\n            }\n            if (isPrime) primes += i\n    \
    \    }\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            if (primes.contains(word.length)) {\n                result.append(word)\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpc244wsj3.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793895
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        words.filter(word\
    \ => isPrime(word.length)).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpku2ts6vt.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        words.filter(\e[36mword\e[0m => isPrime(word.length)).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                             Not found: isPrime\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659793785
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ListBuffer[String]\n        for (word <- words) {\n      \
    \      if (primes.contains(word.length)) {\n                result += word\n \
    \           }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = (2 to 100).filter(isPrime)\n        val result = words.filter(word\
    \ => primes.contains(word.length))\n        result.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_5sbtxa.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793894
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        words.filter(word => primes.contains(word.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word)\n                result.append(\" \")\n \
    \           }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ListBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        // Return \"\
    not implemented\" as a string.\n        \"not implemented\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81o7qrh8.scala:24)\n\tat Problem.main(tmp81o7qrh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ListBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = (2 to 100).filter(isPrime)\n        words.filter(w => primes.contains(w.length)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74druqdz.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n              \
    \  if (i % j == 0) {\n                    isPrime = false\n                  \
    \  break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        val result = ArrayBuffer[String]()\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) result += word\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmddwy2pw.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result += word\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val filtered = words.filter(word =>\
    \ primes.contains(word.length))\n        filtered.mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n              \
    \  if (i % j == 0) {\n                    isPrime = false\n                  \
    \  break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        val result = ArrayBuffer[String]()\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) result += word\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmddwy2pw.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) {\n                result += word\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result += word\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word)\n                result.append(\" \")\n \
    \           }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = ArrayBuffer[String]()\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result += word\n            }\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793792
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (i <- 0 until words.length) {\n            if (primes.contains(words(i).length))\
    \ {\n                result.append(words(i) + \" \")\n            }\n        }\n\
    \        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (i <- 0 until words.length) {\n\
    \            if (primes.contains(words(i).length)) {\n                result.append(words(i))\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkd0obc4v.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793779
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        // Return \"\
    not implemented\" as a string.\n        \"not implemented\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81o7qrh8.scala:24)\n\tat Problem.main(tmp81o7qrh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        var result\
    \ = \"\"\n        for (word <- sentence.split(\" \")) {\n            if (isPrime(word.length))\
    \ {\n                result += word + \" \"\n            }\n        }\n      \
    \  result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxk4jf3_d.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(word.length)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (i <- 0 until words.length) {\n            if (primes.contains(words(i).length))\
    \ {\n                result.append(words(i))\n                result.append(\"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        // Return \"\
    not implemented\" as a string.\n        \"not implemented\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81o7qrh8.scala:24)\n\tat Problem.main(tmp81o7qrh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word)\n                result.append(\" \")\n \
    \           }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ListBuffer[String]\n        for (word <- words) {\n      \
    \      if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        // Return \"\
    not implemented\" as a string.\n        \"not implemented\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81o7qrh8.scala:24)\n\tat Problem.main(tmp81o7qrh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ListBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (i <- 0 until words.length) {\n            if (primes.contains(words(i).length))\
    \ {\n                result.append(words(i))\n                result.append(\"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ val length = word.length\n            if (primes.contains(length)) {\n     \
    \           result.append(word + \" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val words = sentence.split(\" \")\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = \"\"\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) {\n             \
    \   result += word + \" \"\n            }\n        }\n        result.trim\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This\
    \ is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        // Return \"\
    not implemented\" as a string.\n        \"not implemented\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81o7qrh8.scala:24)\n\tat Problem.main(tmp81o7qrh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793781
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        var result\
    \ = \"\"\n        val words = sentence.split(\" \")\n        for (word <- words)\
    \ {\n            if (isPrime(word.length)) {\n                result += word +\
    \ \" \"\n            }\n        }\n        result.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi9n7kgt9.scala:23:16 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (isPrime(word.length)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx6wo8gx7.scala:23)\n\tat Problem.main(tmpx6wo8gx7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word)\n                result.append(\" \")\n \
    \           }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        null\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"String.equals(Object)\"\
    \ because the return value of \"Problem$.wordsInSentence(String)\" is null\n\t\
    at Problem$.main(tmprxoemghe.scala:23)\n\tat Problem.main(tmprxoemghe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n              \
    \  if (i % j == 0) {\n                    isPrime = false\n                  \
    \  break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        val result = new StringBuilder\n        for (word <- words)\
    \ {\n            if (primes.contains(word.length)) {\n                result.append(word)\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpo37npo0m.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793895
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (i <- 0 until words.length) {\n            if (primes.contains(words(i).length))\
    \ {\n                result.append(words(i) + \" \")\n            }\n        }\n\
    \        result.toString.trim\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"\
    lets go for swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"\
    there is no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793898
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word)\n \
    \               result.append(\" \")\n            }\n        }\n        result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx6wo8gx7.scala:23)\n\tat Problem.main(tmpx6wo8gx7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n : Int) : Boolean = {\n       \
    \     if (n <= 1) return false\n            if (n == 2) return true\n        \
    \    if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        val words = sentence.split(\" \")\n     \
    \   val sb = new StringBuilder\n        for (word <- words) {\n            if\
    \ (isPrime(word.length)) {\n                sb.append(word + \" \")\n        \
    \    }\n        }\n        sb.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = words.filter(w => isPrime(w.length))\n        primes.mkString(\" \"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7cdzeio_.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = words.filter(\e\
    [36mw\e[0m => isPrime(w.length))\n\e[31m\e[31m   |\e[0m                      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                              \
    \         Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n              \
    \  if (i % j == 0) {\n                    isPrime = false\n                  \
    \  break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        val result = ArrayBuffer[String]()\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) result += word\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmddwy2pw.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder()\n        for (word <- words) {\n         \
    \   if (primes.contains(word.length)) {\n                result.append(word +\
    \ \" \")\n            }\n        }\n        result.toString().trim()\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n   \
    \     words.filter(w => primes.contains(w.length)).mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a\
    \ test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi5qlisim.scala:21:39 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793900
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val sb = new StringBuilder\n      \
    \  for (i <- 0 until words.length) {\n            if (primes.contains(words(i).length))\
    \ {\n                sb.append(words(i))\n                sb.append(\" \")\n \
    \           }\n        }\n        sb.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val sb = new StringBuilder\n      \
    \  for (word <- words) {\n            if (primes.contains(word.length)) {\n  \
    \              sb.append(word + \" \")\n            }\n        }\n        sb.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n : Int) : Boolean = {\n       \
    \     if (n <= 1) return false\n            if (n == 2) return true\n        \
    \    if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt by\
    \ 2) {\n                if (n % i == 0) return false\n            }\n        \
    \    return true\n        }\n        val words = sentence.split(\" \")\n     \
    \   val result = new StringBuilder\n        for (word <- words) {\n          \
    \  if (isPrime(word.length)) {\n                result.append(word)\n        \
    \        result.append(\" \")\n            }\n        }\n        return result.toString.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        \"\".toString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7m1ami__.scala:23)\n\tat Problem.main(tmp7m1ami__.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793901
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder()\n        for (word <- words) {\n         \
    \   if (primes.contains(word.length)) {\n                result.append(word +\
    \ \" \")\n            }\n        }\n        result.toString().trim()\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is\
    \ a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\"\
    )).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no place available\
    \ here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi\
    \ I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ListBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793797
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        // Return \"\
    not implemented\" as a string.\n        \"not implemented\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81o7qrh8.scala:24)\n\tat Problem.main(tmp81o7qrh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        var result\
    \ = \"\"\n        for (word <- sentence.split(\" \")) {\n            if (isPrime(word.length))\
    \ {\n                result += word + \" \"\n            }\n        }\n      \
    \  result.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxk4jf3_d.scala:22:16 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mif\e[0m (isPrime(word.length)) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793795
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ArrayBuffer[String]\n        for (word <- words) {\n     \
    \       if (primes.contains(word.length)) {\n                result += word\n\
    \            }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        return \"\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx6wo8gx7.scala:23)\n\tat Problem.main(tmpx6wo8gx7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        // Return \"\
    not implemented\" as a string.\n        \"not implemented\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81o7qrh8.scala:24)\n\tat Problem.main(tmp81o7qrh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n            var\
    \ isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n              \
    \  if (i % j == 0) {\n                    isPrime = false\n                  \
    \  break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        val result = ArrayBuffer[String]()\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) result += word\n\
    \        }\n        result.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmddwy2pw.scala:26:20 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                    break\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: break\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793790
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        def isPrime(n : Int) : Boolean = {\n       \
    \     if (n == 1) return false\n            for (i <- 2 to sqrt(n).toInt) {\n\
    \                if (n % i == 0) return false\n            }\n            return\
    \ true\n        }\n        val words = sentence.split(\" \")\n        val result\
    \ = new StringBuilder\n        for (word <- words) {\n            if (isPrime(word.length))\
    \ {\n                result.append(word)\n                result.append(\" \"\
    )\n            }\n        }\n        return result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word + \" \")\n            }\n        }\n     \
    \   result.toString.trim\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        // Return \"\
    not implemented\" as a string.\n        \"not implemented\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp81o7qrh8.scala:24)\n\tat Problem.main(tmp81o7qrh8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793781
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ListBuffer[String]\n        for (word <- words) {\n      \
    \      if (primes.contains(word.length)) {\n                result += word\n \
    \           }\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new ArrayBuffer[String]\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime)\n   \
    \     val result = new StringBuilder\n        for (word <- words) {\n        \
    \    if (primes.contains(word.length)) {\n                result.append(word +\
    \ \" \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpm2t0qbgl.scala:21:39 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime)\n\e[31m\e[31m   |\e[0m                \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \               Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793789
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new ListBuffer[String]\n        for (word <- words) {\n      \
    \      if (primes.contains(word.length)) result += word\n        }\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val wordsWithPrimeLength = words.filter(w => primes.contains(w.length))\n \
    \       wordsWithPrimeLength.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793902
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = (2 to 100).filter(isPrime(_))\n\
    \        val result = words.filter(w => primes.contains(w.length))\n        result.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
    This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
    \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is\
    \ no place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
    Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
    go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\"\
    )).equals((\"\")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphh8pa806.scala:21:39 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mprimes\e[0m = (\e[31m2\e\
    [0m to \e[31m100\e[0m).filter(isPrime(_))\n\e[31m\e[31m   |\e[0m             \
    \                          ^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                  Not found: isPrime\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659793902
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        val words =\
    \ sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n      \
    \  val result = new StringBuilder\n        for (word <- words) {\n           \
    \ if (primes.contains(word.length)) {\n                result.append(word + \"\
    \ \")\n            }\n        }\n        result.toString.trim\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsInSentence((\"This is a test\"\
    )).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"\
    go for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793782
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        // Write your code here\n        def isPrime(n\
    \ : Int) : Boolean = {\n            if (n <= 1) return false\n            if (n\
    \ == 2) return true\n            for (i <- 2 to sqrt(n).toInt) {\n           \
    \     if (n % i == 0) return false\n            }\n            return true\n \
    \       }\n        val words = sentence.split(\" \")\n        val result = new\
    \ StringBuilder\n        for (word <- words) {\n            if (isPrime(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       return result.toString.trim\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"is\")));\n \
    \   assert(wordsInSentence((\"lets go for swimming\")).equals((\"go for\")));\n\
    \    assert(wordsInSentence((\"there is no place available here\")).equals((\"\
    there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\")).equals((\"\
    Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"go\
    \ for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n    assert(wordsInSentence((\"\
    here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793903
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You are given a string representing a sentence,\n    // the sentence\
    \ contains some words separated by a space,\n    // and you have to return a string\
    \ that contains the words from the original sentence,\n    // whose lengths are\
    \ prime numbers,\n    // the order of the words in the new string should be the\
    \ same as the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"\
    This is a test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"\
    lets go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1\
    \ <= len(sentence) <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
    \ : String) : String = {\n        val words = sentence.split(\" \")\n        val\
    \ primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n  \
    \      for (word <- words) {\n            if (primes.contains(word.length)) {\n\
    \                result.append(word)\n                result.append(\" \")\n \
    \           }\n        }\n        result.toString.trim\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsInSentence((\"This is a test\")).equals((\"\
    is\")));\n    assert(wordsInSentence((\"lets go for swimming\")).equals((\"go\
    \ for\")));\n    assert(wordsInSentence((\"there is no place available here\"\
    )).equals((\"there is no place\")));\n    assert(wordsInSentence((\"Hi I am Hussein\"\
    )).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"go for it\")).equals((\"\
    go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\")));\n   \
    \ assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793793
