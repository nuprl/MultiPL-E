language: scala
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.sortWith((a,\
    \ b) => a.length < b.length)\n        var lst3 = lst2.filter(x => x.length % 2\
    \ == 0)\n        return lst3\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptwwah0jx.scala:28)\n\tat Problem.main(tmptwwah0jx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        if (lst.length\
    \ == 0) return List[String]()\n        val lst2 = lst.filter(x => x.length % 2\
    \ == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length < y.length)\n   \
    \     return lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxi460fv_.scala:29)\n\tat Problem.main(tmpxi460fv_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((a,\
    \ b) => a.length < b.length || (a.length == b.length && a < b)).filter(x => x.length\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith((x, y) => x.length < y.length)\n\
    \        lst2 = lst2.sortWith((x, y) => x < y)\n        return lst2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppo_ut1ik.scala:32)\n\tat Problem.main(tmppo_ut1ik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var result = List[String]()\n\
    \        for (i <- lst) {\n            if (i.length % 2 == 0) {\n            \
    \    result = result :+ i\n            }\n        }\n        result.sortWith((a,\
    \ b) => a.length < b.length)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdoq_efvm.scala:32)\n\tat Problem.main(tmpdoq_efvm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst2 = lst1.sortWith((x, y) => x.length <\
    \ y.length)\n        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6migj_m.scala:28)\n\tat Problem.main(tmpb6migj_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkt_s16p.scala:26)\n\tat Problem.main(tmpmkt_s16p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val evenList =\
    \ lst.filter(x => x.length % 2 == 0)\n        val sortedList = evenList.sortWith((x,\
    \ y) => x.length < y.length)\n        sortedList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpquw3r4aa.scala:28)\n\tat Problem.main(tmpquw3r4aa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((x,\
    \ y) => x.length < y.length || (x.length == y.length && x < y))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\"\
    , \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpruwtzwu5.scala:23)\n\tat Problem.main(tmpruwtzwu5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length\
    \ && x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith((x, y) => x.length < y.length)\n\
    \        lst2 = lst2.sortWith((x, y) => x < y)\n        return lst2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppo_ut1ik.scala:32)\n\tat Problem.main(tmppo_ut1ik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst2 = lst1.sortWith((x, y) => x.length <\
    \ y.length)\n        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6migj_m.scala:28)\n\tat Problem.main(tmpb6migj_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith(_.length < _.length)\n\
    \        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqqhgh9sc.scala:28)\n\tat Problem.main(tmpqqhgh9sc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith((x, y) => x.length < y.length)\n\
    \        return lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpniu9dhcv.scala:28)\n\tat Problem.main(tmpniu9dhcv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length\
    \ && x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst2 = lst1.sortWith((x, y) => x.length <\
    \ y.length)\n        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6migj_m.scala:28)\n\tat Problem.main(tmpb6migj_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkt_s16p.scala:26)\n\tat Problem.main(tmpmkt_s16p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var result = List[String]()\n\
    \        for (i <- lst) {\n            if (i.length % 2 == 0) {\n            \
    \    result = result :+ i\n            }\n        }\n        result.sortWith(_.length\
    \ < _.length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaj8nbw9w.scala:32)\n\tat Problem.main(tmpaj8nbw9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith((x, y) => x.length < y.length)\n\
    \        lst2 = lst2.sortWith((x, y) => x < y)\n        return lst2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppo_ut1ik.scala:32)\n\tat Problem.main(tmppo_ut1ik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst2 = lst1.sortWith(_.length < _.length)\n\
    \        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0ed7ewhk.scala:28)\n\tat Problem.main(tmp0ed7ewhk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.map(x\
    \ => (x, x.length))\n        val lst2 = lst1.groupBy(_._2).map(x => (x._1, x._2.map(_._1).sorted))\n\
    \        val lst3 = lst2.toList.sortBy(_._1)\n        val lst4 = lst3.map(_._2).flatten\n\
    \        lst4\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwcoy970s.scala:27)\n\tat Problem.main(tmpwcoy970s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.sortWith((a,\
    \ b) => a.length < b.length)\n        var lst3 = lst2.filter(x => x.length % 2\
    \ == 0)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvx00hye_.scala:28)\n\tat Problem.main(tmpvx00hye_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length ||\
    \ (x.length == y.length && x < y))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst1.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8dsys4ku.scala:27)\n\tat Problem.main(tmp8dsys4ku.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst2 = lst1.sortWith((x, y) => x.length <\
    \ y.length)\n        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6migj_m.scala:28)\n\tat Problem.main(tmpb6migj_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith((x, y) => x.length < y.length)\n\
    \        lst2 = lst2.sortWith((x, y) => x < y)\n        return lst2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppo_ut1ik.scala:32)\n\tat Problem.main(tmppo_ut1ik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length ||\
    \ (x.length == y.length && x < y))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val sortedList\
    \ = lst.sortWith((a, b) => a.length < b.length)\n        sortedList.filter(x =>\
    \ x.length % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8szz10t_.scala:27)\n\tat Problem.main(tmp8szz10t_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length\
    \ && x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length\
    \ && x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var result = List[String]()\n\
    \        for (i <- lst) {\n            if (i.length % 2 == 0) {\n            \
    \    result = result :+ i\n            }\n        }\n        result.sortWith(_.length\
    \ < _.length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaj8nbw9w.scala:32)\n\tat Problem.main(tmpaj8nbw9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith((x, y) => x.length < y.length)\n\
    \        lst2 = lst2.sortWith((x, y) => x < y)\n        return lst2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppo_ut1ik.scala:32)\n\tat Problem.main(tmppo_ut1ik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith((x, y) => x.length < y.length)\n\
    \        lst2 = lst2.sortWith((x, y) => x < y)\n        return lst2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppo_ut1ik.scala:32)\n\tat Problem.main(tmppo_ut1ik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        return lst3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp56s0cbif.scala:28)\n\tat Problem.main(tmp56s0cbif.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        var lst2 = lst1.sortWith((x, y) => x.length <\
    \ y.length)\n        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps5tk22xe.scala:28)\n\tat Problem.main(tmps5tk22xe.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length ||\
    \ (x.length == y.length && x < y))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith((x, y) => x.length < y.length)\n\
    \        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ta40566.scala:28)\n\tat Problem.main(tmp4ta40566.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkt_s16p.scala:26)\n\tat Problem.main(tmpmkt_s16p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkt_s16p.scala:26)\n\tat Problem.main(tmpmkt_s16p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkt_s16p.scala:26)\n\tat Problem.main(tmpmkt_s16p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkt_s16p.scala:26)\n\tat Problem.main(tmpmkt_s16p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkt_s16p.scala:26)\n\tat Problem.main(tmpmkt_s16p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((a,\
    \ b) => a.length < b.length || (a.length == b.length && a < b)).filter(a => a.length\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith((x, y) => x.length < y.length)\n\
    \        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ta40566.scala:28)\n\tat Problem.main(tmp4ta40566.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795074
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        // sort the list\
    \ by length of each word\n        val sortedList = lst.sortWith((a, b) => a.length\
    \ < b.length)\n        // filter out the words with odd length\n        val filteredList\
    \ = sortedList.filter(s => s.length % 2 == 0)\n        // return the list\n  \
    \      filteredList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpavp8p_c3.scala:31)\n\tat Problem.main(tmpavp8p_c3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst1.sortWith((x, y) => x.length < y.length ||\
    \ (x.length == y.length && x < y))\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        def isEven(x :\
    \ Int) : Boolean = x % 2 == 0\n        val evenLengths = lst.filter(x => isEven(x.length))\n\
    \        evenLengths.sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgvaera75.scala:28)\n\tat Problem.main(tmpgvaera75.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length\
    \ && x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst2 = lst1.sortWith((x, y) => x.length <\
    \ y.length)\n        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6migj_m.scala:28)\n\tat Problem.main(tmpb6migj_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst2 = lst1.sortWith((x, y) => x.length <\
    \ y.length)\n        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6migj_m.scala:28)\n\tat Problem.main(tmpb6migj_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst1 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst2 = lst1.sortWith((x, y) => x.length <\
    \ y.length)\n        lst2\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb6migj_m.scala:28)\n\tat Problem.main(tmpb6migj_m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.sortWith((x,\
    \ y) => x.length < y.length)\n        var lst3 = lst2.filter(x => x.length % 2\
    \ == 0)\n        return lst3\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpogm8w1c2.scala:28)\n\tat Problem.main(tmpogm8w1c2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length\
    \ && x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var result = List[String]()\n\
    \        for (i <- lst) {\n            if (i.length % 2 == 0) {\n            \
    \    result = result :+ i\n            }\n        }\n        result.sortWith(_.length\
    \ < _.length)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaj8nbw9w.scala:32)\n\tat Problem.main(tmpaj8nbw9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((a, b) => a.length < b.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsrtxv49r.scala:26)\n\tat Problem.main(tmpsrtxv49r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(_.length\
    \ % 2 == 0).sortWith((a, b) => a.length < b.length || (a.length == b.length &&\
    \ a < b))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkt_s16p.scala:26)\n\tat Problem.main(tmpmkt_s16p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith((x, y) => x.length < y.length)\n\
    \        lst2 = lst2.sortWith((x, y) => x < y)\n        return lst2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppo_ut1ik.scala:32)\n\tat Problem.main(tmppo_ut1ik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length\
    \ && x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(_.length\
    \ % 2 == 0).sortWith((a, b) => a.length < b.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgbyn3mb_.scala:26)\n\tat Problem.main(tmpgbyn3mb_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith(_.length < _.length)\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8vgp89oc.scala:27)\n\tat Problem.main(tmp8vgp89oc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkt_s16p.scala:26)\n\tat Problem.main(tmpmkt_s16p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((a,\
    \ b) => a.length < b.length || (a.length == b.length && a < b)).filter(a => a.length\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length\
    \ && x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.sortWith((a,\
    \ b) => a.length < b.length)\n        var lst3 = lst2.filter((a) => a.length %\
    \ 2 == 0)\n        return lst3\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0uxkkti5.scala:28)\n\tat Problem.main(tmp0uxkkti5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((a,\
    \ b) => a.length < b.length)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsn1k65wh.scala:23)\n\tat Problem.main(tmpsn1k65wh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.map(x\
    \ => (x, x.length)).sortBy(x => (x._2, x._1))\n        lst2.filter(x => x._2 %\
    \ 2 == 0).map(x => x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.sortWith((s1,\
    \ s2) => s1.length < s2.length)\n        lst2.filter(s => s.length % 2 == 0)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplbyiygng.scala:27)\n\tat Problem.main(tmplbyiygng.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((a,\
    \ b) => a.length < b.length || (a.length == b.length && a < b)).filter(x => x.length\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkt_s16p.scala:26)\n\tat Problem.main(tmpmkt_s16p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((x,\
    \ y) => x.length < y.length)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_4vwwhqp.scala:23)\n\tat Problem.main(tmp_4vwwhqp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.sortWith((a,\
    \ b) => a.length < b.length || (a.length == b.length && a < b)).filter(s => s.length\
    \ % 2 == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.groupBy(_.length).toList.sortBy(_._1).map(_._2).flatten\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjmuund2i.scala:23)\n\tat Problem.main(tmpjmuund2i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.map(x\
    \ => (x, x.length)).sortBy(x => (x._2, x._1))\n        lst2.filter(x => x._2 %\
    \ 2 == 0).map(x => x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith(_.length < _.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkt_s16p.scala:26)\n\tat Problem.main(tmpmkt_s16p.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length || (x.length == y.length\
    \ && x < y))\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2.sortWith((x, y) => x.length < y.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpndn43td4.scala:27)\n\tat Problem.main(tmpndn43td4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith(_.length < _.length)\n \
    \       lst2 = lst2.sortWith(_ < _)\n        return lst2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp28nqr5fm.scala:32)\n\tat Problem.main(tmp28nqr5fm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val sortedList\
    \ = lst.sortWith((a, b) => a.length < b.length)\n        val result = new ListBuffer[String]\n\
    \        for (i <- 0 until sortedList.length) {\n            if (i == 0) {\n \
    \               result += sortedList(i)\n            } else {\n              \
    \  if (sortedList(i).length == sortedList(i - 1).length) {\n                 \
    \   result += sortedList(i)\n                }\n            }\n        }\n   \
    \     result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp51w7bmns.scala:34)\n\tat Problem.main(tmp51w7bmns.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.sortWith((a,\
    \ b) => a.length < b.length)\n        var lst3 = lst2.filter(x => x.length % 2\
    \ == 0)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvx00hye_.scala:28)\n\tat Problem.main(tmpvx00hye_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.sorted\n\
    \        var lst3 = lst2.filter(x => x.length % 2 == 0)\n        return lst3\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp6c8ksrl.scala:31)\n\tat Problem.main(tmpp6c8ksrl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sorted\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(sortedListSum((List[String](\"aa\", \"a\", \"aaa\"))).equals((List[String](\"\
    aa\"))));\n    assert(sortedListSum((List[String](\"school\", \"AI\", \"asdf\"\
    , \"b\"))).equals((List[String](\"AI\", \"asdf\", \"school\"))));\n    assert(sortedListSum((List[String](\"\
    d\", \"b\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    d\", \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0sub9ufb.scala:29)\n\tat Problem.main(tmp0sub9ufb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        var lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        lst2 = lst2.sortWith((x, y) => x.length < y.length)\n\
    \        lst2 = lst2.sortWith((x, y) => x < y)\n        return lst2\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppo_ut1ik.scala:32)\n\tat Problem.main(tmppo_ut1ik.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795065
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        val lst2 = lst.filter(x\
    \ => x.length % 2 == 0)\n        val lst3 = lst2.sortWith((x, y) => x.length <\
    \ y.length)\n        lst3\n    }\n    def main(args: Array[String]) = {\n    assert(sortedListSum((List[String](\"\
    aa\", \"a\", \"aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpihe6khc5.scala:28)\n\tat Problem.main(tmpihe6khc5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Write a function that accepts a list of strings as a parameter,\n\
    \    // deletes the strings that have odd lengths from it,\n    // and returns\
    \ the resulted list with a sorted order,\n    // The list is always a list of\
    \ strings and never an array of numbers,\n    // and it may contain duplicates.\n\
    \    // The order of the list should be ascending by length of each word, and\
    \ you\n    // should return the list sorted by that rule.\n    // If two words\
    \ have the same length, sort the list alphabetically.\n    // The function should\
    \ return a list of strings in sorted order.\n    // You may assume that all words\
    \ will have the same length.\n    // For example:\n    // >>> listSort((List[String](\"\
    aa\", \"a\", \"aaa\")))\n    // (List[String](\"aa\"))\n    // >>> listSort((List[String](\"\
    ab\", \"a\", \"aaa\", \"cd\")))\n    // (List[String](\"ab\", \"cd\"))\n    def\
    \ sortedListSum(lst : List[String]) : List[String] = {\n        lst.filter(x =>\
    \ x.length % 2 == 0).sortWith((x, y) => x.length < y.length)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortedListSum((List[String](\"aa\", \"a\", \"\
    aaa\"))).equals((List[String](\"aa\"))));\n    assert(sortedListSum((List[String](\"\
    school\", \"AI\", \"asdf\", \"b\"))).equals((List[String](\"AI\", \"asdf\", \"\
    school\"))));\n    assert(sortedListSum((List[String](\"d\", \"b\", \"c\", \"\
    a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"d\"\
    , \"dcba\", \"abcd\", \"a\"))).equals((List[String](\"abcd\", \"dcba\"))));\n\
    \    assert(sortedListSum((List[String](\"AI\", \"ai\", \"au\"))).equals((List[String](\"\
    AI\", \"ai\", \"au\"))));\n    assert(sortedListSum((List[String](\"a\", \"b\"\
    , \"b\", \"c\", \"c\", \"a\"))).equals((List[String]())));\n    assert(sortedListSum((List[String](\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\"))).equals((List[String](\"cc\", \"dd\", \"aaaa\"\
    , \"bbbb\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfusz90zi.scala:26)\n\tat Problem.main(tmpfusz90zi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659795064
