name: HumanEval_144_simplify
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Your task is to implement a function that will simplify the expression\n\
  \    // x * n. The function returns True if x * n evaluates to a whole number and\
  \ False\n    // otherwise. Both x and n, are string representation of a fraction,\
  \ and have the following format,\n    // <numerator>/<denominator> where both numerator\
  \ and denominator are positive whole numbers.\n    // You can assume that x, and\
  \ n are valid fractions, and do not have zero as denominator.\n    // >>> simplify((\"\
  1/5\"), (\"5/1\"))\n    // (true)\n    // >>> simplify((\"1/6\"), (\"2/1\"))\n \
  \   // (false)\n    // >>> simplify((\"7/10\"), (\"10/2\"))\n    // (false)\n  \
  \  def simplify(x : String, n : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(simplify((\"1/5\"\
  ), (\"5/1\")) == (true));\n    assert(simplify((\"1/6\"), (\"2/1\")) == (false));\n\
  \    assert(simplify((\"5/1\"), (\"3/1\")) == (true));\n    assert(simplify((\"\
  7/10\"), (\"10/2\")) == (false));\n    assert(simplify((\"2/10\"), (\"50/10\"))\
  \ == (true));\n    assert(simplify((\"7/2\"), (\"4/2\")) == (true));\n    assert(simplify((\"\
  11/6\"), (\"6/1\")) == (true));\n    assert(simplify((\"2/3\"), (\"5/2\")) == (false));\n\
  \    assert(simplify((\"5/2\"), (\"3/5\")) == (false));\n    assert(simplify((\"\
  2/4\"), (\"8/4\")) == (true));\n    assert(simplify((\"2/4\"), (\"4/2\")) == (true));\n\
  \    assert(simplify((\"1/5\"), (\"5/1\")) == (true));\n    assert(simplify((\"\
  1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n"
completions: ["        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val numerator2\
    \ = numerator / gcd\n        val denominator2 = denominator / gcd\n        if\
    \ (numerator2 % denominator2 == 0) true else false", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else\
    \ false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        val gcd = gcd(xn, nx)\n        (xn / gcd) % (nx / gcd)\
    \ == 0", "        val x_split = x.split(\"/\")\n        val n_split = n.split(\"\
    /\")\n        val x_num = x_split(0).toInt\n        val x_den = x_split(1).toInt\n\
    \        val n_num = n_split(0).toInt\n        val n_den = n_split(1).toInt\n\
    \        val num = x_num * n_num\n        val den = x_den * n_den\n        val\
    \ gcd = gcd_iter(num, den)\n        val num_simplified = num / gcd\n        val\
    \ den_simplified = den / gcd\n        if (num_simplified % den_simplified == 0)\
    \ true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        xn % nx == 0", "        val xs = x.split(\"/\")\n   \
    \     val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n  \
    \      val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn == nx",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn % nx == 0", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"\
    /\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\"\
    )(1).toInt)\n        val (xn2, xd2) = (xn * nd, xd * nn)\n        val (gcd, lcm)\
    \ = (gcd(xn2, xd2), lcm(xn2, xd2))\n        (xn2 / gcd) == (xd2 / gcd)", "   \
    \     val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn % nx == 0", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"\
    /\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\"\
    )(1).toInt)\n        val (a, b) = (xn * nd, xd * nn)\n        a % b == 0", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toLong * ns(1).toLong\n        val xd = xs(1).toLong * ns(0).toLong\n\
    \        val gcd = BigInt(xn).gcd(BigInt(xd)).toLong\n        val xn2 = xn / gcd\n\
    \        val xd2 = xd / gcd\n        xn2 % xd2 == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n \
    \       val xn2 = xn / gcd\n        val nx2 = nx / gcd\n        if (xn2 == nx2)\
    \ true else false", "        val x_numerator = x.split(\"/\")(0).toInt\n     \
    \   val x_denominator = x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"\
    /\")(0).toInt\n        val n_denominator = n.split(\"/\")(1).toInt\n        val\
    \ numerator = x_numerator * n_numerator\n        val denominator = x_denominator\
    \ * n_denominator\n        val gcd = gcd(numerator, denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx\
    \ = ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n        val xn2\
    \ = xn / gcd\n        val nx2 = nx / gcd\n        if (xn2 == nx2) true else false",
  "        val x_ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n        val x_numerator\
    \ = x_(0).toInt\n        val x_denominator = x_(1).toInt\n        val n_numerator\
    \ = n_(0).toInt\n        val n_denominator = n_(1).toInt\n        val product_numerator\
    \ = x_numerator * n_numerator\n        val product_denominator = x_denominator\
    \ * n_denominator\n        val gcd = gcd(product_numerator, product_denominator)\n\
    \        val simplified_numerator = product_numerator / gcd\n        val simplified_denominator\
    \ = product_denominator / gcd\n        if (simplified_numerator % simplified_denominator\
    \ == 0) true else false", "        val x_numerator = x.split(\"/\")(0).toInt\n\
    \        val x_denominator = x.split(\"/\")(1).toInt\n        val n_numerator\
    \ = n.split(\"/\")(0).toInt\n        val n_denominator = n.split(\"/\")(1).toInt\n\
    \        val product_numerator = x_numerator * n_numerator\n        val product_denominator\
    \ = x_denominator * n_denominator\n        val gcd = BigInt(product_numerator).gcd(BigInt(product_denominator)).toInt\n\
    \        if (product_numerator % gcd == 0 && product_denominator % gcd == 0) true\
    \ else false", "        val x_ = x.split(\"/\")\n        val n_ = n.split(\"/\"\
    )\n        val x_numerator = x_(0).toInt\n        val x_denominator = x_(1).toInt\n\
    \        val n_numerator = n_(0).toInt\n        val n_denominator = n_(1).toInt\n\
    \        val x_numerator_n = x_numerator * n_denominator\n        val x_denominator_n\
    \ = x_denominator * n_numerator\n        val gcd = gcd_recursive(x_numerator_n,\
    \ x_denominator_n)\n        val x_numerator_n_simplified = x_numerator_n / gcd\n\
    \        val x_denominator_n_simplified = x_denominator_n / gcd\n        if (x_denominator_n_simplified\
    \ == 1) true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        val gcd = BigInt(xn).gcd(BigInt(nx)).toInt\n        xn\
    \ / gcd == nx / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = gcd(xn, nx)\n        xn / gcd == nx / gcd", "        val (xn,\
    \ xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n\
    \        val (numerator, denominator) = (xn * nn, xd * nd)\n        val gcd =\
    \ BigInt(numerator).gcd(denominator).toInt\n        val (numerator2, denominator2)\
    \ = (numerator / gcd, denominator / gcd)\n        numerator2 % denominator2 ==\
    \ 0", "        val (numeratorX, denominatorX) = x.split(\"/\").map(_.toInt)\n\
    \        val (numeratorN, denominatorN) = n.split(\"/\").map(_.toInt)\n      \
    \  val numerator = numeratorX * denominatorN\n        val denominator = denominatorX\
    \ * numeratorN\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n \
    \       numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else\
    \ false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val xnumerator2 = xnumerator * ndenominator\n        val xdenominator2\
    \ = xdenominator * nnumerator\n        val gcd = gcd2(xnumerator2, xdenominator2)\n\
    \        val xnumerator3 = xnumerator2 / gcd\n        val xdenominator3 = xdenominator2\
    \ / gcd\n        return xdenominator3 == 1", "        val xs = x.split(\"/\")\n\
    \        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n        val ns =\
    \ n.split(\"/\")\n        val nn = ns(0).toInt\n        val nd = ns(1).toInt\n\
    \        val g = gcd(xn * nd, xd * nn)\n        (xn * nd / g) % (xd * nn / g)\
    \ == 0", "        val x_numerator = x.split(\"/\")(0).toInt\n        val x_denominator\
    \ = x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"/\")(0).toInt\n\
    \        val n_denominator = n.split(\"/\")(1).toInt\n        val product_numerator\
    \ = x_numerator * n_numerator\n        val product_denominator = x_denominator\
    \ * n_denominator\n        val gcd = gcd_iter(product_numerator, product_denominator)\n\
    \        val simplified_numerator = product_numerator / gcd\n        val simplified_denominator\
    \ = product_denominator / gcd\n        simplified_numerator % simplified_denominator\
    \ == 0", "        val x_numerator = x.split(\"/\")(0).toInt\n        val x_denominator\
    \ = x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"/\")(0).toInt\n\
    \        val n_denominator = n.split(\"/\")(1).toInt\n        val result_numerator\
    \ = x_numerator * n_numerator\n        val result_denominator = x_denominator\
    \ * n_denominator\n        val gcd = gcd(result_numerator, result_denominator)\n\
    \        val result_numerator_simplified = result_numerator / gcd\n        val\
    \ result_denominator_simplified = result_denominator / gcd\n        if (result_numerator_simplified\
    \ % result_denominator_simplified == 0) true else false", "        val (x1, x2)\
    \ = x.split(\"/\").map(_.toInt)\n        val (n1, n2) = n.split(\"/\").map(_.toInt)\n\
    \        val (x3, n3) = (x1 * n2, x2 * n1)\n        val g = gcd(x3, n3)\n    \
    \    x3 / g == n3 / g", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        val gcd = gcd(xn, nx)\n        (xn / gcd) % (nx / gcd)\
    \ == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n \
    \       val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val xn = x.split(\"/\")\n        val nn\
    \ = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        val simplifiedNumerator = numerator / gcd\n        val\
    \ simplifiedDenominator = denominator / gcd\n        simplifiedNumerator % simplifiedDenominator\
    \ == 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn,\
    \ nd) = n.split(\"/\").map(_.toInt)\n        val (xn2, xd2) = (xn * nd, xd * nn)\n\
    \        val (gcd, lcm) = (gcd(xn2, xd2), lcm(xn2, xd2))\n        (xn2 / gcd)\
    \ == (xd2 / gcd)", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        xn % nx == 0", "        val x_ = x.split(\"/\")\n   \
    \     val n_ = n.split(\"/\")\n        val x_numerator = BigInt(x_(0))\n     \
    \   val x_denominator = BigInt(x_(1))\n        val n_numerator = BigInt(n_(0))\n\
    \        val n_denominator = BigInt(n_(1))\n        val numerator = x_numerator\
    \ * n_numerator\n        val denominator = x_denominator * n_denominator\n   \
    \     val gcd = numerator.gcd(denominator)\n        val simplified_numerator =\
    \ numerator / gcd\n        val simplified_denominator = denominator / gcd\n  \
    \      if (simplified_denominator == 1) true else false", "        val (xn, xd)\
    \ = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n\
    \        val (numerator, denominator) = (xn * nn, xd * nd)\n        val gcd =\
    \ BigInt(numerator).gcd(denominator).toInt\n        (numerator / gcd) % (denominator\
    \ / gcd) == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        val gcd = gcd(xn, nx)\n        val xn2 = xn / gcd\n \
    \       val nx2 = nx / gcd\n        xn2 == nx2", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        numerator / gcd == denominator /\
    \ gcd", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n\
    \        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n \
    \       val (xn1, xd1) = (xn * nd, xd * nn)\n        val gcd = xn1.gcd(xd1)\n\
    \        (xn1 / gcd) % (xd1 / gcd) == 0", "        val xs = x.split(\"/\")\n \
    \       val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ x_numerator = x.split(\"/\")(0).toInt\n        val x_denominator = x.split(\"\
    /\")(1).toInt\n        val n_numerator = n.split(\"/\")(0).toInt\n        val\
    \ n_denominator = n.split(\"/\")(1).toInt\n        val result_numerator = x_numerator\
    \ * n_numerator\n        val result_denominator = x_denominator * n_denominator\n\
    \        val gcd = BigInt(result_numerator).gcd(result_denominator)\n        val\
    \ result_numerator_simplified = result_numerator / gcd.toInt\n        val result_denominator_simplified\
    \ = result_denominator / gcd.toInt\n        if (result_numerator_simplified %\
    \ result_denominator_simplified == 0) true else false", "        val x_ = x.split(\"\
    /\")\n        val n_ = n.split(\"/\")\n        val x_num = x_(0).toInt\n     \
    \   val x_den = x_(1).toInt\n        val n_num = n_(0).toInt\n        val n_den\
    \ = n_(1).toInt\n        val num = x_num * n_num\n        val den = x_den * n_den\n\
    \        val gcd = BigInt(num).gcd(BigInt(den)).toInt\n        val num_ = num\
    \ / gcd\n        val den_ = den / gcd\n        num_ % den_ == 0", "        val\
    \ (xNumerator, xDenominator) = x.split(\"/\").map(_.toInt)\n        val (nNumerator,\
    \ nDenominator) = n.split(\"/\").map(_.toInt)\n        val numerator = xNumerator\
    \ * nDenominator\n        val denominator = xDenominator * nNumerator\n      \
    \  val gcd = gcd(numerator, denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        simplifiedNumerator\
    \ % simplifiedDenominator == 0", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ xd = xs(1).toInt * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n\
    \        val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        xn2 % xd2 ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        xn % nx == 0", "        val (xn, xd) = (x.split(\"/\"\
    )(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt,\
    \ n.split(\"/\")(1).toInt)\n        val (xn2, xd2) = (xn * nd, xd * nn)\n    \
    \    val (xn3, xd3) = (xn2 / gcd(xn2, xd2), xd2 / gcd(xn2, xd2))\n        xn3\
    \ % xd3 == 0", "        val xArray = x.split(\"/\")\n        val nArray = n.split(\"\
    /\")\n        val xNum = xArray(0).toInt\n        val xDen = xArray(1).toInt\n\
    \        val nNum = nArray(0).toInt\n        val nDen = nArray(1).toInt\n    \
    \    val xNum2 = xNum * nDen\n        val xDen2 = xDen * nNum\n        val gcd\
    \ = gcd(xNum2, xDen2)\n        val xNum3 = xNum2 / gcd\n        val xDen3 = xDen2\
    \ / gcd\n        xNum3 == xDen3", "        val (xn, xd) = parse(x)\n        val\
    \ (nn, nd) = parse(n)\n        val (num, den) = (xn * nn, xd * nd)\n        val\
    \ gcd = BigInt(num).gcd(BigInt(den))\n        val (numerator, denominator) = (num\
    \ / gcd, den / gcd)\n        numerator % denominator == 0", "        val x_arr\
    \ = x.split(\"/\")\n        val n_arr = n.split(\"/\")\n        val x_num = x_arr(0).toInt\n\
    \        val x_den = x_arr(1).toInt\n        val n_num = n_arr(0).toInt\n    \
    \    val n_den = n_arr(1).toInt\n        val num = x_num * n_num\n        val\
    \ den = x_den * n_den\n        val gcd = gcd_iter(num, den)\n        val num_simplified\
    \ = num / gcd\n        val den_simplified = den / gcd\n        if (num_simplified\
    \ % den_simplified == 0) true else false", "        val xn = x.split(\"/\")\n\
    \        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n     \
    \   val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n   \
    \     val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val result = numerator / gcd\n        val result2 = denominator / gcd\n\
    \        if (result == result2) true else false", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val numerator2\
    \ = numerator / gcd.toInt\n        val denominator2 = denominator / gcd.toInt\n\
    \        if (numerator2 % denominator2 == 0) true else false", "        val x_numerator\
    \ = x.split(\"/\")(0).toInt\n        val x_denominator = x.split(\"/\")(1).toInt\n\
    \        val n_numerator = n.split(\"/\")(0).toInt\n        val n_denominator\
    \ = n.split(\"/\")(1).toInt\n        val numerator = x_numerator * n_numerator\n\
    \        val denominator = x_denominator * n_denominator\n        val gcd = gcd_iter(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val (xn,\
    \ xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n\
    \        val (a, b) = (xn * nd, xd * nn)\n        val g = gcd(a, b)\n        (a\
    \ / g) % (b / g) == 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n\
    \        val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (gcd, lcm) =\
    \ (gcd(xd, nd), lcm(xd, nd))\n        val (xn2, nn2) = (xn * (lcm / xd), nn *\
    \ (lcm / nd))\n        val (xn3, nn3) = (xn2 * nn2, lcm)\n        val (gcd2, lcm2)\
    \ = (gcd(xn3, nn3), lcm(xn3, nn3))\n        val (xn4, nn4) = (xn3 / gcd2, nn3\
    \ / gcd2)\n        xn4 == nn4", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xSplit = x.split(\"/\")\n        val nSplit = n.split(\"/\")\n        val xNum\
    \ = xSplit(0).toInt\n        val xDen = xSplit(1).toInt\n        val nNum = nSplit(0).toInt\n\
    \        val nDen = nSplit(1).toInt\n        val xNum2 = xNum * nDen\n       \
    \ val xDen2 = xDen * nNum\n        val gcd = gcd(xNum2, xDen2)\n        val xNum3\
    \ = xNum2 / gcd\n        val xDen3 = xDen2 / gcd\n        if (xNum3 % xDen3 ==\
    \ 0) true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        val gcd = gcd(xn, nx)\n        val xn2 = xn / gcd\n \
    \       val nx2 = nx / gcd\n        xn2 == nx2", "        val x_n = x.split(\"\
    /\")\n        val n_n = n.split(\"/\")\n        val x_num = BigInt(x_n(0))\n \
    \       val x_den = BigInt(x_n(1))\n        val n_num = BigInt(n_n(0))\n     \
    \   val n_den = BigInt(n_n(1))\n        val num = x_num * n_num\n        val den\
    \ = x_den * n_den\n        val gcd = num.gcd(den)\n        val num_s = num / gcd\n\
    \        val den_s = den / gcd\n        if (num_s % den_s == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      if (xn % nx == 0) true else false", "        val xn = x.split(\"/\")\n\
    \        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n     \
    \   val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n   \
    \     val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        numerator / gcd.toInt == denominator / gcd.toInt", "        val xs =\
    \ x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val x_numerator = x.split(\"/\")(0).toInt\n        val x_denominator\
    \ = x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"/\")(0).toInt\n\
    \        val n_denominator = n.split(\"/\")(1).toInt\n        val result_numerator\
    \ = x_numerator * n_numerator\n        val result_denominator = x_denominator\
    \ * n_denominator\n        val gcd = BigInt(result_numerator).gcd(result_denominator)\n\
    \        val result_numerator_reduced = result_numerator / gcd.toInt\n       \
    \ val result_denominator_reduced = result_denominator / gcd.toInt\n        if\
    \ (result_numerator_reduced == result_denominator_reduced) true else false", " \
    \       val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"\
    /\").map(_.toInt)\n        val (numerator, denominator) = (xn * nn, xd * nd)\n\
    \        val gcd = BigInt(numerator).gcd(denominator).toInt\n        val (numerator2,\
    \ denominator2) = (numerator / gcd, denominator / gcd)\n        denominator2 ==\
    \ 1", "        val x_n = x.split(\"/\")\n        val n_n = n.split(\"/\")\n  \
    \      val x_num = x_n(0).toInt\n        val x_den = x_n(1).toInt\n        val\
    \ n_num = n_n(0).toInt\n        val n_den = n_n(1).toInt\n        val num = x_num\
    \ * n_num\n        val den = x_den * n_den\n        val gcd = gcd_iter(num, den)\n\
    \        val num_s = num / gcd\n        val den_s = den / gcd\n        if (num_s\
    \ % den_s == 0) true else false", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn % nx == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        val gcd = gcd(xn, nx)\n        val xn2 = xn / gcd\n \
    \       val nx2 = nx / gcd\n        if (xn2 == nx2) true else false", "      \
    \  val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn =\
    \ xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n    \
    \    val gcd = BigInt(xn).gcd(BigInt(nx)).toInt\n        xn / gcd == nx / gcd",
  "        val x1 = x.split(\"/\")\n        val n1 = n.split(\"/\")\n        val x2\
    \ = x1(0).toInt * n1(1).toInt\n        val n2 = x1(1).toInt * n1(0).toInt\n  \
    \      if (x2 % n2 == 0) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else\
    \ false", "        val x_n = x.split(\"/\")\n        val x_numerator = x_n(0).toInt\n\
    \        val x_denominator = x_n(1).toInt\n        val n_n = n.split(\"/\")\n\
    \        val n_numerator = n_n(0).toInt\n        val n_denominator = n_n(1).toInt\n\
    \        val numerator = x_numerator * n_numerator\n        val denominator =\
    \ x_denominator * n_denominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val simplified_numerator = numerator / gcd.toInt\n        val simplified_denominator\
    \ = denominator / gcd.toInt\n        if (simplified_denominator == 1) true else\
    \ false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = gcd(xn, nx)\n        val xn2 = xn / gcd\n        val nx2 =\
    \ nx / gcd\n        if (xn2 == nx2) true else false", "        val (xn, xd) =\
    \ (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn, nd) = (n.split(\"\
    /\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (xn2, xd2) = (xn * nd, xd\
    \ * nn)\n        val gcd = BigInt(xn2).gcd(xd2).toInt\n        val (xn3, xd3)\
    \ = (xn2 / gcd, xd2 / gcd)\n        xd3 == 1", "        val xn = x.split(\"/\"\
    )\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n   \
    \     val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n \
    \       val ndenominator = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n\
    \        val denominator = xdenominator * ndenominator\n        val gcd = gcd(numerator,\
    \ denominator)\n        numerator / gcd == denominator / gcd", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        val gcd =\
    \ gcd(xn, nx)\n        val xn2 = xn / gcd\n        val nx2 = nx / gcd\n      \
    \  xn2 == nx2", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val numerator2 = numerator / gcd.toInt\n        val denominator2 = denominator\
    \ / gcd.toInt\n        if (numerator2 % denominator2 == 0) true else false", " \
    \       val x_numerator = x.split(\"/\")(0).toInt\n        val x_denominator =\
    \ x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"/\")(0).toInt\n\
    \        val n_denominator = n.split(\"/\")(1).toInt\n        val result_numerator\
    \ = x_numerator * n_numerator\n        val result_denominator = x_denominator\
    \ * n_denominator\n        val gcd = gcd(result_numerator, result_denominator)\n\
    \        result_numerator / gcd == result_denominator / gcd", "        val x_n\
    \ = x.split(\"/\")\n        val n_n = n.split(\"/\")\n        val x_num = x_n(0).toInt\n\
    \        val x_den = x_n(1).toInt\n        val n_num = n_n(0).toInt\n        val\
    \ n_den = n_n(1).toInt\n        val num = x_num * n_num\n        val den = x_den\
    \ * n_den\n        val gcd = gcd(num, den)\n        val num_s = num / gcd\n  \
    \      val den_s = den / gcd\n        if (num_s % den_s == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn == nx", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        if (xn % nx == 0) true else false", "        val xs =\
    \ x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn == nx",
  "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n   \
    \     val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n    \
    \    val (numerator, denominator) = (xn * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        val (numerator2, denominator2) = (numerator / gcd, denominator / gcd)\n\
    \        if (numerator2 % denominator2 == 0) true else false", "        val x_split\
    \ = x.split(\"/\")\n        val n_split = n.split(\"/\")\n        val x_num =\
    \ x_split(0).toInt\n        val x_den = x_split(1).toInt\n        val n_num =\
    \ n_split(0).toInt\n        val n_den = n_split(1).toInt\n        val num = x_num\
    \ * n_num\n        val den = x_den * n_den\n        if (num % den == 0) true else\
    \ false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = BigInt(xn).gcd(BigInt(nx)).toInt\n        xn / gcd == nx /\
    \ gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n  \
    \      val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val x_num = x.split(\"/\")(0).toInt\n       \
    \ val x_den = x.split(\"/\")(1).toInt\n        val n_num = n.split(\"/\")(0).toInt\n\
    \        val n_den = n.split(\"/\")(1).toInt\n        val num = x_num * n_num\n\
    \        val den = x_den * n_den\n        val gcd = BigInt(num).gcd(BigInt(den)).toInt\n\
    \        val num_simplified = num / gcd\n        val den_simplified = den / gcd\n\
    \        if (num_simplified % den_simplified == 0) true else false", "       \
    \ val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val\
    \ (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (numerator,\
    \ denominator) = (xn * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        (numerator / gcd) % (denominator / gcd) == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else\
    \ false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        val gcd = gcd(xn, nx)\n        xn / gcd == nx / gcd", "        val x_split\
    \ = x.split(\"/\")\n        val n_split = n.split(\"/\")\n        val x_num =\
    \ x_split(0).toInt\n        val x_den = x_split(1).toInt\n        val n_num =\
    \ n_split(0).toInt\n        val n_den = n_split(1).toInt\n        val num = x_num\
    \ * n_num\n        val den = x_den * n_den\n        val gcd = gcd(num, den)\n\
    \        val num_simplified = num / gcd\n        val den_simplified = den / gcd\n\
    \        if (num_simplified % den_simplified == 0) true else false", "       \
    \ val x_split = x.split(\"/\")\n        val n_split = n.split(\"/\")\n       \
    \ val x_numerator = x_split(0).toInt\n        val x_denominator = x_split(1).toInt\n\
    \        val n_numerator = n_split(0).toInt\n        val n_denominator = n_split(1).toInt\n\
    \        val numerator = x_numerator * n_numerator\n        val denominator =\
    \ x_denominator * n_denominator\n        val gcd = gcd(numerator, denominator)\n\
    \        val simplified_numerator = numerator / gcd\n        val simplified_denominator\
    \ = denominator / gcd\n        if (simplified_denominator == 1) true else false",
  "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"\
    /\").map(_.toInt)\n        val (num, den) = (xn * nn, xd * nd)\n        val gcd\
    \ = BigInt(num).gcd(den).toInt\n        (num / gcd) % (den / gcd) == 0", "   \
    \     val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn % nx == 0", "        val x_fraction = x.split(\"/\")\n        val n_fraction\
    \ = n.split(\"/\")\n        val x_numerator = x_fraction(0).toInt\n        val\
    \ x_denominator = x_fraction(1).toInt\n        val n_numerator = n_fraction(0).toInt\n\
    \        val n_denominator = n_fraction(1).toInt\n        val product_numerator\
    \ = x_numerator * n_numerator\n        val product_denominator = x_denominator\
    \ * n_denominator\n        val gcd = gcd_recursive(product_numerator, product_denominator)\n\
    \        if (gcd == 1) return true\n        else return false", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n        val gcd =\
    \ BigInt(xn).gcd(xd).toInt\n        val xn2 = xn / gcd\n        val xd2 = xd /\
    \ gcd\n        xn2 % xd2 == 0", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ xd = xs(1).toInt * ns(0).toInt\n        val gcd = gcd(xn, xd)\n        val xn2\
    \ = xn / gcd\n        val xd2 = xd / gcd\n        xn2 == xd2", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd)\
    \ = n.split(\"/\").map(_.toInt)\n        val (gcd, lcm) = (gcd(xd, nd), lcm(xd,\
    \ nd))\n        val (xnn, nnn) = (xn * (lcm / xd), nn * (lcm / nd))\n        val\
    \ (xnf, nnf) = (xnn / gcd, nnn / gcd)\n        xnf == nnf", "        val x_arr\
    \ = x.split(\"/\")\n        val n_arr = n.split(\"/\")\n        val x_num = x_arr(0).toInt\n\
    \        val x_den = x_arr(1).toInt\n        val n_num = n_arr(0).toInt\n    \
    \    val n_den = n_arr(1).toInt\n        val num = x_num * n_num\n        val\
    \ den = x_den * n_den\n        if (num % den == 0) true else false", "       \
    \ val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val\
    \ (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (a,\
    \ b) = (xn * nd, xd * nn)\n        val g = gcd(a, b)\n        a / g == b / g",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      xn % nx == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        if (xn % nx == 0) true else false", "        val xs =\
    \ x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd == xd / gcd", " \
    \       val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n  \
    \      val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n   \
    \     val (xn2, xd2) = (xn * nd, xd * nn)\n        val gcd = BigInt(xn2).gcd(BigInt(xd2)).toInt\n\
    \        val (xn3, xd3) = (xn2 / gcd, xd2 / gcd)\n        xd3 == 1", "       \
    \ val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        numerator / gcd.toInt\
    \ == denominator / gcd.toInt", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx\
    \ = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else false", " \
    \       val x_numerator = x.split(\"/\")(0).toInt\n        val x_denominator =\
    \ x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"/\")(0).toInt\n\
    \        val n_denominator = n.split(\"/\")(1).toInt\n        val result_numerator\
    \ = x_numerator * n_numerator\n        val result_denominator = x_denominator\
    \ * n_denominator\n        val gcd = gcd(result_numerator, result_denominator)\n\
    \        result_numerator / gcd == result_denominator / gcd", "        val (xn,\
    \ xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n\
    \        val (xnn, xdd) = (xn * nd, xd * nn)\n        val (xgcd, ngcd) = (gcd(xnn,\
    \ xdd), gcd(xdd, xnn))\n        val (xnnn, xddd) = (xnn / xgcd, xdd / xgcd)\n\
    \        val (nnn, ndd) = (xddd / xdd, xddd / xnn)\n        (xnnn == nnn && xddd\
    \ == ndd)", "        val x1 = x.split(\"/\")\n        val n1 = n.split(\"/\")\n\
    \        val x2 = x1(0).toInt\n        val x3 = x1(1).toInt\n        val n2 =\
    \ n1(0).toInt\n        val n3 = n1(1).toInt\n        val x4 = x2 * n3\n      \
    \  val n4 = n2 * x3\n        if (x4 % n4 == 0) true else false", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt * ns(0).toInt\n\
    \        xn % xd == 0", "        val x_numerator = x.split(\"/\")(0).toInt\n \
    \       val x_denominator = x.split(\"/\")(1).toInt\n        val n_numerator =\
    \ n.split(\"/\")(0).toInt\n        val n_denominator = n.split(\"/\")(1).toInt\n\
    \        val numerator = x_numerator * n_numerator\n        val denominator =\
    \ x_denominator * n_denominator\n        val gcd = gcd_iter(numerator, denominator)\n\
    \        numerator / gcd == denominator / gcd", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        if (xn %\
    \ nx == 0) true else false", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx\
    \ = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val x_arr = x.split(\"\
    /\")\n        val n_arr = n.split(\"/\")\n        val x_num = x_arr(0).toInt\n\
    \        val x_den = x_arr(1).toInt\n        val n_num = n_arr(0).toInt\n    \
    \    val n_den = n_arr(1).toInt\n        val num = x_num * n_num\n        val\
    \ den = x_den * n_den\n        val gcd = gcd_iter(num, den)\n        val num_simplified\
    \ = num / gcd\n        val den_simplified = den / gcd\n        if (num_simplified\
    \ % den_simplified == 0) true else false", "        val (xn, xd) = x.split(\"\
    /\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n      \
    \  val (numerator, denominator) = (xn * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        val (numerator2, denominator2) = (numerator / gcd, denominator / gcd)\n\
    \        denominator2 == 1", "        val xn = x.split(\"/\")\n        val nn\
    \ = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n        val xdenominator\
    \ = xn(1).toInt\n        val nnumerator = nn(0).toInt\n        val ndenominator\
    \ = nn(1).toInt\n        val numerator = xnumerator * nnumerator\n        val\
    \ denominator = xdenominator * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n\
    \        val result = numerator / gcd.toInt\n        val result2 = denominator\
    \ / gcd.toInt\n        if (result == result2) true else false", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        if (xn ==\
    \ nx) true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val xd = xs(1).toInt\
    \ * ns(0).toInt\n        val gcd = BigInt(xn).gcd(xd).toInt\n        xn / gcd\
    \ == xd / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val product = xnumerator * nnumerator\n        val productdenominator\
    \ = xdenominator * ndenominator\n        val gcd = gcd(product, productdenominator)\n\
    \        if (productdenominator / gcd == 1) true else false", "        val x_n\
    \ = x.split(\"/\")\n        val x_numerator = x_n(0).toInt\n        val x_denominator\
    \ = x_n(1).toInt\n        val n_n = n.split(\"/\")\n        val n_numerator =\
    \ n_n(0).toInt\n        val n_denominator = n_n(1).toInt\n        val numerator\
    \ = x_numerator * n_numerator\n        val denominator = x_denominator * n_denominator\n\
    \        val gcd = gcd_iter(numerator, denominator)\n        numerator / gcd ==\
    \ denominator / gcd", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        val numerator2\
    \ = numerator / gcd\n        val denominator2 = denominator / gcd\n        if\
    \ (numerator2 % denominator2 == 0) true else false", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n        val (nn,\
    \ nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n        val (xn2,\
    \ xd2) = (xn * nd, xd * nn)\n        val (xn3, xd3) = (xn2 / gcd(xn2, xd2), xd2\
    \ / gcd(xn2, xd2))\n        xn3 % xd3 == 0", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        if (xn %\
    \ nx == 0) true else false", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx\
    \ = ns(0).toInt * xs(1).toInt\n        val gcd = BigInt(xn).gcd(BigInt(nx)).toInt\n\
    \        xn / gcd == nx / gcd", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ nx = ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n        val xn2\
    \ = xn / gcd\n        val nx2 = nx / gcd\n        xn2 == nx2", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        val gcd =\
    \ BigInt(xn).gcd(BigInt(nx)).toInt\n        val xn2 = xn / gcd\n        val nx2\
    \ = nx / gcd\n        xn2 == nx2", "        val xs = x.split(\"/\")\n        val\
    \ ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val\
    \ nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val simplifiedNumerator = numerator\
    \ / gcd\n        val simplifiedDenominator = denominator / gcd\n        if (simplifiedNumerator\
    \ % simplifiedDenominator == 0) true else false", "        val x_n = x.split(\"\
    /\")\n        val n_n = n.split(\"/\")\n        val x_n_n = x_n(0).toInt * n_n(1).toInt\n\
    \        val x_n_d = x_n(1).toInt * n_n(0).toInt\n        val g = gcd(x_n_n, x_n_d)\n\
    \        val x_n_n_s = x_n_n / g\n        val x_n_d_s = x_n_d / g\n        if\
    \ (x_n_n_s % x_n_d_s == 0) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        if (xn %\
    \ nx == 0) true else false", "        val x_num = x.split(\"/\")(0).toInt\n  \
    \      val x_den = x.split(\"/\")(1).toInt\n        val n_num = n.split(\"/\"\
    )(0).toInt\n        val n_den = n.split(\"/\")(1).toInt\n        val num = x_num\
    \ * n_num\n        val den = x_den * n_den\n        val gcd = BigInt(num).gcd(BigInt(den)).toInt\n\
    \        val num_simplified = num / gcd\n        val den_simplified = den / gcd\n\
    \        if (num_simplified == den_simplified) true else false", "        val\
    \ (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\"\
    ).map(_.toInt)\n        val (gcd, lcm) = (gcd(xd, nd), lcm(xd, nd))\n        val\
    \ (xn2, nn2) = (xn * (lcm / xd), nn * (lcm / nd))\n        val (gcd2, lcm2) =\
    \ (gcd(xn2, nn2), lcm(xn2, nn2))\n        val (xn3, nn3) = (xn2 / gcd2, nn2 /\
    \ gcd2)\n        val (gcd3, lcm3) = (gcd(xn3, nn3), lcm(xn3, nn3))\n        val\
    \ (xn4, nn4) = (xn3 / gcd3, nn3 / gcd3)\n        val (gcd4, lcm4) = (gcd(xn4,\
    \ nn4), lcm(xn4, nn4))\n        val (xn5, nn5) = (xn4 / gcd4, nn4 / gcd4)\n  \
    \      val (gcd5, lcm5) = (gcd(xn5, nn5), lcm(xn5, nn5))\n        val (xn6, nn6)\
    \ = (xn5 / gcd5, nn5 / gcd5)\n        val (gcd6, lcm6) = (gcd(xn6, nn6), lcm(xn6,\
    \ nn6))\n        val (xn7, nn7) = (xn6 / gcd6, nn6 / gcd6)\n        val (gcd7,\
    \ lcm7) = (gcd(xn7, nn7), lcm(xn7, nn7))\n        val (xn8, nn8) = (xn7 / gcd7,\
    \ nn7 / gcd7)\n        val (gcd8, l", "        val xs = x.split(\"/\")\n     \
    \   val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n    \
    \    val nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toLong * ns(1).toLong\n        val xd = xs(1).toLong * ns(0).toLong\n\
    \        val gcd = gcd(xn, xd)\n        val xn2 = xn / gcd\n        val xd2 =\
    \ xd / gcd\n        val xn3 = xn2 / xd2\n        val xd3 = xd2 / xd2\n       \
    \ if (xn3 * xd3 == xn2) true else false", "        val xs = x.split(\"/\")\n \
    \       val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n \
    \       xn / gcd == nx / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx\
    \ = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else false", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val (numerator, denominator) = x.split(\"/\"\
    ) match {\n            case Array(numerator, denominator) => (numerator.toInt,\
    \ denominator.toInt)\n        }\n        val (numerator2, denominator2) = n.split(\"\
    /\") match {\n            case Array(numerator, denominator) => (numerator.toInt,\
    \ denominator.toInt)\n        }\n        val result = numerator * denominator2\
    \ * denominator * numerator2\n        val gcd = gcd(result, denominator * denominator2)\n\
    \        result / gcd % (denominator * denominator2 / gcd) == 0", "        val\
    \ (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\"\
    ).map(_.toInt)\n        val (numerator, denominator) = (xn * nn, xd * nd)\n  \
    \      val gcd = BigInt(numerator).gcd(denominator).toInt\n        val (numerator2,\
    \ denominator2) = (numerator / gcd, denominator / gcd)\n        denominator2 %\
    \ numerator2 == 0", "        val x_numerator = x.split(\"/\")(0).toInt\n     \
    \   val x_denominator = x.split(\"/\")(1).toInt\n        val n_numerator = n.split(\"\
    /\")(0).toInt\n        val n_denominator = n.split(\"/\")(1).toInt\n        val\
    \ result_numerator = x_numerator * n_numerator\n        val result_denominator\
    \ = x_denominator * n_denominator\n        val gcd = gcd(result_numerator, result_denominator)\n\
    \        val simplified_numerator = result_numerator / gcd\n        val simplified_denominator\
    \ = result_denominator / gcd\n        if (simplified_numerator % simplified_denominator\
    \ == 0) true else false", "        val x_num = x.split(\"/\")(0).toInt\n     \
    \   val x_den = x.split(\"/\")(1).toInt\n        val n_num = n.split(\"/\")(0).toInt\n\
    \        val n_den = n.split(\"/\")(1).toInt\n        val num = x_num * n_num\n\
    \        val den = x_den * n_den\n        val gcd = gcd_iter(num, den)\n     \
    \   if (gcd == 1) return false\n        else {\n            val num_new = num\
    \ / gcd\n            val den_new = den / gcd\n            if (num_new % den_new\
    \ == 0) return true\n            else return false\n        }", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd)\
    \ = n.split(\"/\").map(_.toInt)\n        val (num, den) = (xn * nn, xd * nd)\n\
    \        val gcd = BigInt(num).gcd(den).toInt\n        val (num2, den2) = (num\
    \ / gcd, den / gcd)\n        num2 % den2 == 0", "        val xs = x.split(\"/\"\
    )\n        val ns = n.split(\"/\")\n        val xn = BigInt(xs(0)) * BigInt(ns(1))\n\
    \        val xd = BigInt(xs(1)) * BigInt(ns(0))\n        val gcd = xn.gcd(xd)\n\
    \        val xn2 = xn / gcd\n        val xd2 = xd / gcd\n        xn2 % xd2 ==\
    \ 0", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n\
    \        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n \
    \       val (xn2, xd2) = (xn * nd, xd * nn)\n        val (xn3, xd3) = (xn2 / gcd(xn2,\
    \ xd2), xd2 / gcd(xn2, xd2))\n        xn3 % xd3 == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        numerator / gcd.toInt\
    \ == denominator / gcd.toInt", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx\
    \ = ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n        val xn1\
    \ = xn / gcd\n        val nx1 = nx / gcd\n        if (xn1 == nx1) true else false",
  "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"\
    /\").map(_.toInt)\n        val (a, b) = (xn * nd, xd * nn)\n        val g = gcd(a,\
    \ b)\n        (a / g) % (b / g) == 0", "        val xs = x.split(\"/\")\n    \
    \    val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n   \
    \     val nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else\
    \ false", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn,\
    \ nd) = n.split(\"/\").map(_.toInt)\n        val (gcd, lcm) = (gcd(xd, nd), lcm(xd,\
    \ nd))\n        (xn * nn) % (xd * nd / gcd) == 0", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ x_ = x.split(\"/\")\n        val n_ = n.split(\"/\")\n        val x_numerator\
    \ = x_(0).toInt\n        val x_denominator = x_(1).toInt\n        val n_numerator\
    \ = n_(0).toInt\n        val n_denominator = n_(1).toInt\n        val numerator\
    \ = x_numerator * n_numerator\n        val denominator = x_denominator * n_denominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val numerator_\
    \ = numerator / gcd.toInt\n        val denominator_ = denominator / gcd.toInt\n\
    \        if (denominator_ == 1) true else false", "        val (x1, x2) = x.split(\"\
    /\").map(_.toInt)\n        val (n1, n2) = n.split(\"/\").map(_.toInt)\n      \
    \  val (a, b) = (x1 * n2, x2 * n1)\n        val g = gcd(a, b)\n        (a / g)\
    \ % (b / g) == 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        xn % nx == 0", "        val (xn, xd) = x.split(\"/\"\
    ).map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val\
    \ (g, xn2, nn2) = gcd(xn, nn)\n        val (g2, xd2, nd2) = gcd(xd, nd)\n    \
    \    val (xn3, xd3) = (xn2 / g, xd2 / g2)\n        val (nn3, nd3) = (nn2 / g,\
    \ nd2 / g2)\n        val (xn4, xd4) = (xn3 * nd3, xd3 * nn3)\n        val (g3,\
    \ xn5, xd5) = gcd(xn4, xd4)\n        val (xn6, xd6) = (xn5 / g3, xd5 / g3)\n \
    \       xd6 == 1", "        val x_split = x.split(\"/\")\n        val n_split\
    \ = n.split(\"/\")\n        val x_num = x_split(0).toInt\n        val x_den =\
    \ x_split(1).toInt\n        val n_num = n_split(0).toInt\n        val n_den =\
    \ n_split(1).toInt\n        val x_num_n = x_num * n_den\n        val x_den_n =\
    \ x_den * n_num\n        val gcd = gcd_iter(x_num_n, x_den_n)\n        val x_num_n_simplified\
    \ = x_num_n / gcd\n        val x_den_n_simplified = x_den_n / gcd\n        if\
    \ (x_num_n_simplified % x_den_n_simplified == 0) true else false", "        val\
    \ xn = x.split(\"/\").map(_.toInt)\n        val nn = n.split(\"/\").map(_.toInt)\n\
    \        val xn2 = xn(0) * nn(1)\n        val nn2 = nn(0) * xn(1)\n        val\
    \ gcd = BigInt(xn2).gcd(BigInt(nn2)).toInt\n        xn2 / gcd == nn2 / gcd", " \
    \       val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val\
    \ xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        if (xn % nx == 0) true else false", "        val xs = x.split(\"/\")\n\
    \        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else\
    \ false", "        val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n\
    \        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = BigInt(numerator).gcd(denominator)\n     \
    \   val nnumerator2 = numerator / gcd.toInt\n        val ndenominator2 = denominator\
    \ / gcd.toInt\n        if (nnumerator2 % ndenominator2 == 0) true else false",
  "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn\
    \ = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n  \
    \      val gcd = gcd(xn, nx)\n        xn / gcd == nx / gcd", "        val xn =\
    \ x.split(\"/\").map(_.toInt)\n        val nn = n.split(\"/\").map(_.toInt)\n\
    \        val num = xn(0) * nn(1) * nn(0)\n        val den = xn(1) * nn(1)\n  \
    \      val gcd = BigInt(num).gcd(BigInt(den)).toInt\n        num / gcd == den\
    \ / gcd", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n\
    \        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val xn = x.split(\"/\")\n        val nn = n.split(\"\
    /\")\n        val xnumerator = xn(0).toInt\n        val xdenominator = xn(1).toInt\n\
    \        val nnumerator = nn(0).toInt\n        val ndenominator = nn(1).toInt\n\
    \        val numerator = xnumerator * nnumerator\n        val denominator = xdenominator\
    \ * ndenominator\n        val gcd = gcd(numerator, denominator)\n        numerator\
    \ / gcd == denominator / gcd", "        val xs = x.split(\"/\")\n        val ns\
    \ = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx\
    \ = ns(0).toInt * xs(1).toInt\n        if (xn % nx == 0) true else false", " \
    \       val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"/\")(1).toInt)\n  \
    \      val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\")(1).toInt)\n   \
    \     val (xn2, xd2) = (xn * nd, xd * nn)\n        val gcd = BigInt(xn2).gcd(xd2).toInt\n\
    \        val (xn3, xd3) = (xn2 / gcd, xd2 / gcd)\n        xd3 == 1", "       \
    \ val xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val xnumerator2\
    \ = xnumerator * ndenominator\n        val xdenominator2 = xdenominator * nnumerator\n\
    \        val xnumerator3 = xnumerator2 * nnumerator\n        val xdenominator3\
    \ = xdenominator2 * ndenominator\n        val gcd = gcd(xnumerator3, xdenominator3)\n\
    \        val xnumerator4 = xnumerator3 / gcd\n        val xdenominator4 = xdenominator3\
    \ / gcd\n        if (xdenominator4 == 1) true else false", "        val (xn, xd)\
    \ = x.split(\"/\").map(_.toInt)\n        val (nn, nd) = n.split(\"/\").map(_.toInt)\n\
    \        val (gcd, lcm) = (xn * nn, xd * nd)\n        gcd % lcm == 0", "     \
    \   val xs = x.split(\"/\")\n        val xn = xs(0).toInt\n        val xd = xs(1).toInt\n\
    \        val ns = n.split(\"/\")\n        val nn = ns(0).toInt\n        val nd\
    \ = ns(1).toInt\n        val rn = xn * nn\n        val rd = xd * nd\n        val\
    \ gcd = gcd(rn, rd)\n        val rn2 = rn / gcd\n        val rd2 = rd / gcd\n\
    \        rd2 == 1", "        val x_arr = x.split(\"/\")\n        val n_arr = n.split(\"\
    /\")\n        val x_num = x_arr(0).toInt\n        val x_den = x_arr(1).toInt\n\
    \        val n_num = n_arr(0).toInt\n        val n_den = n_arr(1).toInt\n    \
    \    val x_num_n = x_num * n_den\n        val x_den_n = x_den * n_num\n      \
    \  val gcd = gcd_rec(x_num_n, x_den_n)\n        val x_num_n_sim = x_num_n / gcd\n\
    \        val x_den_n_sim = x_den_n / gcd\n        if (x_num_n_sim % x_den_n_sim\
    \ == 0) true else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"\
    /\")\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt\
    \ * xs(1).toInt\n        val gcd = gcd(xn, nx)\n        xn / gcd == nx / gcd",
  "        val xNumerator = x.split(\"/\")(0).toInt\n        val xDenominator = x.split(\"\
    /\")(1).toInt\n        val nNumerator = n.split(\"/\")(0).toInt\n        val nDenominator\
    \ = n.split(\"/\")(1).toInt\n        val xNumeratorN = xNumerator * nDenominator\n\
    \        val xDenominatorN = xDenominator * nNumerator\n        val gcd = BigInt(xNumeratorN).gcd(xDenominatorN)\n\
    \        val xNumeratorNReduced = xNumeratorN / gcd.toInt\n        val xDenominatorNReduced\
    \ = xDenominatorN / gcd.toInt\n        xNumeratorNReduced % xDenominatorNReduced\
    \ == 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n        val (nn,\
    \ nd) = n.split(\"/\").map(_.toInt)\n        val (numerator, denominator) = (xn\
    \ * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        val (numerator2, denominator2) = (numerator / gcd, denominator / gcd)\n\
    \        denominator2 % numerator2 == 0", "        val x_split = x.split(\"/\"\
    )\n        val n_split = n.split(\"/\")\n        val x_num = x_split(0).toInt\n\
    \        val x_den = x_split(1).toInt\n        val n_num = n_split(0).toInt\n\
    \        val n_den = n_split(1).toInt\n        val x_num_n = x_num * n_den\n \
    \       val x_den_n = x_den * n_num\n        val gcd = gcd_euclid(x_num_n, x_den_n)\n\
    \        val x_num_n_simplified = x_num_n / gcd\n        val x_den_n_simplified\
    \ = x_den_n / gcd\n        if (x_num_n_simplified == x_den_n_simplified) true\
    \ else false", "        val x_num = x.split(\"/\")(0).toInt\n        val x_den\
    \ = x.split(\"/\")(1).toInt\n        val n_num = n.split(\"/\")(0).toInt\n   \
    \     val n_den = n.split(\"/\")(1).toInt\n        val num = x_num * n_num\n \
    \       val den = x_den * n_den\n        val gcd = gcd(num, den)\n        val\
    \ num_simplified = num / gcd\n        val den_simplified = den / gcd\n       \
    \ if (num_simplified % den_simplified == 0) true else false", "        val xs\
    \ = x.split(\"/\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt\
    \ * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx ==\
    \ 0", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\")\n    \
    \    val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt * xs(1).toInt\n\
    \        xn % nx == 0", "        val (xn, xd) = (x.split(\"/\")(0).toInt, x.split(\"\
    /\")(1).toInt)\n        val (nn, nd) = (n.split(\"/\")(0).toInt, n.split(\"/\"\
    )(1).toInt)\n        val (xnn, xdd) = (xn * nd, xd * nn)\n        val (xnnn, xddd)\
    \ = (xnn / gcd(xnn, xdd), xdd / gcd(xnn, xdd))\n        if (xnnn % xddd == 0)\
    \ true else false", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n    \
    \    val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (gcd, lcm) = (gcd(xd,\
    \ nd), lcm(xd, nd))\n        val (xn2, nn2) = (xn * (lcm / xd), nn * (lcm / nd))\n\
    \        val (xn3, nn3) = (xn2 * nn2, lcm)\n        val (gcd2, lcm2) = (gcd(xn3,\
    \ nn3), lcm(xn3, nn3))\n        val (xn4, nn4) = (xn3 / gcd2, nn3 / gcd2)\n  \
    \      val (xn5, nn5) = (xn4 / nn4, 1)\n        xn5 == 1", "        val x_numerator\
    \ = x.split(\"/\")(0).toInt\n        val x_denominator = x.split(\"/\")(1).toInt\n\
    \        val n_numerator = n.split(\"/\")(0).toInt\n        val n_denominator\
    \ = n.split(\"/\")(1).toInt\n        val product_numerator = x_numerator * n_numerator\n\
    \        val product_denominator = x_denominator * n_denominator\n        val\
    \ gcd = gcd_euclid(product_numerator, product_denominator)\n        val simplified_numerator\
    \ = product_numerator / gcd\n        val simplified_denominator = product_denominator\
    \ / gcd\n        if (simplified_numerator % simplified_denominator == 0) true\
    \ else false", "        val xs = x.split(\"/\")\n        val ns = n.split(\"/\"\
    )\n        val xn = xs(0).toInt * ns(1).toInt\n        val nx = ns(0).toInt *\
    \ xs(1).toInt\n        xn % nx == 0", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n\
    \        val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (numerator, denominator)\
    \ = (xn * nn, xd * nd)\n        val gcd = BigInt(numerator).gcd(denominator).toInt\n\
    \        val (numerator2, denominator2) = (numerator / gcd, denominator / gcd)\n\
    \        denominator2 % numerator2 == 0", "        val xs = x.split(\"/\")\n \
    \       val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        val gcd = gcd(xn, nx)\n \
    \       xn / gcd == nx / gcd", "        val (xn, xd) = x.split(\"/\").map(_.toInt)\n\
    \        val (nn, nd) = n.split(\"/\").map(_.toInt)\n        val (g, xn2, nn2)\
    \ = gcd(xn, nn)\n        val (g2, xd2, nd2) = gcd(xd, nd)\n        val (xn3, xd3)\
    \ = (xn2 / g, xd2 / g2)\n        val (nn3, nd3) = (nn2 / g, nd2 / g2)\n      \
    \  val (xn4, xd4) = (xn3 * nd3, xd3 * nn3)\n        val (g3, xn5, xd5) = gcd(xn4,\
    \ xd4)\n        val (xn6, xd6) = (xn5 / g3, xd5 / g3)\n        xd6 == 1", "  \
    \      val (x1, x2) = x.split(\"/\").map(_.toInt)\n        val (n1, n2) = n.split(\"\
    /\").map(_.toInt)\n        val (x3, n3) = (x1 * n2, x2 * n1)\n        val g =\
    \ gcd(x3, n3)\n        (x3 / g) % (n3 / g) == 0", "        val xn = x.split(\"\
    /\")\n        val nn = n.split(\"/\")\n        val xnumerator = xn(0).toInt\n\
    \        val xdenominator = xn(1).toInt\n        val nnumerator = nn(0).toInt\n\
    \        val ndenominator = nn(1).toInt\n        val numerator = xnumerator *\
    \ nnumerator\n        val denominator = xdenominator * ndenominator\n        val\
    \ gcd = gcd(numerator, denominator)\n        val result = numerator / gcd\n  \
    \      if (result == denominator) true else false", "        val xs = x.split(\"\
    /\")\n        val ns = n.split(\"/\")\n        val xn = xs(0).toInt * ns(1).toInt\n\
    \        val nx = ns(0).toInt * xs(1).toInt\n        xn % nx == 0", "        val\
    \ xn = x.split(\"/\")\n        val nn = n.split(\"/\")\n        val xnumerator\
    \ = xn(0).toInt\n        val xdenominator = xn(1).toInt\n        val nnumerator\
    \ = nn(0).toInt\n        val ndenominator = nn(1).toInt\n        val numerator\
    \ = xnumerator * nnumerator\n        val denominator = xdenominator * ndenominator\n\
    \        val gcd = BigInt(numerator).gcd(denominator)\n        val result = numerator\
    \ / gcd.toInt\n        if (result == denominator / gcd.toInt) true else false"]
stop_tokens:
- "\n    }\n"
