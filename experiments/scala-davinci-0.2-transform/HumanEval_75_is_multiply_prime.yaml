name: HumanEval_75_is_multiply_prime
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n    // and false otherwise.\n    // Knowing that (a) is less\
  \ then 100. \n    // Example:\n    // >>> isMultiplyPrime((30l))\n    // (true)\n\
  \    // 30 = 2 * 3 * 5\n    def isMultiplyPrime(a : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(isMultiplyPrime((5l))\
  \ == (false));\n    assert(isMultiplyPrime((30l)) == (true));\n    assert(isMultiplyPrime((8l))\
  \ == (true));\n    assert(isMultiplyPrime((10l)) == (false));\n    assert(isMultiplyPrime((125l))\
  \ == (true));\n    assert(isMultiplyPrime((105l)) == (true));\n    assert(isMultiplyPrime((126l))\
  \ == (false));\n    assert(isMultiplyPrime((729l)) == (false));\n    assert(isMultiplyPrime((891l))\
  \ == (false));\n    assert(isMultiplyPrime((1001l)) == (true));\n    }\n\n}\n"
completions: ["        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val factors = primes.filter(a\
    \ % _ == 0)\n        factors.size == 3", "        val primes = List(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val primeFactors = primes.filter(a % _ == 0)\n        primeFactors.length\
    \ == 3", "        var b = a\n        var c = 0\n        var d = 0\n        var\
    \ e = 0\n        var f = 0\n        var g = 0\n        var h = 0\n        var\
    \ i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var\
    \ m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var\
    \ q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var\
    \ u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var\
    \ y = 0\n        var z = 0\n        var aa = 0\n        var ab = 0\n        var\
    \ ac = 0\n        var ad = 0\n        var ae = 0\n        var af = 0\n       \
    \ var ag = 0\n        var ah = 0\n        var ai = 0\n        var aj = 0\n   \
    \     var ak = 0\n        var al = 0\n        var am = 0\n        var an = 0\n\
    \        var ao = 0\n        var ap = 0\n        var aq = 0\n        var ar =\
    \ 0\n        var as = 0\n        var at = 0\n        var au = 0\n        var av\
    \ = 0\n        var aw = 0\n        var ax = 0\n        var ay = 0\n        var\
    \ az = 0\n        var ba = 0\n        var bb = 0\n        var bc = 0\n       \
    \ var bd = 0\n        var be = 0\n        var bf = 0\n        var bg = 0\n   \
    \     var bh = 0\n        var bi = 0\n        var bj = 0\n        var bk = 0\n\
    \        var bl = 0\n        var bm = 0\n        var bn = 0\n        var bo =\
    \ 0\n        var bp = 0\n        var bq = 0\n        var br = 0\n        var bs\
    \ = 0\n        var bt = 0\n        var bu = 0\n        var bv = 0\n        var\
    \ bw = 0\n        var bx = 0\n        var by = 0\n        var bz = 0\n       \
    \ var ca = 0\n        var cb = 0\n        var cc = 0\n        var cd = 0\n   \
    \    ", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        for (i <- primes)\
    \ {\n            for (j <- primes) {\n                for (k <- primes) {\n  \
    \                  if (i * j * k == a) return true\n                }\n      \
    \      }\n        }\n        return false", "        def isPrime(a : Long) : Boolean\
    \ = {\n            if (a <= 1) return false\n            if (a == 2) return true\n\
    \            if (a % 2 == 0) return false\n            val limit = sqrt(a).toLong\n\
    \            for (i <- 3l to limit by 2) {\n                if (a % i == 0) return\
    \ false\n            }\n            return true\n        }\n        val limit\
    \ = sqrt(a).toLong\n        for (i <- 2l to limit) {\n            if (a % i ==\
    \ 0) {\n                val b = a / i\n                if (isPrime(i) && isPrime(b))\
    \ return true\n            }\n        }\n        return false", "        val primes\
    \ = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97)\n        val factors = primes.filter(x => a % x == 0)\n\
    \        factors.length == 3", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val primeFactors = primes.filter(a % _ == 0)\n        primeFactors.length\
    \ == 3", "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesSet =\
    \ primes.toSet\n        val primesMap = primes.zipWithIndex.toMap\n        val\
    \ primesMap2 = primes.zipWithIndex.toMap\n        def isPrime(a : Long) : Boolean\
    \ = {\n            if (a < 2) return false\n            if (a == 2) return true\n\
    \            if (a % 2 == 0) return false\n            for (i <- 3 to sqrt(a).toInt\
    \ by 2) {\n                if (a % i == 0) return false\n            }\n     \
    \       return true\n        }\n        def isPrime(a : Int) : Boolean = {\n \
    \           if (a < 2) return false\n            if (a == 2) return true\n   \
    \         if (a % 2 == 0) return false\n            for (i <- 3 to sqrt(a).toInt\
    \ by 2) {\n                if (a % i == 0) return false\n            }\n     \
    \       return true\n        }\n        def isPrime(a : BigInt) : Boolean = {\n\
    \            if (a < 2) return false\n            if (a == 2) return true\n  \
    \          if (a % 2 == 0) return false\n            for (i <- 3 to sqrt(a).toInt\
    \ by 2) {\n                if (a % i == 0) return false\n            }\n     \
    \       return true\n        }\n        def isPrime(a : BigDecimal) : Boolean\
    \ = {\n            if (a < 2) return false\n            if (a == 2) return true\n\
    \            if (a % 2 == 0) return false\n            for (i <- 3 to sqrt(a).toInt\
    \ by 2) {\n                if (a % i == 0) return false\n            }\n     \
    \       return true\n        }\n        def isPrime(a : BigInt, primes : List[BigInt])\
    \ : Boolean = {\n            if (a < 2) return false\n            if (a == 2)\
    \ return true\n            if (a % 2 == 0) return false\n            for", " \
    \       val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val primesMap = primes.zipWithIndex.toMap\n\
    \        val primesSet = primes.toSet\n        val primesArray = primes.toArray\n\
    \        val primesLength = primes.length\n        def isPrime(n : Long) : Boolean\
    \ = {\n            if (n < 2) return false\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        def isMultiplyPrime(a : Long, primes :\
    \ List[Int], primesMap : Map[Int, Int], primesSet : Set[Int], primesArray : Array[Int],\
    \ primesLength : Int) : Boolean = {\n            if (a == 1) return true\n   \
    \         if (primesSet.contains(a.toInt)) return true\n            for (i <-\
    \ 0 until primesLength) {\n                if (a % primesArray(i) == 0) {\n  \
    \                  if (isMultiplyPrime(a / primesArray(i), primes, primesMap,\
    \ primesSet, primesArray, primesLength)) return true\n                }\n    \
    \        }\n            return false\n        }\n        isMultiplyPrime(a, primes,\
    \ primesMap, primesSet, primesArray, primesLength)", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        var result = false\n        for (i <- 0 to primes.length\
    \ - 1) {\n            if (a % primes(i) == 0) {\n                val b = a / primes(i)\n\
    \                for (j <- 0 to primes.length - 1) {\n                    if (b\
    \ % primes(j) == 0) {\n                        val c = b / primes(j)\n       \
    \                 for (k <- 0 to primes.length - 1) {\n                      \
    \      if (c % primes(k) == 0) {\n                                if (c / primes(k)\
    \ == 1) {\n                                    result = true\n               \
    \                 }\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n        result",
  "        // Write your code here\n        return false", "        var result = false\n\
    \        var primes = ArrayBuffer[Long]()\n        for (i <- 2l to 100l) {\n \
    \           if (isPrime(i)) primes += i\n        }\n        for (i <- 0 to primes.length\
    \ - 1) {\n            for (j <- i + 1 to primes.length - 1) {\n              \
    \  for (k <- j + 1 to primes.length - 1) {\n                    if (primes(i)\
    \ * primes(j) * primes(k) == a) result = true\n                }\n           \
    \ }\n        }\n        result", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val factors = new ListBuffer[Int]\n        var i = 0\n        var n =\
    \ a\n        while (i < primes.length && n > 1) {\n            if (n % primes(i)\
    \ == 0) {\n                factors += primes(i)\n                n /= primes(i)\n\
    \            }\n            else i += 1\n        }\n        if (n > 1) return\
    \ false\n        else return factors.length == 3", "        // Write your code\
    \ here\n        return false", "        val primes = List(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val factors = primes.filter(a % _ == 0)\n        factors.length == 3",
  "        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        var result = false\n      \
    \  for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) {\n                   \
    \     result = true\n                    }\n                }\n            }\n\
    \        }\n        result", "        val primes = List(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      for (i <- 0 to primes.length - 1) {\n            for (j <- i + 1 to primes.length\
    \ - 1) {\n                for (k <- j + 1 to primes.length - 1) {\n          \
    \          if (primes(i) * primes(j) * primes(k) == a) return true\n         \
    \       }\n            }\n        }\n        false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        for (i <- primes) {\n            if (a % i == 0) {\n\
    \                for (j <- primes) {\n                    if (a % j == 0 && a\
    \ % (i * j) == 0) {\n                        return true\n                   \
    \ }\n                }\n            }\n        }\n        return false", "   \
    \     def isPrime(a : Long) : Boolean = {\n            if (a == 1) return false\n\
    \            if (a == 2) return true\n            if (a % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(a).toInt by 2) {\n                if (a % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ for (i <- 1 to sqrt(a).toInt by 2) {\n            if (a % i == 0) {\n      \
    \          if (isPrime(i) && isPrime(a / i)) {\n                    for (j <-\
    \ 1 to sqrt(a / i).toInt by 2) {\n                        if ((a / i) % j == 0)\
    \ {\n                            if (isPrime(j) && isPrime((a / i) / j)) return\
    \ true\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return false", "        val primes = List(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        primes.filter(x => a % x == 0).size == 3"]
stop_tokens:
- "\n    }\n"
