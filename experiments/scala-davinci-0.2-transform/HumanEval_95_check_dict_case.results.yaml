language: scala
name: HumanEval_95_check_dict_case
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) {\n                lower = false\n            }\n            if (key.toUpperCase()\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ return lower || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdbq1_6jx.scala:35)\n\tat Problem.main(tmpdbq1_6jx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk1sn5ja_.scala:35)\n\tat Problem.main(tmpk1sn5ja_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.length == keys.length\
    \ || upper.length == keys.length) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_1i2mtpd.scala:28)\n\tat Problem.main(tmp_1i2mtpd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstKeyUpper = firstKey.toUpperCase\n        val firstKeyLower = firstKey.toLowerCase\n\
    \        if (firstKey == firstKeyUpper) {\n            for (key <- keys) {\n \
    \               if (key != key.toUpperCase) return false\n            }\n    \
    \    } else if (firstKey == firstKeyLower) {\n            for (key <- keys) {\n\
    \                if (key != key.toLowerCase) return false\n            }\n   \
    \     } else {\n            return false\n        }\n        return true\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfsc1an3h.scala:41)\n\tat Problem.main(tmpfsc1an3h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(_.toLowerCase\
    \ == _) || dict.keys.forall(_.toUpperCase == _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpayf8tdmi.scala:20:25 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpayf8tdmi.scala:20:65 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659800085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower || firstKeyIsUpper) {\n            keys.tail.forall(key\
    \ => {\n                if (firstKeyIsLower) key.toLowerCase == key\n        \
    \        else key.toUpperCase == key\n            })\n        } else false\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp69_vzk7d.scala:34)\n\tat Problem.main(tmp69_vzk7d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var upper = true\n\
    \        var lower = true\n        for (x <- dict.keys) {\n            if (x.toUpperCase()\
    \ != x) {\n                upper = false\n            }\n            if (x.toLowerCase()\
    \ != x) {\n                lower = false\n            }\n        }\n        if\
    \ (upper || lower) {\n            return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvya0xbko.scala:38)\n\tat Problem.main(tmpvya0xbko.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.size == 0)\
    \ false\n        else {\n            var isLower = true\n            var isUpper\
    \ = true\n            for ((k, v) <- dict) {\n                if (k.toLowerCase()\
    \ != k) isLower = false\n                if (k.toUpperCase() != k) isUpper = false\n\
    \            }\n            isLower || isUpper\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvs0r4i2l.scala:34)\n\tat Problem.main(tmpvs0r4i2l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        if (lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf2cy6ioa.scala:31)\n\tat Problem.main(tmpf2cy6ioa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val lower = dict.keys.forall(x\
    \ => x.toLowerCase == x)\n        val upper = dict.keys.forall(x => x.toUpperCase\
    \ == x)\n        lower || upper\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp20yf74tv.scala:27)\n\tat Problem.main(tmp20yf74tv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0hlnjzdu.scala:31)\n\tat Problem.main(tmp0hlnjzdu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        if (lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf2cy6ioa.scala:31)\n\tat Problem.main(tmpf2cy6ioa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // TODO: Implement this function\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmq1a7vm7.scala:23)\n\tat Problem.main(tmpmq1a7vm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val lowerKeys = keys.filter(_.toLowerCase\
    \ == _)\n        val upperKeys = keys.filter(_.toUpperCase == _)\n        if (lowerKeys.size\
    \ == keys.size || upperKeys.size == keys.size) true else false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpnnmb341w.scala:22:36 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlowerKeys\e[0m = keys.filter(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpnnmb341w.scala:23:36\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mupperKeys\e[0m = keys.filter(_.toUpperCase == _)\n\e[31m\e[31m   |\e[0m\
    \                                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 Wrong number of parameters, expected: 1\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659800085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        if (lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf2cy6ioa.scala:31)\n\tat Problem.main(tmpf2cy6ioa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    val firstKeyIsLower = firstKey.toLowerCase == firstKey\n        val firstKeyIsUpper\
    \ = firstKey.toUpperCase == firstKey\n        if (firstKeyIsLower) {\n       \
    \     for (key <- keys) {\n                if (key.toLowerCase != key) return\
    \ false\n            }\n        } else if (firstKeyIsUpper) {\n            for\
    \ (key <- keys) {\n                if (key.toUpperCase != key) return false\n\
    \            }\n        } else {\n            return false\n        }\n      \
    \  return true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt_wvllbx.scala:41)\n\tat Problem.main(tmpt_wvllbx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // TODO: Implement this function\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmq1a7vm7.scala:23)\n\tat Problem.main(tmpmq1a7vm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0_2ful_j.scala:24)\n\tat Problem.main(tmp0_2ful_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        lower || upper\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi0tqc31.scala:31)\n\tat Problem.main(tmpwi0tqc31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        if (lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsn0v62uu.scala:31)\n\tat Problem.main(tmpsn0v62uu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys\n            val firstKey =\
    \ keys.head\n            val firstChar = firstKey.charAt(0)\n            val isUpper\
    \ = firstChar.isUpper\n            val isLower = firstChar.isLower\n         \
    \   if (isUpper || isLower) {\n                val isAllUpper = keys.forall(key\
    \ => key.forall(c => c.isUpper))\n                val isAllLower = keys.forall(key\
    \ => key.forall(c => c.isLower))\n                if (isAllUpper || isAllLower)\
    \ true\n                else false\n            }\n            else false\n  \
    \      }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val firstKey = keys.head\n\
    \        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        if (firstKeyIsUpper) {\n       \
    \     keys.forall(k => k.toUpperCase == k)\n        } else if (firstKeyIsLower)\
    \ {\n            keys.forall(k => k.toLowerCase == k)\n        } else {\n    \
    \        false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpom09c9jy.scala:36)\n\tat Problem.main(tmpom09c9jy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toUpperCase == x || x.toLowerCase == x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr2_y1z01.scala:24)\n\tat Problem.main(tmpr2_y1z01.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        if (lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupom9vkh.scala:31)\n\tat Problem.main(tmpupom9vkh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        if (lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyo18bode.scala:31)\n\tat Problem.main(tmpyo18bode.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4e2vgq_.scala:31)\n\tat Problem.main(tmpt4e2vgq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here.\n        var lower = true\n\
    \        var upper = true\n        dict.keys.foreach(x => {\n            if (x.toLowerCase\
    \ != x) lower = false\n            if (x.toUpperCase != x) upper = false\n   \
    \     })\n        lower || upper\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwk_ki1ge.scala:31)\n\tat Problem.main(tmpwk_ki1ge.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800098
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lowercase = true\n\
    \        var uppercase = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lowercase = false\n            if (k.toUpperCase != k) uppercase = false\n\
    \        }\n        return lowercase || uppercase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4tzaclm8.scala:31)\n\tat Problem.main(tmp4tzaclm8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzcdvuac8.scala:24)\n\tat Problem.main(tmpzcdvuac8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (i <- dict.keys) {\n            if (i.toLowerCase()\
    \ != i) {\n                lower = false\n            }\n            if (i.toUpperCase()\
    \ != i) {\n                upper = false\n            }\n        }\n        if\
    \ (lower || upper) {\n            return true\n        }\n        else {\n   \
    \         return false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7jm8jq4y.scala:40)\n\tat Problem.main(tmp7jm8jq4y.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppghz5dwk.scala:23)\n\tat Problem.main(tmppghz5dwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val isLower =\
    \ dict.keys.head.toLowerCase == dict.keys.head\n        dict.keys.forall(x =>\
    \ (x.toLowerCase == x) == isLower)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5e6ox420.scala:26)\n\tat Problem.main(tmp5e6ox420.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((key, value) <- dict) {\n            if\
    \ (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        lower || upper\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp66mg1yb9.scala:31)\n\tat Problem.main(tmp66mg1yb9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (!key.toLowerCase.equals(key))\
    \ lower = false\n            if (!key.toUpperCase.equals(key)) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphakfnp9h.scala:31)\n\tat Problem.main(tmphakfnp9h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val firstKey = keys.head\n    \
    \    if (firstKey.toLowerCase == firstKey) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else {\n            keys.forall(key => key.toUpperCase ==\
    \ key)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr58vn37e.scala:32)\n\tat Problem.main(tmpr58vn37e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var result = true\n\
    \        var upper = true\n        var lower = true\n        for ((k,v) <- dict)\
    \ {\n            if (k.toUpperCase() != k) {\n                upper = false\n\
    \            }\n            if (k.toLowerCase() != k) {\n                lower\
    \ = false\n            }\n        }\n        if (upper == false && lower == false)\
    \ {\n            result = false\n        }\n        return result\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxotyp03v.scala:39)\n\tat Problem.main(tmpxotyp03v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9idr7pfx.scala:31)\n\tat Problem.main(tmp9idr7pfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0hlnjzdu.scala:31)\n\tat Problem.main(tmp0hlnjzdu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(_.toLowerCase\
    \ == _) || dict.keys.forall(_.toUpperCase == _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpayf8tdmi.scala:20:25 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpayf8tdmi.scala:20:65 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659800085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toLowerCase == x || x.toUpperCase == x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmsev_458.scala:24)\n\tat Problem.main(tmpmsev_458.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys.toList\n        val firstKey = keys.head\n\
    \        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n        val firstKeyIsLower\
    \ = firstKey.toLowerCase == firstKey\n        if (!firstKeyIsUpper && !firstKeyIsLower)\
    \ return false\n        val allKeysAreUpper = keys.forall(key => key.toUpperCase\
    \ == key)\n        val allKeysAreLower = keys.forall(key => key.toLowerCase ==\
    \ key)\n        if (firstKeyIsUpper && allKeysAreUpper) return true\n        if\
    \ (firstKeyIsLower && allKeysAreLower) return true\n        false\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjkhu8dos.scala:35)\n\tat Problem.main(tmpjkhu8dos.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk1sn5ja_.scala:35)\n\tat Problem.main(tmpk1sn5ja_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val lower\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lower.length == keys.length || upper.length\
    \ == keys.length) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpylho9dev.scala:32)\n\tat Problem.main(tmpylho9dev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800099
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill Up this function body\n        // `dict` is a\
    \ Map of String to String\n        // `dict.keys` is a collection of keys of the\
    \ Map\n        // `dict.values` is a collection of values of the Map\n       \
    \ // `dict.keys.toList` is a List of keys of the Map\n        // `dict.values.toList`\
    \ is a List of values of the Map\n        // `dict.keys.toList(0)` is the first\
    \ key of the Map\n        // `dict.values.toList(0)` is the first value of the\
    \ Map\n        // `dict.keys.toList.length` is the number of keys of the Map\n\
    \        // `dict.values.toList.length` is the number of values of the Map\n \
    \       // `dict.keys.toList.contains(\"a\")` is true if the Map contains the\
    \ key \"a\"\n        // `dict.values.toList.contains(\"apple\")` is true if the\
    \ Map contains the value \"apple\"\n        // `dict.keys.toList.filter(k => k\
    \ == \"a\")` is a List of keys that are equal to \"a\"\n        // `dict.values.toList.filter(v\
    \ => v == \"apple\")` is a List of values that are equal to \"apple\"\n      \
    \  // `dict.keys.toList.filter(k => k == \"a\").length` is the number of keys\
    \ that are equal to \"a\"\n        // `dict.values.toList.filter(v => v == \"\
    apple\").length` is the number of values that are equal to \"apple\"\n       \
    \ // `dict.keys.toList.filter(k => k == \"a\").length == dict.keys.toList.length`\
    \ is true if all keys are equal to \"a\"\n        // `dict.values.toList.filter(v\
    \ => v == \"apple\").length == dict.values.toList.length` is true if all values\
    \ are equal to \"apple\"\n        // `dict.keys.toList.filter(k => k == \"a\"\
    ).length == dict.keys.toList.length || dict.values.toList.filter(v => v == \"\
    apple\").length == dict.values.toList.length` is true if all keys\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppra_bvoq.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mcheckDictCase\e\
    [0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m]) : \e\
    [35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \                                       Required: Boolean\n\e[31m19 |\e[0m   \
    \     \e[34m// Fill Up this function body\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ `dict` is a Map of String to String\e[0m\n\e[31m21 |\e[0m        \e[34m// `dict.keys`\
    \ is a collection of keys of the Map\e[0m\n\e[31m22 |\e[0m        \e[34m// `dict.values`\
    \ is a collection of values of the Map\e[0m\n\e[31m23 |\e[0m        \e[34m// `dict.keys.toList`\
    \ is a List of keys of the Map\e[0m\n\e[31m24 |\e[0m        \e[34m// `dict.values.toList`\
    \ is a List of values of the Map\e[0m\n\e[31m25 |\e[0m        \e[34m// `dict.keys.toList(0)`\
    \ is the first key of the Map\e[0m\n\e[31m26 |\e[0m        \e[34m// `dict.values.toList(0)`\
    \ is the first value of the Map\e[0m\n\e[31m27 |\e[0m        \e[34m// `dict.keys.toList.length`\
    \ is the number of keys of the Map\e[0m\n\e[31m28 |\e[0m        \e[34m// `dict.values.toList.length`\
    \ is the number of values of the Map\e[0m\n\e[31m29 |\e[0m        \e[34m// `dict.keys.toList.contains(\"\
    a\")` is true if the Map contains the key \"a\"\e[0m\n\e[31m30 |\e[0m        \e\
    [34m// `dict.values.toList.contains(\"apple\")` is true if the Map contains the\
    \ value \"apple\"\e[0m\n\e[31m31 |\e[0m        \e[34m// `dict.keys.toList.filter(k\
    \ => k == \"a\")` is a List of keys that are equal to \"a\"\e[0m\n\e[31m32 |\e\
    [0m        \e[34m// `dict.values.toList.filter(v => v == \"apple\")` is a List\
    \ of values that are equal to \"apple\"\e[0m\n\e[31m33 |\e[0m        \e[34m//\
    \ `dict.keys.toList.filter(k => k == \"a\").length` is the number of keys that\
    \ are equal to \"a\"\e[0m\n\e[31m34 |\e[0m        \e[34m// `dict.values.toList.filter(v\
    \ => v == \"apple\").length` is the number of values that are equal to \"apple\"\
    \e[0m\n\e[31m35 |\e[0m"
  stdout: ''
  timestamp: 1659800099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lowerCase = true\n\
    \        var upperCase = true\n        for (key <- dict.keys) {\n            if\
    \ (key.toLowerCase != key) lowerCase = false\n            if (key.toUpperCase\
    \ != key) upperCase = false\n        }\n        lowerCase || upperCase\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpma8tpwls.scala:31)\n\tat Problem.main(tmpma8tpwls.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else {\n           \
    \ val keys = dict.keys\n            val lowerCaseKeys = keys.filter(x => x.toLowerCase\
    \ == x)\n            val upperCaseKeys = keys.filter(x => x.toUpperCase == x)\n\
    \            if (lowerCaseKeys.size == keys.size || upperCaseKeys.size == keys.size)\
    \ true\n            else false\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47hci1a6.scala:31)\n\tat Problem.main(tmp47hci1a6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys.head\n        val isLower = first.toLowerCase == first\n\
    \        val isUpper = first.toUpperCase == first\n        if (isLower) {\n  \
    \          keys.forall(key => key.toLowerCase == key)\n        } else if (isUpper)\
    \ {\n            keys.forall(key => key.toUpperCase == key)\n        } else {\n\
    \            false\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmkybcz06.scala:35)\n\tat Problem.main(tmpmkybcz06.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsUpper = firstKey.forall(_.isUpper)\n\
    \        val firstKeyIsLower = firstKey.forall(_.isLower)\n        if (firstKeyIsUpper)\
    \ {\n            keys.forall(_.forall(_.isUpper))\n        } else if (firstKeyIsLower)\
    \ {\n            keys.forall(_.forall(_.isLower))\n        } else {\n        \
    \    false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9idr7pfx.scala:31)\n\tat Problem.main(tmp9idr7pfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for(key <- dict.keys) {\n            if(key.toLowerCase()\
    \ != key) lower = false\n            if(key.toUpperCase() != key) upper = false\n\
    \        }\n        if(lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu0zp8adu.scala:31)\n\tat Problem.main(tmpu0zp8adu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3zrd4x4.scala:31)\n\tat Problem.main(tmpg3zrd4x4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) {\n\
    \            return false\n        }\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase ==\
    \ firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n \
    \       if (firstKeyIsLower) {\n            return keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            return keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            return false\n   \
    \     }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ytez3iu.scala:38)\n\tat Problem.main(tmp1ytez3iu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val first\
    \ = keys.head\n            val firstIsUpper = first.toUpperCase == first\n   \
    \         val isUpper = keys.forall(x => x.toUpperCase == x)\n            val\
    \ isLower = keys.forall(x => x.toLowerCase == x)\n            isUpper || isLower\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjmlbnrkp.scala:33)\n\tat Problem.main(tmpjmlbnrkp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800107
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(_.toUpperCase\
    \ == _) || dict.keys.forall(_.toLowerCase == _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps0nnomhx.scala:20:25 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toUpperCase == _) || dict.keys.forall(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps0nnomhx.scala:20:65 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toUpperCase == _) || dict.keys.forall(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659800105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toLowerCase == x || x.toUpperCase == x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmsev_458.scala:24)\n\tat Problem.main(tmpmsev_458.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code\n        false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpocp_he29.scala:23)\n\tat Problem.main(tmpocp_he29.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0_2ful_j.scala:24)\n\tat Problem.main(tmp0_2ful_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3zrd4x4.scala:31)\n\tat Problem.main(tmpg3zrd4x4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        if (lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsn0v62uu.scala:31)\n\tat Problem.main(tmpsn0v62uu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9rbba7g8.scala:35)\n\tat Problem.main(tmp9rbba7g8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) {\n\
    \            return false\n        }\n        var lower = true\n        var upper\
    \ = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase() != k)\
    \ {\n                lower = false\n            }\n            if (k.toUpperCase()\
    \ != k) {\n                upper = false\n            }\n        }\n        return\
    \ lower || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuzcf9wv8.scala:38)\n\tat Problem.main(tmpuzcf9wv8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdcxflv2r.scala:23)\n\tat Problem.main(tmpdcxflv2r.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppghz5dwk.scala:23)\n\tat Problem.main(tmppghz5dwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toLowerCase == x || x.toUpperCase == x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmsev_458.scala:24)\n\tat Problem.main(tmpmsev_458.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (k <- dict.keys) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp65ytgrmg.scala:31)\n\tat Problem.main(tmp65ytgrmg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        val keys = dict.keys\n\
    \        val lowerCase = keys.filter(x => x.toLowerCase == x)\n        val upperCase\
    \ = keys.filter(x => x.toUpperCase == x)\n        if (lowerCase.size == keys.size\
    \ || upperCase.size == keys.size) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptwicx53l.scala:28)\n\tat Problem.main(tmptwicx53l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800110
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(_.toLowerCase\
    \ == _) || dict.keys.forall(_.toUpperCase == _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpayf8tdmi.scala:20:25 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpayf8tdmi.scala:20:65 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659800085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.size == keys.size ||\
    \ upper.size == keys.size) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv0_g0o1m.scala:28)\n\tat Problem.main(tmpv0_g0o1m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        val keys = dict.keys\n        val lower = keys.filter(x\
    \ => x.toLowerCase == x)\n        val upper = keys.filter(x => x.toUpperCase ==\
    \ x)\n        if (lower.size == keys.size || upper.size == keys.size) true else\
    \ false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfljqfh7w.scala:27)\n\tat Problem.main(tmpfljqfh7w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4e2vgq_.scala:31)\n\tat Problem.main(tmpt4e2vgq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppghz5dwk.scala:23)\n\tat Problem.main(tmppghz5dwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.size == 0) false\n        else {\n         \
    \   val keys = dict.keys.toList\n            val lowerCaseKeys = keys.filter(x\
    \ => x.toLowerCase == x)\n            val upperCaseKeys = keys.filter(x => x.toUpperCase\
    \ == x)\n            if (lowerCaseKeys.size == keys.size || upperCaseKeys.size\
    \ == keys.size) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1w8t038f.scala:31)\n\tat Problem.main(tmp1w8t038f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) {\n\
    \            return false\n        }\n        var lower = true\n        var upper\
    \ = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase() != k)\
    \ {\n                lower = false\n            }\n            if (k.toUpperCase()\
    \ != k) {\n                upper = false\n            }\n        }\n        return\
    \ lower || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuzcf9wv8.scala:38)\n\tat Problem.main(tmpuzcf9wv8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9idr7pfx.scala:31)\n\tat Problem.main(tmp9idr7pfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lowerCase = true\n\
    \        var upperCase = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) {\n                lowerCase = false\n            }\n            if (k.toUpperCase()\
    \ != k) {\n                upperCase = false\n            }\n        }\n     \
    \   return lowerCase || upperCase\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjku6nn5c.scala:35)\n\tat Problem.main(tmpjku6nn5c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800110
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9idr7pfx.scala:31)\n\tat Problem.main(tmp9idr7pfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        if (dict.size == 0) false\n        else lower || upper\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsc2p5c28.scala:32)\n\tat Problem.main(tmpsc2p5c28.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4e2vgq_.scala:31)\n\tat Problem.main(tmpt4e2vgq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) return\
    \ false\n        val keys = dict.keys\n        val first = keys.head\n       \
    \ val firstIsLower = first.toLowerCase == first\n        val firstIsUpper = first.toUpperCase\
    \ == first\n        if (firstIsLower) {\n            keys.forall(k => k.toLowerCase\
    \ == k)\n        } else if (firstIsUpper) {\n            keys.forall(k => k.toUpperCase\
    \ == k)\n        } else {\n            false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupkxssn9.scala:36)\n\tat Problem.main(tmpupkxssn9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk1sn5ja_.scala:35)\n\tat Problem.main(tmpk1sn5ja_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.size == 0) return false\n        val keys =\
    \ dict.keys.toList\n        val lowerKeys = keys.filter(x => x.toLowerCase ==\
    \ x)\n        val upperKeys = keys.filter(x => x.toUpperCase == x)\n        if\
    \ (lowerKeys.size == keys.size || upperKeys.size == keys.size) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoupvknd8.scala:28)\n\tat Problem.main(tmpoupvknd8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl0wyedht.scala:31)\n\tat Problem.main(tmpl0wyedht.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var upper = true\n\
    \        var lower = true\n        for (key <- dict.keys) {\n            if (key.toUpperCase\
    \ != key) {\n                upper = false\n            }\n            if (key.toLowerCase\
    \ != key) {\n                lower = false\n            }\n        }\n       \
    \ if (upper || lower) {\n            return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpaucynpm1.scala:38)\n\tat Problem.main(tmpaucynpm1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) {\n                lower = false\n            }\n            if (key.toUpperCase\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ if (lower || upper) {\n            return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqmzan4ly.scala:38)\n\tat Problem.main(tmpqmzan4ly.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        if (lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsn0v62uu.scala:31)\n\tat Problem.main(tmpsn0v62uu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lowerCaseKeys = keys.filter(x => x.toLowerCase == x)\n        val\
    \ upperCaseKeys = keys.filter(x => x.toUpperCase == x)\n        if (lowerCaseKeys.length\
    \ == keys.length || upperCaseKeys.length == keys.length) true else false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzg7dd3k1.scala:28)\n\tat Problem.main(tmpzg7dd3k1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9idr7pfx.scala:31)\n\tat Problem.main(tmp9idr7pfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val firstKey = keys.head\n        val firstKeyUpper = firstKey.toUpperCase\n\
    \        val firstKeyLower = firstKey.toLowerCase\n        if (firstKeyUpper ==\
    \ firstKeyLower) return false\n        val isUpper = firstKey == firstKeyUpper\n\
    \        val isLower = firstKey == firstKeyLower\n        if (isUpper) {\n   \
    \         for (key <- keys) {\n                if (key != key.toUpperCase) return\
    \ false\n            }\n        } else if (isLower) {\n            for (key <-\
    \ keys) {\n                if (key != key.toLowerCase) return false\n        \
    \    }\n        } else {\n            return false\n        }\n        return\
    \ true\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwmrwouy8.scala:43)\n\tat Problem.main(tmpwmrwouy8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // TODO: Implement this function\n        var lower =\
    \ true\n        var upper = true\n        for (key <- dict.keys) {\n         \
    \   if (key.toLowerCase() != key) lower = false\n            if (key.toUpperCase()\
    \ != key) upper = false\n        }\n        return lower || upper\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe3qsyd30.scala:31)\n\tat Problem.main(tmpe3qsyd30.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // TODO: Implement this function\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmq1a7vm7.scala:23)\n\tat Problem.main(tmpmq1a7vm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // TODO: Implement this function\n        return true\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuef85iym.scala:24)\n\tat Problem.main(tmpuef85iym.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val firstKey\
    \ = dict.keys.head\n        if (firstKey.forall(_.isUpper)) dict.keys.forall(_.forall(_.isUpper))\n\
    \        else dict.keys.forall(_.forall(_.isLower))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppghz5dwk.scala:23)\n\tat Problem.main(tmppghz5dwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        lower || upper\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi0tqc31.scala:31)\n\tat Problem.main(tmpwi0tqc31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lowerCaseKeys = keys.filter(x => x.toLowerCase == x)\n        val\
    \ upperCaseKeys = keys.filter(x => x.toUpperCase == x)\n        if (lowerCaseKeys.length\
    \ == keys.length || upperCaseKeys.length == keys.length) true else false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzg7dd3k1.scala:28)\n\tat Problem.main(tmpzg7dd3k1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        var lower = true\n       \
    \ var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) {\n                lower = false\n            }\n            if (key.toUpperCase()\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ return lower || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5x932asx.scala:35)\n\tat Problem.main(tmp5x932asx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800116
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3zrd4x4.scala:31)\n\tat Problem.main(tmpg3zrd4x4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toUpperCase == x || x.toLowerCase == x)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpr2_y1z01.scala:24)\n\tat Problem.main(tmpr2_y1z01.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toLowerCase == x) || dict.keys.forall(x => x.toUpperCase == x)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6l5qwsbc.scala:25)\n\tat Problem.main(tmp6l5qwsbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800118
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.forall(x => x.toLowerCase == x)\n        val upper =\
    \ keys.forall(x => x.toUpperCase == x)\n        return lower || upper\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqryske7j.scala:28)\n\tat Problem.main(tmpqryske7j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.size == 0) return false\n        val keys =\
    \ dict.keys.toList\n        val lower = keys.forall(x => x.toLowerCase == x)\n\
    \        val upper = keys.forall(x => x.toUpperCase == x)\n        return lower\
    \ || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8t7idlrh.scala:28)\n\tat Problem.main(tmp8t7idlrh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800121
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys\n\
    \        val firstKey = keys.head\n        val firstKeyIsLower = firstKey.toLowerCase\
    \ == firstKey\n        val firstKeyIsUpper = firstKey.toUpperCase == firstKey\n\
    \        if (firstKeyIsLower) {\n            keys.forall(key => key.toLowerCase\
    \ == key)\n        } else if (firstKeyIsUpper) {\n            keys.forall(key\
    \ => key.toUpperCase == key)\n        } else {\n            false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk1sn5ja_.scala:35)\n\tat Problem.main(tmpk1sn5ja_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) {\n                lower = false\n            }\n            if (key.toUpperCase()\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ return lower || upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdbq1_6jx.scala:35)\n\tat Problem.main(tmpdbq1_6jx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppghz5dwk.scala:23)\n\tat Problem.main(tmppghz5dwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppghz5dwk.scala:23)\n\tat Problem.main(tmppghz5dwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9idr7pfx.scala:31)\n\tat Problem.main(tmp9idr7pfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code\n        var lower = true\n     \
    \   var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplva29319.scala:31)\n\tat Problem.main(tmplva29319.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        dict.keys.foreach(x => if(x.toLowerCase !=\
    \ x) lower = false)\n        dict.keys.foreach(x => if(x.toUpperCase != x) upper\
    \ = false)\n        if(lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvk8gwj4w.scala:29)\n\tat Problem.main(tmpvk8gwj4w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.length == keys.length\
    \ || upper.length == keys.length) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_1i2mtpd.scala:28)\n\tat Problem.main(tmp_1i2mtpd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        lower || upper\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi0tqc31.scala:31)\n\tat Problem.main(tmpwi0tqc31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else {\n           \
    \ val keys = dict.keys.toList\n            val lowerCase = keys.forall(x => x.toLowerCase\
    \ == x)\n            val upperCase = keys.forall(x => x.toUpperCase == x)\n  \
    \          lowerCase || upperCase\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpz48xiyy5.scala:30)\n\tat Problem.main(tmpz48xiyy5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3zrd4x4.scala:31)\n\tat Problem.main(tmpg3zrd4x4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lowerCaseKeys = keys.filter(key => key.toLowerCase == key)\n    \
    \    val upperCaseKeys = keys.filter(key => key.toUpperCase == key)\n        if\
    \ (lowerCaseKeys.length == keys.length || upperCaseKeys.length == keys.length)\
    \ true else false\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvfnojnov.scala:28)\n\tat Problem.main(tmpvfnojnov.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lower = keys.filter(x => x.toLowerCase == x)\n        val upper =\
    \ keys.filter(x => x.toUpperCase == x)\n        if (lower.length == keys.length\
    \ || upper.length == keys.length) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_1i2mtpd.scala:28)\n\tat Problem.main(tmp_1i2mtpd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        if (lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf2cy6ioa.scala:31)\n\tat Problem.main(tmpf2cy6ioa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lowerCase = keys.filter(x => x.toLowerCase == x)\n        val upperCase\
    \ = keys.filter(x => x.toUpperCase == x)\n        if (lowerCase.size == keys.size\
    \ || upperCase.size == keys.size) true else false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvfos1o9s.scala:28)\n\tat Problem.main(tmpvfos1o9s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.size == 0)\
    \ {\n            return false\n        }\n        var isLower = true\n       \
    \ var isUpper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) {\n                isLower = false\n            }\n            if (k.toUpperCase()\
    \ != k) {\n                isUpper = false\n            }\n        }\n       \
    \ return isLower || isUpper\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" -> \"\
    banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\" ->\
    \ \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n  \
    \  assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" -> \"\
    banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpd9_7dc6_.scala:38)\n\tat Problem.main(tmpd9_7dc6_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (k <- dict.keys) {\n            lower =\
    \ lower && k.toLowerCase == k\n            upper = upper && k.toUpperCase == k\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjmd11x77.scala:31)\n\tat Problem.main(tmpjmd11x77.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0hlnjzdu.scala:31)\n\tat Problem.main(tmp0hlnjzdu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        lower || upper\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi0tqc31.scala:31)\n\tat Problem.main(tmpwi0tqc31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else {\n           \
    \ val keys = dict.keys\n            val firstKey = keys.head\n            if (firstKey.exists(_.isUpper))\
    \ {\n                keys.forall(_.forall(_.isUpper))\n            } else {\n\
    \                keys.forall(_.forall(_.isLower))\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toUpperCase == x) || dict.keys.forall(x => x.toLowerCase == x)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp98nh9934.scala:25)\n\tat Problem.main(tmp98nh9934.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3zrd4x4.scala:31)\n\tat Problem.main(tmpg3zrd4x4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.size == 0) return false\n        val keys =\
    \ dict.keys.toList\n        val lowerCaseKeys = keys.filter(key => key.toLowerCase\
    \ == key)\n        val upperCaseKeys = keys.filter(key => key.toUpperCase == key)\n\
    \        if (lowerCaseKeys.size == keys.size || upperCaseKeys.size == keys.size)\
    \ return true\n        return false\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpiks2elmr.scala:29)\n\tat Problem.main(tmpiks2elmr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val lowerCase = keys.forall(x => x.toLowerCase == x)\n        val upperCase\
    \ = keys.forall(x => x.toUpperCase == x)\n        lowerCase || upperCase\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc9sj2b6l.scala:28)\n\tat Problem.main(tmpc9sj2b6l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (!key.toLowerCase.equals(key))\
    \ {\n                lower = false\n            }\n            if (!key.toUpperCase.equals(key))\
    \ {\n                upper = false\n            }\n        }\n        lower ||\
    \ upper\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp32djh3qt.scala:35)\n\tat Problem.main(tmp32djh3qt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return true\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp0_2ful_j.scala:24)\n\tat Problem.main(tmp0_2ful_j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(_.toUpperCase\
    \ == _) || dict.keys.forall(_.toLowerCase == _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps0nnomhx.scala:20:25 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toUpperCase == _) || dict.keys.forall(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps0nnomhx.scala:20:65 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toUpperCase == _) || dict.keys.forall(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659800105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptockfuoh.scala:23)\n\tat Problem.main(tmptockfuoh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvz1c_n9m.scala:31)\n\tat Problem.main(tmpvz1c_n9m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4e2vgq_.scala:31)\n\tat Problem.main(tmpt4e2vgq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val lower\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lower.length == keys.length || upper.length\
    \ == keys.length) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpylho9dev.scala:32)\n\tat Problem.main(tmpylho9dev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else {\n           \
    \ val keys = dict.keys.toList\n            val lower = keys.forall(x => x.toLowerCase\
    \ == x)\n            val upper = keys.forall(x => x.toUpperCase == x)\n      \
    \      lower || upper\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplf0ziak9.scala:30)\n\tat Problem.main(tmplf0ziak9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4e2vgq_.scala:31)\n\tat Problem.main(tmpt4e2vgq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lowerCase = true\n\
    \        var upperCase = true\n        for (key <- dict.keys) {\n            if\
    \ (key.toLowerCase() != key) lowerCase = false\n            if (key.toUpperCase()\
    \ != key) upperCase = false\n        }\n        return lowerCase || upperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmgkvvtwi.scala:31)\n\tat Problem.main(tmpmgkvvtwi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase()\
    \ != k) lower = false\n            if (k.toUpperCase() != k) upper = false\n \
    \       }\n        if (lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyo18bode.scala:31)\n\tat Problem.main(tmpyo18bode.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // TODO: Implement this method\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpui65s3y_.scala:23)\n\tat Problem.main(tmpui65s3y_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) {\n\
    \            return false\n        }\n        val keys = dict.keys\n        val\
    \ lowerKeys = keys.filter(_.forall(_.isLower))\n        val upperKeys = keys.filter(_.forall(_.isUpper))\n\
    \        if (lowerKeys.size == keys.size || upperKeys.size == keys.size) {\n \
    \           return true\n        }\n        return false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lowerCase = true\n\
    \        var upperCase = true\n        for (key <- dict.keys) {\n            if\
    \ (key.toLowerCase == key) {\n                upperCase = false\n            }\
    \ else if (key.toUpperCase == key) {\n                lowerCase = false\n    \
    \        } else {\n                return false\n            }\n        }\n  \
    \      return lowerCase || upperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprzjw8nuw.scala:36)\n\tat Problem.main(tmprzjw8nuw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800123
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val firstKey = keys.head\n        val firstKeyIsUpper = firstKey.toUpperCase\
    \ == firstKey\n        val firstKeyIsLower = firstKey.toLowerCase == firstKey\n\
    \        if (firstKeyIsUpper) {\n            keys.forall(key => key.toUpperCase\
    \ == key)\n        } else if (firstKeyIsLower) {\n            keys.forall(key\
    \ => key.toLowerCase == key)\n        } else {\n            false\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl2lmww9s.scala:35)\n\tat Problem.main(tmpl2lmww9s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800127
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(_.toUpperCase\
    \ == _) || dict.keys.forall(_.toLowerCase == _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps0nnomhx.scala:20:25 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toUpperCase == _) || dict.keys.forall(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmps0nnomhx.scala:20:65 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toUpperCase == _) || dict.keys.forall(_.toLowerCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659800105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps11k3rkn.scala:31)\n\tat Problem.main(tmps11k3rkn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val lower\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lower.size == keys.size || upper.size\
    \ == keys.size) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp692gs6yf.scala:32)\n\tat Problem.main(tmp692gs6yf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9idr7pfx.scala:31)\n\tat Problem.main(tmp9idr7pfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) {\n\
    \            return false\n        }\n        val keys = dict.keys\n        val\
    \ firstKey = keys.head\n        if (firstKey.toLowerCase == firstKey) {\n    \
    \        for (key <- keys) {\n                if (key.toLowerCase != key) {\n\
    \                    return false\n                }\n            }\n        }\
    \ else {\n            for (key <- keys) {\n                if (key.toUpperCase\
    \ != key) {\n                    return false\n                }\n           \
    \ }\n        }\n        return true\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpllfv9f5s.scala:43)\n\tat Problem.main(tmpllfv9f5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(_.toLowerCase\
    \ == _) || dict.keys.forall(_.toUpperCase == _)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpayf8tdmi.scala:20:25 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpayf8tdmi.scala:20:65 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        dict.keys.forall(_.toLowerCase == _) || dict.keys.forall(_.toUpperCase\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \                  ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \               Wrong number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1659800085
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppghz5dwk.scala:23)\n\tat Problem.main(tmppghz5dwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // TODO: Implement this function\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmq1a7vm7.scala:23)\n\tat Problem.main(tmpmq1a7vm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9idr7pfx.scala:31)\n\tat Problem.main(tmp9idr7pfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps11k3rkn.scala:31)\n\tat Problem.main(tmps11k3rkn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800131
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill Up this function body\n        // `dict` is a\
    \ dictionary of type Map[String,String]\n        // `dict.keys` is a collection\
    \ of type Iterable[String]\n        // `dict.keys.forall(x => x.isUpper)` is a\
    \ boolean expression\n        // `dict.keys.forall(x => x.isLower)` is a boolean\
    \ expression\n        // `dict.isEmpty` is a boolean expression\n        // `dict.keys.forall(x\
    \ => x.isUpper) || dict.keys.forall(x => x.isLower)` is a boolean expression\n\
    \        // `dict.keys.forall(x => x.isUpper) || dict.keys.forall(x => x.isLower)\
    \ || dict.isEmpty` is a boolean expression\n        dict.keys.forall(x => x.isUpper)\
    \ || dict.keys.forall(x => x.isLower) || dict.isEmpty\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpw5bnjm23.scala:27:32 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        dict.keys.forall(\e[36mx\e[0m => x.isUpper) ||\
    \ dict.keys.forall(\e[36mx\e[0m => x.isLower) || dict.isEmpty\n\e[31m\e[31m  \
    \ |\e[0m                              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                      value isUpper is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpw5bnjm23.scala:27:68 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        dict.keys.forall(\e[36mx\e[0m => x.isUpper) ||\
    \ dict.keys.forall(\e[36mx\e[0m => x.isLower) || dict.isEmpty\n\e[31m\e[31m  \
    \ |\e[0m                                                                  ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isLower is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1659800132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val lower\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upper = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lower.length == keys.length || upper.length\
    \ == keys.length) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpylho9dev.scala:32)\n\tat Problem.main(tmpylho9dev.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else {\n           \
    \ val keys = dict.keys.toList\n            val lower = keys.filter(_.forall(_.isLower))\n\
    \            val upper = keys.filter(_.forall(_.isUpper))\n            if (lower.size\
    \ == keys.size || upper.size == keys.size) true\n            else false\n    \
    \    }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val lower\
    \ = keys.forall(x => x.toLowerCase == x)\n            val upper = keys.forall(x\
    \ => x.toUpperCase == x)\n            lower || upper\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcly1_sbc.scala:31)\n\tat Problem.main(tmpcly1_sbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val keys = dict.keys.toList\n\
    \        val first = keys.head\n        if (first.forall(_.isUpper)) {\n     \
    \       keys.forall(_.forall(_.isUpper))\n        } else if (first.forall(_.isLower))\
    \ {\n            keys.forall(_.forall(_.isLower))\n        } else {\n        \
    \    false\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        return true\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzcdvuac8.scala:24)\n\tat Problem.main(tmpzcdvuac8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800099
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) {\n                lower = false\n            }\n            if (key.toUpperCase\
    \ != key) {\n                upper = false\n            }\n        }\n       \
    \ if (lower || upper) {\n            return true\n        }\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqmzan4ly.scala:38)\n\tat Problem.main(tmpqmzan4ly.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmsc048bv.scala:31)\n\tat Problem.main(tmpmsc048bv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var isUpper = true\n\
    \        var isLower = true\n        for (key <- dict.keys) {\n            if\
    \ (key.toUpperCase != key) isUpper = false\n            if (key.toLowerCase !=\
    \ key) isLower = false\n        }\n        if (isUpper || isLower) true else false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdnwhi2v5.scala:31)\n\tat Problem.main(tmpdnwhi2v5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill Up this function body\n        // `dict` is a\
    \ map of type Map[String,String]\n        // `dict.keys` is a collection of type\
    \ Iterable[String]\n        // `dict.values` is a collection of type Iterable[String]\n\
    \        // `dict.keys.toList` is a collection of type List[String]\n        //\
    \ `dict.values.toList` is a collection of type List[String]\n        // `dict.keys.toList(0)`\
    \ is a String\n        // `dict.values.toList(0)` is a String\n        // `dict.keys.toList.length`\
    \ is an Int\n        // `dict.values.toList.length` is an Int\n        // `dict.keys.toList.head`\
    \ is a String\n        // `dict.values.toList.head` is a String\n        // `dict.keys.toList.tail`\
    \ is a List[String]\n        // `dict.values.toList.tail` is a List[String]\n\
    \        // `dict.keys.toList.tail.head` is a String\n        // `dict.values.toList.tail.head`\
    \ is a String\n        // `dict.keys.toList.tail.tail` is a List[String]\n   \
    \     // `dict.values.toList.tail.tail` is a List[String]\n        // `dict.keys.toList.tail.tail.head`\
    \ is a String\n        // `dict.values.toList.tail.tail.head` is a String\n  \
    \      // `dict.keys.toList.tail.tail.tail` is a List[String]\n        // `dict.values.toList.tail.tail.tail`\
    \ is a List[String]\n        // `dict.keys.toList.tail.tail.tail.head` is a String\n\
    \        // `dict.values.toList.tail.tail.tail.head` is a String\n        // `dict.keys.toList.tail.tail.tail.tail`\
    \ is a List[String]\n        // `dict.values.toList.tail.tail.tail.tail` is a\
    \ List[String]\n        // `dict.keys.toList.tail.tail.tail.\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7hqahder.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mcheckDictCase\e\
    [0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m]) : \e\
    [35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \                                       Required: Boolean\n\e[31m19 |\e[0m   \
    \     \e[34m// Fill Up this function body\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ `dict` is a map of type Map[String,String]\e[0m\n\e[31m21 |\e[0m        \e[34m//\
    \ `dict.keys` is a collection of type Iterable[String]\e[0m\n\e[31m22 |\e[0m \
    \       \e[34m// `dict.values` is a collection of type Iterable[String]\e[0m\n\
    \e[31m23 |\e[0m        \e[34m// `dict.keys.toList` is a collection of type List[String]\e\
    [0m\n\e[31m24 |\e[0m        \e[34m// `dict.values.toList` is a collection of type\
    \ List[String]\e[0m\n\e[31m25 |\e[0m        \e[34m// `dict.keys.toList(0)` is\
    \ a String\e[0m\n\e[31m26 |\e[0m        \e[34m// `dict.values.toList(0)` is a\
    \ String\e[0m\n\e[31m27 |\e[0m        \e[34m// `dict.keys.toList.length` is an\
    \ Int\e[0m\n\e[31m28 |\e[0m        \e[34m// `dict.values.toList.length` is an\
    \ Int\e[0m\n\e[31m29 |\e[0m        \e[34m// `dict.keys.toList.head` is a String\e\
    [0m\n\e[31m30 |\e[0m        \e[34m// `dict.values.toList.head` is a String\e[0m\n\
    \e[31m31 |\e[0m        \e[34m// `dict.keys.toList.tail` is a List[String]\e[0m\n\
    \e[31m32 |\e[0m        \e[34m// `dict.values.toList.tail` is a List[String]\e\
    [0m\n\e[31m33 |\e[0m        \e[34m// `dict.keys.toList.tail.head` is a String\e\
    [0m\n\e[31m34 |\e[0m        \e[34m// `dict.values.toList.tail.head` is a String\e\
    [0m\n\e[31m35 |\e[0m        \e[34m// `dict.keys.toList.tail.tail` is a List[String]\e\
    [0m\n\e[31m36 |\e[0m        \e[34m// `dict.values.toList.tail.tail` is a List[String]\e\
    [0m\n\e[31m37 |\e[0m        \e[34m// `dict.keys.toList.tail.tail.head` is a String\e\
    [0m\n\e[31m38 |\e[0m        \e[34m// `dict.values.toList.tail.tail.head` is a\
    \ String\e[0m\n\e[31m39 |\e[0m        \e[34m"
  stdout: ''
  timestamp: 1659800132
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toLowerCase == x) || dict.keys.forall(x => x.toUpperCase == x)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6l5qwsbc.scala:25)\n\tat Problem.main(tmp6l5qwsbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800118
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9idr7pfx.scala:31)\n\tat Problem.main(tmp9idr7pfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        lower || upper\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi0tqc31.scala:31)\n\tat Problem.main(tmpwi0tqc31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps11k3rkn.scala:31)\n\tat Problem.main(tmps11k3rkn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800131
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lowerCase = true\n\
    \        var upperCase = true\n        for (key <- dict.keys) {\n            if\
    \ (key.toLowerCase != key) lowerCase = false\n            if (key.toUpperCase\
    \ != key) upperCase = false\n        }\n        return lowerCase || upperCase\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm_5vjmvi.scala:31)\n\tat Problem.main(tmpm_5vjmvi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9idr7pfx.scala:31)\n\tat Problem.main(tmp9idr7pfx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill Up this function body\n        // `dict` is a\
    \ Map of String to String\n        // `dict.keys` is a collection of type Iterable[String]\n\
    \        // `dict.keys.toList` is a collection of type List[String]\n        //\
    \ `dict.keys.toList.map` is a method that takes a function as a parameter\n  \
    \      // `dict.keys.toList.map(x => x.toUpperCase)` is a collection of type List[String]\n\
    \        // `dict.keys.toList.map(x => x.toUpperCase).toSet` is a collection of\
    \ type Set[String]\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size`\
    \ is an integer\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size\
    \ == 1` is a boolean\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size\
    \ == 1 && dict.keys.toList.map(x => x.toUpperCase).toSet.head == dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.head.toUpperCase` is a boolean\n        // `dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.size == 1 && dict.keys.toList.map(x => x.toUpperCase).toSet.head\
    \ == dict.keys.toList.map(x => x.toUpperCase).toSet.head.toUpperCase || dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size == 1 && dict.keys.toList.map(x => x.toLowerCase).toSet.head\
    \ == dict.keys.toList.map(x => x.toLowerCase).toSet.head.toLowerCase` is a boolean\n\
    \        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1 && dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.head == dict.keys.toList.map(x => x\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2ka1lkkf.scala:18:61\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m    \e[33mdef\e[0m \e[36mcheckDictCase\e\
    [0m(\e[36mdict\e[0m : \e[35mMap\e[0m[\e[35mString\e[0m,\e[35mString\e[0m]) : \e\
    [35mBoolean\e[0m = {\n\e[31m\e[31m   |\e[0m                                  \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                             Found:    Unit\n\e[31m   |\e[0m                \
    \                                       Required: Boolean\n\e[31m19 |\e[0m   \
    \     \e[34m// Fill Up this function body\e[0m\n\e[31m20 |\e[0m        \e[34m//\
    \ `dict` is a Map of String to String\e[0m\n\e[31m21 |\e[0m        \e[34m// `dict.keys`\
    \ is a collection of type Iterable[String]\e[0m\n\e[31m22 |\e[0m        \e[34m//\
    \ `dict.keys.toList` is a collection of type List[String]\e[0m\n\e[31m23 |\e[0m\
    \        \e[34m// `dict.keys.toList.map` is a method that takes a function as\
    \ a parameter\e[0m\n\e[31m24 |\e[0m        \e[34m// `dict.keys.toList.map(x =>\
    \ x.toUpperCase)` is a collection of type List[String]\e[0m\n\e[31m25 |\e[0m \
    \       \e[34m// `dict.keys.toList.map(x => x.toUpperCase).toSet` is a collection\
    \ of type Set[String]\e[0m\n\e[31m26 |\e[0m        \e[34m// `dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.size` is an integer\e[0m\n\e[31m27 |\e[0m        \e\
    [34m// `dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1` is a boolean\e\
    [0m\n\e[31m28 |\e[0m        \e[34m// `dict.keys.toList.map(x => x.toUpperCase).toSet.size\
    \ == 1 && dict.keys.toList.map(x => x.toUpperCase).toSet.head == dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.head.toUpperCase` is a boolean\e[0m\n\e[31m29 |\e[0m\
    \        \e[34m// `dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1 &&\
    \ dict.keys.toList.map(x => x.toUpperCase).toSet.head == dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.head.toUpperCase || dict.keys.toList.map(x => x.toLowerCase).toSet.size\
    \ == 1 && dict.keys.toList.map(x => x.toLowerCase).toSet.head == dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.head.toLowerCase` is a boolean\e[0m\n\e[31m30 |\e[0m\
    \        \e[34m// `dict.keys.toList.map(x => x.toUpperCase).toS"
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // TODO: Implement this function\n        false\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf570isq2.scala:23)\n\tat Problem.main(tmpf570isq2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        if (lower || upper) true else false\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpupom9vkh.scala:31)\n\tat Problem.main(tmpupom9vkh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        dict.keys.forall(x\
    \ => x.toLowerCase == x) || dict.keys.forall(x => x.toUpperCase == x)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6l5qwsbc.scala:25)\n\tat Problem.main(tmp6l5qwsbc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800118
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (i <- dict.keys) {\n            if (i.toLowerCase()\
    \ != i) lower = false\n            if (i.toUpperCase() != i) upper = false\n \
    \       }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp48lk3yp9.scala:31)\n\tat Problem.main(tmp48lk3yp9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        return (lower || upper)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp133eaegr.scala:31)\n\tat Problem.main(tmp133eaegr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) false\n        else {\n           \
    \ val keys = dict.keys.toList\n            val lower = keys.filter(x => x.toLowerCase\
    \ == x)\n            val upper = keys.filter(x => x.toUpperCase == x)\n      \
    \      if (lower.length == keys.length || upper.length == keys.length) true\n\
    \            else false\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6qyfq2r9.scala:31)\n\tat Problem.main(tmp6qyfq2r9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // TODO: Implement this function\n        return false\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmq1a7vm7.scala:23)\n\tat Problem.main(tmpmq1a7vm7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Your code here\n        return false\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppghz5dwk.scala:23)\n\tat Problem.main(tmppghz5dwk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800100
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        if (dict.isEmpty) return false\n        val isLower =\
    \ dict.keys.head.toLowerCase == dict.keys.head\n        dict.keys.forall(k =>\
    \ (k.toLowerCase == k) == isLower)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyc1va9zg.scala:26)\n\tat Problem.main(tmpyc1va9zg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            lower\
    \ = lower && key.toLowerCase == key\n            upper = upper && key.toUpperCase\
    \ == key\n        }\n        lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp61ycu20.scala:31)\n\tat Problem.main(tmpp61ycu20.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase\
    \ != key) lower = false\n            if (key.toUpperCase != key) upper = false\n\
    \        }\n        return lower || upper\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvz1c_n9m.scala:31)\n\tat Problem.main(tmpvz1c_n9m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800122
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill Up this function body\n        // `dict` is a\
    \ dictionary of type Map[String,String]\n        // `dict.keys` is a collection\
    \ of type Iterable[String]\n        // `dict.keys.toList` is a collection of type\
    \ List[String]\n        // `dict.keys.toList.map(x => x.toUpperCase)` is a collection\
    \ of type List[String]\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet`\
    \ is a collection of type Set[String]\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size`\
    \ is an integer\n        // `dict.keys.toList.map(x => x.toLowerCase).toSet.size`\
    \ is an integer\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size\
    \ == 1` is a boolean\n        // `dict.keys.toList.map(x => x.toLowerCase).toSet.size\
    \ == 1` is a boolean\n        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size\
    \ == 1 || dict.keys.toList.map(x => x.toLowerCase).toSet.size == 1` is a boolean\n\
    \        // `dict.keys.toList.map(x => x.toUpperCase).toSet.size == 1 || dict.keys.toList.map(x\
    \ => x.toLowerCase).toSet.size == 1 && dict.size > 0` is a boolean\n        dict.keys.toList.map(x\
    \ => x.toUpperCase).toSet.size == 1 || dict.keys.toList.map(x => x.toLowerCase).toSet.size\
    \ == 1 && dict.size > 0\n    }\n    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppf3bysl4.scala:34)\n\tat Problem.main(tmppf3bysl4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        if (dict.isEmpty) false\n\
    \        else {\n            val keys = dict.keys.toList\n            val lowerCase\
    \ = keys.filter(x => x.toLowerCase == x)\n            val upperCase = keys.filter(x\
    \ => x.toUpperCase == x)\n            if (lowerCase.length == keys.length || upperCase.length\
    \ == keys.length) true\n            else false\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"\
    pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplysq2ejg.scala:32)\n\tat Problem.main(tmplysq2ejg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800133
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        lower || upper\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi0tqc31.scala:31)\n\tat Problem.main(tmpwi0tqc31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        return false\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjb6a5o83.scala:23)\n\tat Problem.main(tmpjb6a5o83.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4e2vgq_.scala:31)\n\tat Problem.main(tmpt4e2vgq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for ((k,v) <- dict) {\n            if (k.toLowerCase\
    \ != k) lower = false\n            if (k.toUpperCase != k) upper = false\n   \
    \     }\n        lower || upper\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\" ->\
    \ \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"p\"\
    \ -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwi0tqc31.scala:31)\n\tat Problem.main(tmpwi0tqc31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800088
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        var lowerCase = true\n        var upperCase = true\n\
    \        for (key <- dict.keys) {\n            if (key.toLowerCase != key) lowerCase\
    \ = false\n            if (key.toUpperCase != key) upperCase = false\n       \
    \ }\n        return lowerCase || upperCase\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"\
    b\" -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpc4m3_kl9.scala:30)\n\tat Problem.main(tmpc4m3_kl9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800134
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a dictionary, return True if all keys are strings in lower \n\
    \    // case or all keys are strings in upper case, else return False.\n    //\
    \ The function should return False is the given dictionary is empty.\n    // Examples:\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", \"b\" -> \"\
    banana\")))\n    // (true)\n    // >>> checkDictCase((Map[String,String](\"a\"\
    \ -> \"apple\", \"A\" -> \"banana\", \"B\" -> \"banana\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"a\" -> \"apple\", 8l -> \"banana\"\
    , \"a\" -> \"apple\")))\n    // (false)\n    // >>> checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\")))\n    // (false)\n\
    \    // >>> checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\")))\n    // (true)\n    def checkDictCase(dict : Map[String,String])\
    \ : Boolean = {\n        // Fill in the code here\n        var lower = true\n\
    \        var upper = true\n        for (key <- dict.keys) {\n            if (key.toLowerCase()\
    \ != key) lower = false\n            if (key.toUpperCase() != key) upper = false\n\
    \        }\n        lower || upper\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"b\"\
    \ -> \"banana\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"\
    p\" -> \"pineapple\", \"A\" -> \"banana\", \"B\" -> \"banana\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"p\" -> \"pineapple\", \"5\" ->\
    \ \"banana\", \"a\" -> \"apple\"))) == (false));\n    assert(checkDictCase((Map[String,String](\"\
    Name\" -> \"John\", \"Age\" -> \"36\", \"City\" -> \"Houston\"))) == (false));\n\
    \    assert(checkDictCase((Map[String,String](\"STATE\" -> \"NC\", \"ZIP\" ->\
    \ \"12345\"))) == (true));\n    assert(checkDictCase((Map[String,String](\"fruit\"\
    \ -> \"Orange\", \"taste\" -> \"Sweet\"))) == (true));\n    assert(checkDictCase((Map[String,String]()))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpt4e2vgq_.scala:31)\n\tat Problem.main(tmpt4e2vgq_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659800095
