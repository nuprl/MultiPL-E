language: scala
name: HumanEval_5_intersperse
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) List[Long]()\n        else if (numbers.length\
    \ == 1) numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], delimeter : Long, result\
    \ : List[Long]) : List[Long] = {\n            if (numbers.length == 0) result\n\
    \            else if (numbers.length == 1) result ::: List(numbers(0))\n     \
    \       else intersperseHelper(numbers.tail, delimeter, result ::: List(numbers(0),\
    \ delimeter))\n        }\n        intersperseHelper(numbers, delimeter, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], delimeter : Long, result\
    \ : List[Long]) : List[Long] = {\n            if (numbers.length <= 1) result\
    \ ::: numbers\n            else intersperseHelper(numbers.tail, delimeter, result\
    \ ::: List(numbers.head, delimeter))\n        }\n        intersperseHelper(numbers,\
    \ delimeter, List[Long]())\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result = result\
    \ :+ numbers(i)\n            result = result :+ delimeter\n        }\n       \
    \ result = result :+ numbers(numbers.length - 1)\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return List[Long](numbers(0)) ++ List[Long](delimeter)\
    \ ++ intersperse(numbers.slice(1, numbers.length), delimeter)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n    \
    \        result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = new ListBuffer[Long]\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            result += numbers(i)\n       \
    \     result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result = result\
    \ :+ numbers(i) :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else {\n            val (first,\
    \ second) = numbers.splitAt(1)\n            first ::: (delimeter :: intersperse(second,\
    \ delimeter))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = new ListBuffer[Long]\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            result += numbers(i)\n       \
    \     result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) List[Long]()\n        else if (numbers.length\
    \ == 1) numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return List[Long](numbers(0), delimeter) ::: intersperse(numbers.slice(1,\
    \ numbers.length), delimeter)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        var result : List[Long] = List[Long]()\n        for (i <- 0 until numbers.length)\
    \ {\n            result = result :+ numbers(i)\n            if (i != numbers.length\
    \ - 1) result = result :+ delimeter\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result = result\
    \ :+ numbers(i)\n            result = result :+ delimeter\n        }\n       \
    \ result = result :+ numbers(numbers.length - 1)\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result = result\
    \ :+ numbers(i) :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse(numbers : List[Long], delimeter : Long, result : List[Long])\
    \ : List[Long] = {\n            numbers match {\n                case Nil => result\n\
    \                case head :: Nil => result ::: List(head)\n                case\
    \ head :: tail => intersperse(tail, delimeter, result ::: List(head, delimeter))\n\
    \            }\n        }\n        intersperse(numbers, delimeter, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        return (List[Long](numbers(0)) ::: List[Long](delimeter)\
    \ ::: intersperse(numbers.slice(1, numbers.length), delimeter))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x :: Nil\
    \ => x :: Nil\n            case x :: xs => x :: delimeter :: intersperse(xs, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = ListBuffer[Long]()\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            result += numbers(i)\n          \
    \  result += delimeter\n        }\n        result += numbers(numbers.length -\
    \ 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        val result = new ListBuffer[Long]\n        result\
    \ += numbers(0)\n        for (i <- 1 until numbers.length) {\n            result\
    \ += delimeter\n            result += numbers(i)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result = result\
    \ :+ numbers(i)\n            result = result :+ delimeter\n        }\n       \
    \ result = result :+ numbers(numbers.length - 1)\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return List[Long](numbers(0)) ++ List[Long](delimeter)\
    \ ++ intersperse(numbers.slice(1, numbers.length), delimeter)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], delimeter : Long, result\
    \ : List[Long]) : List[Long] = {\n            if (numbers.length == 0) result\n\
    \            else if (numbers.length == 1) result ::: List(numbers(0))\n     \
    \       else intersperseHelper(numbers.tail, delimeter, result ::: List(numbers(0),\
    \ delimeter))\n        }\n        intersperseHelper(numbers, delimeter, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else {\n            val (first,\
    \ rest) = (numbers.head, numbers.tail)\n            first :: delimeter :: intersperse(rest,\
    \ delimeter)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        return List(numbers(0)) ++ List(delimeter) ++ intersperse(numbers.slice(1,\
    \ numbers.length), delimeter)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = new ListBuffer[Long]\n        result\
    \ += numbers(0)\n        for (i <- 1 until numbers.length) {\n            result\
    \ += delimeter\n            result += numbers(i)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], delimeter : Long, result\
    \ : List[Long]) : List[Long] = {\n            if (numbers.length == 0) result\n\
    \            else if (numbers.length == 1) result ::: List(numbers(0))\n     \
    \       else intersperseHelper(numbers.tail, delimeter, result ::: List(numbers(0),\
    \ delimeter))\n        }\n        intersperseHelper(numbers, delimeter, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) numbers\n        else if (numbers.tail.isEmpty)\
    \ numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], delimeter : Long, result\
    \ : List[Long]) : List[Long] = {\n            if (numbers.length == 0) result\n\
    \            else if (numbers.length == 1) result ::: List(numbers(0))\n     \
    \       else intersperseHelper(numbers.tail, delimeter, result ::: List(numbers(0),\
    \ delimeter))\n        }\n        intersperseHelper(numbers, delimeter, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result = result\
    \ :+ numbers(i)\n            result = result :+ delimeter\n        }\n       \
    \ result = result :+ numbers(numbers.length - 1)\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result = result\
    \ :+ numbers(i)\n            result = result :+ delimeter\n        }\n       \
    \ result = result :+ numbers(numbers.length - 1)\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        result = result\
    \ :+ numbers(0)\n        for (i <- 1 until numbers.length) {\n            result\
    \ = result :+ delimeter\n            result = result :+ numbers(i)\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) result = result :+ numbers(i) :+\
    \ delimeter\n        result = result :+ numbers(numbers.length - 1)\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) List[Long]()\n        else if (numbers.tail.isEmpty)\
    \ numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) numbers\n        else if (numbers.length ==\
    \ 1) numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = new ListBuffer[Long]\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            result += numbers(i)\n       \
    \     result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.isEmpty) List[Long]()\n        else if (numbers.tail.isEmpty)\
    \ numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        else if (numbers.length\
    \ == 1) return numbers\n        else return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], delimeter : Long, result\
    \ : List[Long]) : List[Long] = {\n            if (numbers.length == 0) result\n\
    \            else if (numbers.length == 1) result ::: List(numbers(0))\n     \
    \       else intersperseHelper(numbers.tail, delimeter, result ::: List(numbers(0),\
    \ delimeter))\n        }\n        intersperseHelper(numbers, delimeter, List[Long]())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = ListBuffer[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n\
    \            result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) {\n            return numbers\n        }\n \
    \       else if (numbers.length == 1) {\n            return numbers\n        }\n\
    \        else {\n            return List(numbers(0)) ++ List(delimeter) ++ intersperse(numbers.slice(1,\
    \ numbers.length), delimeter)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse0(numbers : List[Long], delimeter : Long, acc : List[Long])\
    \ : List[Long] = {\n            numbers match {\n                case Nil => acc\n\
    \                case x :: Nil => acc ::: List(x)\n                case x :: xs\
    \ => intersperse0(xs, delimeter, acc ::: List(x, delimeter))\n            }\n\
    \        }\n        intersperse0(numbers, delimeter, List[Long]())\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = new ListBuffer[Long]\n        result\
    \ += numbers(0)\n        for (i <- 1 until numbers.length) {\n            result\
    \ += delimeter\n            result += numbers(i)\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n    \
    \        result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return List[Long](numbers(0)) ++ List[Long](delimeter)\
    \ ++ intersperse(numbers.slice(1, numbers.length), delimeter)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        result = result\
    \ :+ numbers(0)\n        for (i <- 1 until numbers.length) {\n            result\
    \ = result :+ delimeter\n            result = result :+ numbers(i)\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = new ListBuffer[Long]\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            result += numbers(i)\n       \
    \     result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) numbers\n        else if (numbers.length ==\
    \ 1) numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) {\n            return numbers\n        }\n \
    \       if (numbers.length == 1) {\n            return numbers\n        }\n  \
    \      var result : List[Long] = List[Long]()\n        for (i <- 0 until numbers.length\
    \ - 1) {\n            result = result :+ numbers(i)\n            result = result\
    \ :+ delimeter\n        }\n        result = result :+ numbers(numbers.length -\
    \ 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) result = result :+ numbers(i) :+\
    \ delimeter\n        result = result :+ numbers(numbers.length - 1)\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        else return List(numbers(0))\
    \ ++ List(delimeter) ++ intersperse(numbers.slice(1, numbers.length), delimeter)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw0783ta1.scala:15)\n\tat Problem.main(tmpw0783ta1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) List[Long]()\n        else if (numbers.length\
    \ == 1) numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        val (first, rest) = (numbers.head, numbers.tail)\n\
    \        return first :: delimeter :: intersperse(rest, delimeter)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        else if (numbers.length\
    \ == 1) return numbers\n        else return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = new ListBuffer[Long]\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            result += numbers(i)\n       \
    \     result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = ListBuffer[Long]()\n        for (i <-\
    \ 0 until numbers.length - 1) {\n            result += numbers(i)\n          \
    \  result += delimeter\n        }\n        result += numbers(numbers.length -\
    \ 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n    \
    \        result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperseHelper(numbers : List[Long], delimeter : Long, result\
    \ : List[Long]) : List[Long] = {\n            if (numbers.length <= 1) result\
    \ ::: numbers\n            else intersperseHelper(numbers.tail, delimeter, result\
    \ ::: List(numbers.head, delimeter))\n        }\n        intersperseHelper(numbers,\
    \ delimeter, List[Long]())\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793914
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n    \
    \        result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        val result = new ListBuffer[Long]\n        result\
    \ += numbers(0)\n        for (i <- 1 until numbers.length) {\n            result\
    \ += delimeter\n            result += numbers(i)\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result = result\
    \ :+ numbers(i)\n            result = result :+ delimeter\n        }\n       \
    \ result = result :+ numbers(numbers.length - 1)\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        var result = List[Long]()\n\
    \        for (i <- 0 until numbers.length - 1) {\n            result = result\
    \ :+ numbers(i)\n            result = result :+ delimeter\n        }\n       \
    \ result = result :+ numbers(numbers.length - 1)\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x :: Nil\
    \ => List(x)\n            case x :: xs => x :: delimeter :: intersperse(xs, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        numbers match {\n            case Nil => Nil\n            case x :: Nil\
    \ => List(x)\n            case x :: xs => x :: delimeter :: intersperse(xs, delimeter)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) numbers\n        else if (numbers.length ==\
    \ 1) numbers\n        else numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        val result = new ListBuffer[Long]\n        for\
    \ (i <- 0 until numbers.length - 1) {\n            result += numbers(i)\n    \
    \        result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = new ListBuffer[Long]\n        result\
    \ += numbers(0)\n        for (i <- 1 until numbers.length) {\n            result\
    \ += delimeter\n            result += numbers(i)\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return numbers.head :: delimeter :: intersperse(numbers.tail,\
    \ delimeter)\n    }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        return List[Long](numbers(0)) ++ List[Long](delimeter)\
    \ ++ intersperse(numbers.slice(1, numbers.length), delimeter)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = new ListBuffer[Long]\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            result += numbers(i)\n       \
    \     result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        val result = new ListBuffer[Long]\n        for (i\
    \ <- 0 until numbers.length - 1) {\n            result += numbers(i)\n       \
    \     result += delimeter\n        }\n        result += numbers(numbers.length\
    \ - 1)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793832
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        def intersperse0(numbers : List[Long], delimeter : Long, result : List[Long])\
    \ : List[Long] = {\n            numbers match {\n                case Nil => result\n\
    \                case x :: Nil => result ::: List(x)\n                case x ::\
    \ xs => intersperse0(xs, delimeter, result ::: List(x, delimeter))\n         \
    \   }\n        }\n        intersperse0(numbers, delimeter, List[Long]())\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(intersperse((List[Long]()),\
    \ (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793915
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length <= 1) numbers\n        else numbers.head :: delimeter\
    \ :: intersperse(numbers.tail, delimeter)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return List[Long]()\n        if (numbers.length\
    \ == 1) return numbers\n        var result = List[Long]()\n        for (i <- 0\
    \ until numbers.length - 1) {\n            result = result :+ numbers(i)\n   \
    \         result = result :+ delimeter\n        }\n        result = result :+\
    \ numbers(numbers.length - 1)\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n\
    \    assert(intersperse((List[Long](5l.toLong, 6l.toLong, 3l.toLong, 2l.toLong)),\
    \ (8l)).equals((List[Long](5l.toLong, 8l.toLong, 6l.toLong, 8l.toLong, 3l.toLong,\
    \ 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong, 2l.toLong,\
    \ 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793823
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n    // >>> intersperse((List[Long]()), (4l))\n    //\
    \ (List[Long]())\n    // >>> intersperse((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
    \ (4l))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 4l.toLong, 3l.toLong))\n\
    \    def intersperse(numbers : List[Long], delimeter : Long) : List[Long] = {\n\
    \        if (numbers.length == 0) return numbers\n        if (numbers.length ==\
    \ 1) return numbers\n        var result = List[Long]()\n        for (i <- 0 until\
    \ numbers.length - 1) {\n            result = result :+ numbers(i)\n         \
    \   result = result :+ delimeter\n        }\n        result = result :+ numbers(numbers.length\
    \ - 1)\n        return result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(intersperse((List[Long]()), (7l)).equals((List[Long]())));\n    assert(intersperse((List[Long](5l.toLong,\
    \ 6l.toLong, 3l.toLong, 2l.toLong)), (8l)).equals((List[Long](5l.toLong, 8l.toLong,\
    \ 6l.toLong, 8l.toLong, 3l.toLong, 8l.toLong, 2l.toLong))));\n    assert(intersperse((List[Long](2l.toLong,\
    \ 2l.toLong, 2l.toLong)), (2l)).equals((List[Long](2l.toLong, 2l.toLong, 2l.toLong,\
    \ 2l.toLong, 2l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659793824
