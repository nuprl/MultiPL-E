name: HumanEval_157_right_angle_triangle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return True if the three\n\
  \    // sides form a right-angled triangle, False otherwise.\n    // A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n\
  \    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n\
  \    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    def rightAngleTriangle(a\
  \ : Long, b : Long, c : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
  \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
  \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) ==\
  \ (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
  \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) ==\
  \ (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n   \
  \ assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (10l)) == (false));\n    }\n\n}\n"
completions: ["        val x = List(a, b, c)\n        val y = x.sorted\n        if\
    \ (y(0) * y(0) + y(1) * y(1) == y(2) * y(2)) true else false", "        val sides\
    \ = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) ==\
    \ sides(2) * sides(2)", "        if (a > b && a > c) {\n            if (a * a\
    \ == b * b + c * c) true else false\n        } else if (b > a && b > c) {\n  \
    \          if (b * b == a * a + c * c) true else false\n        } else {\n   \
    \         if (c * c == a * a + b * b) true else false\n        }", "        val\
    \ sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n       \
    \ val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n       \
    \ a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val max =\
    \ sides(2)\n        val min = sides(0)\n        val mid = sides(1)\n        max\
    \ * max == min * min + mid * mid", "        val sides = List(a, b, c).sorted\n\
    \        val x = sides(0)\n        val y = sides(1)\n        val z = sides(2)\n\
    \        if (x + y <= z) return false\n        val x2 = x * x\n        val y2\
    \ = y * y\n        val z2 = z * z\n        if (x2 + y2 == z2) return true\n  \
    \      return false", "        val sides = List(a, b, c).sorted\n        val (x,\
    \ y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", " \
    \       // Fill Up this function body\n        // `a`, `b`, `c` are the lengths\
    \ of the three sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) *\
    \ sides(1)\n        val c2 = sides(2) * sides(2)\n        if (a2 + b2 == c2) true\
    \ else false", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = Array(a, b, c)\n  \
    \      val sorted = sides.sortWith(_ < _)\n        val hypotenuse = sorted(2)\n\
    \        val cathetus1 = sorted(1)\n        val cathetus2 = sorted(0)\n      \
    \  val squareHypotenuse = hypotenuse * hypotenuse\n        val squareCathetus1\
    \ = cathetus1 * cathetus1\n        val squareCathetus2 = cathetus2 * cathetus2\n\
    \        return squareHypotenuse == squareCathetus1 + squareCathetus2", "    \
    \    val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n   \
    \     val catheti = sides(0) + sides(1)\n        hypotenuse * hypotenuse == catheti\
    \ * catheti", "        // Your code here\n        if (a > b && a > c) {\n    \
    \        if (a*a == b*b + c*c) true else false\n        } else if (b > a && b\
    \ > c) {\n            if (b*b == a*a + c*c) true else false\n        } else {\n\
    \            if (c*c == a*a + b*b) true else false\n        }", "        // Fill\
    \ in the code here\n        return false", "        val sides = List(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", " \
    \       val sides = Array(a, b, c)\n        val max = sides.max\n        val maxIndex\
    \ = sides.indexOf(max)\n        val otherSides = sides.filter(_ != max)\n    \
    \    val otherSidesSum = otherSides.sum\n        max == otherSidesSum", "    \
    \    val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val hypotenuse = sides(2)\n        val catheti = sides(0)\
    \ + sides(1)\n        hypotenuse * hypotenuse == catheti * catheti", "       \
    \ if (a > b && a > c) {\n            if (a * a == b * b + c * c) return true\n\
    \        } else if (b > a && b > c) {\n            if (b * b == a * a + c * c)\
    \ return true\n        } else if (c > a && c > b) {\n            if (c * c ==\
    \ a * a + b * b) return true\n        }\n        return false", "        // Fill\
    \ up this function body\n        // `a`, `b` and `c` are the lengths of the three\
    \ sides of a triangle\n        // You have to return True if the three sides form\
    \ a right-angled triangle,\n        // False otherwise\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) return true\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) return true\n\
    \        } else if (c > a && c > b) {\n            if (c * c == a * a + b * b)\
    \ return true\n        }\n        return false", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the lengths of the sides of the triangle\n\
    \        // return true if the triangle is right-angled, false otherwise\n   \
    \     val sides = List(a, b, c)\n        val maxSide = sides.max\n        val\
    \ maxSideIndex = sides.indexOf(maxSide)\n        val otherSides = sides.take(maxSideIndex)\
    \ ++ sides.drop(maxSideIndex + 1)\n        val otherSidesSum = otherSides.sum\n\
    \        val maxSideSquare = maxSide * maxSide\n        maxSideSquare == otherSidesSum\
    \ * otherSidesSum"]
stop_tokens:
- "\n    }\n"
