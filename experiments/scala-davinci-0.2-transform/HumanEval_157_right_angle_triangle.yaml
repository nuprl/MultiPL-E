name: HumanEval_157_right_angle_triangle
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given the lengths of the three sides of a triangle. Return True if the three\n\
  \    // sides form a right-angled triangle, False otherwise.\n    // A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n    // 90 degree.\n\
  \    // Example:\n    // >>> rightAngleTriangle((3l), (4l), (5l))\n    // (true)\n\
  \    // >>> rightAngleTriangle((1l), (2l), (3l))\n    // (false)\n    def rightAngleTriangle(a\
  \ : Long, b : Long, c : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(rightAngleTriangle((3l),\
  \ (4l), (5l)) == (true));\n    assert(rightAngleTriangle((1l), (2l), (3l)) == (false));\n\
  \    assert(rightAngleTriangle((10l), (6l), (8l)) == (true));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (2l)) == (false));\n    assert(rightAngleTriangle((7l), (24l), (25l)) ==\
  \ (true));\n    assert(rightAngleTriangle((10l), (5l), (7l)) == (false));\n    assert(rightAngleTriangle((5l),\
  \ (12l), (13l)) == (true));\n    assert(rightAngleTriangle((15l), (8l), (17l)) ==\
  \ (true));\n    assert(rightAngleTriangle((48l), (55l), (73l)) == (true));\n   \
  \ assert(rightAngleTriangle((1l), (1l), (1l)) == (false));\n    assert(rightAngleTriangle((2l),\
  \ (2l), (10l)) == (false));\n    }\n\n}\n"
completions: ["        val x = List(a, b, c)\n        val y = x.sorted\n        if\
    \ (y(0) * y(0) + y(1) * y(1) == y(2) * y(2)) true else false", "        val sides\
    \ = List(a, b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) ==\
    \ sides(2) * sides(2)", "        if (a > b && a > c) {\n            if (a * a\
    \ == b * b + c * c) true else false\n        } else if (b > a && b > c) {\n  \
    \          if (b * b == a * a + c * c) true else false\n        } else {\n   \
    \         if (c * c == a * a + b * b) true else false\n        }", "        val\
    \ sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n       \
    \ val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n       \
    \ a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n        val max =\
    \ sides(2)\n        val min = sides(0)\n        val mid = sides(1)\n        max\
    \ * max == min * min + mid * mid", "        val sides = List(a, b, c).sorted\n\
    \        val x = sides(0)\n        val y = sides(1)\n        val z = sides(2)\n\
    \        if (x + y <= z) return false\n        val x2 = x * x\n        val y2\
    \ = y * y\n        val z2 = z * z\n        if (x2 + y2 == z2) return true\n  \
    \      return false", "        val sides = List(a, b, c).sorted\n        val (x,\
    \ y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", " \
    \       // Fill Up this function body\n        // `a`, `b`, `c` are the lengths\
    \ of the three sides of a triangle\n        // return true if the three sides\
    \ form a right-angled triangle, false otherwise\n        val sides = List(a, b,\
    \ c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) *\
    \ sides(1)\n        val c2 = sides(2) * sides(2)\n        if (a2 + b2 == c2) true\
    \ else false", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = Array(a, b, c)\n  \
    \      val sorted = sides.sortWith(_ < _)\n        val hypotenuse = sorted(2)\n\
    \        val cathetus1 = sorted(1)\n        val cathetus2 = sorted(0)\n      \
    \  val squareHypotenuse = hypotenuse * hypotenuse\n        val squareCathetus1\
    \ = cathetus1 * cathetus1\n        val squareCathetus2 = cathetus2 * cathetus2\n\
    \        return squareHypotenuse == squareCathetus1 + squareCathetus2", "    \
    \    val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n   \
    \     val catheti = sides(0) + sides(1)\n        hypotenuse * hypotenuse == catheti\
    \ * catheti", "        // Your code here\n        if (a > b && a > c) {\n    \
    \        if (a*a == b*b + c*c) true else false\n        } else if (b > a && b\
    \ > c) {\n            if (b*b == a*a + c*c) true else false\n        } else {\n\
    \            if (c*c == a*a + b*b) true else false\n        }", "        // Fill\
    \ in the code here\n        return false", "        val sides = List(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", " \
    \       val sides = Array(a, b, c)\n        val max = sides.max\n        val maxIndex\
    \ = sides.indexOf(max)\n        val otherSides = sides.filter(_ != max)\n    \
    \    val otherSidesSum = otherSides.sum\n        max == otherSidesSum", "    \
    \    val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val hypotenuse = sides(2)\n        val catheti = sides(0)\
    \ + sides(1)\n        hypotenuse * hypotenuse == catheti * catheti", "       \
    \ if (a > b && a > c) {\n            if (a * a == b * b + c * c) return true\n\
    \        } else if (b > a && b > c) {\n            if (b * b == a * a + c * c)\
    \ return true\n        } else if (c > a && c > b) {\n            if (c * c ==\
    \ a * a + b * b) return true\n        }\n        return false", "        // Fill\
    \ up this function body\n        // `a`, `b` and `c` are the lengths of the three\
    \ sides of a triangle\n        // You have to return True if the three sides form\
    \ a right-angled triangle,\n        // False otherwise\n        if (a > b && a\
    \ > c) {\n            if (a * a == b * b + c * c) return true\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) return true\n\
    \        } else if (c > a && c > b) {\n            if (c * c == a * a + b * b)\
    \ return true\n        }\n        return false", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the lengths of the sides of the triangle\n\
    \        // return true if the triangle is right-angled, false otherwise\n   \
    \     val sides = List(a, b, c)\n        val maxSide = sides.max\n        val\
    \ maxSideIndex = sides.indexOf(maxSide)\n        val otherSides = sides.take(maxSideIndex)\
    \ ++ sides.drop(maxSideIndex + 1)\n        val otherSidesSum = otherSides.sum\n\
    \        val maxSideSquare = maxSide * maxSide\n        maxSideSquare == otherSidesSum\
    \ * otherSidesSum", "        // Fill Up this function body\n        // `a`, `b`,\
    \ `c` are the lengths of the three sides of a triangle\n        // return true\
    \ if the three sides form a right-angled triangle, false otherwise\n        val\
    \ x = List(a, b, c)\n        val y = x.sorted\n        val z = y(0) * y(0) + y(1)\
    \ * y(1)\n        y(2) * y(2) == z", "        val sides = List(a, b, c).sorted\n\
    \        val (a, b, c) = (sides(0), sides(1), sides(2))\n        a * a + b * b\
    \ == c * c", "        // Fill Up this function body\n        // `a` is the length\
    \ of the side opposite to the right angle\n        // `b` is the length of the\
    \ side opposite to the right angle\n        // `c` is the length of the side opposite\
    \ to the right angle\n        // return true if the three sides form a right-angled\
    \ triangle, false otherwise\n        if (a > b && a > c) {\n            if (a\
    \ * a == b * b + c * c) true else false\n        } else if (b > a && b > c) {\n\
    \            if (b * b == a * a + c * c) true else false\n        } else {\n \
    \           if (c * c == a * a + b * b) true else false\n        }", "       \
    \ val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n      \
    \  val catheti = sides(0) * sides(0) + sides(1) * sides(1)\n        hypotenuse\
    \ * hypotenuse == catheti", "        val sides = List(a, b, c).sorted\n      \
    \  val x = sides(0)\n        val y = sides(1)\n        val z = sides(2)\n    \
    \    x * x + y * y == z * z", "        // Fill Up this function body\n       \
    \ // `a` represents the length of side `a`\n        // `b` represents the length\
    \ of side `b`\n        // `c` represents the length of side `c`\n        // return\
    \ true if the three sides form a right-angled triangle, false otherwise\n    \
    \    val sides = List(a, b, c)\n        val maxSide = sides.max\n        val maxSideIndex\
    \ = sides.indexOf(maxSide)\n        val otherSides = sides.take(maxSideIndex)\
    \ ++ sides.drop(maxSideIndex + 1)\n        val otherSidesSum = otherSides.sum\n\
    \        maxSide * maxSide == otherSidesSum * otherSidesSum", "        val x =\
    \ List(a, b, c)\n        val y = x.sorted\n        y(0) * y(0) + y(1) * y(1) ==\
    \ y(2) * y(2)", "        if (a == 0 || b == 0 || c == 0) return false\n      \
    \  val max = max(a, max(b, c))\n        val min = min(a, min(b, c))\n        val\
    \ mid = a + b + c - max - min\n        if (max * max == mid * mid + min * min)\
    \ return true\n        return false", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        if (x + y < z)\
    \ return false\n        if (x * x + y * y == z * z) return true\n        return\
    \ false", "        // Fill Up this function body\n        // `a`, `b`, `c` are\
    \ the lengths of the three sides of a triangle\n        // return true if the\
    \ three sides form a right-angled triangle, false otherwise\n        val sides\
    \ = Array(a, b, c)\n        val sortedSides = sides.sorted\n        val hyp =\
    \ sortedSides(2)\n        val cat1 = sortedSides(0)\n        val cat2 = sortedSides(1)\n\
    \        val hyp2 = hyp * hyp\n        val cat12 = cat1 * cat1\n        val cat22\
    \ = cat2 * cat2\n        hyp2 == cat12 + cat22", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        val sides = Array(a, b, c)\n        sides.sortWith(_\
    \ > _)\n        val (a, b, c) = (sides(0), sides(1), sides(2))\n        a * a\
    \ == b * b + c * c", "        // Fill Up this function body\n        // `a` `b`\
    \ `c` are the lengths of the sides of the triangle\n        if (a > b && a > c)\
    \ {\n            return (a * a == b * b + c * c)\n        } else if (b > a &&\
    \ b > c) {\n            return (b * b == a * a + c * c)\n        } else {\n  \
    \          return (c * c == a * a + b * b)\n        }", "        // Fill Up this\
    \ function body\n        // `a`, `b`, `c` are the sides of the triangle\n    \
    \    val sides = List(a, b, c)\n        val maxSide = sides.max\n        val otherSides\
    \ = sides.filter(_ != maxSide)\n        val sumOfOtherSides = otherSides.sum\n\
    \        maxSide * maxSide == otherSides(0) * otherSides(0) + otherSides(1) *\
    \ otherSides(1)", '        return (a * a + b * b == c * c)', "        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        return\
    \ a2 + b2 == c2", "        // Fill Up this function body\n        // `a` is the\
    \ length of the side opposite to the right angle\n        // `b` is the length\
    \ of the side adjacent to the right angle\n        // `c` is the length of the\
    \ hypotenuse\n        // `a`^2 + `b`^2 = `c`^2\n        // `a`^2 + `b`^2 - `c`^2\
    \ = 0\n        val a2 = a * a\n        val b2 = b * b\n        val c2 = c * c\n\
    \        if (a2 + b2 - c2 == 0) true else false", "        val l = List(a, b,\
    \ c)\n        val s = l.sorted\n        val (x, y, z) = (s(0), s(1), s(2))\n \
    \       x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n \
    \       val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n        val\
    \ cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1 * cathetus1\
    \ + cathetus2 * cathetus2", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        if (a > b && a >\
    \ c) {\n            if (a * a == b * b + c * c) true else false\n        } else\
    \ if (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }", "        val sides = List(a, b, c).sorted\n        val a2 = sides(0)\
    \ * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2 = sides(2)\
    \ * sides(2)\n        a2 + b2 == c2", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        // Fill\
    \ Up this function body\n        // `a`, `b`, `c` are the lengths of the three\
    \ sides of a triangle.\n        // Return True if the three sides form a right-angled\
    \ triangle, False otherwise.\n        val sides = List(a, b, c).sorted\n     \
    \   val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n     \
    \   val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        // Your code\
    \ here\n        return false", "        // Fill Up this function body\n      \
    \  // `a` `b` `c` are the side lengths of the triangle\n        val list = List(a,\
    \ b, c)\n        val max = list.max\n        val sum = list.sum - max\n      \
    \  max * max == sum * sum", "        val sides = List(a, b, c).sorted\n      \
    \  val hypotenuse = sides(2)\n        val cathetus = sides(1)\n        val base\
    \ = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus + base *\
    \ base", "        val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0),\
    \ sides(1), sides(2))\n        a * a + b * b == c * c", "        // Fill Up this\
    \ function body\n        // `a`, `b`, `c` are the lengths of the three sides of\
    \ a triangle.\n        val sides = List(a, b, c)\n        val max = sides.max\n\
    \        val maxIndex = sides.indexOf(max)\n        val otherSides = sides.filter(_\
    \ != max)\n        val sumOfSquares = otherSides.map(x => x * x).sum\n       \
    \ val maxSquare = max * max\n        sumOfSquares == maxSquare", "        val\
    \ sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        val sorted = List(a, b, c).sorted\n        val (x, y, z)\
    \ = (sorted(0), sorted(1), sorted(2))\n        if (x + y <= z) return false\n\
    \        if (x * x + y * y == z * z) return true\n        return false", "   \
    \     if (a > b && a > c) {\n            if (a * a == b * b + c * c) return true\n\
    \        } else if (b > a && b > c) {\n            if (b * b == a * a + c * c)\
    \ return true\n        } else if (c > a && c > b) {\n            if (c * c ==\
    \ a * a + b * b) return true\n        }\n        return false", "        // Fill\
    \ up this function body\n        // `a`, `b` and `c` are the lengths of the sides\
    \ of a triangle\n        // You have to return True if the three sides form a\
    \ right-angled triangle,\n        // False otherwise\n        // You can access\
    \ the value of a variable by writing the variable name\n        // For example,\
    \ to access the value of `a`, you can write `a`\n        // You can perform arithmetic\
    \ operations on numbers like this:\n        // >>> 1 + 1\n        // (2)\n   \
    \     // >>> 2 * 3\n        // (6)\n        // >>> 5 / 2\n        // (2)\n   \
    \     // >>> 5.0 / 2\n        // (2.5)\n        // >>> 5 / 2.0\n        // (2.5)\n\
    \        // >>> 5.0 / 2.0\n        // (2.5)\n        // You can also perform arithmetic\
    \ operations on variables like this:\n        // >>> a = 1\n        // (1)\n \
    \       // >>> b = 2\n        // (2)\n        // >>> a + b\n        // (3)\n \
    \       // >>> a * b\n        // (2)\n        // >>> a / b\n        // (0)\n \
    \       // >>> a.toFloat / b\n        // (0.5)\n        // >>> a.toFloat / b.toFloat\n\
    \        // (0.5)\n        // You can compare two numbers using the following\
    \ operators:\n        // >>> 1 == 1\n        // (true)\n        // >>> 2 == 1\n\
    \        // (false)\n        // >>> 1 != 1\n        // (false)\n        // >>>\
    \ 2 != 1\n        // (true)\n        // >>> 1 > 1\n        // (false)\n      \
    \  // >>> 1 < 1\n        // (false)\n        // >>> 1 >= 1\n        // (true)\n\
    \        // >>> 1 <= 1\n        // (true)\n        // You can compare two variables\
    \ using the following operators:\n        // >>> a = 1\n        // (1)\n     \
    \   // >>> b = 2\n        // (2)\n        // >>> a == b\n        // (false)\n\
    \        // >>> a != b\n        // (true)\n        // >>> a > b\n        // (false)\n\
    \        // >>>", "        // Fill Up this function body\n        // `a` is the\
    \ length of the side of the triangle opposite to the right angle\n        // `b`\
    \ is the length of the side of the triangle opposite to the right angle\n    \
    \    // `c` is the length of the side of the triangle opposite to the right angle\n\
    \        // Return True if the three sides form a right-angled triangle, False\
    \ otherwise\n        val sides = List(a, b, c).sorted\n        val a = sides(0)\n\
    \        val b = sides(1)\n        val c = sides(2)\n        if (a * a + b * b\
    \ == c * c) true else false", "        val l = List(a, b, c)\n        val max\
    \ = l.max\n        val min = l.min\n        val mid = l.filter(x => x != max &&\
    \ x != min).head\n        val res = pow(max, 2) == pow(min, 2) + pow(mid, 2)\n\
    \        return res", "        val sides = List(a, b, c).sorted\n        val a2\
    \ = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val c2\
    \ = sides(2) * sides(2)\n        if (a2 + b2 == c2) true else false", "      \
    \  // Fill Up this function body\n        // `a` `b` `c` are the sides of the\
    \ triangle\n        val sorted = List(a, b, c).sorted\n        sorted(0) * sorted(0)\
    \ + sorted(1) * sorted(1) == sorted(2) * sorted(2)", "        // Write your code\
    \ here\n        return false", "        val sides = List(a, b, c).sorted\n   \
    \     val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y ==\
    \ z * z", "        val sides = List(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        // Fill Up this function\
    \ body\n        // `a` is the length of the side opposite to the right angle\n\
    \        // `b` is the length of the side opposite to the right angle\n      \
    \  // `c` is the length of the side opposite to the right angle\n        val sides\
    \ = List(a, b, c).sorted\n        val (a, b, c) = (sides(0), sides(1), sides(2))\n\
    \        a * a + b * b == c * c", "        val sides = Array(a, b, c)\n      \
    \  val maxSide = sides.max\n        val maxSideIndex = sides.indexOf(maxSide)\n\
    \        val otherSides = sides.filter(_ != maxSide)\n        val otherSidesSum\
    \ = otherSides.sum\n        otherSidesSum * otherSidesSum == maxSide * maxSide",
  "        // Your code here\n        return false", "        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", " \
    \       val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val (a, b, c) = (sides(0), sides(1), sides(2))\n        a\
    \ * a + b * b == c * c", "        // Fill Up this function body\n        // `a`\
    \ is the length of the side opposite to the right angle\n        // `b` is the\
    \ length of the side opposite to the right angle\n        // `c` is the length\
    \ of the side opposite to the right angle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        sides(0) * sides(0) + sides(1) * sides(1) == sides(2)\
    \ * sides(2)", "        if (a > b && a > c) {\n            if (a * a == b * b\
    \ + c * c) return true\n        } else if (b > a && b > c) {\n            if (b\
    \ * b == a * a + c * c) return true\n        } else if (c > a && c > b) {\n  \
    \          if (c * c == a * a + b * b) return true\n        }\n        return\
    \ false", "        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        // Fill Up this\
    \ function body\n        // `a`, `b`, `c` are the lengths of the three sides of\
    \ a triangle.\n        // Return True if the three sides form a right-angled triangle,\
    \ False otherwise.\n        val sides = List(a, b, c)\n        val maxSide = sides.max\n\
    \        val maxSideIndex = sides.indexOf(maxSide)\n        val otherSides = sides.take(maxSideIndex)\
    \ ++ sides.drop(maxSideIndex + 1)\n        val otherSidesSum = otherSides.sum\n\
    \        maxSide * maxSide == otherSidesSum * otherSidesSum", "        val l =\
    \ List(a, b, c)\n        val max = l.max\n        val min = l.min\n        val\
    \ mid = l.filter(x => x != max && x != min).head\n        if (max * max == min\
    \ * min + mid * mid) true else false", "        val sides = List(a, b, c).sorted\n\
    \        val (a, b, c) = (sides(0), sides(1), sides(2))\n        a * a + b * b\
    \ == c * c", "        val sides = List(a, b, c).sorted\n        val (x, y, z)\
    \ = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "       \
    \ val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n      \
    \  val cathetus1 = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2", "        val\
    \ max = max(a, max(b, c))\n        val sum = a + b + c - max\n        max * max\
    \ == sum * sum", "        if (a > b && a > c) {\n            if (a * a == b *\
    \ b + c * c) return true\n        } else if (b > a && b > c) {\n            if\
    \ (b * b == a * a + c * c) return true\n        } else if (c > a && c > b) {\n\
    \            if (c * c == a * a + b * b) return true\n        }\n        return\
    \ false", "        // Fill Up this function body\n        // `a`, `b`, `c` are\
    \ the lengths of the three sides of a triangle\n        // Return True if the\
    \ three sides form a right-angled triangle, False otherwise\n        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2\
    \ == c2", "        if (a > b && a > c) {\n            if (a * a == b * b + c *\
    \ c) return true\n        } else if (b > a && b > c) {\n            if (b * b\
    \ == a * a + c * c) return true\n        } else if (c > a && c > b) {\n      \
    \      if (c * c == a * a + b * b) return true\n        }\n        return false",
  "        // Fill Up this function body\n        // `a` is the length of the side\
    \ opposite to the right angle.\n        // `b` is the length of the side opposite\
    \ to the right angle.\n        // `c` is the length of the side opposite to the\
    \ right angle.\n        // You can use `pow` function to compute the power of\
    \ a number.\n        // You can use `sqrt` function to compute the square root\
    \ of a number.\n        if (a == 0 || b == 0 || c == 0) return false\n       \
    \ val sides = Array(a, b, c).sorted\n        val a2 = pow(sides(0), 2)\n     \
    \   val b2 = pow(sides(1), 2)\n        val c2 = pow(sides(2), 2)\n        if (a2\
    \ + b2 == c2) true else false", "        val sides = List(a, b, c).sorted\n  \
    \      val hypotenuse = sides(2)\n        val cathetus = sides(1)\n        val\
    \ base = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus + base\
    \ * base", "        val sides = List(a, b, c).sorted\n        val (x, y, z) =\
    \ (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "        val\
    \ sides = List(a, b, c).sorted\n        val max = sides(2)\n        val sum =\
    \ sides.sum\n        val sumWithoutMax = sum - max\n        max * max == sumWithoutMax\
    \ * sumWithoutMax", "        // Fill Up this function body\n        // `a`, `b`,\
    \ `c` are the lengths of the sides of a triangle\n        if (a > b && a > c)\
    \ {\n            if (a * a == b * b + c * c) true else false\n        } else if\
    \ (b > a && b > c) {\n            if (b * b == a * a + c * c) true else false\n\
    \        } else {\n            if (c * c == a * a + b * b) true else false\n \
    \       }", "        if (a <= 0 || b <= 0 || c <= 0) return false\n        val\
    \ sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n\
    \        val x = sides(0)\n        val y = sides(1)\n        val z = sides(2)\n\
    \        x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus = sides(1)\n        val\
    \ base = sides(0)\n        hypotenuse * hypotenuse == cathetus * cathetus + base\
    \ * base", "        // Fill up this function body\n        // `a`, `b` and `c`\
    \ are the lengths of the three sides of a triangle\n        // You have to return\
    \ True if the three sides form a right-angled triangle,\n        // False otherwise\n\
    \        // You can access the value of a variable by writing the variable name\n\
    \        // For example, to access the value of `a`, you can write `a`\n     \
    \   // You can perform mathematical operations on variables by using the\n   \
    \     // mathematical operators\n        // For example, to add `a` and `b`, you\
    \ can write `a + b`\n        // You can compare two values by using the comparison\
    \ operators\n        // For example, to check if `a` is greater than `b`, you\
    \ can write `a > b`\n        // You can check if two values are equal by using\
    \ the equality operator\n        // For example, to check if `a` is equal to `b`,\
    \ you can write `a == b`\n        // You can check if two values are not equal\
    \ by using the inequality operator\n        // For example, to check if `a` is\
    \ not equal to `b`, you can write `a != b`\n        // You can combine two or\
    \ more conditions by using the logical operators\n        // For example, to check\
    \ if `a` is greater than `b` and `b` is greater than `c`,\n        // you can\
    \ write `a > b && b > c`\n        // You can negate a condition by using the negation\
    \ operator\n        // For example, to check if `a` is not greater than `b`, you\
    \ can write `!(a > b)`\n        // You can use parentheses to group conditions\n\
    \        // For example, to check if `a` is greater than `b` or `b` is greater\
    \ than `c`,\n        // you can write `(a > b) || (b > c)`\n        // You can\
    \ use the if-else statement to execute different code depending on\n        //\
    \ the result of a condition\n        // For example, to check if `a` is greater\
    \ than `b`, you can write\n        // if (a > b) {\n        //     // Code to\
    \ execute if `a` is greater than `b`\n        // } else {\n        //     // Code\
    \ to execute if `a` is not greater than", "        val sides = List(a, b, c).sorted\n\
    \        val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n       \
    \ val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1 * cathetus1\
    \ + cathetus2 * cathetus2", "        // Fill Up this function body\n        //\
    \ `a`, `b`, `c` are the lengths of the sides of a triangle\n        // return\
    \ true if the triangle is right-angled, false otherwise\n        val list = List(a,\
    \ b, c)\n        val max = list.max\n        val min = list.min\n        val mid\
    \ = list.filter(x => x != max && x != min).head\n        if (max * max == min\
    \ * min + mid * mid) true else false", "        // Fill Up this function body\n\
    \        // `a`, `b`, `c` are the lengths of the three sides of a triangle.\n\
    \        // Return True if the three sides form a right-angled triangle, False\
    \ otherwise.\n        val sides = List(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the lengths of the three sides of a triangle.\n\
    \        // Return True if the three sides form a right-angled triangle, False\
    \ otherwise.\n        val sides = List(a, b, c).sorted\n        val hypotenuse\
    \ = sides(2)\n        val cathetus = sides(1)\n        val base = sides(0)\n \
    \       hypotenuse * hypotenuse == cathetus * cathetus + base * base", "     \
    \   val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n    \
    \    val cathetus = sides(1)\n        val base = sides(0)\n        hypotenuse\
    \ * hypotenuse == cathetus * cathetus + base * base", "        val sides = Array(a,\
    \ b, c)\n        val max = sides.max\n        val index = sides.indexOf(max)\n\
    \        val otherSides = sides.filter(_ != max)\n        val sum = otherSides.sum\n\
    \        if (sum < max) return false\n        val diff = sum - max\n        if\
    \ (diff == max) return true\n        return false", "        val sides = Array(a,\
    \ b, c)\n        val sorted = sides.sortWith(_ > _)\n        val hypotenuse =\
    \ sorted(0)\n        val cathetus1 = sorted(1)\n        val cathetus2 = sorted(2)\n\
    \        val rightAngle = hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2\
    \ * cathetus2\n        rightAngle", "        val l = List(a, b, c)\n        val\
    \ max = l.max\n        val min = l.min\n        val mid = l.filter(x => x != max\
    \ && x != min).head\n        if (max * max == mid * mid + min * min) true else\
    \ false", "        val sides = List(a, b, c).sorted\n        sides(0) * sides(0)\
    \ + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides = List(a,\
    \ b, c).sorted\n        val (a, b, c) = (sides(0), sides(1), sides(2))\n     \
    \   a * a + b * b == c * c", "        if (a > b && a > c) {\n            if (a\
    \ * a == b * b + c * c) return true\n        } else if (b > a && b > c) {\n  \
    \          if (b * b == a * a + c * c) return true\n        } else if (c > a &&\
    \ c > b) {\n            if (c * c == a * a + b * b) return true\n        }\n \
    \       return false", "        val sides = List(a, b, c).sorted\n        val\
    \ (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z",
  "        val sides = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n \
    \       val catheti = sides(0) * sides(0) + sides(1) * sides(1)\n        hypotenuse\
    \ * hypotenuse == catheti", "        val sides = List(a, b, c).sorted\n      \
    \  val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n      \
    \  val c2 = sides(2) * sides(2)\n        return a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        val hypotenuse = sides(2)\n        val cathetus1\
    \ = sides(1)\n        val cathetus2 = sides(0)\n        hypotenuse * hypotenuse\
    \ == cathetus1 * cathetus1 + cathetus2 * cathetus2", "        val sides = List(a,\
    \ b, c).sorted\n        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n  \
    \      a1 * a1 + b1 * b1 == c1 * c1", "        if (a > b && a > c) {\n       \
    \     if (a * a == b * b + c * c) return true\n        } else if (b > a && b >\
    \ c) {\n            if (b * b == a * a + c * c) return true\n        } else if\
    \ (c > a && c > b) {\n            if (c * c == a * a + b * b) return true\n  \
    \      }\n        return false", "        // Fill up this function body\n    \
    \    // `a`, `b` and `c` are the lengths of the sides of a triangle\n        val\
    \ sides = List(a, b, c)\n        val maxSide = sides.max\n        val otherSides\
    \ = sides.filter(_ != maxSide)\n        val sumOfOtherSides = otherSides.sum\n\
    \        maxSide * maxSide == otherSides(0) * otherSides(0) + otherSides(1) *\
    \ otherSides(1)", "        // Fill Up this function body\n        // `a`, `b`,\
    \ `c` are the lengths of the three sides of a triangle\n        // Return True\
    \ if the three sides form a right-angled triangle, False otherwise\n        val\
    \ sides = List(a, b, c).sorted\n        val c2 = sides(2)\n        val c1 = sides(1)\n\
    \        val c0 = sides(0)\n        c2 * c2 == c1 * c1 + c0 * c0", "        val\
    \ sides = Array(a, b, c)\n        val sorted = sides.sortWith(_ < _)\n       \
    \ val (x, y, z) = (sorted(0), sorted(1), sorted(2))\n        if (x + y <= z) return\
    \ false\n        val (x2, y2, z2) = (x * x, y * y, z * z)\n        if (x2 + y2\
    \ == z2) return true\n        return false", "        val sides = List(a, b, c).sorted\n\
    \        val x = sides(0)\n        val y = sides(1)\n        val z = sides(2)\n\
    \        if (x * x + y * y == z * z) true else false", "        // Fill Up this\
    \ function body\n        // `a`, `b`, `c` are the sides of the triangle\n    \
    \    // return true if the triangle is right-angled, false otherwise\n       \
    \ if (a == 0 || b == 0 || c == 0) return false\n        val sides = List(a, b,\
    \ c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) *\
    \ sides(1)\n        val c2 = sides(2) * sides(2)\n        if (a2 + b2 == c2) true\
    \ else false", "        // Fill Up this function body\n        // `a`, `b`, `c`\
    \ are the lengths of the three sides of a triangle\n        // return true if\
    \ the three sides form a right-angled triangle, false otherwise\n        val sides\
    \ = Array(a, b, c)\n        val max = sides.max\n        val sum = sides.sum -\
    \ max\n        max * max == sum * sum", "        val sides = List(a, b, c).sorted\n\
    \        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 +\
    \ b1 * b1 == c1 * c1", "        val sides = List(a, b, c).sorted\n        val\
    \ a = sides(0)\n        val b = sides(1)\n        val c = sides(2)\n        val\
    \ result = pow(a, 2) + pow(b, 2) == pow(c, 2)\n        return result", "     \
    \   // Fill Up this function body\n        // `a`, `b`, `c` are the lengths of\
    \ the three sides of a triangle\n        // Return true if the three sides form\
    \ a right-angled triangle, False otherwise\n        val x = a * a\n        val\
    \ y = b * b\n        val z = c * c\n        if (x + y == z || x + z == y || y\
    \ + z == x) true else false", "        if (a > b && a > c) {\n            if (a\
    \ * a == b * b + c * c) return true\n        } else if (b > a && b > c) {\n  \
    \          if (b * b == a * a + c * c) return true\n        } else if (c > a &&\
    \ c > b) {\n            if (c * c == a * a + b * b) return true\n        }\n \
    \       return false", "        val sides = List(a, b, c).sorted\n        val\
    \ a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val\
    \ c2 = sides(2) * sides(2)\n        return a2 + b2 == c2", "        val (x, y,\
    \ z) = (a, b, c)\n        val (x2, y2, z2) = (x * x, y * y, z * z)\n        if\
    \ (x2 + y2 == z2 || x2 + z2 == y2 || y2 + z2 == x2) true else false", "      \
    \  // Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle\n        // `b` is the length of the side opposite to the\
    \ right angle\n        // `c` is the length of the side opposite to the right\
    \ angle\n        // Return True if the three sides form a right-angled triangle,\
    \ False otherwise.\n        val sides = List(a, b, c).sorted\n        val (x,\
    \ y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", " \
    \       val max = max(a, max(b, c))\n        val sum = a + b + c - max\n     \
    \   max * max == sum * sum", "        // Fill Up this function body\n        //\
    \ `a` `b` `c` are the lengths of the three sides of a triangle\n        // return\
    \ true if the three sides form a right-angled triangle, False otherwise\n    \
    \    val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z", "        val x = List(a, b, c)\n        val y = x.sorted\n\
    \        val z = y(0) * y(0) + y(1) * y(1)\n        z == y(2) * y(2)", "     \
    \   // Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle\n        // `b` is the length of the side opposite to the\
    \ right angle\n        // `c` is the length of the side opposite to the right\
    \ angle\n        // return true if the three sides form a right-angled triangle,\
    \ false otherwise\n        if (a > b && a > c) {\n            return (a * a ==\
    \ b * b + c * c)\n        } else if (b > a && b > c) {\n            return (b\
    \ * b == a * a + c * c)\n        } else {\n            return (c * c == a * a\
    \ + b * b)\n        }", "        val sides = List(a, b, c).sorted\n        sides(0)\
    \ * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2\
    \ == c2", "        // Fill up this function body\n        // `a`, `b` and `c`\
    \ are the lengths of the three sides of a triangle\n        // You have to return\
    \ True if the three sides form a right-angled triangle,\n        // False otherwise\n\
    \        // You can use the `pow` function from the math library\n        // Example:\n\
    \        // >>> pow(2, 2)\n        // (4)\n        // >>> pow(3, 2)\n        //\
    \ (9)\n        // >>> pow(4, 2)\n        // (16)\n        // >>> pow(5, 2)\n \
    \       // (25)\n        // >>> pow(6, 2)\n        // (36)\n        // >>> pow(7,\
    \ 2)\n        // (49)\n        // >>> pow(8, 2)\n        // (64)\n        // >>>\
    \ pow(9, 2)\n        // (81)\n        // >>> pow(10, 2)\n        // (100)\n  \
    \      // >>> pow(11, 2)\n        // (121)\n        // >>> pow(12, 2)\n      \
    \  // (144)\n        // >>> pow(13, 2)\n        // (169)\n        // >>> pow(14,\
    \ 2)\n        // (196)\n        // >>> pow(15, 2)\n        // (225)\n        //\
    \ >>> pow(16, 2)\n        // (256)\n        // >>> pow(17, 2)\n        // (289)\n\
    \        // >>> pow(18, 2)\n        // (324)\n        // >>> pow(19, 2)\n    \
    \    // (361)\n        // >>> pow(20, 2)\n        // (400)\n        // >>> pow(21,\
    \ 2)\n        // (441)\n        // >>> pow(22, 2)\n        // (484)\n        //\
    \ >>> pow(23, 2)\n        // (529)\n        // >>> pow(24, 2)\n        // (576)\n\
    \        // >>> pow(25, 2)\n        // (625)\n        // >>> pow(26, 2)\n    \
    \    // (676)\n        // >>> pow(27, 2)\n        // (729)\n        // >>> pow(28,\
    \ 2)\n        // (784)\n        // >>>", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        // Fill Up this function body\n        // `a`, `b`, `c`\
    \ are the lengths of the three sides of a triangle\n        // return true if\
    \ the three sides form a right-angled triangle, false otherwise\n        val sides\
    \ = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n\
    \        x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        val sides = Array(a, b, c)\n        sides.sortWith(_ < _)\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        if (x + y <=\
    \ z) return false\n        if (x * x + y * y == z * z) return true\n        return\
    \ false", "        val sides = Array(a, b, c)\n        val maxSide = sides.max\n\
    \        val maxSideIndex = sides.indexOf(maxSide)\n        val otherSides = sides.filter(_\
    \ != maxSide)\n        val otherSidesSum = otherSides.sum\n        otherSidesSum\
    \ * otherSidesSum == maxSide * maxSide", "        val sides = List(a, b, c).sorted\n\
    \        sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", " \
    \       val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        if (a2 + b2 == c2) true else false", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the lengths of the three sides of a triangle.\n\
    \        // Return True if the three sides form a right-angled triangle, False\
    \ otherwise.\n        val sides = List(a, b, c)\n        val maxSide = sides.max\n\
    \        val maxSideIndex = sides.indexOf(maxSide)\n        val otherSides = sides.take(maxSideIndex)\
    \ ++ sides.drop(maxSideIndex + 1)\n        val otherSidesSum = otherSides.sum\n\
    \        maxSide * maxSide == otherSidesSum * otherSidesSum", "        val l =\
    \ List(a, b, c)\n        l.sortWith(_ > _) match {\n            case List(x, y,\
    \ z) => x * x == y * y + z * z\n            case _ => false\n        }", "   \
    \     val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val x = sides(0)\n        val y = sides(1)\n        val z\
    \ = sides(2)\n        if (x + y <= z) return false\n        if (x * x + y * y\
    \ == z * z) return true\n        return false", "        val sides = List(a, b,\
    \ c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x\
    \ * x + y * y == z * z", "        // Fill Up this function body\n        // `a`,\
    \ `b`, `c` are the lengths of the sides of a triangle\n        // return true\
    \ if the triangle is right-angled, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val hypotenuse = sides(2)\n        val catheti = sides(0)\
    \ * sides(1)\n        hypotenuse * hypotenuse == catheti", "        // Your code\
    \ goes here\n        return false", "        // Fill Up this function body\n \
    \       // `a`, `b`, `c` are the lengths of the three sides of a triangle\n  \
    \      // return true if the three sides form a right-angled triangle, false otherwise\n\
    \        if (a == 0 || b == 0 || c == 0) return false\n        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        if (a2 + b2 == c2)\
    \ return true\n        return false", "        val x = a * a\n        val y =\
    \ b * b\n        val z = c * c\n        if (x + y == z || x + z == y || y + z\
    \ == x) true else false", "        // Fill Up this function body\n        // `a`,\
    \ `b`, `c` are the lengths of the three sides of a triangle\n        // return\
    \ true if the three sides form a right-angled triangle, false otherwise\n    \
    \    val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        a2 + b2 == c2", "        val sides = Array(a, b, c)\n        val sortedSides\
    \ = sides.sortWith(_ < _)\n        val hypotenuse = sortedSides(2)\n        val\
    \ cathetus1 = sortedSides(1)\n        val cathetus2 = sortedSides(0)\n       \
    \ hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2 * cathetus2", " \
    \       val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n\
    \        val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n\
    \        return a2 + b2 == c2", "        if (a > b && a > c) {\n            if\
    \ (a * a == b * b + c * c) return true\n        } else if (b > a && b > c) {\n\
    \            if (b * b == a * a + c * c) return true\n        } else if (c > a\
    \ && c > b) {\n            if (c * c == a * a + b * b) return true\n        }\n\
    \        return false", "        val sides = List(a, b, c).sorted\n        val\
    \ a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n        val\
    \ c2 = sides(2) * sides(2)\n        return a2 + b2 == c2", "        val sides\
    \ = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2\
    \ = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2\
    \ == c2", "        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        val sides = List(a,\
    \ b, c).sorted\n        val a2 = sides(0) * sides(0)\n        val b2 = sides(1)\
    \ * sides(1)\n        val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", " \
    \       val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1", "        // Fill\
    \ Up this function body\n        // `a` is the length of the side opposite to\
    \ the right angle\n        // `b` is the length of the side opposite to the right\
    \ angle\n        // `c` is the length of the side opposite to the right angle\n\
    \        if (a > b && a > c) {\n            if (a * a == b * b + c * c) true else\
    \ false\n        } else if (b > a && b > c) {\n            if (b * b == a * a\
    \ + c * c) true else false\n        } else {\n            if (c * c == a * a +\
    \ b * b) true else false\n        }", "        // Fill Up this function body\n\
    \        // `a` is the length of the side opposite to the right angle.\n     \
    \   // `b` is the length of the side opposite to the right angle.\n        //\
    \ `c` is the length of the side opposite to the right angle.\n        val sides\
    \ = List(a, b, c)\n        val hypotenuse = sides.max\n        val catheti = sides.filter(_\
    \ != hypotenuse)\n        val cathetiSum = catheti.sum\n        hypotenuse * hypotenuse\
    \ == catheti(0) * catheti(0) + catheti(1) * catheti(1)", "        // Fill Up this\
    \ function body\n        // `a` is the length of the side opposite to the right\
    \ angle\n        // `b` is the length of the side opposite to the right angle\n\
    \        // `c` is the length of the side opposite to the right angle\n      \
    \  val sides = List(a, b, c).sorted\n        val a = sides(0)\n        val b =\
    \ sides(1)\n        val c = sides(2)\n        a * a + b * b == c * c", "     \
    \   // Fill Up this function body\n        // `a`, `b`, `c` are the lengths of\
    \ the three sides of a triangle\n        // return true if the three sides form\
    \ a right-angled triangle, false otherwise\n        val sides = List(a, b, c).sorted\n\
    \        val hyp = sides(2)\n        val cat1 = sides(0)\n        val cat2 = sides(1)\n\
    \        hyp * hyp == cat1 * cat1 + cat2 * cat2", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        // Your code here\n        return false",
  "        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0), sides(1),\
    \ sides(2))\n        x * x + y * y == z * z", "        val sides = List(a, b,\
    \ c).sorted\n        val hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n\
    \        val cathetus2 = sides(0)\n        hypotenuse * hypotenuse == cathetus1\
    \ * cathetus1 + cathetus2 * cathetus2", "        // Fill up this function body\n\
    \        // `a`, `b` and `c` are the lengths of the three sides of a triangle\n\
    \        // You have to return True if the three sides form a right-angled triangle,\n\
    \        // False otherwise\n        val list = List(a, b, c)\n        val max\
    \ = list.max\n        val min = list.min\n        val mid = list.sum - max - min\n\
    \        max * max == mid * mid + min * min", "        // Fill Up this function\
    \ body\n        // `a`, `b`, `c` are the lengths of the three sides of a triangle\n\
    \        // return true if the three sides form a right-angled triangle, false\
    \ otherwise\n        val sides = List(a, b, c).sorted\n        val (x, y, z) =\
    \ (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "        //\
    \ Fill Up this function body\n        // `a`, `b`, `c` are the lengths of the\
    \ sides of a triangle\n        val sides = List(a, b, c)\n        val maxSide\
    \ = sides.max\n        val otherSides = sides.filter(_ != maxSide)\n        val\
    \ hypotenuse = maxSide\n        val sumOfSquares = otherSides.map(x => x * x).sum\n\
    \        hypotenuse * hypotenuse == sumOfSquares", "        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n     \
    \   sides(0) * sides(0) + sides(1) * sides(1) == sides(2) * sides(2)", "     \
    \   val sides = List(a, b, c).sorted\n        val max = sides(2)\n        val\
    \ sum = sides.sum\n        val max2 = max * max\n        val sum2 = sum * sum\n\
    \        val max2sum2 = max2 + sum2\n        val max2sum2sqrt = sqrt(max2sum2)\n\
    \        max2sum2sqrt == max", '        return (a * a + b * b == c * c)', "  \
    \      // Fill Up this function body\n        // `a` is the length of side `a`\n\
    \        // `b` is the length of side `b`\n        // `c` is the length of side\
    \ `c`\n        // Do not change the function defination...\n        val sides\
    \ = List(a, b, c)\n        val maxSide = sides.max\n        val minSides = sides.filter(_\
    \ != maxSide)\n        val sumOfMinSides = minSides.sum\n        maxSide * maxSide\
    \ == sumOfMinSides * sumOfMinSides", "        val sides = List(a, b, c).sorted\n\
    \        val (x, y, z) = (sides(0), sides(1), sides(2))\n        x * x + y * y\
    \ == z * z", "        val sides = List(a, b, c).sorted\n        val (x, y, z)\
    \ = (sides(0), sides(1), sides(2))\n        x * x + y * y == z * z", "       \
    \ val sides = List(a, b, c).sorted\n        val a2 = sides(0) * sides(0)\n   \
    \     val b2 = sides(1) * sides(1)\n        val c2 = sides(2) * sides(2)\n   \
    \     return a2 + b2 == c2", "        val list = List(a, b, c)\n        val max\
    \ = list.max\n        val sum = list.sum - max\n        max * max == sum * sum",
  "        if (a > b && a > c) {\n            if (a * a == b * b + c * c) return true\n\
    \        } else if (b > a && b > c) {\n            if (b * b == a * a + c * c)\
    \ return true\n        } else if (c > a && c > b) {\n            if (c * c ==\
    \ a * a + b * b) return true\n        }\n        return false", "        if (a\
    \ == 0 || b == 0 || c == 0) return false\n        val sides = List(a, b, c).sorted\n\
    \        val x = sides(0)\n        val y = sides(1)\n        val z = sides(2)\n\
    \        if (x * x + y * y == z * z) return true\n        return false", "   \
    \     val sides = List(a, b, c).sorted\n        val (a, b, c) = (sides(0), sides(1),\
    \ sides(2))\n        if (a + b <= c) return false\n        val c2 = c * c\n  \
    \      val a2 = a * a\n        val b2 = b * b\n        return a2 + b2 == c2",
  "        // Fill Up this function body\n        // `a`, `b`, `c` are the lengths\
    \ of the sides of the triangle\n        // return true if the triangle is right-angled,\
    \ false otherwise\n        val sides = List(a, b, c)\n        val maxSide = sides.max\n\
    \        val maxSideIndex = sides.indexOf(maxSide)\n        val otherSides = sides.take(maxSideIndex)\
    \ ++ sides.drop(maxSideIndex + 1)\n        val otherSidesSum = otherSides.sum\n\
    \        maxSide * maxSide == otherSidesSum * otherSidesSum", "        // Your\
    \ code here\n        return false", "        // Fill up this function body\n \
    \       // `a`, `b` and `c` are the lengths of the three sides of a triangle\n\
    \        // You have to return True if the three sides form a right-angled triangle,\n\
    \        // False otherwise\n        val sides = List(a, b, c)\n        val max\
    \ = sides.max\n        val sum = sides.sum - max\n        max * max == sum * sum",
  "        val l = List(a, b, c)\n        val max = l.max\n        val min = l.min\n\
    \        val mid = l.filter(x => x != max && x != min).head\n        max * max\
    \ == min * min + mid * mid", "        val sides = List(a, b, c).sorted\n     \
    \   val c2 = sides(2)\n        val c1 = sides(1)\n        val c0 = sides(0)\n\
    \        c2 * c2 == c1 * c1 + c0 * c0", "        val sides = List(a, b, c).sorted\n\
    \        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n        a1 * a1 +\
    \ b1 * b1 == c1 * c1", "        val sorted = List(a, b, c).sorted\n        val\
    \ (x, y, z) = (sorted(0), sorted(1), sorted(2))\n        x * x + y * y == z *\
    \ z", "        // Fill Up this function body\n        // `a`, `b`, `c` are the\
    \ lengths of the three sides of a triangle.\n        val sides = List(a, b, c)\n\
    \        val sortedSides = sides.sorted\n        val hypotenuse = sortedSides(2)\n\
    \        val cathetus1 = sortedSides(1)\n        val cathetus2 = sortedSides(0)\n\
    \        val hypotenuseSquared = hypotenuse * hypotenuse\n        val cathetus1Squared\
    \ = cathetus1 * cathetus1\n        val cathetus2Squared = cathetus2 * cathetus2\n\
    \        hypotenuseSquared == cathetus1Squared + cathetus2Squared", "        //\
    \ Your code here\n        return false", "        val sides = List(a, b, c).sorted\n\
    \        val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n\
    \        val c2 = sides(2) * sides(2)\n        return a2 + b2 == c2", "      \
    \  if (a > b && a > c) {\n            if (a * a == b * b + c * c) true else false\n\
    \        } else if (b > a && b > c) {\n            if (b * b == a * a + c * c)\
    \ true else false\n        } else {\n            if (c * c == a * a + b * b) true\
    \ else false\n        }", "        val sides = List(a, b, c).sorted\n        val\
    \ hypotenuse = sides(2)\n        val cathetus1 = sides(1)\n        val cathetus2\
    \ = sides(0)\n        hypotenuse * hypotenuse == cathetus1 * cathetus1 + cathetus2\
    \ * cathetus2", "        // Fill Up this function body\n        // `a`, `b`, `c`\
    \ are the lengths of the sides of a triangle\n        // return true if the three\
    \ sides form a right-angled triangle, false otherwise\n        val sides = List(a,\
    \ b, c).sorted\n        val (x, y, z) = (sides(0), sides(1), sides(2))\n     \
    \   x * x + y * y == z * z", "        val sides = List(a, b, c).sorted\n     \
    \   val a2 = sides(0) * sides(0)\n        val b2 = sides(1) * sides(1)\n     \
    \   val c2 = sides(2) * sides(2)\n        a2 + b2 == c2", "        val sides =\
    \ List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0), sides(1), sides(2))\n\
    \        a1 * a1 + b1 * b1 == c1 * c1", "        // Fill Up this function body\n\
    \        // `a`, `b`, `c` are the lengths of the sides of a triangle\n       \
    \ // return true if the triangle is right-angled, false otherwise\n        val\
    \ sides = List(a, b, c).sorted\n        val c2 = sides(2)\n        val c1 = sides(1)\n\
    \        val c0 = sides(0)\n        if (c2 * c2 == c1 * c1 + c0 * c0) true else\
    \ false", "        val sides = List(a, b, c).sorted\n        val (x, y, z) = (sides(0),\
    \ sides(1), sides(2))\n        x * x + y * y == z * z", "        // Fill Up this\
    \ function body\n        // `a`, `b`, `c` are the lengths of the sides of a triangle\n\
    \        // return true if the three sides form a right-angled triangle, false\
    \ otherwise\n        val sides = List(a, b, c).sorted\n        val x = sides(0)\n\
    \        val y = sides(1)\n        val z = sides(2)\n        x * x + y * y ==\
    \ z * z", "        // Fill Up this function body\n        // `a`, `b`, `c` are\
    \ the lengths of the sides of the triangle\n        // `a`, `b`, `c` are positive\
    \ integers\n        // return True if the three sides form a right-angled triangle,\
    \ False otherwise\n        if (a > 0 && b > 0 && c > 0) {\n            val sides\
    \ = List(a, b, c).sorted\n            val max = sides(2)\n            val sum\
    \ = sides(0) * sides(0) + sides(1) * sides(1)\n            val max2 = max * max\n\
    \            sum == max2\n        } else false", "        val l = List(a, b, c)\n\
    \        val m = l.max\n        val s = l.filter(_ != m).sum\n        m * m ==\
    \ s * s", "        val sorted = List(a, b, c).sorted\n        val (x, y, z) =\
    \ (sorted(0), sorted(1), sorted(2))\n        x * x + y * y == z * z", "      \
    \  // Fill Up this function body\n        // `a` is the length of the side opposite\
    \ to the right angle\n        // `b` is the length of the side opposite to the\
    \ right angle\n        // `c` is the length of the side opposite to the right\
    \ angle\n        // return true if the three sides form a right-angled triangle,\
    \ false otherwise\n        val sides = List(a, b, c).sorted\n        val a = sides(0)\n\
    \        val b = sides(1)\n        val c = sides(2)\n        a * a + b * b ==\
    \ c * c", "        if (a > b && a > c) {\n            if (a * a == b * b + c *\
    \ c) return true\n        } else if (b > a && b > c) {\n            if (b * b\
    \ == a * a + c * c) return true\n        } else if (c > a && c > b) {\n      \
    \      if (c * c == a * a + b * b) return true\n        }\n        return false",
  "        val sides = List(a, b, c).sorted\n        val (a1, b1, c1) = (sides(0),\
    \ sides(1), sides(2))\n        a1 * a1 + b1 * b1 == c1 * c1", "        if (a >\
    \ b && a > c) {\n            if (a * a == b * b + c * c) true else false\n   \
    \     } else if (b > a && b > c) {\n            if (b * b == a * a + c * c) true\
    \ else false\n        } else {\n            if (c * c == a * a + b * b) true else\
    \ false\n        }"]
stop_tokens:
- "\n    }\n"
