name: HumanEval_22_filter_integers
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Filter given list of any python values only for integers\n    // >>> filterIntegers((List[Any](\"\
  a\", 3.14f, 5l)))\n    // (List[Long](5l.toLong))\n    // >>> filterIntegers((List[Any](1l,\
  \ 2l, 3l, \"abc\", Map[Long,Long](), List[Long]())))\n    // (List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong))\n    def filterIntegers(values : List[Any]) : List[Long]\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(filterIntegers((List[Any]())).equals((List[Long]())));\n\
  \    assert(filterIntegers((List[Any](4l, Map[Long,Long](), List[Long](), 23.2f,\
  \ 9l, \"adasd\"))).equals((List[Long](4l.toLong, 9l.toLong))));\n    assert(filterIntegers((List[Any](3l,\
  \ \"c\", 3l, 3l, \"a\", \"b\"))).equals((List[Long](3l.toLong, 3l.toLong, 3l.toLong))));\n\
  \    }\n\n}\n"
completions: ['        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        var result : List[Long] = List[Long]()\n        for (value <- values) {\n\
    \            value match {\n                case i : Long => result = result :+\
    \ i\n                case _ =>\n            }\n        }\n        return result",
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(v => v.isInstanceOf[Long]).map(v => v.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        var result\
    \ : List[Long] = List()\n        for (value <- values) {\n            value match\
    \ {\n                case i : Long => result = result :+ i\n                case\
    \ _ =>\n            }\n        }\n        return result", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        return values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        var result\
    \ : List[Long] = List()\n        for (value <- values) {\n            value match\
    \ {\n                case x : Int => result = result :+ x.toLong\n           \
    \     case x : Long => result = result :+ x\n                case _ =>\n     \
    \       }\n        }\n        return result", '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        var result : List[Long] = List[Long]()\n        for (value <- values) {\n\
    \            value match {\n                case x : Long => result = result :+\
    \ x\n                case _ =>\n            }\n        }\n        return result",
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        var result\
    \ : List[Long] = List[Long]()\n        for (value <- values) {\n            value\
    \ match {\n                case x : Long => result = result :+ x\n           \
    \     case _ =>\n            }\n        }\n        return result", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        var result\
    \ : List[Long] = List()\n        for (value <- values) {\n            value match\
    \ {\n                case v : Long => result = result :+ v\n                case\
    \ _ =>\n            }\n        }\n        return result", '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  "        var result : List[Long] = List()\n        for (value <- values) {\n   \
    \         value match {\n                case x : Long => result = result :+ x\n\
    \                case _ =>\n            }\n        }\n        return result",
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        val result\
    \ = new ListBuffer[Long]()\n        for (value <- values) {\n            value\
    \ match {\n                case i : Int => result += i.toLong\n              \
    \  case l : Long => result += l\n                case _ =>\n            }\n  \
    \      }\n        result.toList", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', "        var result : List[Long] = List()\n       \
    \ for (value <- values) {\n            value match {\n                case x :\
    \ Long => result = result :+ x\n                case _ =>\n            }\n   \
    \     }\n        return result", '        values.filter(x => x.isInstanceOf[Long]).map(x
    => x.asInstanceOf[Long])', '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', '        values.filter(x
    => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])', "        // TODO: Implement\
    \ me\n        return List[Long]()", '        values.filter(_.isInstanceOf[Long]).map(_.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])',
  '        return values.filter(x => x.isInstanceOf[Long]).map(x => x.asInstanceOf[Long])']
stop_tokens:
- "\n    }\n"
