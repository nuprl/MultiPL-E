name: HumanEval_99_closest_integer
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a value (string) representing a number\n  \
  \  // and returns the closest integer to it. If the number is equidistant\n    //\
  \ from two integers, round it away from zero.\n    // Examples\n    // >>> closestInteger((\"\
  10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n    // (15l)\n    //\
  \ Note:\n    // Rounding away from zero means that if the given number is equidistant\n\
  \    // from two integers, the one you should return is the one that is the\n  \
  \  // farthest from zero. For example closest_integer(\"14.5\") should\n    // return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ["        val d = value.toDouble\n        val i = d.toLong\n        if\
    \ (abs(d - i) < 0.5) i else i + signum(d)", "        val n = value.toDouble\n\
    \        if (n > 0) {\n            if (n - n.toLong < 0.5) n.toLong else n.toLong\
    \ + 1\n        } else {\n            if (n - n.toLong > -0.5) n.toLong else n.toLong\
    \ - 1\n        }", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num >= 0) ceil.toLong else floor.toLong\n        } else if\
    \ (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "     \
    \   val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) <\
    \ 0.5) i else i + signum(d)", "        val num = value.toDouble\n        if (num\
    \ > 0) {\n            ceil(num).toLong\n        } else {\n            floor(num).toLong\n\
    \        }", "        val d = value.toDouble\n        val i = d.toLong\n     \
    \   if (abs(d - i) < 0.5) i else i + signum(d)", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + 1", "    \
    \    val d = value.toDouble\n        val i = d.toLong\n        if (d - i < 0.5)\
    \ i else i + 1", "        val d = value.toDouble\n        val l = d.toLong\n \
    \       if (d - l > 0.5) l + 1 else l", "        val num = value.toDouble\n  \
    \      if (num > 0) {\n            ceil(num).toLong\n        } else {\n      \
    \      floor(num).toLong\n        }", "        val d = value.toDouble\n      \
    \  if (d > 0) {\n            ceil(d).toLong\n        } else {\n            floor(d).toLong\n\
    \        }", "        val n = value.toDouble\n        if (n - n.toLong >= 0.5)\
    \ n.toLong + 1 else n.toLong", "        val d = value.toDouble\n        if (d\
    \ < 0) {\n            val n = ceil(d)\n            if (n - d == 0.5) {\n     \
    \           n.toLong\n            } else {\n                floor(d).toLong\n\
    \            }\n        } else {\n            val n = floor(d)\n            if\
    \ (d - n == 0.5) {\n                n.toLong\n            } else {\n         \
    \       ceil(d).toLong\n            }\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n \
    \       } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "   \
    \     val d = value.toDouble\n        val i = d.toLong\n        if (d - i > 0.5)\
    \ i + 1 else i", "        val d = value.toDouble\n        val i = d.toLong\n \
    \       if (abs(d - i) >= 0.5) {\n            if (d > 0) i + 1 else i - 1\n  \
    \      } else i", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i else i + signum(d)", "        var num = value.toDouble\n\
    \        if (num > 0) {\n            return ceil(num).toLong\n        } else {\n\
    \            return floor(num).toLong\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) >= 0.5) i + signum(d) else i",
  "        val d = value.toDouble\n        if (d < 0) -closestInteger(-d)\n      \
    \  else {\n            val l = d.toLong\n            if (d - l >= 0.5) l + 1\n\
    \            else l\n        }", "        val num = value.toDouble\n        val\
    \ floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor - num)\
    \ == abs(ceil - num)) {\n            if (floor > 0) floor else ceil\n        }\
    \ else if (abs(floor - num) < abs(ceil - num)) floor else ceil", "        val\
    \ number = value.toDouble\n        val floor = floor(number)\n        val ceil\
    \ = ceil(number)\n        if (number - floor < ceil - number) floor.toLong else\
    \ ceil.toLong", "        val d = value.toDouble\n        val i = d.toLong\n  \
    \      if (abs(d - i) < 0.5) i else i + signum(d)", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val num\
    \ = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num > 0)\
    \ ceil else floor\n        } else if (abs(num - floor) < abs(num - ceil)) floor\
    \ else ceil", "        val d = value.toDouble\n        val i = d.toLong\n    \
    \    if (d - i >= 0.5) i + 1 else i", "        val n = value.toDouble\n      \
    \  val floor = floor(n)\n        val ceil = ceil(n)\n        if (abs(n - floor)\
    \ < abs(n - ceil)) floor.toLong else ceil.toLong", "        val n = value.toDouble\n\
    \        if (n > 0) {\n            if (n - n.toLong > 0.5) n.toLong + 1\n    \
    \        else n.toLong\n        } else {\n            if (n - n.toLong < -0.5)\
    \ n.toLong - 1\n            else n.toLong\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + signum(d)", "        val d = value.toDouble\n        val i\
    \ = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", "        val\
    \ num = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(num - floor) == abs(num - ceil)) {\n            if (num >= 0)\
    \ ceil else floor\n        } else if (abs(num - floor) < abs(num - ceil)) floor\
    \ else ceil", "        val d = value.toDouble\n        if (d > 0) {\n        \
    \    val floor = d.floor\n            if (d - floor < 0.5) floor else floor +\
    \ 1\n        } else {\n            val ceil = d.ceil\n            if (ceil - d\
    \ < 0.5) ceil else ceil - 1\n        }", "        val d = value.toDouble\n   \
    \     val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", " \
    \       val d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val d = value.toDouble\n\
    \        if (d < 0) {\n            val d2 = ceil(d)\n            if (d2 - d ==\
    \ 0.5) {\n                d2.toLong - 1\n            } else {\n              \
    \  d2.toLong\n            }\n        } else {\n            val d2 = floor(d)\n\
    \            if (d - d2 == 0.5) {\n                d2.toLong + 1\n           \
    \ } else {\n                d2.toLong\n            }\n        }", "        val\
    \ num = value.toDouble\n        val floor = floor(num)\n        val ceil = ceil(num)\n\
    \        if (abs(floor - num) == abs(ceil - num)) {\n            if (floor < 0)\
    \ ceil else floor\n        } else if (abs(floor - num) < abs(ceil - num)) floor\
    \ else ceil", "        val d = value.toDouble\n        val i = d.toLong\n    \
    \    if (abs(d - i) < 0.5) i else i + signum(d)", "        val n = value.toDouble\n\
    \        val f = floor(n)\n        val c = ceil(n)\n        if (n - f < c - n)\
    \ f.toLong else c.toLong", "        val num = value.toDouble\n        val floor\
    \ = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n\
    \        val rounded = round(num)\n        if (rounded - num > 0.5) rounded -\
    \ 1 else rounded", "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong\
    \ else floor(d).toLong", "        val num = value.toDouble\n        val floor\
    \ = num.floor\n        val ceil = num.ceil\n        if (abs(num - floor) < abs(num\
    \ - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n \
    \       val l = d.toLong\n        if (d - l > 0.5) l + 1 else l", "        val\
    \ d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n     \
    \   } else {\n            floor(d).toLong\n        }", "        val d = value.toDouble\n\
    \        val floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(d -\
    \ floor) < abs(d - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n\
    \        if (d > 0) {\n            ceil(d).toLong\n        } else {\n        \
    \    floor(d).toLong\n        }", "        val n = value.toDouble\n        val\
    \ floor = floor(n)\n        val ceil = ceil(n)\n        if (abs(floor - n) ==\
    \ abs(ceil - n)) {\n            if (floor < 0) floor.toLong else ceil.toLong\n\
    \        } else if (abs(floor - n) < abs(ceil - n)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val d = value.toDouble\n\
    \        if (d > 0) {\n            ceil(d).toLong\n        } else {\n        \
    \    floor(d).toLong\n        }", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) < 0.5) i else i + 1", "        val d =\
    \ value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong", " \
    \       val number = value.toDouble\n        val floor = floor(number)\n     \
    \   val ceil = ceil(number)\n        if (abs(number - floor) < abs(number - ceil))\
    \ floor.toLong else ceil.toLong", "        val d = value.toDouble\n        if\
    \ (d < 0) {\n            val d2 = ceil(d)\n            val d3 = floor(d)\n   \
    \         if (d2 - d < d - d3) d2.toLong else d3.toLong\n        } else {\n  \
    \          val d2 = floor(d)\n            val d3 = ceil(d)\n            if (d3\
    \ - d < d - d2) d3.toLong else d2.toLong\n        }", "        val number = value.toDouble\n\
    \        val floor = floor(number)\n        val ceil = ceil(number)\n        if\
    \ (number - floor < ceil - number) floor.toLong else ceil.toLong", "        val\
    \ d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + signum(d)", "        val d = value.toDouble\n        if (d < 0) -closestInteger(-d)\n\
    \        else {\n            val i = d.toLong\n            if (d - i < 0.5) i\n\
    \            else i + 1\n        }", "        val num = value.toDouble\n     \
    \   val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor\
    \ - num) == abs(ceil - num)) {\n            if (floor >= 0) floor else ceil\n\
    \        } else if (abs(floor - num) < abs(ceil - num)) floor else ceil", "  \
    \      val num = value.toDouble\n        if (num > 0) {\n            ceil(num).toLong\n\
    \        } else {\n            floor(num).toLong\n        }", "        val num\
    \ = value.toDouble\n        if (num - num.toLong >= 0.5) num.toLong + 1 else num.toLong",
  "        val x = value.toDouble\n        val y = x.toLong\n        if (abs(x - y)\
    \ < 0.5) y else y + signum(x)", "        val d = value.toDouble\n        val i\
    \ = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", "        val\
    \ d = value.toDouble\n        val i = value.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + signum(d)", "        val x = value.toDouble\n        if (x > 0) {\n\
    \            ceil(x).toLong\n        } else {\n            floor(x).toLong\n \
    \       }", "        val d = value.toDouble\n        val i = d.toLong\n      \
    \  if (abs(d - i) > 0.5) {\n            if (d > 0) i + 1 else i - 1\n        }\
    \ else i", "        val number = value.toDouble\n        val floor = floor(number)\n\
    \        val ceil = ceil(number)\n        if (abs(number - floor) < abs(number\
    \ - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n \
    \       val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val num =\
    \ value.toDouble\n        val floor = math.floor(num)\n        val ceil = math.ceil(num)\n\
    \        if (abs(floor - num) == abs(ceil - num)) {\n            if (floor < 0)\
    \ {\n                floor.toLong\n            } else {\n                ceil.toLong\n\
    \            }\n        } else if (abs(floor - num) < abs(ceil - num)) {\n   \
    \         floor.toLong\n        } else {\n            ceil.toLong\n        }",
  "        val number = value.toDouble\n        val floor = floor(number)\n      \
    \  val ceil = ceil(number)\n        if (abs(floor - number) < abs(ceil - number))\
    \ floor.toLong\n        else ceil.toLong", "        val d = value.toDouble\n \
    \       val i = d.toLong\n        if (d - i >= 0.5) i + 1 else i", "        val\
    \ d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) >= 0.5)\
    \ {\n            if (d > 0) i + 1 else i - 1\n        } else i", "        val\
    \ d = value.toDouble\n        if (d < 0) {\n            val d1 = ceil(d)\n   \
    \         val d2 = floor(d)\n            if (d1 - d < d - d2) d1.toLong else d2.toLong\n\
    \        } else {\n            val d1 = floor(d)\n            val d2 = ceil(d)\n\
    \            if (d2 - d < d - d1) d2.toLong else d1.toLong\n        }", "    \
    \    val number = value.toDouble\n        val floor = math.floor(number)\n   \
    \     val ceil = math.ceil(number)\n        if (number - floor < ceil - number)\
    \ floor.toLong else ceil.toLong", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) >= 0.5) i + signum(d) else i", "      \
    \  val d = value.toDouble\n        if (d < 0) {\n            val d1 = ceil(d)\n\
    \            val d2 = floor(d)\n            if (d1 - d > d - d2) d2 else d1\n\
    \        } else {\n            val d1 = floor(d)\n            val d2 = ceil(d)\n\
    \            if (d2 - d > d - d1) d1 else d2\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong else floor(d).toLong", "        val d = value.toDouble\n\
    \        val r = round(d)\n        if (abs(d - r) < 0.5) r.toLong else ceil(d).toLong",
  "        val x = value.toDouble\n        val y = round(x)\n        if (y - x ==\
    \ 0.5) {\n            if (x > 0) y + 1 else y - 1\n        } else y", "      \
    \  val n = value.toDouble\n        val d = n - n.toLong\n        if (d < 0.5)\
    \ n.toLong else n.toLong + 1", "        val d = value.toDouble\n        val i\
    \ = d.toLong\n        if (abs(d - i) > 0.5) {\n            if (d > 0) i + 1 else\
    \ i - 1\n        } else i", "        val n = value.toDouble\n        if (n < 0)\
    \ {\n            val n1 = ceil(n)\n            val n2 = floor(n)\n           \
    \ if (abs(n - n1) < abs(n - n2)) n1.toLong else n2.toLong\n        } else {\n\
    \            val n1 = floor(n)\n            val n2 = ceil(n)\n            if (abs(n\
    \ - n1) < abs(n - n2)) n1.toLong else n2.toLong\n        }", "        val d =\
    \ value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5) i else\
    \ i + signum(d)", "        val number = value.toDouble\n        if (number > 0)\
    \ {\n            if (number - number.toLong < 0.5) number.toLong else number.toLong\
    \ + 1\n        } else {\n            if (number - number.toLong > -0.5) number.toLong\
    \ else number.toLong - 1\n        }", "        val d = value.toDouble\n      \
    \  val l = d.toLong\n        if (d - l < 0.5) l else l + 1", "        val d =\
    \ value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5) i else\
    \ i + 1", "        val d = value.toDouble\n        val i = d.toLong\n        if\
    \ (abs(d - i) < 0.5) i else i + signum(d)", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + signum(d)", "        val num = value.toDouble\n        val\
    \ floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor)\
    \ == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n        } else\
    \ if (abs(num - floor) < abs(num - ceil)) floor else ceil", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong",
  "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong",
  "        val d = value.toDouble\n        val f = floor(d)\n        val c = ceil(d)\n\
    \        if (d - f < c - d) f.toLong else c.toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val d =\
    \ value.toDouble\n        if (d > 0) ceil(d).toLong else floor(d).toLong", " \
    \       val d = value.toDouble\n        val i = d.toLong\n        if (abs(d -\
    \ i) >= 0.5) i + (if (d > 0) 1 else -1) else i", "        val d = value.toDouble\n\
    \        if (d > 0) {\n            ceil(d).toLong\n        } else {\n        \
    \    floor(d).toLong\n        }", "        val num = value.toDouble\n        val\
    \ floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor - num)\
    \ < abs(ceil - num)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (d - i >= 0.5) i + 1 else i", "        val\
    \ n = value.toDouble\n        val m = round(n)\n        if (abs(n - m) < 0.5)\
    \ m.toLong else (m + signum(n)).toLong", "        val n = value.toDouble\n   \
    \     val r = round(n)\n        if (abs(n - r) == 0.5) {\n            if (n >\
    \ 0) r + 1 else r - 1\n        } else {\n            r\n        }", "        val\
    \ d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n     \
    \   } else {\n            floor(d).toLong\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + signum(d)", "        val d = value.toDouble\n        if (d\
    \ > 0) {\n            ceil(d).toLong\n        } else {\n            floor(d).toLong\n\
    \        }", "        val n = value.toDouble\n        val l = floor(n).toLong\n\
    \        val r = ceil(n).toLong\n        if (abs(n - l) < abs(n - r)) l else r",
  "        val d = value.toDouble\n        val l = d.toLong\n        if (d - l < 0.5)\
    \ l else l + 1", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (num - floor == ceil - num) {\n    \
    \        if (num >= 0) ceil else floor\n        } else if (num - floor < ceil\
    \ - num) floor else ceil", "        val d = value.toDouble\n        if (d > 0)\
    \ {\n            ceil(d).toLong\n        } else {\n            floor(d).toLong\n\
    \        }", "        val d = value.toDouble\n        val i = d.toLong\n     \
    \   if (abs(d - i) < 0.5) i else i + signum(d)", "        val n = BigDecimal(value)\n\
    \        val f = n.floor\n        val c = n.ceil\n        if (n - f > c - n) c.toLong\
    \ else f.toLong", "        val d = value.toDouble\n        if (d < 0) {\n    \
    \        val d1 = ceil(d)\n            val d2 = floor(d)\n            if (d1 -\
    \ d > d - d2) d2 else d1\n        } else {\n            val d1 = floor(d)\n  \
    \          val d2 = ceil(d)\n            if (d2 - d > d - d1) d1 else d2\n   \
    \     }", "        val d = value.toDouble\n        val floor = floor(d)\n    \
    \    val ceil = ceil(d)\n        if (floor == ceil) floor.toLong\n        else\
    \ if (abs(floor - d) < abs(ceil - d)) floor.toLong\n        else ceil.toLong",
  "        val d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + 1", "    \
    \    val num = value.toDouble\n        val floor = floor(num)\n        val ceil\
    \ = ceil(num)\n        if (abs(floor - num) == abs(ceil - num)) {\n          \
    \  if (floor < 0) floor.toLong else ceil.toLong\n        } else if (abs(floor\
    \ - num) < abs(ceil - num)) {\n            floor.toLong\n        } else {\n  \
    \          ceil.toLong\n        }", "        val d = value.toDouble\n        if\
    \ (d < 0) -closestInteger(-d)\n        else {\n            val f = floor(d)\n\
    \            val c = ceil(d)\n            if (d - f < c - d) f.toLong else c.toLong\n\
    \        }", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) < abs(num - ceil))\
    \ floor.toLong else ceil.toLong", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", "       \
    \ val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + signum(d)", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (d - i > 0.5) i + 1\n        else i", "        val d = value.toDouble\n\
    \        if (d < 0) {\n            val d2 = ceil(d)\n            if (d2 - d ==\
    \ 0.5) d2.toLong - 1 else d2.toLong\n        } else {\n            val d2 = floor(d)\n\
    \            if (d - d2 == 0.5) d2.toLong + 1 else d2.toLong\n        }", "  \
    \      val n = value.toDouble\n        val x = floor(n)\n        val y = ceil(n)\n\
    \        if (abs(n - x) < abs(n - y)) x.toLong else y.toLong", "        val d\
    \ = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5) i\
    \ else i + signum(d)", "        val num = value.toDouble\n        val floor =\
    \ math.floor(num)\n        val ceil = math.ceil(num)\n        if (abs(num - floor)\
    \ < abs(num - ceil)) floor.toLong else ceil.toLong", "        val d = value.toDouble\n\
    \        if (d > 0) {\n            if (d - d.toLong < 0.5) d.toLong else d.toLong\
    \ + 1\n        } else {\n            if (d - d.toLong > -0.5) d.toLong else d.toLong\
    \ - 1\n        }", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i else i + signum(d)", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (d - i > 0.5) i + 1 else i", "        val\
    \ n = value.toDouble\n        if (n > 0) {\n            val n1 = floor(n)\n  \
    \          val n2 = ceil(n)\n            if (n - n1 < n2 - n) n1.toLong else n2.toLong\n\
    \        } else {\n            val n1 = ceil(n)\n            val n2 = floor(n)\n\
    \            if (n1 - n < n - n2) n1.toLong else n2.toLong\n        }", "    \
    \    val d = value.toDouble\n        val r = round(d)\n        if (abs(d - r)\
    \ == 0.5) {\n            if (d > 0) r + 1 else r - 1\n        } else {\n     \
    \       r\n        }", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (d - i < 0.5) i else i + 1", "        val d = value.toDouble\n   \
    \     if (d > 0) {\n            (d + 0.5).toLong\n        } else {\n         \
    \   (d - 0.5).toLong\n        }", "        val d = value.toDouble\n        val\
    \ floor = floor(d)\n        val ceil = ceil(d)\n        if (abs(floor - d) < abs(ceil\
    \ - d)) floor.toLong else ceil.toLong", "        val num = value.toDouble\n  \
    \      val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(floor\
    \ - num) == abs(ceil - num)) {\n            if (floor < 0) floor.toLong else ceil.toLong\n\
    \        } else if (abs(floor - num) < abs(ceil - num)) {\n            floor.toLong\n\
    \        } else {\n            ceil.toLong\n        }", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong else floor(d).toLong", "        val d = value.toDouble\n\
    \        val floor = d.floor\n        val ceil = d.ceil\n        if (abs(d - floor)\
    \ == abs(d - ceil)) {\n            if (d > 0) ceil else floor\n        } else\
    \ if (abs(d - floor) < abs(d - ceil)) floor else ceil", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "        val n =\
    \ value.toDouble\n        if (n > 0) {\n            val n1 = floor(n)\n      \
    \      val n2 = ceil(n)\n            if (n - n1 < n2 - n) n1.toLong else n2.toLong\n\
    \        } else {\n            val n1 = ceil(n)\n            val n2 = floor(n)\n\
    \            if (n - n1 < n2 - n) n1.toLong else n2.toLong\n        }", "    \
    \    val d = value.toDouble\n        val i = d.toLong\n        if (d - i >= 0.5)\
    \ i + 1 else i", "        val d = value.toDouble\n        val floor = d.floor\n\
    \        val ceil = d.ceil\n        if (abs(floor - d) == abs(ceil - d)) {\n \
    \           if (floor < 0) ceil else floor\n        } else if (abs(floor - d)\
    \ < abs(ceil - d)) {\n            floor\n        } else {\n            ceil\n\
    \        }", "        val d = value.toDouble\n        if (d > 0) {\n         \
    \   ceil(d).toLong\n        } else {\n            floor(d).toLong\n        }",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ < 0.5) i else i + signum(d)", "        val d = value.toDouble\n        if (d\
    \ >= 0) ceil(d).toLong else floor(d).toLong", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong else floor(d).toLong", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (d - i >= 0.5) i + 1 else i", "        val\
    \ d = value.toDouble\n        val f = floor(d)\n        val c = ceil(d)\n    \
    \    if (abs(d - f) == abs(d - c)) {\n            if (d >= 0) c else f\n     \
    \   } else if (abs(d - f) < abs(d - c)) f else c", "        val v = value.toDouble\n\
    \        val v1 = floor(v)\n        val v2 = ceil(v)\n        if (abs(v - v1)\
    \ == abs(v - v2)) {\n            if (v >= 0) v2 else v1\n        } else if (abs(v\
    \ - v1) < abs(v - v2)) v1 else v2", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) >= 0.5) {\n            if (d > 0) i + 1\
    \ else i - 1\n        } else i", "        val d = value.toDouble\n        val\
    \ i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", "       \
    \ val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + 1", "        val d = value.toDouble\n        val floor = floor(d)\n\
    \        val ceil = ceil(d)\n        if (d - floor < ceil - d) floor.toLong else\
    \ ceil.toLong", "        val num = value.toDouble\n        if (num < 0) -closestInteger(-num)\n\
    \        else if (num - num.toLong < 0.5) num.toLong\n        else num.toLong\
    \ + 1", "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong else\
    \ floor(d).toLong", "        val d = value.toDouble\n        if (d > 0) {\n  \
    \          ceil(d).toLong\n        } else {\n            floor(d).toLong\n   \
    \     }", "        val d = value.toDouble\n        if (d > 0) {\n            ceil(d).toLong\n\
    \        } else {\n            floor(d).toLong\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (d - i >=\
    \ 0.5) i + 1 else i", "        val num = value.toDouble\n        val floor = num.floor\n\
    \        val ceil = num.ceil\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num > 0) ceil else floor\n        } else if (abs(num - floor)\
    \ < abs(num - ceil)) floor else ceil", "        val num = value.toDouble\n   \
    \     val floor = floor(num)\n        val ceil = ceil(num)\n        if (num -\
    \ floor < ceil - num) floor.toLong else ceil.toLong", "        val d = value.toDouble\n\
    \        if (d > 0) ceil(d).toLong else floor(d).toLong", "        val n = value.toDouble\n\
    \        if (n - n.toLong > 0.5) n.toLong + 1 else n.toLong", "        val d =\
    \ value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5) i else\
    \ i + 1", "        val d = value.toDouble\n        val i = d.toLong\n        if\
    \ (abs(d - i) >= 0.5) i + (if (d > 0) 1 else -1) else i", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i)\
    \ == 0.5) {\n            if (d > 0) i + 1 else i - 1\n        } else {\n     \
    \       i\n        }", "        val num = value.toDouble\n        val floor =\
    \ floor(num)\n        val ceil = ceil(num)\n        if (abs(num - floor) > abs(num\
    \ - ceil)) ceil.toLong else floor.toLong", "        val n = value.toDouble\n \
    \       val x = round(n)\n        val y = floor(n)\n        val z = ceil(n)\n\
    \        if (abs(n - x) == abs(n - y)) {\n            if (n < 0) y else z\n  \
    \      } else if (abs(n - x) < abs(n - y)) {\n            x\n        } else {\n\
    \            if (n < 0) y else z\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + 1", "    \
    \    val number = value.toDouble\n        val floor = floor(number)\n        val\
    \ ceil = ceil(number)\n        if (abs(number - floor) < abs(number - ceil)) floor.toLong\
    \ else ceil.toLong", "        val d = value.toDouble\n        if (d > 0) ceil(d).toLong\
    \ else floor(d).toLong", "        val d = value.toDouble\n        val l = d.toLong\n\
    \        if (d - l > 0.5) l + 1 else l", "        val number = value.toDouble\n\
    \        val floor = floor(number)\n        val ceil = ceil(number)\n        if\
    \ (abs(number - floor) < abs(number - ceil)) floor.toLong else ceil.toLong", " \
    \       val d = value.toDouble\n        val i = value.toLong\n        if (d -\
    \ i >= 0.5) i + 1 else i", "        val n = value.toDouble\n        if (n > 0)\
    \ {\n            if (n - n.toLong < 0.5) n.toLong else n.toLong + 1\n        }\
    \ else {\n            if (n - n.toLong > -0.5) n.toLong else n.toLong - 1\n  \
    \      }", "        val d = value.toDouble\n        val i = d.toLong\n       \
    \ if (d - i < 0.5) i else i + 1", "        val d = value.toDouble\n        if\
    \ (d > 0) ceil(d).toLong else floor(d).toLong", "        val n = value.toDouble\n\
    \        val l = floor(n).toLong\n        val r = ceil(n).toLong\n        if (abs(n\
    \ - l) < abs(n - r)) l else r", "        val num = value.toDouble\n        if\
    \ (num > 0) {\n            ceil(num).toLong\n        } else {\n            floor(num).toLong\n\
    \        }", "        val d = value.toDouble\n        val i = d.toLong\n     \
    \   if (d - i >= 0.5) i + 1 else i", "        val n = value.toDouble\n       \
    \ if (n > 0) ceil(n).toLong else floor(n).toLong", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num >= 0) ceil.toLong else floor.toLong\n\
    \        } else if (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong",
  "        val d = value.toDouble\n        val l = d.toLong\n        if (d - l >=\
    \ 0.5) l + 1 else l", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i else i + 1", "        val d = value.toDouble\n\
    \        if (d < 0) -closestInteger(-d)\n        else {\n            val i = d.toLong\n\
    \            if (d - i < 0.5) i\n            else i + 1\n        }", "       \
    \ val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) < 0.5)\
    \ i else i + (if (d > 0) 1 else -1)", "        val v = value.toDouble\n      \
    \  val floor = floor(v)\n        val ceil = ceil(v)\n        if (abs(v - floor)\
    \ == abs(v - ceil)) {\n            if (v > 0) ceil else floor\n        } else\
    \ if (abs(v - floor) < abs(v - ceil)) floor else ceil", "        val d = value.toDouble\n\
    \        val l = d.toLong\n        if (d - l < 0.5) l else l + 1", "        val\
    \ d = value.toDouble\n        val i = d.toLong\n        if (d - i < 0.5) i else\
    \ i + 1", "        val d = value.toDouble\n        val i = d.toLong\n        if\
    \ (abs(d - i) < 0.5) i else i + 1", "        val num = value.toDouble\n      \
    \  if (num > 0) {\n            if (num - num.toLong < 0.5) num.toLong else num.toLong\
    \ + 1\n        } else {\n            if (num - num.toLong > -0.5) num.toLong else\
    \ num.toLong - 1\n        }", "        val d = value.toDouble\n        val i =\
    \ d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)", "        val\
    \ number = value.toDouble\n        val floor = floor(number)\n        val ceil\
    \ = ceil(number)\n        if (abs(number - floor) == abs(number - ceil)) {\n \
    \           if (number > 0) ceil else floor\n        } else if (abs(number - floor)\
    \ < abs(number - ceil)) floor else ceil", "        val d = value.toDouble\n  \
    \      val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + signum(d)",
  "        val n = value.toDouble\n        if (n > 0) {\n            ceil(n).toLong\n\
    \        } else {\n            floor(n).toLong\n        }", "        val d = value.toDouble\n\
    \        val floor = d.floor\n        val ceil = d.ceil\n        if (abs(floor\
    \ - d) < abs(ceil - d)) floor.toLong else ceil.toLong", "        val number =\
    \ value.toDouble\n        if (number > 0) {\n            if (number - number.toLong\
    \ < 0.5) number.toLong else number.toLong + 1\n        } else {\n            if\
    \ (number - number.toLong > -0.5) number.toLong else number.toLong - 1\n     \
    \   }", "        val num = value.toDouble\n        if (num > 0) {\n          \
    \  ceil(num).toLong\n        } else {\n            floor(num).toLong\n       \
    \ }", "        val d = value.toDouble\n        val i = d.toLong\n        if (abs(d\
    \ - i) >= 0.5) i + signum(d) else i", "        val n = value.toDouble\n      \
    \  val floor = floor(n)\n        val ceil = ceil(n)\n        if (abs(n - floor)\
    \ < abs(n - ceil)) floor.toLong else ceil.toLong"]
stop_tokens:
- "\n    }\n"
