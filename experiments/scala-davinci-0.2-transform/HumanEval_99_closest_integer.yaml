name: HumanEval_99_closest_integer
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function that takes a value (string) representing a number\n  \
  \  // and returns the closest integer to it. If the number is equidistant\n    //\
  \ from two integers, round it away from zero.\n    // Examples\n    // >>> closestInteger((\"\
  10\"))\n    // (10l)\n    // >>> closestInteger((\"15.3\"))\n    // (15l)\n    //\
  \ Note:\n    // Rounding away from zero means that if the given number is equidistant\n\
  \    // from two integers, the one you should return is the one that is the\n  \
  \  // farthest from zero. For example closest_integer(\"14.5\") should\n    // return\
  \ 15 and closest_integer(\"-14.5\") should return -15.\n    def closestInteger(value\
  \ : String) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(closestInteger((\"\
  10\")) == (10l));\n    assert(closestInteger((\"14.5\")) == (15l));\n    assert(closestInteger((\"\
  -15.5\")) == (-16l));\n    assert(closestInteger((\"15.3\")) == (15l));\n    assert(closestInteger((\"\
  0\")) == (0l));\n    }\n\n}\n"
completions: ["        val d = value.toDouble\n        val i = d.toLong\n        if\
    \ (abs(d - i) < 0.5) i else i + signum(d)", "        val n = value.toDouble\n\
    \        if (n > 0) {\n            if (n - n.toLong < 0.5) n.toLong else n.toLong\
    \ + 1\n        } else {\n            if (n - n.toLong > -0.5) n.toLong else n.toLong\
    \ - 1\n        }", "        val num = value.toDouble\n        val floor = floor(num)\n\
    \        val ceil = ceil(num)\n        if (abs(num - floor) == abs(num - ceil))\
    \ {\n            if (num >= 0) ceil.toLong else floor.toLong\n        } else if\
    \ (abs(num - floor) < abs(num - ceil)) floor.toLong else ceil.toLong", "     \
    \   val d = value.toDouble\n        val i = d.toLong\n        if (abs(d - i) <\
    \ 0.5) i else i + signum(d)", "        val num = value.toDouble\n        if (num\
    \ > 0) {\n            ceil(num).toLong\n        } else {\n            floor(num).toLong\n\
    \        }", "        val d = value.toDouble\n        val i = d.toLong\n     \
    \   if (abs(d - i) < 0.5) i else i + signum(d)", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) < 0.5) i else i + 1", "    \
    \    val d = value.toDouble\n        val i = d.toLong\n        if (d - i < 0.5)\
    \ i else i + 1", "        val d = value.toDouble\n        val l = d.toLong\n \
    \       if (d - l > 0.5) l + 1 else l", "        val num = value.toDouble\n  \
    \      if (num > 0) {\n            ceil(num).toLong\n        } else {\n      \
    \      floor(num).toLong\n        }", "        val d = value.toDouble\n      \
    \  if (d > 0) {\n            ceil(d).toLong\n        } else {\n            floor(d).toLong\n\
    \        }", "        val n = value.toDouble\n        if (n - n.toLong >= 0.5)\
    \ n.toLong + 1 else n.toLong", "        val d = value.toDouble\n        if (d\
    \ < 0) {\n            val n = ceil(d)\n            if (n - d == 0.5) {\n     \
    \           n.toLong\n            } else {\n                floor(d).toLong\n\
    \            }\n        } else {\n            val n = floor(d)\n            if\
    \ (d - n == 0.5) {\n                n.toLong\n            } else {\n         \
    \       ceil(d).toLong\n            }\n        }", "        val num = value.toDouble\n\
    \        val floor = floor(num)\n        val ceil = ceil(num)\n        if (abs(num\
    \ - floor) == abs(num - ceil)) {\n            if (num > 0) ceil else floor\n \
    \       } else if (abs(num - floor) < abs(num - ceil)) floor else ceil", "   \
    \     val d = value.toDouble\n        val i = d.toLong\n        if (d - i > 0.5)\
    \ i + 1 else i", "        val d = value.toDouble\n        val i = d.toLong\n \
    \       if (abs(d - i) >= 0.5) {\n            if (d > 0) i + 1 else i - 1\n  \
    \      } else i", "        val d = value.toDouble\n        val i = d.toLong\n\
    \        if (abs(d - i) < 0.5) i else i + signum(d)", "        var num = value.toDouble\n\
    \        if (num > 0) {\n            return ceil(num).toLong\n        } else {\n\
    \            return floor(num).toLong\n        }", "        val d = value.toDouble\n\
    \        val i = d.toLong\n        if (abs(d - i) >= 0.5) i + signum(d) else i",
  "        val d = value.toDouble\n        if (d < 0) -closestInteger(-d)\n      \
    \  else {\n            val l = d.toLong\n            if (d - l >= 0.5) l + 1\n\
    \            else l\n        }"]
stop_tokens:
- "\n    }\n"
