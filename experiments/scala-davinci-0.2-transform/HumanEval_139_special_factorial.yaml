name: HumanEval_139_special_factorial
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The Brazilian factorial is defined as:\n    // brazilian_factorial(n) =\
  \ n! * (n-1)! * (n-2)! * ... * 1!\n    // where n > 0\n    // For example:\n   \
  \ // >>> specialFactorial((4l))\n    // (288l)\n    // The function will receive\
  \ an integer as input and should return the special\n    // factorial of this integer.\n\
  \    def specialFactorial(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(specialFactorial((4l))\
  \ == (288l));\n    assert(specialFactorial((5l)) == (34560l));\n    assert(specialFactorial((7l))\
  \ == (125411328000l));\n    assert(specialFactorial((1l)) == (1l));\n    }\n\n}\n"
completions: ["        var result = 1l\n        for (i <- 1 to n.toInt) {\n      \
    \      result *= i\n            result *= i - 1\n        }\n        result", " \
    \       var result = 1l\n        for (i <- 1 to n.toInt) {\n            result\
    \ *= factorial(i)\n        }\n        result", "        var result = 1l\n    \
    \    for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n        }\n\
    \        result", "        var result = 1l\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            result *= factorial(i - 1)\n        }\n\
    \        result", "        def factorial(n : Long) : Long = {\n            if\
    \ (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        def specialFactorial(n\
    \ : Long, acc : Long) : Long = {\n            if (n == 0) acc\n            else\
    \ specialFactorial(n - 1, acc * factorial(n))\n        }\n        specialFactorial(n,\
    \ 1)", "        var factorials = new Array[Long](n.toInt + 1)\n        factorials(0)\
    \ = 1\n        factorials(1) = 1\n        for (i <- 2 to n.toInt) {\n        \
    \    factorials(i) = factorials(i - 1) * i\n        }\n        factorials.reduceLeft(_\
    \ * _)", "        def factorial(n : Long) : Long = {\n            if (n == 0)\
    \ 1\n            else n * factorial(n - 1)\n        }\n        if (n == 0) 1\n\
    \        else n * specialFactorial(n - 1)", "        var result = 1l\n       \
    \ for (i <- n to 1 by -1) {\n            result *= i\n        }\n        result",
  "        def factorial(n : Long) : Long = {\n            if (n == 0) 1\n       \
    \     else n * factorial(n - 1)\n        }\n        def specialFactorial(n : Long,\
    \ acc : Long) : Long = {\n            if (n == 0) acc\n            else specialFactorial(n\
    \ - 1, acc * factorial(n))\n        }\n        specialFactorial(n, 1)", "    \
    \    var result = 1l\n        for (i <- 1 to n.toInt) {\n            result *=\
    \ i\n            result *= factorial(i - 1)\n        }\n        result", "   \
    \     var result = 1l\n        for (i <- 1 to n.toInt) {\n            result *=\
    \ factorial(i)\n        }\n        result", "        var result : Long = 1\n \
    \       for (i <- n to 1 by -1) {\n            result *= i\n        }\n      \
    \  for (i <- n - 1 to 1 by -1) {\n            result *= i\n        }\n       \
    \ return result", "        if (n == 0) 1\n        else n * specialFactorial(n\
    \ - 1)", "        var result = 1l\n        for (i <- 1 to n.toInt) {\n       \
    \     result *= factorial(i)\n        }\n        result", "        var result\
    \ = 1l\n        for (i <- 1 to n.toInt) {\n            result *= factorial(i)\n\
    \        }\n        result", "        var result = 1l\n        for (i <- 1 to\
    \ n.toInt) {\n            result *= factorial(i)\n        }\n        result",
  "        var result = 1l\n        for (i <- n to 1 by -1) result *= i\n        for\
    \ (i <- n - 1 to 1 by -1) result *= i\n        result", "        var result =\
    \ 1l\n        for (i <- n to 1 by -1) {\n            result *= i\n        }\n\
    \        result", "        var result = 1l\n        for (i <- 1 to n.toInt) {\n\
    \            result *= i\n            result *= factorial(i - 1)\n        }\n\
    \        result", "        var result = 1l\n        for (i <- n to 1 by -1) {\n\
    \            result *= i\n        }\n        result"]
stop_tokens:
- "\n    }\n"
