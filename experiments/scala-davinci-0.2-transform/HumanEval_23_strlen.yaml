name: HumanEval_23_strlen
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return length of given string\n    // >>> stringLength((\"\"))\n    // (0l)\n\
  \    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string : String)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) ==\
  \ (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
  )) == (9l));\n    }\n\n}\n"
completions: ["        var length : Long = 0\n        for (i <- 0 until string.length)\
    \ {\n            length += 1\n        }\n        return length", '        string.length.toLong',
  "        var count : Long = 0\n        for (c <- string) {\n            count +=\
    \ 1\n        }\n        return count", "        var result : Long = 0\n      \
    \  for (c <- string) {\n            result += 1\n        }\n        return result",
  "        var length : Long = 0\n        for (i <- 0 until string.length) {\n   \
    \         length += 1\n        }\n        return length", "        var length\
    \ : Long = 0\n        for (i <- 0 until string.length) {\n            length +=\
    \ 1\n        }\n        return length", "        var length : Long = 0l\n    \
    \    for (i <- 0 until string.length) {\n            length += 1\n        }\n\
    \        return length", "        var count : Long = 0\n        for (c <- string)\
    \ {\n            count += 1\n        }\n        return count", "        var length\
    \ : Long = 0\n        for (c <- string) {\n            length += 1\n        }\n\
    \        return length", '        string.length', "        var length : Long =\
    \ 0\n        for (i <- 0 until string.length) {\n            length += 1\n   \
    \     }\n        return length", '        return string.length.toLong', '        return
    string.length', "        var length : Long = 0\n        for (i <- 0 until string.length)\
    \ {\n            length += 1\n        }\n        return length", "        var\
    \ count : Long = 0\n        for (i <- 0 until string.length) {\n            count\
    \ += 1\n        }\n        return count", '        return string.length.toLong',
  "        var length : Long = 0\n        for (c <- string) {\n            length\
    \ += 1\n        }\n        return length", '        string.length', '        string.length.toLong',
  "        var count : Long = 0\n        for (c <- string) {\n            count +=\
    \ 1\n        }\n        return count"]
stop_tokens:
- "\n    }\n"
