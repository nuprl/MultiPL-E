name: HumanEval_118_get_closest_vowel
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a word. Your task is to find the closest vowel that stands\
  \ between \n    // two consonants from the right side of the word (case sensitive).\n\
  \    // Vowels in the beginning and ending doesn't count. Return empty string if\
  \ you didn't\n    // find any vowel met the above condition. \n    // You may assume\
  \ that the given string contains English letter only.\n    // Example:\n    // >>>\
  \ getClosestVowel((\"yogurt\"))\n    // (\"u\")\n    // >>> getClosestVowel((\"\
  FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"quick\"))\n    // (\"\"\
  )\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n    def getClosestVowel(word\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(getClosestVowel((\"\
  yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
  u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
  most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n\
  \    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"i\"\
  )));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
  Above\")).equals((\"o\")));\n    }\n\n}\n"
completions: ["        // Fill up this function body\n        // 'a' to 'z' : 97 to\
    \ 122\n        // 'A' to 'Z' : 65 to 90\n        // '0' to '9' : 48 to 57\n  \
    \      var vowels = \"aeiouAEIOU\"\n        var result = \"\"\n        var min\
    \ = word.length\n        var i = word.length - 1\n        while (i >= 0) {\n \
    \           if (vowels.contains(word(i))) {\n                var j = i - 1\n \
    \               while (j >= 0) {\n                    if (!vowels.contains(word(j)))\
    \ {\n                        var k = j - 1\n                        while (k >=\
    \ 0) {\n                            if (!vowels.contains(word(k))) {\n       \
    \                         if (i - k < min) {\n                               \
    \     min = i - k\n                                    result = word(i).toString\n\
    \                                }\n                                k = -1\n \
    \                           }\n                            else k -= 1\n     \
    \                   }\n                        j = -1\n                    }\n\
    \                    else j -= 1\n                }\n            }\n         \
    \   i -= 1\n        }\n        result", "        // Fill up this function body\n\
    \        // 'a' to 'z' : 97 to 122\n        // 'A' to 'Z' : 65 to 90\n       \
    \ // '0' to '9' : 48 to 57\n        // ' '        : 32\n        // '.'       \
    \ : 46\n        // ','        : 44\n        // '!'        : 33\n        // '?'\
    \        : 63\n        // '\\n'       : 10\n        // '\\t'       : 9\n     \
    \   // '\\r'       : 13\n        // '\\b'       : 8\n        // '\\f'       :\
    \ 12\n        // '\\''       : 39\n        // '\\\"'       : 34\n        // '\\\
    \\'       : 92\n        // '\\0'       : 0\n        // '\\000'     : 0\n     \
    \   // '\\u0000'   : 0\n        // '\\u{0}'    : 0\n        // '\\u{0000}' : 0\n\
    \        // '\\u{00000000}' : 0\n        // '\\u{0000000000}' : 0\n        //\
    \ '\\u{000000000000}' : 0\n        // '\\u{00000000000000}' : 0\n        // '\\\
    u{0000000000000000}' : 0\n        // '\\u{000000000000000000}' : 0\n        //\
    \ '\\u{00000000000000000000}' : 0\n        // '\\u{0000000000000000000000}' :\
    \ 0\n        // '\\u{000000000000000000000000}' : 0\n        // '\\u{00000000000000000000000000}'\
    \ : 0\n        // '\\u{0000000000000000000000000000}' : 0\n        // '\\u{000000000000000000000000000000}'\
    \ : 0\n        // '\\u{00000000000000000000000000000000}' : 0\n        // '\\\
    u{0000000000000000000000000000000000}' : 0\n        // '\\u{000000000000000000000000000000000000}'\
    \ : 0\n        // '\\u{00000000000000000000000000000000000000}' : 0\n        //\
    \ '\\u{0000000000000000000000000000000000000000}' : 0\n        // '\\u{000000000000000000000000000000000000000000}'\
    \ : 0\n        // '\\u{00000000000000000000000000000000000000000000}' : 0\n  \
    \      // '\\u{0000000000000000000000000000000000000000000000}' : 0\n        //\
    \ '\\u{000000000000000000000000000000000000000000000000}' : 0\n        // '",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val consonants = Set('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z')\n        var result = \"\"\n        for (i <- word.length\
    \ - 1 to 0 by -1) {\n            if (vowels.contains(word(i))) {\n           \
    \     if (i == word.length - 1) result = word(i).toString\n                else\
    \ if (consonants.contains(word(i + 1))) result = word(i).toString\n          \
    \  }\n        }\n        result", "        val vowels = Set('a', 'e', 'i', 'o',\
    \ 'u')\n        val wordArray = word.toCharArray\n        var closestVowel = \"\
    \"\n        for (i <- wordArray.length - 1 to 0 by -1) {\n            if (vowels.contains(wordArray(i)))\
    \ {\n                if (i < wordArray.length - 1 && !vowels.contains(wordArray(i\
    \ + 1))) {\n                    closestVowel = wordArray(i).toString\n       \
    \             break\n                }\n                else if (i > 0 && !vowels.contains(wordArray(i\
    \ - 1))) {\n                    closestVowel = wordArray(i).toString\n       \
    \             break\n                }\n            }\n        }\n        closestVowel",
  "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val consonants = Set('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z')\n        val chars = word.toCharArray\n        var result\
    \ = \"\"\n        for (i <- 0 until chars.length) {\n            if (vowels.contains(chars(i)))\
    \ {\n                if (i > 0 && i < chars.length - 1) {\n                  \
    \  if (consonants.contains(chars(i - 1)) && consonants.contains(chars(i + 1)))\
    \ {\n                        result = chars(i).toString\n                    \
    \    break\n                    }\n                }\n            }\n        }\n\
    \        result", "        val vowels = \"aeiou\"\n        val consonants = \"\
    bcdfghjklmnpqrstvwxyz\"\n        var closestVowel = \"\"\n        var closestVowelDistance\
    \ = word.length\n        for (i <- 0 until word.length) {\n            val c =\
    \ word(i)\n            if (consonants.contains(c)) {\n                for (j <-\
    \ i + 1 until word.length) {\n                    val c2 = word(j)\n         \
    \           if (vowels.contains(c2)) {\n                        if (j - i < closestVowelDistance)\
    \ {\n                            closestVowelDistance = j - i\n              \
    \              closestVowel = c2.toString\n                        }\n       \
    \             }\n                    else if (consonants.contains(c2)) {\n   \
    \                     break\n                    }\n                }\n      \
    \      }\n        }\n        closestVowel", "        val vowels = \"aeiouAEIOU\"\
    \n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n  \
    \      var closestVowel = \"\"\n        var closestVowelDistance = 0\n       \
    \ for (i <- 0 until word.length) {\n            if (consonants.contains(word(i)))\
    \ {\n                for (j <- i + 1 until word.length) {\n                  \
    \  if (vowels.contains(word(j))) {\n                        if (closestVowelDistance\
    \ == 0 || j - i < closestVowelDistance) {\n                            closestVowelDistance\
    \ = j - i\n                            closestVowel = word(j).toString\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n        closestVowel", "        val vowels = \"aeiouAEIOU\"\n    \
    \    val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n       \
    \ val wordArray = word.toCharArray\n        var result = \"\"\n        for (i\
    \ <- wordArray.length - 1 to 0 by -1) {\n            if (consonants.contains(wordArray(i)))\
    \ {\n                for (j <- i - 1 to 0 by -1) {\n                    if (vowels.contains(wordArray(j)))\
    \ {\n                        result = wordArray(j).toString\n                \
    \        return result\n                    }\n                }\n           \
    \ }\n        }\n        result", "        val vowels = \"aeiouAEIOU\"\n      \
    \  val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        var\
    \ result = \"\"\n        for (i <- word.length - 1 to 0 by -1) {\n           \
    \ if (consonants.contains(word(i))) {\n                for (j <- i - 1 to 0 by\
    \ -1) {\n                    if (vowels.contains(word(j))) {\n               \
    \         result = word(j).toString\n                        return result\n \
    \                   }\n                }\n            }\n        }\n        result",
  "        val vowels = \"aeiouAEIOU\"\n        val consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    \n        var result = \"\"\n        for (i <- word.length - 1 to 0 by -1) {\n\
    \            if (consonants.contains(word(i))) {\n                for (j <- i\
    \ - 1 to 0 by -1) {\n                    if (vowels.contains(word(j))) {\n   \
    \                     result = word(j).toString\n                        return\
    \ result\n                    }\n                }\n            }\n        }\n\
    \        result", "        // Fill up this function body\n        // 'a' to 'z'\n\
    \        val vowels = \"aeiou\"\n        val consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n        val wordArray = word.toCharArray\n        var vowelIndex = -1\n    \
    \    for (i <- wordArray.length - 1 to 0 by -1) {\n            if (vowels.contains(wordArray(i)))\
    \ {\n                vowelIndex = i\n                break\n            }\n  \
    \      }\n        if (vowelIndex == -1) return \"\"\n        for (i <- vowelIndex\
    \ - 1 to 0 by -1) {\n            if (consonants.contains(wordArray(i))) {\n  \
    \              return wordArray(vowelIndex).toString\n            }\n        }\n\
    \        \"\"", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ consonants = Set('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n        var result = \"\"\n  \
    \      for (i <- word.length - 1 to 0 by -1) {\n            if (vowels.contains(word(i)))\
    \ {\n                if (i == word.length - 1) {\n                    if (consonants.contains(word(i\
    \ - 1))) {\n                        result = word(i).toString\n              \
    \      }\n                } else if (i == 0) {\n                    if (consonants.contains(word(i\
    \ + 1))) {\n                        result = word(i).toString\n              \
    \      }\n                } else {\n                    if (consonants.contains(word(i\
    \ - 1)) && consonants.contains(word(i + 1))) {\n                        result\
    \ = word(i).toString\n                    }\n                }\n            }\n\
    \        }\n        result", "        // Fill up this function body\n        //\
    \ 'a' is 97, 'e' is 101, 'i' is 105, 'o' is 111, 'u' is 117, 'y' is 121\n    \
    \    // 'A' is 65, 'E' is 69, 'I' is 73, 'O' is 79, 'U' is 85, 'Y' is 89\n   \
    \     // 'z' is 122, 'Z' is 90\n        var index = word.length - 1\n        var\
    \ closestVowel = \"\"\n        while (index >= 0) {\n            if (word(index)\
    \ == 'a' || word(index) == 'e' || word(index) == 'i' || word(index) == 'o' ||\
    \ word(index) == 'u' || word(index) == 'y' || word(index) == 'A' || word(index)\
    \ == 'E' || word(index) == 'I' || word(index) == 'O' || word(index) == 'U' ||\
    \ word(index) == 'Y') {\n                if (index == word.length - 1) {\n   \
    \                 index -= 1\n                    continue\n                }\n\
    \                if (word(index + 1) == 'a' || word(index + 1) == 'e' || word(index\
    \ + 1) == 'i' || word(index + 1) == 'o' || word(index + 1) == 'u' || word(index\
    \ + 1) == 'y' || word(index + 1) == 'A' || word(index + 1) == 'E' || word(index\
    \ + 1) == 'I' || word(index + 1) == 'O' || word(index + 1) == 'U' || word(index\
    \ + 1) == 'Y') {\n                    index -= 1\n                    continue\n\
    \                }\n                closestVowel = word(index).toString\n    \
    \            break\n            }\n            index -= 1\n        }\n       \
    \ closestVowel", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n        val\
    \ chars = word.toCharArray\n        var result = \"\"\n        for (i <- 0 until\
    \ chars.length - 1) {\n            if (!vowels.contains(chars(i)) && vowels.contains(chars(i\
    \ + 1))) {\n                result = chars(i + 1).toString\n                break\n\
    \            }\n        }\n        result", "        val vowels = Set('a', 'e',\
    \ 'i', 'o', 'u')\n        val consonants = Set('b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')\n    \
    \    val wordSet = word.toLowerCase.toSet\n        val vowelSet = wordSet & vowels\n\
    \        val consonantSet = wordSet & consonants\n        val vowelList = vowelSet.toList.sorted\n\
    \        val consonantList = consonantSet.toList.sorted\n        if (vowelList.length\
    \ == 0 || consonantList.length == 0) return \"\"\n        var min = Int.MaxValue\n\
    \        var result = \"\"\n        for (v <- vowelList) {\n            for (c\
    \ <- consonantList) {\n                val distance = abs(v - c)\n           \
    \     if (distance < min) {\n                    min = distance\n            \
    \        result = v.toString.toUpperCase\n                }\n            }\n \
    \       }\n        result", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n\
    \        var result = \"\"\n        var min = Int.MaxValue\n        for (i <-\
    \ 0 until word.length - 1) {\n            if (vowels.contains(word(i)) && !vowels.contains(word(i\
    \ + 1))) {\n                val distance = word.length - i - 1\n             \
    \   if (distance < min) {\n                    min = distance\n              \
    \      result = word(i).toString\n                }\n            }\n        }\n\
    \        result", "        val vowels = Set('a', 'e', 'i', 'o', 'u')\n       \
    \ val wordList = word.toList\n        val wordListReversed = wordList.reverse\n\
    \        val wordListReversedWithIndex = wordListReversed.zipWithIndex\n     \
    \   val wordListReversedWithIndexFiltered = wordListReversedWithIndex.filter(x\
    \ => vowels.contains(x._1))\n        if (wordListReversedWithIndexFiltered.isEmpty)\
    \ return \"\"\n        val wordListReversedWithIndexFilteredWithIndex = wordListReversedWithIndexFiltered.zipWithIndex\n\
    \        val wordListReversedWithIndexFilteredWithIndexFiltered = wordListReversedWithIndexFilteredWithIndex.filter(x\
    \ => x._1._2 - x._2 > 0)\n        if (wordListReversedWithIndexFilteredWithIndexFiltered.isEmpty)\
    \ return \"\"\n        val wordListReversedWithIndexFilteredWithIndexFilteredSorted\
    \ = wordListReversedWithIndexFilteredWithIndexFiltered.sortBy(x => x._1._2 - x._2)\n\
    \        wordListReversedWithIndexFilteredWithIndexFilteredSorted.head._1._1.toString",
  "        // Fill up this function body\n        // 'a' to 'z' is 97 to 122\n   \
    \     // 'A' to 'Z' is 65 to 90\n        // '0' to '9' is 48 to 57\n        //\
    \ ' ' is 32\n        // '.' is 46\n        // ',' is 44\n        // '!' is 33\n\
    \        // '?' is 63\n        // '(' is 40\n        // ')' is 41\n        //\
    \ '[' is 91\n        // ']' is 93\n        // '{' is 123\n        // '}' is 125\n\
    \        // '+' is 43\n        // '-' is 45\n        // '*' is 42\n        //\
    \ '/' is 47\n        // '%' is 37\n        // '=' is 61\n        // '<' is 60\n\
    \        // '>' is 62\n        // '&' is 38\n        // '|' is 124\n        //\
    \ '^' is 94\n        // '~' is 126\n        // '`' is 96\n        // ':' is 58\n\
    \        // ';' is 59\n        // '\"' is 34\n        // '\\'' is 39\n       \
    \ // '\\\\' is 92\n        // '#' is 35\n        // '$' is 36\n        // '@'\
    \ is 64\n        // '_' is 95\n        // ' ' is 32\n        // ' ' is 32\n  \
    \      // ' ' is 32\n        // ' ' is 32\n        // ' ' is 32\n        // '\
    \ ' is 32\n        // ' ' is 32\n        // ' ' is 32\n        // ' ' is 32\n\
    \        // ' ' is 32\n        // ' ' is 32\n        // ' ' is 32\n        //\
    \ ' ' is 32\n        // ' ' is 32\n        // ' ' is 32\n        // ' ' is 32\n\
    \        // ' ' is 32\n        // ' ' is 32\n        // ' ' is 32\n        //\
    \ ' ' is 32\n        // ' ' is 32\n        // ' ' is 32\n        // ' ' is 32\n\
    \        // ' ' is 32\n        // ' ' is 32\n        // ' ' is 32\n        //\
    \ ' ' is 32\n        // ' ' is 32\n        // ' ' is 32\n        // ' ' is 32\n\
    \       ", "        // Fill up this function body\n        // 'a', 'e', 'i', 'o',\
    \ 'u'\n        // 'A', 'E', 'I', 'O', 'U'\n        var vowel = \"\"\n        var\
    \ min = word.length\n        for (i <- 0 until word.length) {\n            if\
    \ (word(i) == 'a' || word(i) == 'e' || word(i) == 'i' || word(i) == 'o' || word(i)\
    \ == 'u' || word(i) == 'A' || word(i) == 'E' || word(i) == 'I' || word(i) == 'O'\
    \ || word(i) == 'U') {\n                var j = i - 1\n                while (j\
    \ >= 0 && (word(j) == 'a' || word(j) == 'e' || word(j) == 'i' || word(j) == 'o'\
    \ || word(j) == 'u' || word(j) == 'A' || word(j) == 'E' || word(j) == 'I' || word(j)\
    \ == 'O' || word(j) == 'U')) {\n                    j -= 1\n                }\n\
    \                if (j >= 0) {\n                    var k = i + 1\n          \
    \          while (k < word.length && (word(k) == 'a' || word(k) == 'e' || word(k)\
    \ == 'i' || word(k) == 'o' || word(k) == 'u' || word(k) == 'A' || word(k) == 'E'\
    \ || word(k) == 'I' || word(k) == 'O' || word(k) == 'U')) {\n                \
    \        k += 1\n                    }\n                    if (k < word.length)\
    \ {\n                        if (i - j < min) {\n                            min\
    \ = i - j\n                            vowel = word(i).toString\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n        vowel", "        var vowels = List(\"a\", \"e\", \"i\", \"o\"\
    , \"u\")\n        var result = \"\"\n        for (i <- word.length - 1 to 0 by\
    \ -1) {\n            if (vowels.contains(word(i).toString)) {\n              \
    \  if (i == word.length - 1) return result\n                if (i == 0) return\
    \ result\n                if (!vowels.contains(word(i + 1).toString) && !vowels.contains(word(i\
    \ - 1).toString)) {\n                    result = word(i).toString\n         \
    \           return result\n                }\n            }\n        }\n     \
    \   result"]
stop_tokens:
- "\n    }\n"
