name: HumanEval_122_add_elements
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a non-empty array of integers arr and an integer k, return\n    //\
  \ the sum of the elements with at most two digits from the first k elements of arr.\n\
  \    // Example:\n    // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong,\
  \ 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n\
  \    // (24l)\n    // Constraints:\n    // 1. 1 <= len(arr) <= 100\n    // 2. 1\
  \ <= k <= len(arr)\n    def addElements(arr : List[Long], k : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(addElements((List[Long](1l.toLong,\
  \ -2l.toLong, -3l.toLong, 41l.toLong, 57l.toLong, 76l.toLong, 87l.toLong, 88l.toLong,\
  \ 99l.toLong)), (3l)) == (-4l));\n    assert(addElements((List[Long](111l.toLong,\
  \ 121l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong)), (2l)) == (0l));\n\
  \    assert(addElements((List[Long](11l.toLong, 21l.toLong, 3l.toLong, 90l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (125l));\n \
  \   assert(addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l)) == (24l));\n  \
  \  assert(addElements((List[Long](1l.toLong)), (1l)) == (1l));\n    }\n\n}\n"
completions: ["        // Write your code here\n        var sum : Long = 0\n     \
    \   for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n          \
    \      sum += arr(i)\n            }\n        }\n        return sum", "       \
    \ // Write your code here\n        return 0l", "        // Good luck!\n      \
    \  var sum : Long = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum", "        // Fill in the code here\n        return 0l", "        // Fill\
    \ this in.\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i).toString.length <= 2) {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        var sum : Long = 0\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n     \
    \           sum += arr(i)\n            }\n        }\n        return sum", "  \
    \      // Implement this function\n        arr.take(k.toInt).filter(x => x < 100).sum",
  "        //\n        // Your code goes here.\n        //\n        var sum : Long\
    \ = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum\
    \ += arr(i)\n        }\n        return sum", "        // Fill in the code here\n\
    \        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n          \
    \  if (arr(i).toString.length <= 2) {\n                sum += arr(i)\n       \
    \     }\n        }\n        return sum", "        // We can use a simple for loop\
    \ to iterate through the first k elements of arr.\n        // We can use a simple\
    \ if statement to check if the element is less than 100.\n        // If it is,\
    \ we can add it to the sum.\n        // If it is not, we can skip it.\n      \
    \  // We can return the sum.\n        var sum : Long = 0\n        for (i <- 0\
    \ until k.toInt) {\n            if (arr(i) < 100) {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        // Fill in the code here\n\
    \        return 0", "        var sum : Long = 0\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum",
  "        // Write your code here\n        return 0l", "        // We can use a foldLeft\
    \ to iterate through the list and add the elements\n        // that are less than\
    \ 100 to the accumulator.\n        // We can use a foldLeft to iterate through\
    \ the list and add the elements\n        // that are less than 100 to the accumulator.\n\
    \        arr.foldLeft(0l)((acc, x) => if (x < 100) acc + x else acc)", "     \
    \   // Write your code here\n        var sum : Long = 0l\n        for (i <- 0\
    \ until k.toInt) {\n            if (arr(i) < 100) {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        // Implement this function\n\
    \        var sum : Long = 0\n        for (i <- 0 to k.toInt - 1) {\n         \
    \   if (arr(i) < 100) {\n                sum += arr(i)\n            }\n      \
    \  }\n        return sum", "        // We can use a for loop to iterate through\
    \ the list and add\n        // the elements to a sum variable.\n        // We\
    \ can use a counter variable to keep track of the number of\n        // elements\
    \ we have added to the sum.\n        // We can use a while loop to iterate through\
    \ the list and add\n        // the elements to a sum variable.\n        // We\
    \ can use a counter variable to keep track of the number of\n        // elements\
    \ we have added to the sum.\n        // We can use a while loop to iterate through\
    \ the list and add\n        // the elements to a sum variable.\n        // We\
    \ can use a counter variable to keep track of the number of\n        // elements\
    \ we have added to the sum.\n        var sum : Long = 0\n        var counter :\
    \ Long = 0\n        var i : Long = 0\n        while(i < arr.length) {\n      \
    \      if(arr(i.toInt).toString.length <= 2) {\n                sum += arr(i.toInt)\n\
    \                counter += 1\n            }\n            if(counter == k) {\n\
    \                return sum\n            }\n            i += 1\n        }\n  \
    \      return sum", "        // Write your code here\n        return 0l", "  \
    \      // Good luck!\n        var sum = 0l\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum", " \
    \       // Write your code here\n        var sum : Long = 0l\n        for (i <-\
    \ 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum +=\
    \ arr(i)\n            }\n        }\n        return sum", "        // Write your\
    \ code here\n        return 0l", "        // Write your code here\n        return\
    \ 0l.toLong", "        // Write your code here\n        var result : Long = 0\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n     \
    \           result += arr(i)\n            }\n        }\n        return result",
  "        // Write your code here\n        var sum = 0l\n        for (i <- 0 until\
    \ k.toInt) {\n            if (arr(i) < 100) {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        // Write your code here\n\
    \        return 0l", "        //\n        // Your code here\n        //\n    \
    \    var sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) sum += arr(i)\n        }\n        sum", "        // Write your code here\n\
    \        var sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) sum += arr(i)\n        }\n        return sum", "        // Write your\
    \ code here\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum", "        // We can use a foldLeft to sum the\
    \ first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a fold", "        // Fill\
    \ in the code here\n        return 0l", "        var sum : Long = 0\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum\
    \ += arr(i)\n            }\n        }\n        return sum", "        // Good luck!\n\
    \        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n          \
    \  if (arr(i) < 100) {\n                sum += arr(i)\n            }\n       \
    \ }\n        return sum", "        // Fill in the code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum", "        // Write your code here\n        var sum : Long =\
    \ 0\n        for (i <- 0 until k.toInt) {\n            var n : Long = arr(i)\n\
    \            if (n < 100) {\n                sum += n\n            }\n       \
    \ }\n        return sum", "        // Implement this function\n        var sum\
    \ : Long = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100)\
    \ {\n                sum += arr(i)\n            }\n        }\n        return sum",
  "        // Write your code here\n        return 0l", "        // We can use a for\
    \ loop to iterate through the list,\n        // and we can use a while loop to\
    \ iterate through the first k elements.\n        // We can use a variable to keep\
    \ track of the sum.\n        // We can use a variable to keep track of the number\
    \ of elements we have iterated through.\n        // We can use a variable to keep\
    \ track of the number of elements we have added to the sum.\n        // We can\
    \ use a variable to keep track of the number of digits in the current element.\n\
    \        // We can use a variable to keep track of the current element.\n    \
    \    // We can use a variable to keep track of the current digit.\n        //\
    \ We can use a variable to keep track of the current digit value.\n        //\
    \ We can use a variable to keep track of the current sum.\n        // We can use\
    \ a variable to keep track of the current sum of digits.\n        // We can use\
    \ a variable to keep track of the current sum of digits with at most two digits.\n\
    \        // We can use a variable to keep track of the current sum of elements\
    \ with at most two digits.\n        // We can use a variable to keep track of\
    \ the current sum of elements with at most two digits from the first k elements.\n\
    \        // We can use a variable to keep track of the current sum of elements\
    \ with at most two digits from the first k elements of arr.\n        // We can\
    \ use a variable to keep track of the current sum of elements with at most two\
    \ digits from the first k elements of arr.\n        // We can use a variable to\
    \ keep track of the current sum of elements with at most two digits from the first\
    \ k elements of arr.\n        // We can use a variable to keep track of the current\
    \ sum of elements with at most two digits from the first k elements of arr.\n\
    \        // We can use a variable to keep track of the current sum of elements\
    \ with at most two digits from the first k elements of arr.\n        // We can\
    \ use a variable to keep track of the current sum of elements with at most two\
    \ digits from the first k elements of arr.\n        // We can use a variable to\
    \ keep track of the current sum of elements with at most two digits from the first\
    \ k elements of arr.\n        // We can use a variable to keep track of the current\
    \ sum of elements with at most two digits from the first k elements of arr", " \
    \       var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n           \
    \ if (arr(i) < 100) sum += arr(i)\n        }\n        return sum", "        //\
    \ Write your code here\n        var sum : Long = 0\n        for (i <- 0 until\
    \ k.toInt) {\n            if (arr(i) < 100) {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        // Implement this function\n\
    \        return 0l;", "        // Given a list of integers arr and an integer\
    \ k, return the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n        // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong,\
    \ 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n\
    \        // (24l)\n        // Constraints:\n        // 1. 1 <= len(arr) <= 100\n\
    \        // 2. 1 <= k <= len(arr)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\n        // (24l)\n        // Constraints:\n        // 1.\
    \ 1 <= len(arr) <= 100\n        // 2. 1 <= k <= len(arr)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\n        // (24l)\n        // Constraints:\n        // 1.\
    \ 1 <= len(arr) <= 100\n        // 2. 1 <= k <= len(arr)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\n        // (24l)\n        // Constraints:\n        // 1.\
    \ 1 <= len(arr) <= 100\n        // 2. 1 <= k <= len(arr)\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.", "        // Write your code here\n\
    \        arr.take(k.toInt).filter(x => x < 100).sum", "        // Fill in the\
    \ code here\n        var sum = 0l\n        for (i <- 0 until k.toInt) {\n    \
    \        if (arr(i) < 100) sum += arr(i)\n        }\n        sum", "        //\
    \ Good luck!\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum",
  "        // Write your code here\n        arr.take(k.toInt).filter(x => x < 100).sum",
  "        // Fill this\n        return 0l", "        // Fill in the code here\n \
    \       return 0l", "        // Write your code here\n        return 0l", "  \
    \      // Implement this function\n        return 0l", "        // Given a list\
    \ of integers arr and an integer k, return the sum of the elements with at most\
    \ two digits from the first k elements of arr.\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\n        // (24l)\n        // Constraints:\n        // 1.\
    \ 1 <= len(arr) <= 100\n        // 2. 1 <= k <= len(arr)\n        def addElements(arr\
    \ : List[Long], k : Long) : Long = {\n            // Given a list of integers\
    \ arr and an integer k, return the sum of the elements with at most two digits\
    \ from the first k elements of arr.\n            // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\n            // (24l)\n            // Constraints:\n    \
    \        // 1. 1 <= len(arr) <= 100\n            // 2. 1 <= k <= len(arr)\n  \
    \          def addElements(arr : List[Long], k : Long) : Long = {\n          \
    \      // Given a list of integers arr and an integer k, return the sum of the\
    \ elements with at most two digits from the first k elements of arr.\n       \
    \         // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n           \
    \     // (24l)\n                // Constraints:\n                // 1. 1 <= len(arr)\
    \ <= 100\n                // 2. 1 <= k <= len(arr)\n                def addElements(arr\
    \ : List[Long], k : Long) : Long = {\n                    // Given a list of integers\
    \ arr and an integer k, return the sum of the elements", "        var sum : Long\
    \ = 0l\n        for (i <- 0 until k.toInt) {\n            val element : Long =\
    \ arr(i)\n            if (element < 100) {\n                sum += element\n \
    \           }\n        }\n        return sum", "        // Given a list of integers\
    \ arr, return the sum of the elements with at most two digits.\n        def addElements(arr\
    \ : List[Long]) : Long = {\n            arr.filter(x => x < 100).sum\n       \
    \ }\n        addElements(arr.take(k.toInt))", "        // Implement this function\n\
    \        return 0l;", "        // Write your code here\n        var sum : Long\
    \ = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n\
    \                sum += arr(i)\n            }\n        }\n        return sum",
  "        // Write your code here\n        return 0l", "        // Write your code\
    \ here\n        var sum = 0l\n        for (i <- 0 until k.toInt) {\n         \
    \   if (arr(i) < 100) sum += arr(i)\n        }\n        return sum", "       \
    \ // Good luck!\n        var sum : Long = 0\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum",
  "        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n            if\
    \ (arr(i) < 100) sum += arr(i)\n        }\n        return sum", "        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \        //\n        //\n        //\n        //\n        //\n        //\n    \
    \    //\n        //\n        //\n        //\n        //\n        //\n        //\n\
    \       ", "        // We can use a for loop to iterate through the first k elements\
    \ of arr.\n        // We can use a variable to store the sum of the elements with\
    \ at most two digits.\n        // We can use a variable to store the current element.\n\
    \        // We can use a variable to store the number of digits in the current\
    \ element.\n        // We can use a variable to store the current digit.\n   \
    \     // We can use a variable to store the current digit's place.\n        //\
    \ We can use a variable to store the number of digits in the current element.\n\
    \        // We can use a variable to store the current digit.\n        // We can\
    \ use a variable to store the current digit's place.\n        // We can use a\
    \ variable to store the number of digits in the current element.\n        // We\
    \ can use a variable to store the current digit.\n        // We can use a variable\
    \ to store the current digit's place.\n        // We can use a variable to store\
    \ the number of digits in the current element.\n        // We can use a variable\
    \ to store the current digit.\n        // We can use a variable to store the current\
    \ digit's place.\n        // We can use a variable to store the number of digits\
    \ in the current element.\n        // We can use a variable to store the current\
    \ digit.\n        // We can use a variable to store the current digit's place.\n\
    \        // We can use a variable to store the number of digits in the current\
    \ element.\n        // We can use a variable to store the current digit.\n   \
    \     // We can use a variable to store the current digit's place.\n        //\
    \ We can use a variable to store the number of digits in the current element.\n\
    \        // We can use a variable to store the current digit.\n        // We can\
    \ use a variable to store the current digit's place.\n        // We can use a\
    \ variable to store the number of digits in the current element.\n        // We\
    \ can use a variable to store the current digit.\n        // We can use a variable\
    \ to store the current digit's place.\n        // We can use a variable to store\
    \ the number of digits in the current element.\n        // We can use a variable\
    \ to store the current digit.\n        // We can use a variable to store the current\
    \ digit's place.\n        // We can use a variable to store the number of digits\
    \ in the", "        //\n        // Your code goes here\n        //\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum", "        // Write your code here\n        var sum = 0l\n \
    \       for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        return sum", "        // Given a list arr and an integer k,\
    \ return the sum of the elements with at most two digits from the first k elements\
    \ of arr.\n        def addElementsHelper(arr : List[Long], k : Long, acc : Long)\
    \ : Long = {\n            if (k == 0) acc\n            else {\n              \
    \  val x = arr.head\n                if (x < 100) addElementsHelper(arr.tail,\
    \ k - 1, acc + x)\n                else addElementsHelper(arr.tail, k - 1, acc)\n\
    \            }\n        }\n        addElementsHelper(arr, k, 0)", "        //\
    \ Implement this function\n        var sum = 0l\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) {\n                sum += arr(i)\n        \
    \    }\n        }\n        return sum", "        // Write your code here\n   \
    \     return 0l", "        // Implement this function\n        return 0l", " \
    \       // Define a function that returns the number of digits in a number.\n\
    \        def digits(n : Long) : Long = {\n            if (n < 10) return 1\n \
    \           else return 1 + digits(n / 10)\n        }\n        // Define a function\
    \ that returns the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n        def addElementsHelper(arr : List[Long], k : Long,\
    \ sum : Long) : Long = {\n            if (k == 0) return sum\n            else\
    \ if (digits(arr.head) <= 2) return addElementsHelper(arr.tail, k - 1, sum + arr.head)\n\
    \            else return addElementsHelper(arr.tail, k - 1, sum)\n        }\n\
    \        // Return the sum of the elements with at most two digits from the first\
    \ k elements of arr.\n        return addElementsHelper(arr, k, 0)", "        //\
    \ Implement this function\n        var sum = 0l\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) {\n                sum += arr(i)\n        \
    \    }\n        }\n        return sum", "        // Write your code here\n   \
    \     var sum : Long = 0l\n        for (i <- 0 until k.toInt) {\n            if\
    \ (arr(i) < 100) {\n                sum += arr(i)\n            }\n        }\n\
    \        return sum", "        // Write your code here\n        var sum = 0l\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n     \
    \           sum += arr(i)\n            }\n        }\n        return sum", "  \
    \      // Write your code here\n        var sum = 0l\n        for (i <- 0 until\
    \ k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n       \
    \ return sum", "        // We can use a foldLeft to sum the elements of the list.\n\
    \        // We can use a takeWhile to get the first k elements of the list.\n\
    \        // We can use a filter to get the elements with at most two digits.\n\
    \        // We can use a map to convert the elements to Long.\n        // We can\
    \ use a toList to convert the elements to a List.\n        // We can use a sum\
    \ to sum the elements of the list.\n        arr.takeWhile(x => x <= k).filter(x\
    \ => x < 100).map(x => x.toLong).toList.sum", "        // Write your code here\n\
    \        var sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) sum += arr(i)\n        }\n        return sum", "        // Good luck!\n\
    \        var sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) sum += arr(i)\n        }\n        sum", "        // Write your code here\n\
    \        var sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) sum += arr(i)\n        }\n        return sum", "        // Write your\
    \ code here\n        var sum = 0l\n        for (i <- 0 until k.toInt) {\n    \
    \        if (arr(i) < 100) {\n                sum += arr(i)\n            }\n \
    \       }\n        return sum", "        //\n        // Your code goes here.\n\
    \        //\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum", "        var result : Long = 0\n        for (i\
    \ <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n                result\
    \ += arr(i)\n            }\n        }\n        return result", "        // Fill\
    \ in the code here\n        var sum : Long = 0\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) {\n                sum += arr(i)\n        \
    \    }\n        }\n        return sum", "        var sum : Long = 0\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        return sum", "        var sum : Long = 0l\n        for (i <- 0\
    \ until k.toInt) {\n            val n = arr(i)\n            if (n < 100) sum +=\
    \ n\n        }\n        return sum", "        // Write your code here\n      \
    \  return 0l", "        // Given a non-empty array of integers arr and an integer\
    \ k, return\n        // the sum of the elements with at most two digits from the\
    \ first k elements of arr.\n        // >>> addElements((List[Long](111l.toLong,\
    \ 21l.toLong, 3l.toLong, 4000l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong,\
    \ 9l.toLong)), (4l))\n        // (24l)\n        // Constraints:\n        // 1.\
    \ 1 <= len(arr) <= 100\n        // 2. 1 <= k <= len(arr)\n        var sum : Long\
    \ = 0l\n        for (i <- 0l until k) {\n            if (arr(i.toInt).toString.length\
    \ <= 2) {\n                sum += arr(i.toInt)\n            }\n        }\n   \
    \     return sum", "        var sum : Long = 0\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        return sum", "        // Fill in the code here\n        var sum = 0l\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        sum", "        // Write your code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum", "        // Write your code here\n        return 0l", "  \
    \      // Fill in the code here\n        arr.take(k.toInt).filter(x => x < 100).sum",
  "        // We can use a foldLeft to iterate through the list and sum the elements\
    \ with at most two digits.\n        // We can use a pattern match to determine\
    \ if the element has at most two digits.\n        // We can use a pattern match\
    \ to determine if the element has at most two digits.\n        // We can use a\
    \ pattern match to determine if the element has at most two digits.\n        //\
    \ We can use a pattern match to determine if the element has at most two digits.\n\
    \        // We can use a pattern match to determine if the element has at most\
    \ two digits.\n        // We can use a pattern match to determine if the element\
    \ has at most two digits.\n        // We can use a pattern match to determine\
    \ if the element has at most two digits.\n        // We can use a pattern match\
    \ to determine if the element has at most two digits.\n        // We can use a\
    \ pattern match to determine if the element has at most two digits.\n        //\
    \ We can use a pattern match to determine if the element has at most two digits.\n\
    \        // We can use a pattern match to determine if the element has at most\
    \ two digits.\n        // We can use a pattern match to determine if the element\
    \ has at most two digits.\n        // We can use a pattern match to determine\
    \ if the element has at most two digits.\n        // We can use a pattern match\
    \ to determine if the element has at most two digits.\n        // We can use a\
    \ pattern match to determine if the element has at most two digits.\n        //\
    \ We can use a pattern match to determine if the element has at most two digits.\n\
    \        // We can use a pattern match to determine if the element has at most\
    \ two digits.\n        // We can use a pattern match to determine if the element\
    \ has at most two digits.\n        // We can use a pattern match to determine\
    \ if the element has at most two digits.\n        // We can use a pattern match\
    \ to determine if the element has at most two digits.\n        // We can use a\
    \ pattern match to determine if the element has at most two digits.\n        //\
    \ We can use a pattern match to determine if the element has at most two digits.\n\
    \        // We can use a pattern match to determine if the element has at most\
    \ two digits.\n        // We can use a pattern match to determine if the element\
    \ has at most two digits.\n        // We can use a", "        // We can use a\
    \ foldLeft to iterate through the list and sum up the elements.\n        // We\
    \ can also use a filter to only include elements with at most two digits.\n  \
    \      // We can use a take to only take the first k elements.\n        // We\
    \ can use a map to convert the elements to Longs.\n        // We can use a sum\
    \ to sum up the elements.\n        // We can use a toList to convert the elements\
    \ to a list.\n        // We can use a filter to only include elements with at\
    \ most two digits.\n        // We can use a take to only take the first k elements.\n\
    \        // We can use a map to convert the elements to Longs.\n        // We\
    \ can use a sum to sum up the elements.\n        // We can use a toList to convert\
    \ the elements to a list.\n        // We can use a filter to only include elements\
    \ with at most two digits.\n        // We can use a take to only take the first\
    \ k elements.\n        // We can use a map to convert the elements to Longs.\n\
    \        // We can use a sum to sum up the elements.\n        // We can use a\
    \ toList to convert the elements to a list.\n        // We can use a filter to\
    \ only include elements with at most two digits.\n        // We can use a take\
    \ to only take the first k elements.\n        // We can use a map to convert the\
    \ elements to Longs.\n        // We can use a sum to sum up the elements.\n  \
    \      // We can use a toList to convert the elements to a list.\n        // We\
    \ can use a filter to only include elements with at most two digits.\n       \
    \ // We can use a take to only take the first k elements.\n        // We can use\
    \ a map to convert the elements to Longs.\n        // We can use a sum to sum\
    \ up the elements.\n        // We can use a toList to convert the elements to\
    \ a list.\n        // We can use a filter to only include elements with at most\
    \ two digits.\n        // We can use a take to only take the first k elements.\n\
    \        // We can use a map to convert the elements to Longs.\n        // We\
    \ can use a sum to sum up the elements.\n        // We can use a toList to convert\
    \ the elements to a list.\n        // We", "        // Fill in the code here\n\
    \        val arr2 = arr.filter(x => x < 100)\n        arr2.take(k.toInt).sum",
  "        // Write your code here\n        var sum : Long = 0\n        for (i <-\
    \ 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum +=\
    \ arr(i)\n            }\n        }\n        return sum", "        var sum = 0l\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) >= 10 && arr(i)\
    \ < 100) sum += arr(i)\n        }\n        return sum", "        // Fill in the\
    \ code here\n        arr.take(k.toInt).filter(x => x < 100).sum", "        //\
    \ Good luck!\n        arr.take(k.toInt).filter(x => x < 100).sum", "        //\
    \ Fill in the code here.\n        var sum = 0l\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum", " \
    \       // Implement this function\n        return 0l", "        var sum : Long\
    \ = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum\
    \ += arr(i)\n        }\n        return sum", "        //\n        // Your code\
    \ goes here.\n        //\n        var sum : Long = 0l\n        for (i <- 0 until\
    \ k.toInt) {\n            if (arr(i) < 100) {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        // Write your code here\n\
    \        arr.filter(x => x < 100).take(k.toInt).sum", "        //\n        //\
    \ Your code goes here.\n        //\n        var sum = 0l\n        for (i <- 0\
    \ until k.toInt) {\n            if (arr(i) < 100) {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        var sum : Long = 0\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        return sum", "        //\n        // Your code goes here.\n\
    \        //\n        arr.take(k.toInt).filter(x => x < 100).sum", "        //\
    \ Write your code here\n        var sum = 0l\n        for (i <- 0 until k.toInt)\
    \ {\n            val num = arr(i)\n            if (num < 100) sum += num\n   \
    \     }\n        sum", "        // Implement this function\n        var sum =\
    \ 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n\
    \                sum += arr(i)\n            }\n        }\n        return sum",
  "        val a = arr.filter(x => x < 100).take(k.toInt)\n        a.sum", "     \
    \   // Write your code here\n        var sum : Long = 0\n        for (i <- 0 to\
    \ k.toInt - 1) {\n            if (arr(i) < 100) {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        var sum : Long = 0\n\
    \        for (i <- 0 until k.toInt) {\n            var num : Long = arr(i)\n \
    \           while (num >= 10) {\n                num /= 10\n            }\n  \
    \          sum += num\n        }\n        return sum", "        // Implement this\
    \ function\n        arr.take(k.toInt).filter(x => x < 100).sum", "        // Write\
    \ your code here\n        var sum = 0l\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum", "        // We can use a foldLeft to sum the\
    \ first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a foldLeft to sum the first\
    \ k elements of arr.\n        // We can use a foldLeft to sum the first k elements\
    \ of arr.\n        // We can use a foldLeft to sum the first k elements of arr.\n\
    \        // We can use a foldLeft to sum the first k elements of arr.\n      \
    \  // We can use a foldLeft to sum the first k elements of arr.\n        // We\
    \ can use a foldLeft to sum the first k elements of arr.\n        // We can use\
    \ a foldLeft to sum the first k elements of arr.\n        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a foldLeft to sum\
    \ the first k elements of arr.\n        // We can use a fold", "        var sum\
    \ : Long = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100)\
    \ {\n                sum += arr(i)\n            }\n        }\n        return sum",
  "        // Write your code here\n        return 0", "        // Write your code\
    \ here\n        var sum = 0l\n        for (i <- 0 until k.toInt) {\n         \
    \   val num = arr(i)\n            if (num < 100) sum += num\n        }\n     \
    \   sum", "        // Fill in the code here\n        var sum = 0l\n        for\
    \ (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n    \
    \    }\n        sum", "        var sum : Long = 0\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum",
  "        //\n        // Your code goes here\n        //\n        return 0l.toLong",
  "        // Write your code here\n        var sum = 0l\n        for (i <- 0 until\
    \ k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n       \
    \ return sum", "        // Fill in the code here\n        var sum = 0l\n     \
    \   for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        sum", "        //\n        // Your code goes here.\n     \
    \   //\n        var sum : Long = 0l\n        for (i <- 0 to k.toInt - 1) {\n \
    \           if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum", "        // Implement this function\n       \
    \ var sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i) <\
    \ 100) sum += arr(i)\n        }\n        return sum", "        // Write your code\
    \ here\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n   \
    \         if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum", "        // We can use the fact that the sum\
    \ of the first n integers is n(n+1)/2\n        // to find the sum of the first\
    \ k elements of arr.\n        // We can then subtract the sum of the elements\
    \ with more than two digits\n        // from the first k elements of arr.\n  \
    \      // The sum of the elements with more than two digits from the first k elements\
    \ of arr\n        // is the sum of the elements with more than two digits from\
    \ the first k - 1 elements of arr\n        // plus the sum of the elements with\
    \ more than two digits from the first k elements of arr.\n        // The sum of\
    \ the elements with more than two digits from the first k - 1 elements of arr\n\
    \        // is the sum of the elements with more than two digits from the first\
    \ k - 2 elements of arr\n        // plus the sum of the elements with more than\
    \ two digits from the first k - 1 elements of arr.\n        // The sum of the\
    \ elements with more than two digits from the first k - 2 elements of arr\n  \
    \      // is the sum of the elements with more than two digits from the first\
    \ k - 3 elements of arr\n        // plus the sum of the elements with more than\
    \ two digits from the first k - 2 elements of arr.\n        // ...\n        //\
    \ The sum of the elements with more than two digits from the first k - (k - 1)\
    \ elements of arr\n        // is the sum of the elements with more than two digits\
    \ from the first k - (k - 1) - 1 elements of arr\n        // plus the sum of the\
    \ elements with more than two digits from the first k - (k - 1) elements of arr.\n\
    \        // The sum of the elements with more than two digits from the first k\
    \ - (k - 1) - 1 elements of arr\n        // is the sum of the elements with more\
    \ than two digits from the first k - (k - 1) - 2 elements of arr\n        // plus\
    \ the sum of the elements with more than two digits from the first k - (k - 1)\
    \ - 1 elements of arr.\n        // ...\n        // The sum of the elements with\
    \ more than two digits from the first k - (k - 1) - (k - 2) elements of arr\n\
    \        // is the sum of the elements with more than two digits from the first\
    \ k - (k - 1) - (k - 2) - 1", "        // Write your code here\n        val arr2\
    \ = arr.map(x => x.toString.length).zip(arr).filter(x => x._1 <= 2).map(x => x._2)\n\
    \        arr2.take(k.toInt).sum", "        // Write your code here\n        var\
    \ sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100)\
    \ sum += arr(i)\n        }\n        return sum", "        var sum : Long = 0\n\
    \        for (i <- 0 until k.toInt) {\n            var num : Long = arr(i)\n \
    \           while (num > 0) {\n                sum += num % 10\n             \
    \   num /= 10\n            }\n        }\n        return sum", "        // Recursive\
    \ function to add elements with at most two digits\n        def addElementsRec(arr\
    \ : List[Long], k : Long, sum : Long) : Long = {\n            if (k == 0) sum\n\
    \            else if (arr.head < 100) addElementsRec(arr.tail, k - 1, sum + arr.head)\n\
    \            else addElementsRec(arr.tail, k - 1, sum)\n        }\n        //\
    \ Call recursive function\n        addElementsRec(arr, k, 0)", "        // We\
    \ can use the fact that the maximum value of a two digit number is 99.\n     \
    \   // We can also use the fact that the minimum value of a two digit number is\
    \ 10.\n        // We can also use the fact that the maximum value of a one digit\
    \ number is 9.\n        // We can also use the fact that the minimum value of\
    \ a one digit number is 0.\n        // We can also use the fact that the maximum\
    \ value of a three digit number is 999.\n        // We can also use the fact that\
    \ the minimum value of a three digit number is 100.\n        // We can also use\
    \ the fact that the maximum value of a four digit number is 9999.\n        //\
    \ We can also use the fact that the minimum value of a four digit number is 1000.\n\
    \        // We can also use the fact that the maximum value of a five digit number\
    \ is 99999.\n        // We can also use the fact that the minimum value of a five\
    \ digit number is 10000.\n        // We can also use the fact that the maximum\
    \ value of a six digit number is 999999.\n        // We can also use the fact\
    \ that the minimum value of a six digit number is 100000.\n        // We can also\
    \ use the fact that the maximum value of a seven digit number is 9999999.\n  \
    \      // We can also use the fact that the minimum value of a seven digit number\
    \ is 1000000.\n        // We can also use the fact that the maximum value of a\
    \ eight digit number is 99999999.\n        // We can also use the fact that the\
    \ minimum value of a eight digit number is 10000000.\n        // We can also use\
    \ the fact that the maximum value of a nine digit number is 999999999.\n     \
    \   // We can also use the fact that the minimum value of a nine digit number\
    \ is 100000000.\n        // We can also use the fact that the maximum value of\
    \ a ten digit number is 9999999999.\n        // We can also use the fact that\
    \ the minimum value of a ten digit number is 1000000000.\n        // We can also\
    \ use the fact that the maximum value of a eleven digit number is 99999999999.\n\
    \        // We can also use the fact that the minimum value of a eleven digit\
    \ number is 10000000000.\n        // We can also use the fact that the maximum\
    \ value of a twelve digit number is 999999999999.\n        // We can also", " \
    \       // Write your code here\n        var result : Long = 0\n        for (i\
    \ <- 0 until k.toInt) {\n            if (arr(i) < 100) result += arr(i)\n    \
    \    }\n        return result", "        //\n        // Your code goes here\n\
    \        //\n        return 0", "        var sum : Long = 0\n        for (i <-\
    \ 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n\
    \        return sum", "        var sum : Long = 0\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum",
  "        // Good luck!\n        var sum = 0l\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum", " \
    \       // Write your code here\n        return 0l", "        // Good luck!\n\
    \        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n          \
    \  if (arr(i) < 100) sum += arr(i)\n        }\n        return sum", "        var\
    \ sum : Long = 0\n        for (i <- 0 until k.toInt) {\n            val n = arr(i)\n\
    \            if (n < 100) sum += n\n        }\n        return sum", "        var\
    \ sum : Long = 0\n        for (i <- 0 until k.toInt) {\n            val x = arr(i)\n\
    \            if (x < 100) {\n                sum += x\n            }\n       \
    \ }\n        return sum", "        // We can use a foldLeft to sum the elements\
    \ of the list.\n        // We can use a takeWhile to take the first k elements.\n\
    \        // We can use a filter to only take the elements with at most two digits.\n\
    \        // We can use a map to convert the elements to Longs.\n        arr.takeWhile((x\
    \ : Long) => x <= k).filter((x : Long) => x < 100).map((x : Long) => x.toLong).foldLeft(0l)((x\
    \ : Long, y : Long) => x + y)", '        arr.take(k.toInt).filter(x => x < 100).sum',
  "        // Write your code here\n        return 0l", "        //\n        // Your\
    \ code goes here.\n        //\n        var sum = 0l\n        for (i <- 0 until\
    \ k.toInt) {\n            if (arr(i) < 100) {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        //\n        // Your code\
    \ goes here.\n        //\n        var sum = 0l\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) {\n                sum += arr(i)\n        \
    \    }\n        }\n        return sum", "        //\n        // Your code goes\
    \ here\n        //\n        var sum : Long = 0\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum",
  "        // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (4l))\n        // (24l)\n\
    \        // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (3l))\n        // (18l)\n\
    \        // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (2l))\n        // (12l)\n\
    \        // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (1l))\n        // (6l)\n\
    \        // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (0l))\n        // (0l)\n\
    \        // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong)), (5l))\n        // (30l)\n\
    \        // >>> addElements((List[Long](111l.toLong, 21l.toLong, 3l.toLong, 4000l.toLong,\
    \ 5l.toLong, 6l.toLong, 7l", "        // Implement this function\n        var\
    \ sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100)\
    \ {\n                sum += arr(i)\n            }\n        }\n        return sum",
  "        // Write your code here\n        var sum = 0l\n        for (i <- 0 until\
    \ k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n       \
    \ return sum", "        var sum : Long = 0\n        for (i <- 0 until k.toInt)\
    \ {\n            val n = arr(i)\n            if (n < 100) sum += n\n        }\n\
    \        return sum", "        // Fill in the code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum", "        // We can use a prefix sum to solve this problem.\n\
    \        // We can create a prefix sum array where each element is the sum of\
    \ the previous elements.\n        // We can then subtract the sum of the elements\
    \ before the first element with at most two digits\n        // from the sum of\
    \ the elements before the kth element with at most two digits.\n        // This\
    \ will give us the sum of the elements with at most two digits from the first\
    \ k elements.\n        // We can then return this value.\n        // We can use\
    \ a prefix sum to solve this problem.\n        // We can create a prefix sum array\
    \ where each element is the sum of the previous elements.\n        // We can then\
    \ subtract the sum of the elements before the first element with at most two digits\n\
    \        // from the sum of the elements before the kth element with at most two\
    \ digits.\n        // This will give us the sum of the elements with at most two\
    \ digits from the first k elements.\n        // We can then return this value.\n\
    \        // We can use a prefix sum to solve this problem.\n        // We can\
    \ create a prefix sum array where each element is the sum of the previous elements.\n\
    \        // We can then subtract the sum of the elements before the first element\
    \ with at most two digits\n        // from the sum of the elements before the\
    \ kth element with at most two digits.\n        // This will give us the sum of\
    \ the elements with at most two digits from the first k elements.\n        //\
    \ We can then return this value.\n        // We can use a prefix sum to solve\
    \ this problem.\n        // We can create a prefix sum array where each element\
    \ is the sum of the previous elements.\n        // We can then subtract the sum\
    \ of the elements before the first element with at most two digits\n        //\
    \ from the sum of the elements before the kth element with at most two digits.\n\
    \        // This will give us the sum of the elements with at most two digits\
    \ from the first k elements.\n        // We can then return this value.\n    \
    \    // We can use a prefix sum to solve this problem.\n        // We can create\
    \ a prefix sum array where each element is the sum of the previous elements.\n\
    \        // We can then subtract the sum of the elements before the first element\
    \ with at most two digits\n        // from the sum of the elements before the\
    \ kth element with at most two digits.", "        // Fill in the code here\n \
    \       return 0l", "        // Fill in the code here\n        var sum = 0l\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n     \
    \           sum += arr(i)\n            }\n        }\n        return sum", "  \
    \      // Fill up this function body\n        // 'arr' is a list of integers\n\
    \        // 'k' is an integer\n        // Return the sum of the elements with\
    \ at most two digits from the first k elements of arr\n        var sum : Long\
    \ = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n\
    \                sum += arr(i)\n            }\n        }\n        return sum",
  "        // Write your code here\n        var sum = 0l\n        for (i <- 0 until\
    \ k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n       \
    \ return sum", "        // Write your code here\n        return 0", "        //\
    \ Write your code here\n        return 0l", "        var sum : Long = 0\n    \
    \    for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) {\n         \
    \       sum += arr(i)\n            }\n        }\n        return sum", "      \
    \  // We need to add the first k elements of arr.\n        // We can do this by\
    \ using a for loop.\n        // We can use a for loop to iterate through the first\
    \ k elements of arr.\n        // We can use a for loop to iterate through the\
    \ first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can use a for loop to iterate through\
    \ the first k elements of arr.\n        // We can", "        // Fill in the code\
    \ here\n        arr.take(k.toInt).filter(x => x < 100).sum", "        // Write\
    \ your code here\n        arr.take(k.toInt).filter(x => x < 100).sum", "     \
    \   // Define the function here\n        var sum : Long = 0\n        for (i <-\
    \ 0 until k.toInt) {\n            if (arr(i).toString.length <= 2) {\n       \
    \         sum += arr(i)\n            }\n        }\n        return sum", "    \
    \    var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n            if\
    \ (arr(i) < 100) {\n                sum += arr(i)\n            }\n        }\n\
    \        return sum", "        var sum : Long = 0\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        return sum",
  "        // We can use the foldLeft method to sum the elements of the list.\n  \
    \      // We can use the take method to get the first k elements of the list.\n\
    \        // We can use the filter method to get the elements with at most two\
    \ digits.\n        // We can use the toString method to get the string representation\
    \ of the elements.\n        // We can use the length method to get the length\
    \ of the string representation of the elements.\n        // We can use the toLong\
    \ method to convert the elements to Long.\n        arr.take(k.toInt).filter(x\
    \ => x.toString.length <= 2).foldLeft(0l)(_ + _)", "        // Implement this\
    \ function\n        var sum = 0l\n        for (i <- 0 until k.toInt) {\n     \
    \       if (arr(i) < 100) sum += arr(i)\n        }\n        return sum", "   \
    \     // Good luck!\n        var sum = 0l\n        for (i <- 0 until k.toInt)\
    \ {\n            if (arr(i) < 100) sum += arr(i)\n        }\n        sum", " \
    \       // Write your code here\n        var sum : Long = 0\n        for (i <-\
    \ 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum +=\
    \ arr(i)\n            }\n        }\n        return sum", "        // Write your\
    \ code here\n        arr.take(k.toInt).filter(x => x.toString.length <= 2).sum",
  '        arr.take(k.toInt).filter(x => x < 100).sum', "        // Write your code\
    \ here\n        var sum = 0l\n        for (i <- 0 until k.toInt) {\n         \
    \   if (arr(i) < 100) sum += arr(i)\n        }\n        return sum", "       \
    \ // Implement this function\n        var sum : Long = 0\n        for (i <- 0\
    \ until k.toInt) {\n            if (arr(i) < 100) {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        // your code here\n \
    \       var sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) sum += arr(i)\n        }\n        sum", "        // Write your code here\n\
    \        var sum = 0l\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ > 9 && arr(i) < 100) {\n                sum += arr(i)\n            }\n     \
    \   }\n        return sum", "        var sum : Long = 0\n        for (i <- 0 until\
    \ k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n        }\n       \
    \ return sum", "        // Write your code here\n        return 0l", "       \
    \ // Write your code here\n        return 0l", "        // Fill in the missing\
    \ code here.\n        return 0l;", "        //\n        // Your code goes here.\n\
    \        //\n        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n\
    \            if (arr(i) < 100) {\n                sum += arr(i)\n            }\n\
    \        }\n        return sum", "        // Implement this function\n       \
    \ return 0l", "        // We can use a sliding window of size 2 to find the number\
    \ of digits in each element.\n        // If the number of digits is greater than\
    \ 2, we can skip the element.\n        // If the number of digits is less than\
    \ 2, we can add the element to the sum.\n        // Time Complexity: O(n)\n  \
    \      // Space Complexity: O(1)\n        var sum : Long = 0\n        var i :\
    \ Long = 0\n        while (i < k) {\n            if (arr(i.toInt).toString.length\
    \ <= 2) {\n                sum += arr(i.toInt)\n            }\n            i +=\
    \ 1\n        }\n        return sum", "        // We can use the foldLeft method\
    \ to iterate through the list,\n        // and add the elements to a sum variable.\n\
    \        // We can use the take method to get the first k elements of the list.\n\
    \        // We can use the filter method to get the elements with at most two\
    \ digits.\n        // We can use the toString method to get the number of digits\
    \ of an element.\n        // We can use the length method to get the length of\
    \ a string.\n        // We can use the toLong method to convert an integer to\
    \ a long.\n        // We can use the toInt method to convert a long to an integer.\n\
    \        // We can use the toDouble method to convert a long to a double.\n  \
    \      // We can use the floor method to get the floor of a double.\n        //\
    \ We can use the pow method to get the power of a double.\n        // We can use\
    \ the toLong method to convert a double to a long.\n        // We can use the\
    \ toString method to convert a long to a string.\n        // We can use the toLong\
    \ method to convert a string to a long.\n        // We can use the toInt method\
    \ to convert a string to an integer.\n        // We can use the toLong method\
    \ to convert an integer to a long.\n        // We can use the toDouble method\
    \ to convert a long to a double.\n        // We can use the floor method to get\
    \ the floor of a double.\n        // We can use the pow method to get the power\
    \ of a double.\n        // We can use the toLong method to convert a double to\
    \ a long.\n        // We can use the toString method to convert a long to a string.\n\
    \        // We can use the toLong method to convert a string to a long.\n    \
    \    // We can use the toInt method to convert a string to an integer.\n     \
    \   // We can use the toLong method to convert an integer to a long.\n       \
    \ // We can use the toDouble method to convert a long to a double.\n        //\
    \ We can use the floor method to get the floor of a double.\n        // We can\
    \ use the pow method to get the power of a double.\n        // We can use the\
    \ toLong method to convert a double to a long.\n        // We can use the toString\
    \ method to convert a long to a string.", "        var sum : Long = 0\n      \
    \  for (i <- 0 until k.toInt) {\n            val x = arr(i)\n            if (x\
    \ < 100) {\n                sum += x\n            }\n        }\n        return\
    \ sum", "        // Write your code here\n        var sum = 0l\n        for (i\
    \ <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n       \
    \ }\n        return sum", "        var sum : Long = 0\n        for (i <- 0 until\
    \ k.toInt) {\n            val x = arr(i)\n            if (x < 100) sum += x\n\
    \        }\n        return sum", "        // Good luck!\n        var sum = 0l\n\
    \        for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        sum", "        // Fill this\n        return 0l", "       \
    \ // Implement this function\n        return 0l", "        // We can use a foldLeft\
    \ to sum the first k elements of arr.\n        // We can use a filter to filter\
    \ out elements with more than two digits.\n        // We can use a map to convert\
    \ the elements to Longs.\n        arr.take(k.toInt).filter(x => x < 100).map(x\
    \ => x.toLong).foldLeft(0l)(_ + _)", "        var sum : Long = 0\n        for\
    \ (i <- 0 until k.toInt) {\n            val num : Long = arr(i)\n            if\
    \ (num < 100) sum += num\n        }\n        return sum", "        // Write your\
    \ code here\n        return 0l", "        // Your code here\n        arr.take(k.toInt).filter(x\
    \ => x < 100).sum", "        // Write your code here\n        var sum = 0l\n \
    \       for (i <- 0 until k.toInt) {\n            if (arr(i) < 100) sum += arr(i)\n\
    \        }\n        return sum", "        var sum : Long = 0\n        for (i <-\
    \ 0 until k.toInt) {\n            if (arr(i) < 100) {\n                sum +=\
    \ arr(i)\n            }\n        }\n        return sum", "        // Write your\
    \ code here\n        var sum = 0l\n        for (i <- 0 until k.toInt) {\n    \
    \        if (arr(i) < 100) {\n                sum += arr(i)\n            }\n \
    \       }\n        return sum", "        // Write your code here\n        var\
    \ sum : Long = 0\n        for (i <- 0 until k.toInt) {\n            if (arr(i)\
    \ < 100) {\n                sum += arr(i)\n            }\n        }\n        return\
    \ sum", "        // Write your code here\n        var sum = 0l\n        for (i\
    \ <- 0 until k.toInt) {\n            val n = arr(i)\n            if (n < 100)\
    \ sum += n\n        }\n        sum", "        // your code here\n        return\
    \ 0l", '        arr.take(k.toInt).filter(x => x < 100).sum', "        // Write\
    \ your code here\n        arr.take(k.toInt).filter(x => x < 100).sum", "     \
    \   // Write your code here\n        var sum : Long = 0\n        for (i <- 0 until\
    \ k.toInt) {\n            if (arr(i) < 100) {\n                sum += arr(i)\n\
    \            }\n        }\n        return sum", "        // Write your code here\n\
    \        var sum : Long = 0\n        for (i <- 0 until k.toInt) {\n          \
    \  if (arr(i) < 100) sum += arr(i)\n        }\n        return sum"]
stop_tokens:
- "\n    }\n"
