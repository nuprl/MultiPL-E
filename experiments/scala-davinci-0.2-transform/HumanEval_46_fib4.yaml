name: HumanEval_46_fib4
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n    // fib4(2)\
  \ -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3)\
  \ + fib4(n-4).\n    // Please write a function to efficiently compute the n-th element\
  \ of the fib4 number sequence.  Do not use recursion.\n    // >>> fib4((5l))\n \
  \   // (4l)\n    // >>> fib4((6l))\n    // (8l)\n    // >>> fib4((7l))\n    // (14l)\n\
  \    def fib4(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fib4((5l)) == (4l));\n\
  \    assert(fib4((8l)) == (28l));\n    assert(fib4((10l)) == (104l));\n    assert(fib4((12l))\
  \ == (386l));\n    }\n\n}\n"
completions: ["        // Fill up this function body\n        // You may also define\
    \ any auxiliary functions you may need\n        var a = 0L\n        var b = 0L\n\
    \        var c = 2L\n        var d = 0L\n        var i = 0L\n        if (n ==\
    \ 0) {\n            return 0L\n        }\n        if (n == 1) {\n            return\
    \ 0L\n        }\n        if (n == 2) {\n            return 2L\n        }\n   \
    \     if (n == 3) {\n            return 0L\n        }\n        for (i <- 4 to\
    \ n) {\n            d = a + b + c\n            a = b\n            b = c\n    \
    \        c = d\n        }\n        return d", "        // Fill up this function\
    \ body\n        // You may also define other functions\n        // This function\
    \ should return a Long value\n        return 0", "        var a = 0l\n       \
    \ var b = 0l\n        var c = 2l\n        var d = 0l\n        var i = 3l\n   \
    \     while (i <= n) {\n            d = a + b + c + d\n            a = b\n   \
    \         b = c\n            c = d\n            i += 1\n        }\n        d",
  "        var a = 0l\n        var b = 0l\n        var c = 2l\n        var d = 0l\n\
    \        for (i <- 3l to n) {\n            d = a + b + c + d\n            a =\
    \ b\n            b = c\n            c = d\n        }\n        return d", "   \
    \     // Fill up this function body\n        // You can add another function as\
    \ well, if required\n        var a = 0l\n        var b = 0l\n        var c = 2l\n\
    \        var d = 0l\n        var i = 3l\n        while (i <= n) {\n          \
    \  d = a + b + c + d\n            a = b\n            b = c\n            c = d\n\
    \            i += 1\n        }\n        d", "        // Fill up this function\
    \ body\n        // You may also define new functions as you wish\n        // You\
    \ may also define new classes as you wish\n        var a = 0l\n        var b =\
    \ 0l\n        var c = 2l\n        var d = 0l\n        var i = 3l\n        while\
    \ (i <= n) {\n            d = a + b + c\n            a = b\n            b = c\n\
    \            c = d\n            i += 1\n        }\n        d", "        // Fill\
    \ up this function body\n        // You can add another function as well, if required\n\
    \        0", "        var a = 0l\n        var b = 0l\n        var c = 2l\n   \
    \     var d = 0l\n        var i = 3l\n        while (i <= n) {\n            d\
    \ = a + b + c + d\n            a = b\n            b = c\n            c = d\n \
    \           i += 1\n        }\n        d", "        // Fill up this function body\n\
    \        // You can add another function as well, if required\n        0", " \
    \       // Fill up this function body\n        // You may also define any auxiliary\
    \ functions you may need\n        0", "        // Fill up this function body\n\
    \        // You may also define other functions\n        // This function should\
    \ return the n-th element of the fib4 number sequence\n        var a = 0l\n  \
    \      var b = 0l\n        var c = 2l\n        var d = 0l\n        var e = 0l\n\
    \        for (i <- 4l to n) {\n            e = a + b + c + d\n            a =\
    \ b\n            b = c\n            c = d\n            d = e\n        }\n    \
    \    return e", "        // Fill up this function body\n        // You may also\
    \ define other functions as you wish\n        0", "        var a = 0l\n      \
    \  var b = 0l\n        var c = 2l\n        var d = 0l\n        for (i <- 3l to\
    \ n) {\n            d = a + b + c + d\n            a = b\n            b = c\n\
    \            c = d\n        }\n        d", "        var a = 0l\n        var b\
    \ = 0l\n        var c = 2l\n        var d = 0l\n        var e = 0l\n        for\
    \ (i <- 4l to n) {\n            e = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            d = e\n        }\n        return e",
  "        // Fill up this function body\n        // You may also define any auxiliary\
    \ functions you may need\n        0", "        // Fill up this function body\n\
    \        // You may also define any auxiliary functions you may need\n       \
    \ 0", "        // Fill up this function body\n        // You may also define any\
    \ auxiliary functions you may need\n        var a = 0l\n        var b = 0l\n \
    \       var c = 2l\n        var d = 0l\n        for (i <- 4l to n) {\n       \
    \     d = a + b + c\n            a = b\n            b = c\n            c = d\n\
    \        }\n        d", "        // Fill up this function body\n        // You\
    \ can add another function as well, if required\n        var a = 0l\n        var\
    \ b = 0l\n        var c = 2l\n        var d = 0l\n        var i = 3l\n       \
    \ while (i <= n) {\n            d = a + b + c + d\n            a = b\n       \
    \     b = c\n            c = d\n            i += 1\n        }\n        d", " \
    \       // Fill up this function body\n        // You may also define any auxiliary\
    \ functions you may need\n        0", "        // Fill up this function body\n\
    \        // You may also define any auxiliary functions you may need\n       \
    \ 0"]
stop_tokens:
- "\n    }\n"
