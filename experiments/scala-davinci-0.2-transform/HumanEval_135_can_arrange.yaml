name: HumanEval_135_can_arrange
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Create a function which returns the largest index of an element which\n\
  \    // is not greater than or equal to the element immediately preceding it. If\n\
  \    // no such element exists then return -1. The given array will not contain\n\
  \    // duplicate values.\n    // Examples:\n    // >>> canArrange((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)))\n    // (3l)\n    // >>> canArrange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong)))\n    // (-1l)\n    def canArrange(arr : List[Long]) :\
  \ Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(canArrange((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))) == (3l));\n    assert(canArrange((List[Long](1l.toLong,\
  \ 2l.toLong, 4l.toLong, 5l.toLong))) == (-1l));\n    assert(canArrange((List[Long](1l.toLong,\
  \ 4l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)))\
  \ == (2l));\n    assert(canArrange((List[Long](4l.toLong, 8l.toLong, 5l.toLong,\
  \ 7l.toLong, 3l.toLong))) == (4l));\n    assert(canArrange((List[Long]())) == (-1l));\n\
  \    }\n\n}\n"
completions: ["        var max = -1l\n        for (i <- 0 until arr.length - 1) {\n\
    \            if (arr(i) <= arr(i + 1)) {\n                max = i\n          \
    \  }\n        }\n        max", "        var max = -1l\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n               \
    \ max = max max i\n            }\n        }\n        max", "        var max =\
    \ -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >=\
    \ arr(i + 1)) {\n                if (i > max) max = i\n            }\n       \
    \ }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(0l)\n\
    \        for (i <- 1 until n) {\n            if (arr(i) >= arr(i - 1)) {\n   \
    \             dp(i) = dp(i - 1) + 1\n            }\n        }\n        var max\
    \ = 0l\n        for (i <- 0 until n) {\n            max = max max dp(i)\n    \
    \    }\n        max", "        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max\
    \ i\n            }\n        }\n        max", "        var maxIndex = -1\n    \
    \    var maxValue = -1\n        for (i <- 0 until arr.length - 1) {\n        \
    \    if (arr(i) <= arr(i + 1)) {\n                if (maxValue < arr(i + 1)) {\n\
    \                    maxValue = arr(i + 1).toInt\n                    maxIndex\
    \ = i + 1\n                }\n            }\n        }\n        maxIndex", " \
    \       val n = arr.length\n        val dp = Array.fill(n)(0l)\n        for (i\
    \ <- 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ <= arr(i)) {\n                j = dp(j).toInt\n            }\n            dp(i)\
    \ = j\n        }\n        var max = -1\n        for (i <- 0 until n) {\n     \
    \       if (dp(i) > max) max = dp(i)\n        }\n        max", "        val n\
    \ = arr.length\n        val dp = Array.fill(n)(-1l)\n        def f(i : Int) :\
    \ Long = {\n            if (i == 0) return -1l\n            if (dp(i) != -1) return\
    \ dp(i)\n            var max = -1l\n            for (j <- 0 until i) {\n     \
    \           if (arr(j) <= arr(i)) {\n                    val x = f(j)\n      \
    \              if (x != -1) max = max max (x + 1)\n                }\n       \
    \     }\n            dp(i) = max\n            return max\n        }\n        var\
    \ max = -1l\n        for (i <- 0 until n) max = max max f(i)\n        return max",
  "        var maxIndex = -1l\n        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= max) {\n                max = arr(i)\n   \
    \             maxIndex = i\n            }\n        }\n        maxIndex", "   \
    \     val n = arr.length\n        val max = Array.fill(n)(-1l)\n        for (i\
    \ <- 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) j -= 1\n            if (j >= 0) max(i) = j\n        }\n        var\
    \ ans = -1l\n        for (i <- 0 until n) if (max(i) != -1 && max(i) > ans) ans\
    \ = max(i)\n        ans", "        var maxIndex = -1l\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n               \
    \ maxIndex = i\n            }\n        }\n        maxIndex", "        val arr2\
    \ = arr.zipWithIndex\n        val arr3 = arr2.filter(x => x._1 >= arr2(x._2 -\
    \ 1)._1)\n        if (arr3.length == 0) -1 else arr3.maxBy(_._2)._2", "      \
    \  var max = -1l\n        for (i <- 0 until arr.length - 1) {\n            if\
    \ (arr(i) >= arr(i + 1)) {\n                max = max max i\n            }\n \
    \       }\n        max", "        val n = arr.length\n        var max = -1l\n\
    \        for (i <- 0 until n - 1) {\n            if (arr(i) >= arr(i + 1)) {\n\
    \                max = max max i\n            }\n        }\n        return max",
  "        val n = arr.length\n        val dp = Array.fill(n)(0l)\n        for (i\
    \ <- 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) j -= 1\n            dp(i) = j\n        }\n        var max = -1l\n\
    \        for (i <- 0 until n) if (dp(i) > max) max = dp(i)\n        max", "  \
    \      var max = -1l\n        for (i <- 0 until arr.length - 1) {\n          \
    \  if (arr(i) >= arr(i + 1)) {\n                max = max max i\n            }\n\
    \        }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(0l)\n\
    \        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j\
    \ <- 0 until i) {\n                if (arr(j) <= arr(i)) dp(i) = max(dp(i), dp(j)\
    \ + arr(i))\n            }\n        }\n        dp.max", "        // Fill in the\
    \ code here\n        return -1l", "        var max = -1l\n        var maxIndex\
    \ = -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) <=\
    \ arr(i + 1)) {\n                if (max < arr(i + 1)) {\n                   \
    \ max = arr(i + 1)\n                    maxIndex = i + 1\n                }\n\
    \            }\n        }\n        return maxIndex", "        var maxIndex = -1l\n\
    \        var max = -1l\n        for (i <- 0 until arr.length) {\n            if\
    \ (arr(i) <= max) {\n                maxIndex = i\n                max = arr(i)\n\
    \            }\n        }\n        return maxIndex", "        var max = -1l\n\
    \        for (i <- 0 until arr.length - 1) {\n            if (arr(i) <= arr(i\
    \ + 1)) {\n                max = i\n            }\n        }\n        max", " \
    \       val n = arr.length\n        val dp = Array.fill(n)(0l)\n        for (i\
    \ <- 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) {\n                j = dp(j).toInt\n            }\n            dp(i)\
    \ = j\n        }\n        var maxIndex = -1\n        var maxValue = -1l\n    \
    \    for (i <- 0 until n) {\n            if (dp(i) > maxIndex) {\n           \
    \     maxIndex = dp(i).toInt\n                maxValue = arr(i)\n            }\n\
    \        }\n        maxValue", "        val n = arr.length\n        var max =\
    \ -1\n        for (i <- 0 until n - 1) {\n            if (arr(i) <= arr(i + 1))\
    \ {\n                max = i\n            }\n        }\n        max", "      \
    \  var maxIndex = -1l\n        for (i <- 0 until arr.length - 1) {\n         \
    \   if (arr(i) >= arr(i + 1)) {\n                maxIndex = max(maxIndex, i.toLong)\n\
    \            }\n        }\n        maxIndex", "        val n = arr.length\n  \
    \      var max = -1\n        for (i <- 0 until n - 1) {\n            if (arr(i)\
    \ >= arr(i + 1)) {\n                max = i\n            }\n        }\n      \
    \  max", "        var maxIndex = -1l\n        var max = -1l\n        for (i <-\
    \ arr.indices) {\n            if (arr(i) <= max) {\n                maxIndex =\
    \ i\n                max = arr(i)\n            }\n        }\n        return maxIndex",
  "        // Fill in the code here\n        -1l", "        var max = -1l\n      \
    \  for (i <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1))\
    \ {\n                max = i\n            }\n        }\n        max", "      \
    \  val n = arr.length\n        val dp = Array.fill(n)(-1l)\n        for (i <-\
    \ 0 until n) {\n            val x = arr(i)\n            var j = i - 1\n      \
    \      while (j >= 0 && arr(j) >= x) {\n                if (dp(j) == -1l) dp(j)\
    \ = i\n                else dp(j) = min(dp(j), i)\n                j -= 1\n  \
    \          }\n        }\n        var max = -1l\n        for (i <- 0 until n) {\n\
    \            if (dp(i) != -1l) max = max(max, dp(i))\n        }\n        max",
  "        val n = arr.length\n        var max = -1l\n        for (i <- 0 until n\
    \ - 1) {\n            if (arr(i) <= arr(i + 1)) {\n                max = i\n \
    \           }\n        }\n        max", "        var max = -1l\n        for (i\
    \ <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n    \
    \            max = max max i\n            }\n        }\n        max", "      \
    \  val n = arr.length\n        val a = arr.toArray\n        val b = new Array[Long](n)\n\
    \        for (i <- 0 until n) b(i) = a(i)\n        b.sortWith(_ < _)\n       \
    \ var m = -1\n        for (i <- 0 until n) {\n            if (a(i) == b(i)) m\
    \ = i\n        }\n        return m", "        val n = arr.length\n        val\
    \ l = new Array[Long](n)\n        val r = new Array[Long](n)\n        l(0) = arr(0)\n\
    \        for (i <- 1 until n) {\n            l(i) = min(l(i - 1), arr(i))\n  \
    \      }\n        r(n - 1) = arr(n - 1)\n        for (i <- n - 2 to 0 by -1) {\n\
    \            r(i) = max(r(i + 1), arr(i))\n        }\n        var ans = -1l\n\
    \        for (i <- 0 until n - 1) {\n            if (l(i) <= r(i + 1)) {\n   \
    \             ans = i.toLong\n            }\n        }\n        ans", "      \
    \  var maxIndex = -1l\n        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) <= arr(i + 1) && arr(i + 1) > max) {\n      \
    \          max = arr(i + 1)\n                maxIndex = i + 1\n            }\n\
    \        }\n        maxIndex", "        var max = -1l\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr(i) <= arr(i + 1)) {\n               \
    \ max = i\n            }\n        }\n        max", "        val n = arr.length\n\
    \        val p = Array.fill(n)(0l)\n        for (i <- 1 until n) {\n         \
    \   var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n   \
    \         p(i) = j\n        }\n        var max = -1l\n        for (i <- 0 until\
    \ n) {\n            if (p(i) > max) max = p(i)\n        }\n        max", "   \
    \     val n = arr.length\n        val dp = Array.fill(n)(0)\n        for (i <-\
    \ 1 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) j -= 1\n            dp(i) = j\n        }\n        var max = -1\n\
    \        for (i <- 0 until n) if (dp(i) > max) max = dp(i)\n        max", "  \
    \      var maxIndex = -1l\n        var maxValue = -1l\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) <= maxValue) {\n                maxIndex\
    \ = i\n                maxValue = arr(i)\n            }\n        }\n        return\
    \ maxIndex", "        var max = -1l\n        for (i <- 0 until arr.length - 1)\
    \ {\n            if (arr(i) >= arr(i + 1)) {\n                max = i\n      \
    \      }\n        }\n        max", "        var max = -1l\n        var i = arr.length\
    \ - 1\n        while (i > 0) {\n            if (arr(i) <= arr(i - 1)) {\n    \
    \            max = i\n            }\n            i -= 1\n        }\n        max",
  "        val n = arr.length\n        val dp = Array.fill(n)(0l)\n        for (i\
    \ <- 1 until n) {\n            if (arr(i) >= arr(i - 1)) dp(i) = dp(i - 1) + 1\n\
    \        }\n        var max = 0l\n        for (i <- 0 until n) {\n           \
    \ if (dp(i) > max) max = dp(i)\n        }\n        if (max == 0) -1 else max",
  "        val n = arr.length\n        var max = -1\n        for (i <- 0 until n -\
    \ 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = i\n   \
    \         }\n        }\n        max", "        val n = arr.length\n        val\
    \ dp = Array.fill(n)(-1l)\n        for (i <- 0 until n) {\n            var j =\
    \ i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n                j =\
    \ dp(j).toInt\n            }\n            dp(i) = j\n        }\n        var max\
    \ = -1l\n        for (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n\
    \        }\n        max", "        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = i\n \
    \           }\n        }\n        return max", "        val n = arr.length\n \
    \       var max = -1l\n        for (i <- 0 until n - 1) {\n            if (arr(i)\
    \ >= arr(i + 1)) {\n                max = i\n            }\n        }\n      \
    \  max", "        var max = -1l\n        for (i <- 0 until arr.length - 1) {\n\
    \            if (arr(i) >= arr(i + 1)) {\n                max = max(max, i)\n\
    \            }\n        }\n        max", "        val n = arr.length\n       \
    \ var max = -1\n        for (i <- 1 until n) {\n            if (arr(i) <= arr(i\
    \ - 1)) {\n                max = i - 1\n            }\n        }\n        max",
  "        var maxIndex = -1l\n        var max = -1l\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) <= max) {\n                maxIndex = i\n        \
    \        max = arr(i)\n            }\n        }\n        maxIndex", "        var\
    \ max = -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i)\
    \ >= arr(i + 1)) {\n                max = max max i\n            }\n        }\n\
    \        max", "        val n = arr.length\n        var max = -1\n        for\
    \ (i <- 0 until n - 1) {\n            if (arr(i) >= arr(i + 1)) {\n          \
    \      max = i\n            }\n        }\n        max", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(-1l)\n        def f(i : Int) : Long = {\n    \
    \        if (i == n) -1l\n            else if (dp(i) != -1) dp(i)\n          \
    \  else {\n                var max = -1l\n                for (j <- i + 1 until\
    \ n) {\n                    if (arr(j) <= arr(i)) {\n                        val\
    \ x = f(j)\n                        if (x != -1) max = max max (x + 1)\n     \
    \               }\n                }\n                dp(i) = max\n          \
    \      max\n            }\n        }\n        f(0)", "        var max = -1l\n\
    \        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i\
    \ + 1)) {\n                max = i\n            }\n        }\n        return max",
  "        // Fill in the code here\n        var max = -1\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n               \
    \ max = i\n            }\n        }\n        max", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n  \
    \          dp(i) = j\n        }\n        var max = -1l\n        for (i <- 0 until\
    \ n) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max", " \
    \       val n = arr.length\n        val dp = Array.fill(n)(0l)\n        for (i\
    \ <- 1 until n) {\n            val x = arr(i)\n            var j = i - 1\n   \
    \         while (j >= 0 && arr(j) >= x) j -= 1\n            if (j == -1) dp(i)\
    \ = -1l\n            else dp(i) = j.toLong\n        }\n        var ans = -1l\n\
    \        for (i <- 0 until n) if (dp(i) > ans) ans = dp(i)\n        ans", "  \
    \      var max = -1l\n        for (i <- 0 until arr.length - 1) {\n          \
    \  if (arr(i) >= arr(i + 1)) {\n                max = max max i\n            }\n\
    \        }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(0l)\n\
    \        for (i <- 1 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) j -= 1\n            dp(i) = j\n        }\n    \
    \    var ans = -1l\n        for (i <- 0 until n) {\n            if (dp(i) != -1\
    \ && dp(i) > ans) ans = dp(i)\n        }\n        ans", "        var max = -1l\n\
    \        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i\
    \ + 1)) {\n                max = i\n            }\n        }\n        return max",
  "        val n = arr.length\n        val dp = Array.fill(n)(0l)\n        for (i\
    \ <- 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) {\n                j = dp(j).toInt\n            }\n            dp(i)\
    \ = j\n        }\n        var max = -1\n        for (i <- 0 until n) {\n     \
    \       if (dp(i) > max) max = dp(i)\n        }\n        max", "        val n\
    \ = arr.length\n        val dp = Array.fill(n)(0l)\n        for (i <- 1 until\
    \ n) {\n            var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i))\
    \ j -= 1\n            dp(i) = j\n        }\n        var ans = -1l\n        for\
    \ (i <- 0 until n) {\n            if (dp(i) != -1l && dp(i) > ans) ans = dp(i)\n\
    \        }\n        ans", "        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max\
    \ i\n            }\n        }\n        max", "        val n = arr.length\n   \
    \     val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n           \
    \ var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n     \
    \       dp(i) = j\n        }\n        var ans = -1l\n        for (i <- 0 until\
    \ n) {\n            if (dp(i) != -1l && dp(i) > ans) ans = dp(i)\n        }\n\
    \        ans", "        var max = -1l\n        for (i <- 0 until arr.length -\
    \ 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max\
    \ i\n            }\n        }\n        max", "        var max = -1l\n        for\
    \ (i <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n \
    \               max = max max i\n            }\n        }\n        max", "   \
    \     var max = -1l\n        for (i <- 0 until arr.length - 1) {\n           \
    \ if (arr(i) >= arr(i + 1)) {\n                max = i\n            }\n      \
    \  }\n        max", "        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max\
    \ i\n            }\n        }\n        max", "        val n = arr.length\n   \
    \     val dp = Array.fill(n)(-1l)\n        def canArrange(index : Int) : Long\
    \ = {\n            if (index == n) return -1l\n            if (dp(index) != -1)\
    \ return dp(index)\n            var maxIndex = -1l\n            for (i <- index\
    \ + 1 until n) {\n                if (arr(i) <= arr(index)) {\n              \
    \      val index = canArrange(i)\n                    if (index > maxIndex) maxIndex\
    \ = index\n                }\n            }\n            dp(index) = maxIndex\n\
    \            maxIndex\n        }\n        canArrange(0)", "        var max = -1l\n\
    \        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i\
    \ + 1)) {\n                max = i\n            }\n        }\n        max", " \
    \       var max = -1l\n        for (i <- 0 until arr.length - 1) {\n         \
    \   if (arr(i) >= arr(i + 1)) {\n                max = i\n            }\n    \
    \    }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(0l)\n\
    \        for (i <- 0 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) j -= 1\n            dp(i) = j\n        }\n    \
    \    var max = -1l\n        for (i <- 0 until n) {\n            if (dp(i) > max)\
    \ max = dp(i)\n        }\n        max", "        var max = -1l\n        for (i\
    \ <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n    \
    \            max = max max i\n            }\n        }\n        max", "      \
    \  val n = arr.length\n        val a = arr.toArray\n        val b = new Array[Long](n)\n\
    \        for (i <- 0 until n) b(i) = a(i)\n        b.sortInPlace()\n        val\
    \ c = new Array[Long](n)\n        for (i <- 0 until n) c(i) = a(i)\n        c.sortInPlace()(Ordering[Long].reverse)\n\
    \        var ans = -1l\n        for (i <- 0 until n - 1) {\n            if (b(i)\
    \ == c(i + 1)) {\n                ans = b(i)\n                break\n        \
    \    }\n        }\n        ans", "        var max = -1l\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n               \
    \ max = max max i\n            }\n        }\n        max", "        var max =\
    \ -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >=\
    \ arr(i + 1)) {\n                max = max max i\n            }\n        }\n \
    \       max", "        val n = arr.length\n        val dp = Array.fill(n)(0l)\n\
    \        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j\
    \ <- 0 until i) {\n                if (arr(j) <= arr(i)) dp(i) = max(dp(i), dp(j)\
    \ + arr(i))\n            }\n        }\n        dp.max", "        var max = -1l\n\
    \        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i\
    \ + 1)) {\n                max = max max i\n            }\n        }\n       \
    \ max", "        val n = arr.length\n        val dp = Array.fill(n)(-1l)\n   \
    \     def dfs(i : Int) : Long = {\n            if (i == n) return -1l\n      \
    \      if (dp(i) != -1) return dp(i)\n            var max = -1l\n            for\
    \ (j <- i + 1 until n) {\n                if (arr(j) <= arr(i)) {\n          \
    \          val r = dfs(j)\n                    if (r != -1) max = max max r\n\
    \                }\n            }\n            dp(i) = max\n            return\
    \ max\n        }\n        dfs(0)", "        val n = arr.length\n        val a\
    \ = arr.toArray\n        val dp = Array.fill(n)(0l)\n        for (i <- 0 until\
    \ n) {\n            var j = i - 1\n            while (j >= 0 && a(j) <= a(i))\
    \ {\n                j = dp(j).toInt\n            }\n            dp(i) = j\n \
    \       }\n        var ans = -1l\n        for (i <- 0 until n) {\n           \
    \ if (dp(i) == -1l) {\n                ans = i\n            }\n        }\n   \
    \     ans", "        var maxIndex = -1l\n        var max = -1l\n        for (i\
    \ <- arr.indices) {\n            if (arr(i) <= max) {\n                maxIndex\
    \ = i\n                max = arr(i)\n            }\n        }\n        maxIndex",
  "        // Fill in the code here\n        return -1l", "        var max = -1l\n\
    \        for (i <- 1 until arr.length) {\n            if (arr(i) <= arr(i - 1))\
    \ {\n                max = i - 1\n            }\n        }\n        max", "  \
    \      var maxIndex = -1l\n        for (i <- 0 until arr.length - 1) {\n     \
    \       if (arr(i) >= arr(i + 1)) {\n                maxIndex = max(maxIndex,\
    \ i.toLong)\n            }\n        }\n        maxIndex", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0l)\n        for (i <- 1 until n) {\n        \
    \    if (arr(i) >= arr(i - 1)) dp(i) = dp(i - 1) + 1\n        }\n        var max\
    \ = 0l\n        for (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n\
    \        }\n        max", "        val n = arr.length\n        var max = -1\n\
    \        for (i <- 0 until n - 1) {\n            var j = n - 1\n            while\
    \ (j > i && arr(j) < arr(i)) j -= 1\n            if (j > i) max = max max j\n\
    \        }\n        return max", "        val n = arr.length\n        val dp =\
    \ Array.fill(n)(0l)\n        for (i <- 0 until n) {\n            val x = arr(i)\n\
    \            var j = i - 1\n            while (j >= 0 && arr(j) >= x) j -= 1\n\
    \            if (j >= 0) dp(i) = dp(j) + 1\n            else dp(i) = 1\n     \
    \   }\n        var max = 0l\n        for (i <- 0 until n) max = max max dp(i)\n\
    \        max", "        var max = -1l\n        for (i <- 0 until arr.length -\
    \ 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max\
    \ i\n            }\n        }\n        max", "        var max = -1l\n        var\
    \ maxIndex = -1l\n        for (i <- arr.indices) {\n            if (arr(i) <=\
    \ max) {\n                maxIndex = i\n                max = arr(i)\n       \
    \     }\n        }\n        return maxIndex", "        val n = arr.length\n  \
    \      var max = -1l\n        for (i <- 0 until n - 1) {\n            if (arr(i)\
    \ <= arr(i + 1)) {\n                max = i\n            }\n        }\n      \
    \  max", "        val n = arr.length\n        val l = Array.fill(n)(0l)\n    \
    \    val r = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n            l(i)\
    \ = arr(i)\n            if (i > 0) l(i) = max(l(i), l(i - 1))\n        }\n   \
    \     for (i <- n - 1 to 0 by -1) {\n            r(i) = arr(i)\n            if\
    \ (i < n - 1) r(i) = max(r(i), r(i + 1))\n        }\n        var ans = -1l\n \
    \       for (i <- 0 until n - 1) {\n            if (l(i) <= r(i + 1)) ans = max(ans,\
    \ i.toLong)\n        }\n        ans", "        var maxIndex = -1l\n        var\
    \ maxValue = -1l\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ <= maxValue) {\n                maxIndex = i\n                maxValue = arr(i)\n\
    \            }\n        }\n        return maxIndex", "        var maxIndex = -1\n\
    \        var maxValue = -1\n        for (i <- 0 until arr.length - 1) {\n    \
    \        if (arr(i) <= arr(i + 1)) {\n                if (arr(i + 1) > maxValue)\
    \ {\n                    maxValue = arr(i + 1).toInt\n                    maxIndex\
    \ = i + 1\n                }\n            }\n        }\n        return maxIndex",
  "        var max = -1l\n        for (i <- 0 until arr.length - 1) {\n          \
    \  if (arr(i) >= arr(i + 1)) {\n                max = max max i\n            }\n\
    \        }\n        max", "        // Fill in the code here\n        -1l", " \
    \       var maxIndex = -1l\n        var maxValue = -1l\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) <= maxValue) {\n                maxIndex\
    \ = i\n                maxValue = arr(i)\n            }\n        }\n        return\
    \ maxIndex", "        var max = -1l\n        for (i <- 0 until arr.length - 1)\
    \ {\n            if (arr(i) <= arr(i + 1)) {\n                max = i\n      \
    \      }\n        }\n        max", "        var max = -1l\n        for (i <- 0\
    \ until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n         \
    \       max = i\n            }\n        }\n        return max", "        var maxIndex\
    \ = -1l\n        var max = 0l\n        for (i <- 0 until arr.length) {\n     \
    \       if (arr(i) <= max) {\n                maxIndex = i\n                max\
    \ = arr(i)\n            }\n        }\n        maxIndex", "        var max = -1l\n\
    \        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i\
    \ + 1)) {\n                max = i\n            }\n        }\n        max", " \
    \       val n = arr.length\n        val dp = Array.fill(n)(0l)\n        for (i\
    \ <- 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) {\n                j = dp(j).toInt\n            }\n            dp(i)\
    \ = j\n        }\n        var max = -1\n        for (i <- 0 until n) {\n     \
    \       if (dp(i) > max) max = dp(i)\n        }\n        max", "        val n\
    \ = arr.length\n        var max = -1\n        for (i <- 1 until n) {\n       \
    \     if (arr(i) <= arr(i - 1)) {\n                max = i - 1\n            }\n\
    \        }\n        max", "        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = i\n \
    \           }\n        }\n        max", "        var max = -1l\n        for (i\
    \ <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n    \
    \            max = max max i\n            }\n        }\n        max", "      \
    \  var max = -1l\n        for (i <- 0 until arr.length - 1) {\n            if\
    \ (arr(i) >= arr(i + 1)) {\n                max = max max i\n            }\n \
    \       }\n        max", "        val n = arr.length\n        var max = -1\n \
    \       for (i <- 0 until n - 1) {\n            var j = n - 1\n            while\
    \ (j > i && arr(j) >= arr(i)) j -= 1\n            if (j > i) max = max max j\n\
    \        }\n        return max", "        val n = arr.length\n        val dp =\
    \ Array.fill(n)(0l)\n        for (i <- 1 until n) {\n            var j = i - 1\n\
    \            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n            dp(i) = j\n\
    \        }\n        var ans = -1l\n        for (i <- 0 until n) {\n          \
    \  if (dp(i) != -1l && dp(i) > ans) ans = dp(i)\n        }\n        ans", "  \
    \      var max = -1l;\n        var maxIndex = -1l;\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) <= max) {\n                maxIndex =\
    \ i;\n            }\n            max = max max arr(i);\n        }\n        return\
    \ maxIndex;", "        var max = -1l\n        for (i <- 0 until arr.length - 1)\
    \ {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max i\n\
    \            }\n        }\n        max", "        var max = -1l\n        for (i\
    \ <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n    \
    \            max = max max i\n            }\n        }\n        max", "      \
    \  var max = -1l\n        for (i <- 0 until arr.length - 1) {\n            if\
    \ (arr(i) >= arr(i + 1)) {\n                max = i\n            }\n        }\n\
    \        return max", "        val n = arr.length\n        val dp = Array.fill(n)(-1l)\n\
    \        def solve(i : Int) : Long = {\n            if (i == n) return -1l\n \
    \           if (dp(i) != -1) return dp(i)\n            var max = -1l\n       \
    \     for (j <- i + 1 until n) {\n                if (arr(j) <= arr(i)) {\n  \
    \                  val temp = solve(j)\n                    if (temp != -1) max\
    \ = max max temp\n                }\n            }\n            dp(i) = max\n\
    \            return max\n        }\n        solve(0)", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0 && arr(j) <= arr(i)) {\n       \
    \         j = dp(j).toInt\n            }\n            dp(i) = j\n        }\n \
    \       var max = -1\n        for (i <- 0 until n) {\n            if (dp(i) >\
    \ max) max = dp(i)\n        }\n        max", "        val n = arr.length\n   \
    \     val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n           \
    \ dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j)\
    \ <= arr(i)) dp(i) = max(dp(i), dp(j) + arr(i))\n            }\n        }\n  \
    \      dp.max", "        var max = -1l\n        for (i <- 1 until arr.length)\
    \ {\n            if (arr(i) <= arr(i - 1)) {\n                max = max max i\
    \ - 1\n            }\n        }\n        max", "        val n = arr.length\n \
    \       var max = -1l\n        for (i <- 0 until n - 1) {\n            if (arr(i)\
    \ <= arr(i + 1)) {\n                max = i\n            }\n        }\n      \
    \  max", "        val n = arr.length\n        val dp = Array.fill(n)(-1l)\n  \
    \      for (i <- 0 until n) {\n            var j = i - 1\n            while (j\
    \ >= 0 && arr(j) >= arr(i)) {\n                if (dp(j) == -1) dp(j) = i\n  \
    \              else j = dp(j).toInt\n            }\n        }\n        var ans\
    \ = -1l\n        for (i <- 0 until n) if (dp(i) != -1) ans = max(ans, dp(i))\n\
    \        ans", "        var max = -1l\n        var i = arr.length - 1\n      \
    \  while (i > 0) {\n            if (arr(i) <= arr(i - 1)) {\n                max\
    \ = i\n            }\n            i -= 1\n        }\n        return max", "  \
    \      val n = arr.length\n        var max = -1\n        for (i <- 0 until n -\
    \ 1) {\n            var j = i + 1\n            while (j < n && arr(j) >= arr(i))\
    \ j += 1\n            if (j < n) max = max max j\n        }\n        max", " \
    \       var max = -1l\n        for (i <- 0 until arr.length - 1) {\n         \
    \   if (arr(i) >= arr(i + 1)) {\n                max = max max i\n           \
    \ }\n        }\n        max", "        var max = -1l\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n               \
    \ max = max max i\n            }\n        }\n        max", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n        \
    \    val x = arr(i)\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= x) {\n                j -= 1\n            }\n            if (j == -1) dp(i)\
    \ = -1\n            else dp(i) = j\n        }\n        var max = -1\n        for\
    \ (i <- 0 until n) {\n            if (dp(i) != -1) {\n                max = max\
    \ max dp(i)\n            }\n        }\n        max", "        var maxIndex = -1\n\
    \        var maxValue = -1l\n        for (i <- 0 until arr.length - 1) {\n   \
    \         if (arr(i) <= arr(i + 1) && arr(i) > maxValue) {\n                maxIndex\
    \ = i\n                maxValue = arr(i)\n            }\n        }\n        maxIndex",
  "        var max = -1l\n        var i = arr.length - 1\n        while (i > 0) {\n\
    \            if (arr(i) <= arr(i - 1)) {\n                max = i\n          \
    \  }\n            i -= 1\n        }\n        return max", "        var maxIndex\
    \ = -1\n        var maxValue = -1\n        for (i <- 0 until arr.length - 1) {\n\
    \            if (arr(i) <= arr(i + 1)) {\n                if (maxValue < arr(i\
    \ + 1)) {\n                    maxValue = arr(i + 1).toInt\n                 \
    \   maxIndex = i + 1\n                }\n            }\n        }\n        maxIndex",
  "        var max = -1l\n        for (i <- 0 until arr.length - 1) {\n          \
    \  if (arr(i) >= arr(i + 1)) {\n                max = max max i\n            }\n\
    \        }\n        max", "        // Fill in the code here\n        -1l", " \
    \       val n = arr.length\n        val m = arr.max\n        val c = Array.fill(m.toInt\
    \ + 1)(0)\n        for (i <- 0 until n) c(arr(i).toInt) += 1\n        var sum\
    \ = 0\n        for (i <- 1 to m.toInt) {\n            sum += c(i)\n          \
    \  c(i) = sum\n        }\n        var ans = -1\n        for (i <- 0 until n) {\n\
    \            if (arr(i) <= c(arr(i).toInt - 1)) ans = max(ans, i)\n        }\n\
    \        ans", "        var max = -1l\n        for (i <- 0 until arr.length -\
    \ 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = i\n   \
    \         }\n        }\n        max", "        val n = arr.length\n        val\
    \ dp = Array.fill(n)(-1l)\n        for (i <- 0 until n) {\n            var j =\
    \ i - 1\n            while (j >= 0 && arr(j) <= arr(i)) {\n                if\
    \ (dp(j) == -1) dp(i) = j\n                else j = dp(j).toInt\n            }\n\
    \        }\n        var max = -1l\n        for (i <- 0 until n) {\n          \
    \  if (dp(i) != -1 && dp(i) > max) max = dp(i)\n        }\n        max", "   \
    \     var max = -1l\n        for (i <- 0 until arr.length - 1) {\n           \
    \ if (arr(i) >= arr(i + 1)) {\n                max = i\n            }\n      \
    \  }\n        max", "        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max\
    \ i\n            }\n        }\n        max", "        val n = arr.length\n   \
    \     val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n           \
    \ var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n     \
    \       dp(i) = j\n        }\n        var ans = -1l\n        for (i <- 0 until\
    \ n) {\n            if (dp(i) != -1l && dp(i) > ans) ans = dp(i)\n        }\n\
    \        ans", "        val n = arr.length\n        var max = -1\n        for\
    \ (i <- 0 until n - 1) {\n            if (arr(i) >= arr(i + 1)) {\n          \
    \      max = i\n            }\n        }\n        return max", "        var max\
    \ = -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >=\
    \ arr(i + 1)) {\n                max = i\n            }\n        }\n        max",
  "        var maxIndex = -1l\n        var max = -1l\n        for (i <- arr.indices)\
    \ {\n            if (arr(i) <= max) maxIndex = i\n            else max = arr(i)\n\
    \        }\n        maxIndex", "        var max = -1l\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n               \
    \ max = max max i\n            }\n        }\n        max", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n       \
    \         j = dp(j).toInt\n            }\n            dp(i) = j\n        }\n \
    \       var maxIndex = -1\n        var maxValue = -1\n        for (i <- 0 until\
    \ n) {\n            if (dp(i) > maxIndex) {\n                maxIndex = dp(i)\n\
    \                maxValue = i\n            }\n        }\n        maxValue", " \
    \       var max = -1l\n        for (i <- 0 until arr.length - 1) {\n         \
    \   if (arr(i) >= arr(i + 1)) {\n                max = max max i\n           \
    \ }\n        }\n        max", "        val n = arr.length\n        val dp = Array.fill(n)(-1l)\n\
    \        def f(i : Int) : Long = {\n            if (i == n) return -1l\n     \
    \       if (dp(i) != -1) return dp(i)\n            var max = -1l\n           \
    \ for (j <- i + 1 until n) {\n                if (arr(j) <= arr(i)) {\n      \
    \              val x = f(j)\n                    if (x != -1 && x > max) max =\
    \ x\n                }\n            }\n            dp(i) = max\n            return\
    \ max\n        }\n        f(0)", "        var max = -1l\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n               \
    \ max = i\n            }\n        }\n        max", "        var max = -1l\n  \
    \      var maxIndex = -1l\n        for (i <- 0 until arr.length - 1) {\n     \
    \       if (arr(i) <= arr(i + 1)) {\n                if (maxIndex == -1l || arr(i)\
    \ > max) {\n                    max = arr(i)\n                    maxIndex = i\n\
    \                }\n            }\n        }\n        return maxIndex", "    \
    \    var max = -1l\n        for (i <- 0 until arr.length - 1) {\n            if\
    \ (arr(i) >= arr(i + 1)) {\n                max = max max i\n            }\n \
    \       }\n        max", "        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = i\n \
    \           }\n        }\n        max", "        var max = -1l\n        for (i\
    \ <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n    \
    \            max = max max i\n            }\n        }\n        max", "      \
    \  var maxIndex = -1\n        for (i <- 1 until arr.length) {\n            if\
    \ (arr(i) <= arr(i - 1)) {\n                maxIndex = i - 1\n            }\n\
    \        }\n        return maxIndex", "        var max : Long = -1l\n        var\
    \ i : Long = 0l\n        while (i < arr.length - 1) {\n            if (arr(i.toInt)\
    \ >= arr(i.toInt + 1)) {\n                if (i > max) {\n                   \
    \ max = i\n                }\n            }\n            i += 1\n        }\n \
    \       return max", "        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max\
    \ i\n            }\n        }\n        max", "        val n = arr.length\n   \
    \     val max = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n          \
    \  var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n    \
    \        max(i) = j\n        }\n        var ans = -1l\n        for (i <- 0 until\
    \ n) {\n            if (max(i) > ans) ans = max(i)\n        }\n        ans", " \
    \       val n = arr.length\n        val dp = Array.fill(n)(0)\n        for (i\
    \ <- 1 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) j -= 1\n            dp(i) = j\n        }\n        var max = -1\n\
    \        for (i <- 0 until n) if (dp(i) > max) max = dp(i)\n        max", "  \
    \      val n = arr.length\n        val dp = Array.fill(n)(0)\n        for (i <-\
    \ 1 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) j -= 1\n            dp(i) = j\n        }\n        var max = -1\n\
    \        for (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n  \
    \      }\n        max", "        val n = arr.length\n        val a = arr.toArray\n\
    \        val b = new Array[Long](n)\n        for (i <- 0 until n) b(i) = a(i)\n\
    \        b.sortWith(_ < _)\n        val c = new Array[Long](n)\n        for (i\
    \ <- 0 until n) c(i) = b(i)\n        val d = new Array[Long](n)\n        for (i\
    \ <- 0 until n) d(i) = b(i)\n        var j = 0\n        for (i <- 0 until n) {\n\
    \            if (i == 0 || b(i) != b(i - 1)) {\n                c(j) = b(i)\n\
    \                d(j) = i\n                j += 1\n            }\n        }\n\
    \        val e = new Array[Long](j)\n        for (i <- 0 until j) e(i) = c(i)\n\
    \        val f = new Array[Long](j)\n        for (i <- 0 until j) f(i) = d(i)\n\
    \        val g = new Array[Long](j)\n        for (i <- 0 until j) g(i) = d(i)\n\
    \        val h = new Array[Long](j)\n        for (i <- 0 until j) h(i) = d(i)\n\
    \        val tree = new SegmentTree(e, f, g, h)\n        var ans = -1l\n     \
    \   for (i <- 0 until n) {\n            val k = tree.query(a(i))\n           \
    \ if (k != -1l) ans = max(ans, i - k)\n        }\n        ans", "        var maxIndex\
    \ = -1l\n        var maxValue = -1l\n        for (i <- 0 until arr.length - 1)\
    \ {\n            if (arr(i) <= arr(i + 1)) {\n                if (arr(i + 1) >\
    \ maxValue) {\n                    maxValue = arr(i + 1)\n                   \
    \ maxIndex = i + 1\n                }\n            }\n        }\n        return\
    \ maxIndex", "        val n = arr.length\n        val dp = Array.fill(n)(0l)\n\
    \        dp(0) = 1\n        var max = 1\n        for (i <- 1 until n) {\n    \
    \        dp(i) = 1\n            for (j <- 0 until i) {\n                if (arr(j)\
    \ <= arr(i)) dp(i) = max(dp(i), dp(j) + 1)\n            }\n            max = max(max,\
    \ dp(i))\n        }\n        max - 1", "        var maxIndex = -1l\n        var\
    \ maxValue = -1l\n        for (i <- 0 until arr.length) {\n            if (arr(i)\
    \ <= maxValue) {\n                maxIndex = i\n                maxValue = arr(i)\n\
    \            }\n        }\n        return maxIndex", "        val n = arr.length\n\
    \        val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n        \
    \    var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n       \
    \         j = dp(j).toInt\n            }\n            dp(i) = j\n        }\n \
    \       var max = -1\n        for (i <- 0 until n) {\n            if (dp(i) >\
    \ max) max = dp(i)\n        }\n        max", "        var maxIndex = -1l\n   \
    \     for (i <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1))\
    \ {\n                maxIndex = max(maxIndex, i.toLong)\n            }\n     \
    \   }\n        maxIndex", "        var maxIndex = -1l\n        var max = -1l\n\
    \        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >= max) {\n\
    \                max = arr(i)\n                maxIndex = i\n            }\n \
    \       }\n        return maxIndex", "        var maxIndex = -1\n        var maxValue\
    \ = -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) <=\
    \ arr(i + 1) && arr(i) > maxValue) {\n                maxIndex = i\n         \
    \       maxValue = arr(i)\n            }\n        }\n        return maxIndex",
  "        var max = -1l\n        for (i <- 0 until arr.length - 1) {\n          \
    \  if (arr(i) >= arr(i + 1)) {\n                max = i\n            }\n     \
    \   }\n        max", "        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                if (i > max)\
    \ max = i\n            }\n        }\n        max", "        var maxIndex = -1l\n\
    \        var maxValue = -1l\n        for (i <- 0 until arr.length) {\n       \
    \     if (arr(i) <= maxValue) {\n                maxIndex = i\n              \
    \  maxValue = arr(i)\n            }\n        }\n        return maxIndex", "  \
    \      val n = arr.length\n        val dp = Array.fill(n)(0l)\n        for (i\
    \ <- 0 until n) {\n            var max = -1l\n            for (j <- 0 until i)\
    \ {\n                if (arr(j) <= arr(i)) max = max max dp(j)\n            }\n\
    \            dp(i) = max + 1\n        }\n        var max = -1l\n        for (i\
    \ <- 0 until n) max = max max dp(i)\n        max", "        val n = arr.length\n\
    \        var ans = -1l\n        for (i <- 0 until n) {\n            var j = i\
    \ + 1\n            while (j < n && arr(j) >= arr(i)) j += 1\n            if (j\
    \ < n) ans = max(ans, j)\n        }\n        ans", "        var maxIndex = -1\n\
    \        var max = -1\n        for (i <- 0 until arr.length - 1) {\n         \
    \   if (arr(i) <= arr(i + 1) && i > max) {\n                max = i\n        \
    \    }\n        }\n        max", "        val n = arr.length\n        val dp =\
    \ Array.fill(n)(0l)\n        for (i <- 0 until n) {\n            var j = i - 1\n\
    \            while (j >= 0 && arr(j) <= arr(i)) {\n                if (dp(j) ==\
    \ 0) dp(i) = j\n                else dp(i) = dp(j)\n                j = dp(j).toInt\n\
    \            }\n        }\n        var max = -1l\n        for (i <- 0 until n)\
    \ {\n            if (dp(i) > max) max = dp(i)\n        }\n        max", "    \
    \    var max = -1l\n        for (i <- 0 until arr.length - 1) {\n            if\
    \ (arr(i) >= arr(i + 1)) {\n                max = i\n            }\n        }\n\
    \        max", "        var max = -1l\n        for (i <- 0 until arr.length -\
    \ 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max\
    \ i\n            }\n        }\n        max", "        val n = arr.length\n   \
    \     val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n           \
    \ var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n     \
    \       dp(i) = j\n        }\n        var ans = -1l\n        for (i <- 0 until\
    \ n) {\n            if (dp(i) == -1) continue\n            if (ans == -1 || arr(ans.toInt)\
    \ < arr(dp(i).toInt)) ans = dp(i)\n        }\n        ans", "        var max =\
    \ -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >=\
    \ arr(i + 1)) {\n                max = i\n            }\n        }\n        max",
  "        var maxIndex = -1l\n        var max = -1l\n        for (i <- 0 until arr.length)\
    \ {\n            if (arr(i) <= max) maxIndex = i\n            else max = arr(i)\n\
    \        }\n        maxIndex", "        var max = -1l;\n        for (i <- 0 until\
    \ arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n               \
    \ max = max max i;\n            }\n        }\n        max;", "        var max\
    \ = -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >=\
    \ arr(i + 1)) {\n                max = max max i\n            }\n        }\n \
    \       max", "        var max = -1l\n        for (i <- 0 until arr.length - 1)\
    \ {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max i\n\
    \            }\n        }\n        max", "        val n = arr.length\n       \
    \ val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n            var\
    \ j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) {\n              \
    \  j = dp(j).toInt\n            }\n            dp(i) = j\n        }\n        var\
    \ ans = -1l\n        for (i <- 0 until n) {\n            if (dp(i) == -1) {\n\
    \                ans = max(ans, i)\n            }\n        }\n        ans", " \
    \       val n = arr.length\n        val dp = Array.fill(n)(0l)\n        for (i\
    \ <- 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) j -= 1\n            dp(i) = j\n        }\n        var max = -1l\n\
    \        for (i <- 0 until n) {\n            if (dp(i) > max) max = dp(i)\n  \
    \      }\n        max", "        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = i\n \
    \           }\n        }\n        return max", "        var max = -1l\n      \
    \  for (i <- 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1))\
    \ {\n                max = max max i\n            }\n        }\n        max",
  "        var maxIndex = -1\n        var maxValue = -1\n        for (i <- 0 until\
    \ arr.length) {\n            if (arr(i) <= maxValue) {\n                maxIndex\
    \ = i\n                maxValue = arr(i).toInt\n            }\n        }\n   \
    \     return maxIndex", "        var maxIndex = -1l\n        var maxValue = -1l\n\
    \        for (i <- 0 until arr.length) {\n            if (arr(i) <= maxValue)\
    \ {\n                maxIndex = i\n                maxValue = arr(i)\n       \
    \     }\n        }\n        return maxIndex", "        var max = -1l\n       \
    \ for (i <- 1 until arr.length) {\n            if (arr(i) <= arr(i - 1)) {\n \
    \               max = i - 1\n            }\n        }\n        max", "       \
    \ var max = -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i\
    \ + 1) <= arr(i)) {\n                max = max max i\n            }\n        }\n\
    \        max", "        val n = arr.length\n        val dp = Array.fill(n)(-1l)\n\
    \        def solve(i : Int) : Long = {\n            if (i == 0) return 0\n   \
    \         if (dp(i) != -1) return dp(i)\n            var max = -1l\n         \
    \   for (j <- 0 until i) {\n                if (arr(j) <= arr(i)) {\n        \
    \            val temp = solve(j)\n                    if (temp > max) max = temp\n\
    \                }\n            }\n            dp(i) = max\n            return\
    \ max\n        }\n        solve(n - 1)", "        var max = -1l\n        for (i\
    \ <- arr.length - 2 to 0 by -1) {\n            if (arr(i) >= arr(i + 1)) {\n \
    \               max = i\n            }\n        }\n        max", "        var\
    \ max = -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i)\
    \ >= arr(i + 1)) {\n                max = i\n            }\n        }\n      \
    \  max", "        var maxIndex = -1l\n        var maxValue = -1l\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) <= maxValue) {\n       \
    \         maxIndex = i\n                maxValue = arr(i)\n            }\n   \
    \     }\n        return maxIndex", "        val n = arr.length\n        var max\
    \ = 0\n        for (i <- 0 until n) {\n            var j = i + 1\n           \
    \ while (j < n && arr(j) >= arr(i)) j += 1\n            if (j < n) max = max max\
    \ (j - i)\n        }\n        max", "        var maxIndex = -1l\n        var max\
    \ = -1l\n        for (i <- 0 until arr.length) {\n            if (arr(i) <= max)\
    \ {\n                maxIndex = i\n                max = arr(i)\n            }\n\
    \        }\n        maxIndex", "        val n = arr.length\n        val dp = Array.fill(n)(-1l)\n\
    \        for (i <- 0 until n) {\n            var j = i - 1\n            while\
    \ (j >= 0 && arr(j) >= arr(i)) j -= 1\n            if (j >= 0) dp(i) = j\n   \
    \     }\n        var maxIndex = -1l\n        for (i <- 0 until n) {\n        \
    \    if (dp(i) != -1 && dp(i) > maxIndex) maxIndex = dp(i)\n        }\n      \
    \  maxIndex", "        var max = -1l\n        for (i <- 0 until arr.length - 1)\
    \ {\n            if (arr(i) >= arr(i + 1)) {\n                max = i\n      \
    \      }\n        }\n        max", "        val n = arr.length\n        var max\
    \ = -1\n        for (i <- 0 until n - 1) {\n            if (arr(i) <= arr(i +\
    \ 1)) {\n                max = i\n            }\n        }\n        max", "  \
    \      val n = arr.length\n        val l = Array.fill(n)(0l)\n        val r =\
    \ Array.fill(n)(0l)\n        l(0) = arr(0)\n        for (i <- 1 until n) l(i)\
    \ = min(l(i - 1), arr(i))\n        r(n - 1) = arr(n - 1)\n        for (i <- n\
    \ - 2 to 0 by -1) r(i) = max(r(i + 1), arr(i))\n        var ans = -1l\n      \
    \  for (i <- 0 until n - 1) {\n            if (l(i) <= r(i + 1)) ans = max(ans,\
    \ i.toLong)\n        }\n        ans", "        var max = -1l\n        for (i <-\
    \ 0 until arr.length - 1) {\n            if (arr(i) >= arr(i + 1)) {\n       \
    \         max = max max i\n            }\n        }\n        max", "        var\
    \ max = -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i)\
    \ >= arr(i + 1)) {\n                max = i\n            }\n        }\n      \
    \  return max", "        var maxIndex = -1l\n        var max = -1l\n        for\
    \ (i <- 0 until arr.length) {\n            if (arr(i) <= max) {\n            \
    \    maxIndex = i\n                max = arr(i)\n            }\n        }\n  \
    \      maxIndex", "        var max = -1l\n        var maxIndex = -1l\n       \
    \ for (i <- arr.length - 1 to 0 by -1) {\n            if (arr(i) <= max) {\n \
    \               maxIndex = i\n                max = arr(i)\n            }\n  \
    \      }\n        return maxIndex", "        val n = arr.length\n        val dp\
    \ = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n            var j = i -\
    \ 1\n            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n            dp(i)\
    \ = j\n        }\n        var ans = -1l\n        for (i <- 0 until n) {\n    \
    \        if (dp(i) != -1l && dp(i) > ans) ans = dp(i)\n        }\n        ans",
  "        var max = -1l\n        for (i <- 0 until arr.length - 1) {\n          \
    \  if (arr(i) >= arr(i + 1)) {\n                max = max max i\n            }\n\
    \        }\n        max", "        var max = -1l\n        for (i <- 0 until arr.length\
    \ - 1) {\n            if (arr(i) >= arr(i + 1)) {\n                max = max max\
    \ i\n            }\n        }\n        max", "        val n = arr.length\n   \
    \     val dp = Array.fill(n)(0l)\n        for (i <- 0 until n) {\n           \
    \ var j = i - 1\n            while (j >= 0 && arr(j) >= arr(i)) j -= 1\n     \
    \       dp(i) = j\n        }\n        var max = -1l\n        for (i <- 0 until\
    \ n) {\n            if (dp(i) > max) max = dp(i)\n        }\n        max", " \
    \       val n = arr.length\n        val dp = Array.fill(n)(-1l)\n        for (i\
    \ <- 0 until n) {\n            var j = i - 1\n            while (j >= 0 && arr(j)\
    \ >= arr(i)) {\n                j = dp(j).toInt\n            }\n            dp(i)\
    \ = j\n        }\n        var max = -1l\n        for (i <- 0 until n) {\n    \
    \        if (dp(i) > max) max = dp(i)\n        }\n        max", "        var maxIndex\
    \ = -1l\n        for (i <- 0 until arr.length - 1) {\n            if (arr(i) >=\
    \ arr(i + 1)) {\n                maxIndex = max(maxIndex, i.toLong)\n        \
    \    }\n        }\n        maxIndex"]
stop_tokens:
- "\n    }\n"
