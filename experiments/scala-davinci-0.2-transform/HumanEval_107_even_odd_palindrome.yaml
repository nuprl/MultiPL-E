name: HumanEval_107_even_odd_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a tuple that has the number of even and\
  \ odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n\
  \    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    //\
  \ Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and\
  \ two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n\
  \    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n\
  \    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd\
  \ integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l,\
  \ 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l,\
  \ 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l,\
  \ 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l,\
  \ 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n"
completions: ["        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1 else odd\
    \ += 1\n            }\n        }\n        (even, odd)", "        // Fill up this\
    \ function body\n        // `0` indicates the number of even integer palindromes\n\
    \        // `1` indicates the number of odd integer palindromes\n        var result\
    \ = Array(0l, 0l)\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) result(0) += 1\n                else result(1)\
    \ += 1\n            }\n        }\n        (result(0), result(1))", "        //\
    \ Fill up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (i.toString\
    \ == i.toString.reverse) {\n                if (i % 2 == 0) even += 1\n      \
    \          else odd += 1\n            }\n        }\n        (even, odd)", "  \
    \      // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can create new functions to solve this problem\n     \
    \   // You can also create new classes and objects\n        // You can import\
    \ any library you want\n        // You can use any language feature you want\n\
    \        // You can use any IDE you want\n        // You can use any operating\
    \ system you want\n        // You can use any resource you want\n        // You\
    \ can use any algorithm you want\n        // You can use any data structure you\
    \ want\n        // You can use any time complexity you want\n        // You can\
    \ use any space complexity you want\n        // You can use any approach you want\n\
    \        // You can use any pattern you want\n        // You can use any technique\
    \ you want\n        // You can use any trick you want\n        // You can use\
    \ any method you want\n        // You can use any style you want\n        // You\
    \ can use any framework you want\n        // You can use any library you want\n\
    \        // You can use any principle you want\n        // You can use any paradigm\
    \ you want\n        // You can use any idiom you want\n        // You can use\
    \ any heuristic you want\n        // You can use any philosophy you want\n   \
    \     // You can use any concept you want\n        // You can use any theory you\
    \ want\n        // You can use any pattern you want\n        // You can use any\
    \ formula you want\n        // You can use any equation you want\n        // You\
    \ can use any rule you want\n        // You can use any law you want\n       \
    \ // You can use any axiom you want\n        // You can use any postulate you\
    \ want\n        // You can use any property you want\n        // You can use any\
    \ lemma you want\n        // You can use any corollary you want\n        // You\
    \ can use any conjecture you want\n        // You can use any definition you want\n\
    \        // You can use any theorem you want\n        // You can use any proof\
    \ you want\n        // You can use any argument you want\n        // You can use\
    \ any fact you want\n        // You can use any evidence you want\n        //\
    \ You can use any truth you want\n        // You can use any lie you want\n  \
    \      // You can use any deception you want\n        // You can use any trick\
    \ you want\n        // You can use", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range\n        // You can use `isPalindrome`\
    \ function to check if a number is palindrome\n        // You can use `isEven`\
    \ function to check if a number is even\n        var even = 0\n        var odd\
    \ = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n\
    \                if (isEven(i)) {\n                    even += 1\n           \
    \     } else {\n                    odd += 1\n                }\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `even` is the number of even integer palindromes\n        // `odd` is\
    \ the number of odd integer palindromes\n        var even = 0l\n        var odd\
    \ = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ `isPalindrome` function to check whether a number is palindrome or not\n   \
    \     var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n \
    \           if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n      \
    \              even += 1\n                } else {\n                    odd +=\
    \ 1\n                }\n            }\n        }\n        (even, odd)", "    \
    \    // Fill up this function body\n        // `n` is the upper bound of the range\n\
    \        // You should return a tuple of two numbers, the first number is the\
    \ number of even palindromes,\n        // and the second number is the number\
    \ of odd palindromes.\n        var even = 0\n        var odd = 0\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) {\n                    even += 1\n                } else {\n  \
    \                  odd += 1\n                }\n            }\n        }\n   \
    \     (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even : Long = 0\n        var odd : Long = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1\
    \ to n.toInt) {\n            if (isPalindrome(i.toString)) {\n               \
    \ if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n  \
    \      }\n        (even, odd)", "        // Fill up this function body\n     \
    \   // `even` is the number of even integer palindromes\n        // `odd` is the\
    \ number of odd integer palindromes\n        var even = 0l\n        var odd =\
    \ 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        var even = 0\n\
    \        var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n             \
    \   if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `n` is the upper limit of the range\n        // You can use `isPalindrome`\
    \ function\n        // You can use `isEven` function\n        // You can use `isOdd`\
    \ function\n        var even = 0l\n        var odd = 0l\n        for (i <- 1 to\
    \ n.toInt) {\n            if (isPalindrome(i)) {\n                if (isEven(i))\
    \ {\n                    even += 1\n                } else {\n               \
    \     odd += 1\n                }\n            }\n        }\n        (even, odd)"]
stop_tokens:
- "\n    }\n"
