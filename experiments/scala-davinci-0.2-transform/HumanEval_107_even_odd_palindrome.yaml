name: HumanEval_107_even_odd_palindrome
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return a tuple that has the number of even and\
  \ odd\n    // integer palindromes that fall within the range(1, n), inclusive.\n\
  \    // Example 1:\n    // >>> evenOddPalindrome((3l))\n    // ((1l, 2l))\n    //\
  \ Explanation:\n    // Integer palindrome are 1, 2, 3. one of them is even, and\
  \ two of them are odd.\n    // Example 2:\n    // >>> evenOddPalindrome((12l))\n\
  \    // ((4l, 6l))\n    // Explanation:\n    // Integer palindrome are 1, 2, 3,\
  \ 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n    // Note:\n\
  \    // 1. 1 <= n <= 10^3\n    // 2. returned tuple has the number of even and odd\
  \ integer palindromes respectively.\n    def evenOddPalindrome(n : Long) : Tuple2[Long,\
  \ Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(evenOddPalindrome((123l)).equals(((8l,\
  \ 13l))));\n    assert(evenOddPalindrome((12l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((3l)).equals(((1l,\
  \ 2l))));\n    assert(evenOddPalindrome((63l)).equals(((6l, 8l))));\n    assert(evenOddPalindrome((25l)).equals(((5l,\
  \ 6l))));\n    assert(evenOddPalindrome((19l)).equals(((4l, 6l))));\n    assert(evenOddPalindrome((9l)).equals(((4l,\
  \ 5l))));\n    assert(evenOddPalindrome((1l)).equals(((0l, 1l))));\n    }\n\n}\n"
completions: ["        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1 else odd\
    \ += 1\n            }\n        }\n        (even, odd)", "        // Fill up this\
    \ function body\n        // `0` indicates the number of even integer palindromes\n\
    \        // `1` indicates the number of odd integer palindromes\n        var result\
    \ = Array(0l, 0l)\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) result(0) += 1\n                else result(1)\
    \ += 1\n            }\n        }\n        (result(0), result(1))", "        //\
    \ Fill up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (i.toString\
    \ == i.toString.reverse) {\n                if (i % 2 == 0) even += 1\n      \
    \          else odd += 1\n            }\n        }\n        (even, odd)", "  \
    \      // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can create new functions to solve this problem\n     \
    \   // You can also create new classes and objects\n        // You can import\
    \ any library you want\n        // You can use any language feature you want\n\
    \        // You can use any IDE you want\n        // You can use any operating\
    \ system you want\n        // You can use any resource you want\n        // You\
    \ can use any algorithm you want\n        // You can use any data structure you\
    \ want\n        // You can use any time complexity you want\n        // You can\
    \ use any space complexity you want\n        // You can use any approach you want\n\
    \        // You can use any pattern you want\n        // You can use any technique\
    \ you want\n        // You can use any trick you want\n        // You can use\
    \ any method you want\n        // You can use any style you want\n        // You\
    \ can use any framework you want\n        // You can use any library you want\n\
    \        // You can use any principle you want\n        // You can use any paradigm\
    \ you want\n        // You can use any idiom you want\n        // You can use\
    \ any heuristic you want\n        // You can use any philosophy you want\n   \
    \     // You can use any concept you want\n        // You can use any theory you\
    \ want\n        // You can use any pattern you want\n        // You can use any\
    \ formula you want\n        // You can use any equation you want\n        // You\
    \ can use any rule you want\n        // You can use any law you want\n       \
    \ // You can use any axiom you want\n        // You can use any postulate you\
    \ want\n        // You can use any property you want\n        // You can use any\
    \ lemma you want\n        // You can use any corollary you want\n        // You\
    \ can use any conjecture you want\n        // You can use any definition you want\n\
    \        // You can use any theorem you want\n        // You can use any proof\
    \ you want\n        // You can use any argument you want\n        // You can use\
    \ any fact you want\n        // You can use any evidence you want\n        //\
    \ You can use any truth you want\n        // You can use any lie you want\n  \
    \      // You can use any deception you want\n        // You can use any trick\
    \ you want\n        // You can use", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range\n        // You can use `isPalindrome`\
    \ function to check if a number is palindrome\n        // You can use `isEven`\
    \ function to check if a number is even\n        var even = 0\n        var odd\
    \ = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n\
    \                if (isEven(i)) {\n                    even += 1\n           \
    \     } else {\n                    odd += 1\n                }\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `even` is the number of even integer palindromes\n        // `odd` is\
    \ the number of odd integer palindromes\n        var even = 0l\n        var odd\
    \ = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ `isPalindrome` function to check whether a number is palindrome or not\n   \
    \     var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n \
    \           if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n      \
    \              even += 1\n                } else {\n                    odd +=\
    \ 1\n                }\n            }\n        }\n        (even, odd)", "    \
    \    // Fill up this function body\n        // `n` is the upper bound of the range\n\
    \        // You should return a tuple of two numbers, the first number is the\
    \ number of even palindromes,\n        // and the second number is the number\
    \ of odd palindromes.\n        var even = 0\n        var odd = 0\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) {\n                    even += 1\n                } else {\n  \
    \                  odd += 1\n                }\n            }\n        }\n   \
    \     (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even : Long = 0\n        var odd : Long = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1\
    \ to n.toInt) {\n            if (isPalindrome(i.toString)) {\n               \
    \ if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n  \
    \      }\n        (even, odd)", "        // Fill up this function body\n     \
    \   // `even` is the number of even integer palindromes\n        // `odd` is the\
    \ number of odd integer palindromes\n        var even = 0l\n        var odd =\
    \ 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        var even = 0\n\
    \        var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n             \
    \   if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `n` is the upper limit of the range\n        // You can use `isPalindrome`\
    \ function\n        // You can use `isEven` function\n        // You can use `isOdd`\
    \ function\n        var even = 0l\n        var odd = 0l\n        for (i <- 1 to\
    \ n.toInt) {\n            if (isPalindrome(i)) {\n                if (isEven(i))\
    \ {\n                    even += 1\n                } else {\n               \
    \     odd += 1\n                }\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n \
    \                   even += 1\n                } else {\n                    odd\
    \ += 1\n                }\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `0` is a placeholder. Please\
    \ modify it.\n        (0l, 0l)", "        // Fill up this function body\n    \
    \    // `n` is the upper bound of the range\n        // You can use `isPalindrome`\
    \ function to check if a number is palindrome\n        // You can use `isEven`\
    \ function to check if a number is even\n        // You can use `isOdd` function\
    \ to check if a number is odd\n        // You can use `isPrime` function to check\
    \ if a number is prime\n        // You can use `isComposite` function to check\
    \ if a number is composite\n        // You can use `isPerfectSquare` function\
    \ to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square\n        // You can use `isPerfectCube`\
    \ function to check", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `n` is the number of digits\
    \ in the palindrome\n        // `d` is the number of digits in the left half of\
    \ the palindrome\n        // `e` is the number of digits in the right half of\
    \ the palindrome\n        // `m` is the middle digit of the palindrome\n     \
    \   // `p` is the number of palindromes\n        // `q` is the number of even\
    \ palindromes\n        // `r` is the number of odd palindromes\n        // `s`\
    \ is the number of palindromes with a middle digit of 0\n        // `t` is the\
    \ number of palindromes with a middle digit of 1\n        // `u` is the number\
    \ of palindromes with a middle digit of 2\n        // `v` is the number of palindromes\
    \ with a middle digit of 3\n        // `w` is the number of palindromes with a\
    \ middle digit of 4\n        // `x` is the number of palindromes with a middle\
    \ digit of 5\n        // `y` is the number of palindromes with a middle digit\
    \ of 6\n        // `z` is the number of palindromes with a middle digit of 7\n\
    \        // `a` is the number of palindromes with a middle digit of 8\n      \
    \  // `b` is the number of palindromes with a middle digit of 9\n        var n\
    \ = n\n        var d = 0\n        var e = 0\n        var m = 0\n        var p\
    \ = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t\
    \ = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x\
    \ = 0\n        var y = 0\n        var z = 0\n        var a = 0\n        var b\
    \ = 0\n        while (n > 0) {\n            d = n / 2\n            e = n - d -\
    \ 1\n            m = n % 2\n            p = pow(10, d).toLong\n            q =\
    \ p / 2\n            r = p - q\n            s = q\n            t = r\n       \
    \     u = q\n            v = r\n            w = q\n            x =", "       \
    \ // Fill up this function body\n        // `n` is the upper bound of the range\n\
    \        var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i.toString)) {\n                if (i % 2 == 0)\
    \ {\n                    even += 1\n                } else {\n               \
    \     odd += 1\n                }\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use `isPalindrome` function to check if a number is\
    \ palindrome\n        // You can use `isEven` function to check if a number is\
    \ even\n        var even = 0l\n        var odd = 0l\n        for (i <- 1l to n)\
    \ {\n            if (isPalindrome(i)) {\n                if (isEven(i)) even +=\
    \ 1\n                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range, inclusive.\n        // You can use `isPalindrome` function to check if\
    \ a number is a palindrome.\n        // You can use `isEven` function to check\
    \ if a number is even.\n        // You can use `isOdd` function to check if a\
    \ number is odd.\n        var even = 0\n        var odd = 0\n        for (i <-\
    \ 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (isEven(i))\
    \ {\n                    even += 1\n                } else {\n               \
    \     odd += 1\n                }\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use the helper function `isPalindrome`\n        var\
    \ even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n         \
    \   if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n              \
    \      even += 1\n                } else {\n                    odd += 1\n   \
    \             }\n            }\n        }\n        (even, odd)", "        // Fill\
    \ up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        var even = 0l\n    \
    \    var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1 else odd += 1\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `even` is the number of even palindromes\n        // `odd` is the number\
    \ of odd palindromes\n        var even = 0l\n        var odd = 0l\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n       \
    \         if (i % 2 == 0) even += 1\n                else odd += 1\n         \
    \   }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even : Long = 0\n    \
    \    var odd : Long = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even_count` = number of even palindromes\n        // `odd_count`\
    \ = number of odd palindromes\n        var even_count = 0l\n        var odd_count\
    \ = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n\
    \                if (i % 2 == 0) {\n                    even_count += 1\n    \
    \            } else {\n                    odd_count += 1\n                }\n\
    \            }\n        }\n        (even_count, odd_count)", "        // Fill\
    \ up this function body\n        // `n` is the input number\n        // You have\
    \ to return a tuple of (even, odd)\n        // Do not change the function signature\n\
    \        val even = (1 to n.toInt).filter(x => x.toString == x.toString.reverse\
    \ && x % 2 == 0).length\n        val odd = (1 to n.toInt).filter(x => x.toString\
    \ == x.toString.reverse && x % 2 != 0).length\n        (even, odd)", "       \
    \ // Fill up this function body\n        // `even` is the number of even integer\
    \ palindromes\n        // `odd` is the number of odd integer palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\
    \ else odd += 1\n            }\n        }\n        (even, odd)", "        // Fill\
    \ up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range\n        // You can use `isPalindrome`\
    \ function to check if a number is palindrome or not\n        var even = 0\n \
    \       var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        var even = 0l\n    \
    \    var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        var even = 0l\n    \
    \    var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ `isPalindrome` function to check if a number is palindrome\n        // You can\
    \ use `isEven` function to check if a number is even\n        var even = 0\n \
    \       var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (isEven(i)) {\n                    even += 1\n       \
    \         } else {\n                    odd += 1\n                }\n        \
    \    }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper limit of the range\n        // You should return\
    \ a tuple of 2 elements, the first element is the number of even palindromes\n\
    \        // and the second element is the number of odd palindromes\n        var\
    \ even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n         \
    \   if (isPalindrome(i.toString)) {\n                if (i.toString.length % 2\
    \ == 0) {\n                    even += 1\n                } else {\n         \
    \           odd += 1\n                }\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `0` indicates the\
    \ number of even palindromes\n        // `1` indicates the number of odd palindromes\n\
    \        val result = new Array[Long](2)\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) result(0)\
    \ += 1\n                else result(1) += 1\n            }\n        }\n      \
    \  (result(0), result(1))", "        // Fill up this function body\n        //\
    \ `even` is the number of even integer palindromes\n        // `odd` is the number\
    \ of odd integer palindromes\n        var even = 0l\n        var odd = 0l\n  \
    \      for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n       \
    \         if (i % 2 == 0) even += 1\n                else odd += 1\n         \
    \   }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `0` is placeholder, replace it with your code\n        (0l, 0l)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use `isPalindrome` function to check if a number is\
    \ palindrome\n        // You can use `isEven` function to check if a number is\
    \ even\n        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (isEven(i)) even +=\
    \ 1\n                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1l to n) {\n            if\
    \ (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n           \
    \     else odd += 1\n            }\n        }\n        (even, odd)", "       \
    \ // Fill up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `0` is placeholder, replace it with your answer\n        (0l,\
    \ 0l)", "        // Fill up this function body\n        // `0` indicates the number\
    \ of even palindromes\n        // `1` indicates the number of odd palindromes\n\
    \        val result = new Array[Long](2)\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i.toString)) {\n                if (i % 2 == 0)\
    \ result(0) += 1\n                else result(1) += 1\n            }\n       \
    \ }\n        (result(0), result(1))", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `0` indicates the number of even integer palindromes\n    \
    \    // `1` indicates the number of odd integer palindromes\n        (0l, 0l)",
  "        // Write your code here\n        return (0l, 0l)", "        // Fill up\
    \ this function body\n        // `n` is the upper limit of the range\n       \
    \ // You can use `isPalindrome` function to check if a number is palindrome or\
    \ not\n        // You can use `isEven` function to check if a number is even or\
    \ not\n        // You can use `isOdd` function to check if a number is odd or\
    \ not\n        // You can use `isPrime` function to check if a number is prime\
    \ or not\n        // You can use `isComposite` function to check if a number is\
    \ composite or not\n        // You can use `isPerfectSquare` function to check\
    \ if a number is perfect square or not\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube or not\n        // You can use\
    \ `isFibonacci` function to check if a number is fibonacci or not\n        //\
    \ You can use `isHappy` function to check if a number is happy or not\n      \
    \  // You can use `isTriangular` function to check if a number is triangular or\
    \ not\n        // You can use `isSquare` function to check if a number is square\
    \ or not\n        // You can use `isPronic` function to check if a number is pronic\
    \ or not\n        // You can use `isHexagonal` function to check if a number is\
    \ hexagonal or not\n        // You can use `isHeptagonal` function to check if\
    \ a number is heptagonal or not\n        // You can use `isOctagonal` function\
    \ to check if a number is octagonal or not\n        // You can use `isNonagonal`\
    \ function to check if a number is nonagonal or not\n        // You can use `isDecagonal`\
    \ function to check if a number is decagonal or not\n        // You can use `isUndecagonal`\
    \ function to check if a number is undecagonal or not\n        // You can use\
    \ `isDodecagonal` function to check if a number is dodecagonal or not\n      \
    \  // You can use `isPentagonal` function to check if a number is pentagonal or\
    \ not\n        // You can use `isCenteredSquare` function to check if a number\
    \ is centered square or not\n        // You can use `isCenteredHexagonal` function\
    \ to check if a number is centered hexagonal", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range, inclusive.\n        var\
    \ even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n         \
    \   if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n              \
    \      even += 1\n                } else {\n                    odd += 1\n   \
    \             }\n            }\n        }\n        (even, odd)", "        // Fill\
    \ up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range\n        // You can use `isPalindrome`\
    \ function to check if a number is palindrome or not\n        var even = 0\n \
    \       var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even : Long = 0\n    \
    \    var odd : Long = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        var even : Long = 0\n\
    \        var odd : Long = 0\n        for (i <- 1 to n.toInt) {\n            if\
    \ (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n           \
    \     else odd += 1\n            }\n        }\n        (even, odd)", "       \
    \ // Fill up this function body\n        // `0` is a placeholder for compilation\n\
    \        (0l, 0l)", "        // Fill up this function body\n        // `n` is\
    \ the upper bound of the range, inclusive.\n        // You can use `isPalindrome`\
    \ function to check if a number is palindrome.\n        // You can use `isEven`\
    \ function to check if a number is even.\n        // You can use `isOdd` function\
    \ to check if a number is odd.\n        // You can use `isPrime` function to check\
    \ if a number is prime.\n        // You can use `isComposite` function to check\
    \ if a number is composite.\n        // You can use `isPerfectSquare` function\
    \ to check if a number is perfect square.\n        // You can use `isPerfectCube`\
    \ function to check if a number is perfect cube.\n        // You can use `isPerfect`\
    \ function to check if a number is perfect.\n        // You can use `isAbundant`\
    \ function to check if a number is abundant.\n        // You can use `isDeficient`\
    \ function to check if a number is deficient.\n        // You can use `isHappy`\
    \ function to check if a number is happy.\n        // You can use `isUnhappy`\
    \ function to check if a number is unhappy.\n        // You can use `isTriangular`\
    \ function to check if a number is triangular.\n        // You can use `isPentagonal`\
    \ function to check if a number is pentagonal.\n        // You can use `isHexagonal`\
    \ function to check if a number is hexagonal.\n        // You can use `isHeptagonal`\
    \ function to check if a number is heptagonal.\n        // You can use `isOctagonal`\
    \ function to check if a number is octagonal.\n        // You can use `isSquare`\
    \ function to check if a number is square.\n        // You can use `isCube` function\
    \ to check if a number is cube.\n        // You can use `isSquareFree` function\
    \ to check if a number is square free.\n        // You can use `isSmooth` function\
    \ to check if a number is smooth.\n        // You can use `isAbundant` function\
    \ to check if a number is abundant.\n        // You can use `isDeficient` function\
    \ to check if a number is deficient.\n        // You can use `isSemiperfect` function\
    \ to check if a", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1\
    \ to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2\
    \ == 0) even += 1\n                else odd += 1\n            }\n        }\n \
    \       (even, odd)", "        // Fill up this function body\n        // `0` is\
    \ a placeholder. Please modify it\n        (0l, 0l)", "        // Fill up this\
    \ function body\n        // `even` is the number of even palindromes\n       \
    \ // `odd` is the number of odd palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        // `even` and `odd`\
    \ are initialized as 0\n        var even = 0l\n        var odd = 0l\n        //\
    \ Write your solution here\n        for (i <- 1 to n.toInt) {\n            if\
    \ (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n           \
    \     else odd += 1\n            }\n        }\n        (even, odd)", "       \
    \ // Fill up this function body\n        // `even` is the number of even integer\
    \ palindromes\n        // `odd` is the number of odd integer palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `n` is the\
    \ upper bound of the range\n        // You can use `isPalindrome` function to\
    \ check if a number is palindrome\n        // You can use `isEven` function to\
    \ check if a number is even\n        // You can use `isOdd` function to check\
    \ if a number is odd\n        // You can use `isPrime` function to check if a\
    \ number is prime\n        // You can use `isComposite` function to check if a\
    \ number is composite\n        // You can use `isPerfectSquare` function to check\
    \ if a number is perfect square\n        // You can use `isPerfectCube` function\
    \ to check if a number is perfect cube\n        // You can use `isPerfectSquareOrCube`\
    \ function to check if a number is perfect square or perfect cube\n        //\
    \ You can use `isPerfectSquareOrCubeOrPrime` function to check if a number is\
    \ perfect square or perfect cube or prime\n        // You can use `isPerfectSquareOrCubeOrComposite`\
    \ function to check if a number is perfect square or perfect cube or composite\n\
    \        // You can use `isPerfectSquareOrCubeOrPrimeOrComposite` function to\
    \ check if a number is perfect square or perfect cube or prime or composite\n\
    \        // You can use `isPerfectSquareOrCubeOrPrimeOrCompositeOrEven` function\
    \ to check if a number is perfect square or perfect cube or prime or composite\
    \ or even\n        // You can use `isPerfectSquareOrCubeOrPrimeOrCompositeOrEvenOrOdd`\
    \ function to check if a number is perfect square or perfect cube or prime or\
    \ composite or even or odd\n        // You can use `isPerfectSquareOrCubeOrPrimeOrCompositeOrEvenOrOddOrPalindrome`\
    \ function to check if a number is perfect square or perfect cube or prime or\
    \ composite or even or odd or palindrome\n        // You can use `isPerfectSquareOrCubeOrPrimeOrCompositeOrEvenOrOddOrPalindromeOrNotPalindrome`\
    \ function to check if a number is perfect square or perfect cube or prime or\
    \ composite or even or odd or palindrome or not palindrome\n        // You can\
    \ use `isPerfectSquareOrCubeOrPrimeOrCompositeOrEvenOrOddOrPalindromeOrNotPalindromeOrPerfectSquareOrCube",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) {\n            \
    \        even += 1\n                } else {\n                    odd += 1\n \
    \               }\n            }\n        }\n        (even, odd)", "        //\
    \ Fill up this function body\n        // `n` is the input number\n        // You\
    \ have to return a tuple of 2 numbers.\n        // First number is the number\
    \ of even palindromes\n        // Second number is the number of odd palindromes\n\
    \        var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1l to n) {\n            if\
    \ (isPalindrome(i.toString)) {\n                if (i % 2 == 0) even += 1\n  \
    \              else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i.toString)) {\n                if (i % 2 == 0) even +=\
    \ 1\n                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `0` is a placeholder. Please\
    \ modify it\n        (0l, 0l)", "        // Fill up this function body\n     \
    \   // `even` is the number of even palindromes\n        // `odd` is the number\
    \ of odd palindromes\n        var even = 0l\n        var odd = 0l\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) even += 1\n                else odd += 1\n            }\n     \
    \   }\n        (even, odd)", "        // Fill up this function body\n        //\
    \ `even` is the number of even palindromes\n        // `odd` is the number of\
    \ odd palindromes\n        var even = 0l\n        var odd = 0l\n        for (i\
    \ <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i\
    \ % 2 == 0) even += 1 else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `n` is the input number\n\
    \        // You have to return a tuple of two numbers.\n        // First number\
    \ is the number of even palindromes\n        // Second number is the number of\
    \ odd palindromes\n        var even = 0\n        var odd = 0\n        for (i <-\
    \ 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i %\
    \ 2 == 0) {\n                    even += 1\n                } else {\n       \
    \             odd += 1\n                }\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        return\
    \ (even, odd)", "        // Fill up this function body\n        // `even` is the\
    \ number of even integer palindromes\n        // `odd` is the number of odd integer\
    \ palindromes\n        var even = 0l\n        var odd = 0l\n        for (i <-\
    \ 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i %\
    \ 2 == 0) even += 1\n                else odd += 1\n            }\n        }\n\
    \        (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `n` is the upper bound\
    \ of the range\n        // You can use `isPalindrome` function to check if a number\
    \ is palindrome or not\n        var even = 0\n        var odd = 0\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) {\n                    even += 1\n                } else {\n  \
    \                  odd += 1\n                }\n            }\n        }\n   \
    \     (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `n` is the upper bound\
    \ of the range\n        // You can use the helper function `isPalindrome` to check\
    \ if a number is a palindrome\n        // You can use the helper function `isEven`\
    \ to check if a number is even\n        // You can use the helper function `isOdd`\
    \ to check if a number is odd\n        var even = 0l\n        var odd = 0l\n \
    \       for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n      \
    \          if (isEven(i)) {\n                    even += 1\n                }\
    \ else {\n                    odd += 1\n                }\n            }\n   \
    \     }\n        (even, odd)", "        // Fill up this function body\n      \
    \  // `even` is the number of even palindromes\n        // `odd` is the number\
    \ of odd palindromes\n        var even = 0l\n        var odd = 0l\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) even += 1\n                else odd += 1\n            }\n     \
    \   }\n        (even, odd)", "        // Fill up this function body\n        //\
    \ `n` is the upper bound of the range\n        // You can use `isPalindrome` function\
    \ to check if a number is palindrome or not\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1 else odd += 1\n            }\n        }\n\
    \        (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `n` is the upper bound\
    \ of the range\n        // You can use `isPalindrome` function to check if a number\
    \ is palindrome or not\n        var even = 0\n        var odd = 0\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) even += 1\n                else odd += 1\n            }\n     \
    \   }\n        (even, odd)", "        // Write your code here\n        return\
    \ (0l, 0l)", "        // Fill up this function body\n        // `even` is the\
    \ number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     val even = 0l\n        val odd = 0l\n        (even, odd)", "        // Fill\
    \ up this function body\n        // `n` is the upper bound of the range\n    \
    \    // You have to return a tuple. First element of the tuple should be the number\
    \ of even palindromes\n        // Second element of the tuple should be the number\
    \ of odd palindromes\n        var even = 0\n        var odd = 0\n        for (i\
    \ <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i.toString.length\
    \ % 2 == 0) {\n                    even += 1\n                } else {\n     \
    \               odd += 1\n                }\n            }\n        }\n      \
    \  return (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use `isPalindrome` function to check if a number is\
    \ palindrome\n        // You can use `isEven` function to check if a number is\
    \ even\n        // You can use `isOdd` function to check if a number is odd\n\
    \        // You can use `isPrime` function to check if a number is prime\n   \
    \     // You can use `isComposite` function to check if a number is composite\n\
    \        // You can use `isPerfectSquare` function to check if a number is perfect\
    \ square\n        // You can use `isPerfectCube` function to check if a number\
    \ is perfect cube\n        // You can use `isPerfectSquareRoot` function to check\
    \ if a number is perfect square root\n        // You can use `isPerfectCubeRoot`\
    \ function to check if a number is perfect cube root\n        // You can use `isPerfectSquareRoot`\
    \ function to check if a number is perfect square root\n        // You can use\
    \ `isPerfectCubeRoot` function to check if a number is perfect cube root\n   \
    \     // You can use `isPerfectSquareRoot` function to check if a number is perfect\
    \ square root\n        // You can use `isPerfectCubeRoot` function to check if\
    \ a number is perfect cube root\n        // You can use `isPerfectSquareRoot`\
    \ function to check if a number is perfect square root\n        // You can use\
    \ `isPerfectCubeRoot` function to check if a number is perfect cube root\n   \
    \     // You can use `isPerfectSquareRoot` function to check if a number is perfect\
    \ square root\n        // You can use `isPerfectCubeRoot` function to check if\
    \ a number is perfect cube root\n        // You can use `isPerfectSquareRoot`\
    \ function to check if a number is perfect square root\n        // You can use\
    \ `isPerfectCubeRoot` function to check if a number is perfect cube root\n   \
    \     // You can use `isPerfectSquareRoot` function to check if a number is perfect\
    \ square root\n        // You can use `isPerfectCubeRoot` function to check if\
    \ a number is perfect cube root\n        // You can use `isPerfectSquareRoot`\
    \ function to check if a number is perfect square root\n        // You can use\
    \ `isPerfectCubeRoot` function to check if a number is perfect cube root\n   \
    \    ", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i.toString)) {\n                if (i % 2 == 0) even +=\
    \ 1\n                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use `isPalindrome` function to check if a number is\
    \ palindrome or not\n        // You can use `isEven` function to check if a number\
    \ is even or not\n        // You can use `isOdd` function to check if a number\
    \ is odd or not\n        // You can use `range` function to generate a range of\
    \ numbers\n        // You can use `filter` function to filter out a list of numbers\n\
    \        // You can use `length` function to get the length of a list\n      \
    \  // You can use `toLong` function to convert an integer to long\n        (0l,\
    \ 0l)", "        // Fill up this function body\n        // `n` is the upper bound\
    \ of the range\n        // You can use `isPalindrome` function to check if a number\
    \ is palindrome or not\n        var even = 0\n        var odd = 0\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) {\n                    even += 1\n                } else {\n  \
    \                  odd += 1\n                }\n            }\n        }\n   \
    \     (even, odd)", "        // Fill up this function body\n        // `n` is\
    \ the upper bound of the range\n        // You can use `isPalindrome` function\
    \ to check if a number is palindrome or not\n        // You can use `isEven` function\
    \ to check if a number is even or not\n        var even = 0\n        var odd =\
    \ 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n \
    \               if (isEven(i)) {\n                    even += 1\n            \
    \    } else {\n                    odd += 1\n                }\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `even` is the number of even palindromes\n        // `odd` is the number\
    \ of odd palindromes\n        var even = 0l\n        var odd = 0l\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) even += 1\n                else odd += 1\n            }\n     \
    \   }\n        (even, odd)", "        // Fill up this function body\n        //\
    \ `even` is the number of even palindromes\n        // `odd` is the number of\
    \ odd palindromes\n        var even = 0l\n        var odd = 0l\n        for (i\
    \ <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i\
    \ % 2 == 0) even += 1\n                else odd += 1\n            }\n        }\n\
    \        (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1\
    \ to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i % 2\
    \ == 0) even += 1\n                else odd += 1\n            }\n        }\n \
    \       (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `n` is the upper bound\
    \ of the range\n        // You can use `isPalindrome` function to check if a number\
    \ is palindrome\n        // You can use `isEven` function to check if a number\
    \ is even\n        // You can use `isOdd` function to check if a number is odd\n\
    \        // You can use `Tuple2` to return a tuple\n        // You can use `toLong`\
    \ to convert an `Int` to `Long`\n        var even = 0\n        var odd = 0\n \
    \       for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n      \
    \          if (isEven(i)) {\n                    even += 1\n                }\
    \ else {\n                    odd += 1\n                }\n            }\n   \
    \     }\n        (even.toLong, odd.toLong)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1l to n) {\n            if (isPalindrome(i.toString)) {\n \
    \               if (i % 2 == 0) even += 1 else odd += 1\n            }\n     \
    \   }\n        (even, odd)", "        // Fill up this function body\n        //\
    \ `even` is the number of even palindromes\n        // `odd` is the number of\
    \ odd palindromes\n        var even = 0l\n        var odd = 0l\n        for (i\
    \ <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i\
    \ % 2 == 0) even += 1\n                else odd += 1\n            }\n        }\n\
    \        (even, odd)", "        // Fill up this function body\n        // `n`\
    \ is the upper bound of the range\n        // You can use `isPalindrome` function\n\
    \        // You can use `isEven` function\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (isEven(i)) {\n                    even += 1\n       \
    \         } else {\n                    odd += 1\n                }\n        \
    \    }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range\n        // You can use `isPalindrome`\
    \ function to check if a number is palindrome or not\n        // You can use `isEven`\
    \ function to check if a number is even or not\n        // You can use `isOdd`\
    \ function to check if a number is odd or not\n        // You can use `isPrime`\
    \ function to check if a number is prime or not\n        // You can use `isComposite`\
    \ function to check if a number is composite or not\n        // You can use `isPerfectSquare`\
    \ function to check if a number is perfect square or not\n        // You can use\
    \ `isPerfectCube` function to check if a number is perfect cube or not\n     \
    \   // You can use `isPerfectSquareRoot` function to check if a number is perfect\
    \ square root or not\n        // You can use `isPerfectCubeRoot` function to check\
    \ if a number is perfect cube root or not\n        // You can use `isPerfectSquareOrCube`\
    \ function to check if a number is perfect square or perfect cube or not\n   \
    \     // You can use `isPerfectSquareRootOrCubeRoot` function to check if a number\
    \ is perfect square root or perfect cube root or not\n        // You can use `isPerfectSquareAndCube`\
    \ function to check if a number is perfect square and perfect cube or not\n  \
    \      // You can use `isPerfectSquareRootAndCubeRoot` function to check if a\
    \ number is perfect square root and perfect cube root or not\n        // You can\
    \ use `isPerfectSquareOrSquareRoot` function to check if a number is perfect square\
    \ or perfect square root or not\n        // You can use `isPerfectCubeOrCubeRoot`\
    \ function to check if a number is perfect cube or perfect cube root or not\n\
    \        // You can use `isPerfectSquareAndSquareRoot` function to check if a\
    \ number is perfect square and perfect square root or not\n        // You can\
    \ use `isPerfectCubeAndCubeRoot` function to check if a number is perfect cube\
    \ and perfect cube root or not\n        // You can use `isPerfectSquareOrCubeOrSquareRootOrCubeRoot`\
    \ function to check if a number is perfect square or perfect cube or perfect square\
    \ root or perfect cube root or not\n        // You can use `isPerfectSquareAndCubeOrSquareRootAndCubeRoot`",
  "        // Fill up this function body\n        // `n` is the upper bound of the\
    \ range\n        // You can use the helper function `isPalindrome` to check if\
    \ a number is palindrome\n        // You can use the helper function `isEven`\
    \ to check if a number is even\n        // You can use the helper function `isOdd`\
    \ to check if a number is odd\n        // You can use the helper function `isPrime`\
    \ to check if a number is prime\n        // You can use the helper function `isComposite`\
    \ to check if a number is composite\n        // You can use the helper function\
    \ `isSquare` to check if a number is square\n        // You can use the helper\
    \ function `isCube` to check if a number is cube\n        // You can use the helper\
    \ function `isSquareFree` to check if a number is square free\n        // You\
    \ can use the helper function `isCubeFree` to check if a number is cube free\n\
    \        // You can use the helper function `isPerfectSquare` to check if a number\
    \ is perfect square\n        // You can use the helper function `isPerfectCube`\
    \ to check if a number is perfect cube\n        // You can use the helper function\
    \ `isPerfectSquareFree` to check if a number is perfect square free\n        //\
    \ You can use the helper function `isPerfectCubeFree` to check if a number is\
    \ perfect cube free\n        // You can use the helper function `isSquareSum`\
    \ to check if a number is square sum\n        // You can use the helper function\
    \ `isCubeSum` to check if a number is cube sum\n        // You can use the helper\
    \ function `isSquareSumFree` to check if a number is square sum free\n       \
    \ // You can use the helper function `isCubeSumFree` to check if a number is cube\
    \ sum free\n        // You can use the helper function `isPerfectSquareSum` to\
    \ check if a number is perfect square sum\n        // You can use the helper function\
    \ `isPerfectCubeSum` to check if a number is perfect cube sum\n        // You\
    \ can use the helper function `isPerfectSquareSumFree` to check if a number is\
    \ perfect square sum free\n        // You can use the helper function `isPerfectCubeSumFree`\
    \ to check if a number is perfect cube sum free\n        // You can use the helper\
    \ function `isSquareDifference` to", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range\n        // You can use `isPalindrome`\
    \ function to check if a number is palindrome or not\n        // You can use `isEven`\
    \ function to check if a number is even or not\n        // You can use `isOdd`\
    \ function to check if a number is odd or not\n        // You can use `toDigits`\
    \ function to convert a number to its digits\n        // You can use `toNumber`\
    \ function to convert a list of digits to a number\n        // You can use `reverse`\
    \ function to reverse a list\n        // You can use `zip` function to zip two\
    \ lists\n        // You can use `map` function to apply a function to each element\
    \ of a list\n        // You can use `filter` function to filter a list\n     \
    \   // You can use `count` function to count the number of elements in a list\n\
    \        // You can use `sum` function to sum the elements of a list\n       \
    \ // You can use `product` function to multiply the elements of a list\n     \
    \   // You can use `reduce` function to apply a binary operator to a list\n  \
    \      // You can use `foldLeft` function to apply a binary operator to a list\n\
    \        // You can use `foldRight` function to apply a binary operator to a list\n\
    \        // You can use `forall` function to check if all elements of a list satisfy\
    \ a condition\n        // You can use `exists` function to check if any element\
    \ of a list satisfies a condition\n        // You can use `contains` function\
    \ to check if a list contains an element\n        // You can use `containsSlice`\
    \ function to check if a list contains a slice\n        // You can use `indexOf`\
    \ function to find the index of an element in a list\n        // You can use `indexOfSlice`\
    \ function to find the index of a slice in a list\n        // You can use `lastIndexOf`\
    \ function to find the last index of an element in a list\n        // You can\
    \ use `lastIndexOfSlice` function to find the last index of a slice in a list\n\
    \        // You can use `mkString` function to convert a list to a string\n  \
    \      // You can use `mkString` function to convert a list to a string\n    \
    \    //", "        // Fill up this function body\n        // `n` is the upper\
    \ bound of the range of numbers\n        // You can use `isPalindrome` function\
    \ to check if a number is palindrome\n        // You can use `isEven` function\
    \ to check if a number is even\n        // You can use `isOdd` function to check\
    \ if a number is odd\n        // You can use `isEven` and `isOdd` function to\
    \ check if a number is even or odd\n        // You can use `isEven` and `isOdd`\
    \ function to check if a number is even or odd\n        // You can use `isEven`\
    \ and `isOdd` function to check if a number is even or odd\n        // You can\
    \ use `isEven` and `isOdd` function to check if a number is even or odd\n    \
    \    // You can use `isEven` and `isOdd` function to check if a number is even\
    \ or odd\n        // You can use `isEven` and `isOdd` function to check if a number\
    \ is even or odd\n        // You can use `isEven` and `isOdd` function to check\
    \ if a number is even or odd\n        // You can use `isEven` and `isOdd` function\
    \ to check if a number is even or odd\n        // You can use `isEven` and `isOdd`\
    \ function to check if a number is even or odd\n        // You can use `isEven`\
    \ and `isOdd` function to check if a number is even or odd\n        // You can\
    \ use `isEven` and `isOdd` function to check if a number is even or odd\n    \
    \    // You can use `isEven` and `isOdd` function to check if a number is even\
    \ or odd\n        // You can use `isEven` and `isOdd` function to check if a number\
    \ is even or odd\n        // You can use `isEven` and `isOdd` function to check\
    \ if a number is even or odd\n        // You can use `isEven` and `isOdd` function\
    \ to check if a number is even or odd\n        // You can use `isEven` and `isOdd`\
    \ function to check if a number is even or odd\n        // You can use `isEven`\
    \ and `isO", "        // Fill up this function body\n        // `even` is the\
    \ number of even integer palindromes\n        // `odd` is the number of odd integer\
    \ palindromes\n        var even = 0l\n        var odd = 0l\n        for (i <-\
    \ 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i %\
    \ 2 == 0) even += 1\n                else odd += 1\n            }\n        }\n\
    \        (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i.toString)) {\n                if (i % 2 == 0)\
    \ even += 1\n                else odd += 1\n            }\n        }\n       \
    \ (even, odd)", "        // Fill up this function body\n        // `n` is the\
    \ upper bound of the range\n        // You can use `isPalindrome` function to\
    \ check if a number is palindrome\n        // You can use `isEven` function to\
    \ check if a number is even\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (isEven(i)) even += 1\n                else odd += 1\n           \
    \ }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        // You can change the return\
    \ type of this function.\n        var even = 0l\n        var odd = 0l\n      \
    \  for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n           \
    \     if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `even` is the number of even integer palindromes\n        // `odd` is\
    \ the number of odd integer palindromes\n        var even = 0l\n        var odd\
    \ = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // You can use\
    \ `isPalindrome` function to check if a number is palindrome\n        // You can\
    \ use `isEven` function to check if a number is even\n        var even = 0l\n\
    \        var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (isEven(i)) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `0` is placeholder, replace it with your code\n        (0l,\
    \ 0l)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i.toString)) {\n                if (i % 2 == 0) even +=\
    \ 1\n                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i.toString)) {\n                if (i % 2 == 0) even +=\
    \ 1\n                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `0` is placeholder, replace\
    \ it with your answer\n        (0l, 0l)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        // `even` and `odd` are the return values\
    \ of this function\n        var even = 0l\n        var odd = 0l\n        for (i\
    \ <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if (i\
    \ % 2 == 0) even += 1\n                else odd += 1\n            }\n        }\n\
    \        (even, odd)", "        // Fill up this function body\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even : Long = 0\n        var odd : Long = 0\n        for (i <- 1\
    \ to n.toInt) {\n            if (isPalindrome(i.toString)) {\n               \
    \ if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n  \
    \      }\n        (even, odd)", "        // Fill up this function body\n     \
    \   // `even` is the number of even integer palindromes\n        // `odd` is the\
    \ number of odd integer palindromes\n        var even = 0l\n        var odd =\
    \ 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the number of elements in the range\n        // `even`\
    \ is the number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i.toString)) {\n                if (i % 2 ==\
    \ 0) even += 1\n                else odd += 1\n            }\n        }\n    \
    \    (even, odd)", "        // Fill up this function body\n        // `even` is\
    \ the number of even integer palindromes\n        // `odd` is the number of odd\
    \ integer palindromes\n        var even : Long = 0\n        var odd : Long = 0\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `0` indicates the number of even palindromes\n        // `1` indicates\
    \ the number of odd palindromes\n        val result = Array(0l, 0l)\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n                if\
    \ (i % 2 == 0) result(0) += 1\n                else result(1) += 1\n         \
    \   }\n        }\n        (result(0), result(1))", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range\n        // `even` is the\
    \ number of even palindromes\n        // `odd` is the number of odd palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `n` is the upper bound\
    \ of the range, inclusive.\n        // You have to return a tuple that has the\
    \ number of even and odd integer palindromes respectively.\n        // For example,\
    \ if n = 3, then the integer palindromes are 1, 2, 3.\n        // One of them\
    \ is even, and two of them are odd.\n        // So, the answer is (1, 2).\n  \
    \      var even = 0\n        var odd = 0\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `n` is the number of digits\
    \ in the palindrome\n        // `d` is the number of digits in the left half of\
    \ the palindrome\n        // `p` is the number of palindromes with `n` digits\n\
    \        // `e` is the number of even palindromes with `n` digits\n        //\
    \ `o` is the number of odd palindromes with `n` digits\n        // `p(n) = p(n\
    \ - 1) + p(n - 2) + 9 * 10^(n - 1)`\n        // `e(n) = e(n - 1) + e(n - 2) +\
    \ 9 * 10^(n - 1)`\n        // `o(n) = o(n - 1) + o(n - 2) + 9 * 10^(n - 1) - 10^(n\
    \ - 1)`\n        // `p(1) = 10`\n        // `e(1) = 0`\n        // `o(1) = 10`\n\
    \        // `p(2) = 9`\n        // `e(2) = 9`\n        // `o(2) = 0`\n       \
    \ val p = Array.fill(n.toInt + 1)(0l)\n        val e = Array.fill(n.toInt + 1)(0l)\n\
    \        val o = Array.fill(n.toInt + 1)(0l)\n        p(1) = 10\n        e(1)\
    \ = 0\n        o(1) = 10\n        p(2) = 9\n        e(2) = 9\n        o(2) = 0\n\
    \        for (i <- 3 to n.toInt) {\n            p(i) = p(i - 1) + p(i - 2) + 9\
    \ * pow(10, i - 1).toLong\n            e(i) = e(i - 1) + e(i - 2) + 9 * pow(10,\
    \ i - 1).toLong\n            o(i) = o(i - 1) + o(i - 2) + 9 * pow(10, i - 1).toLong\
    \ - pow(10, i - 1).toLong\n        }\n        (e", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even : Long = 0\n    \
    \    var odd : Long = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        var even = 0l\n    \
    \    var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (i.toString\
    \ == i.toString.reverse) {\n                if (i % 2 == 0) even += 1\n      \
    \          else odd += 1\n            }\n        }\n        (even, odd)", "  \
    \      // Fill up this function body\n        // `even` is the number of even\
    \ integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even palindromes\n        // `odd` is the number of odd palindromes\n   \
    \     var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n\
    \            if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n\
    \                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i)) {\n                if (i % 2 == 0) even += 1\n    \
    \            else odd += 1\n            }\n        }\n        (even, odd)", " \
    \       // Fill up this function body\n        // `even` is the number of even\
    \ palindromes\n        // `odd` is the number of odd palindromes\n        var\
    \ even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt) {\n       \
    \     if (isPalindrome(i.toString)) {\n                if (i % 2 == 0) even +=\
    \ 1\n                else odd += 1\n            }\n        }\n        (even, odd)",
  "        // Fill up this function body\n        // `even` is the number of even\
    \ integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        var even = 0l\n        var odd = 0l\n        for (i <- 1 to n.toInt)\
    \ {\n            if (isPalindrome(i)) {\n                if (i % 2 == 0) even\
    \ += 1\n                else odd += 1\n            }\n        }\n        (even,\
    \ odd)", "        // Fill up this function body\n        // `even` is the number\
    \ of even integer palindromes\n        // `odd` is the number of odd integer palindromes\n\
    \        val even = 0l\n        val odd = 0l\n        (even, odd)", "        //\
    \ Fill up this function body\n        // `even` is the number of even palindromes\n\
    \        // `odd` is the number of odd palindromes\n        var even = 0l\n  \
    \      var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1l to n) {\n            if (isPalindrome(i)) {\n          \
    \      if (i % 2 == 0) even += 1\n                else odd += 1\n            }\n\
    \        }\n        (even, odd)", "        // Fill up this function body\n   \
    \     // `n` is the upper bound of the range of integers\n        // You can use\
    \ `isPalindrome` function to check if a number is a palindrome\n        // You\
    \ can use `isEven` function to check if a number is even\n        var even = 0\n\
    \        var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (isEven(i)) {\n                    even += 1\n       \
    \         } else {\n                    odd += 1\n                }\n        \
    \    }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n\
    \                if (i % 2 == 0) even += 1\n                else odd += 1\n  \
    \          }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even palindromes\n        // `odd`\
    \ is the number of odd palindromes\n        var even = 0l\n        var odd = 0l\n\
    \        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n     \
    \           if (i % 2 == 0) even += 1\n                else odd += 1\n       \
    \     }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even integer palindromes\n        // `odd`\
    \ is the number of odd integer palindromes\n        var even = 0l\n        var\
    \ odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `even` is the number of even integer palindromes\n        //\
    \ `odd` is the number of odd integer palindromes\n        var even = 0l\n    \
    \    var odd = 0l\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString))\
    \ {\n                if (i % 2 == 0) even += 1\n                else odd += 1\n\
    \            }\n        }\n        (even, odd)", "        // Fill up this function\
    \ body\n        // `n` is the upper bound of the range, inclusive.\n        //\
    \ You should return a tuple that has the number of even and odd integer palindromes\
    \ respectively.\n        (0l, 0l)", "        // Fill up this function body\n \
    \       // `even` is the number of even palindromes\n        // `odd` is the number\
    \ of odd palindromes\n        var even = 0l\n        var odd = 0l\n        for\
    \ (i <- 1 to n.toInt) {\n            if (isPalindrome(i.toString)) {\n       \
    \         if (i % 2 == 0) even += 1\n                else odd += 1\n         \
    \   }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `even` is the number of even palindromes\n        // `odd` is the\
    \ number of odd palindromes\n        var even = 0l\n        var odd = 0l\n   \
    \     for (i <- 1 to n.toInt) {\n            if (isPalindrome(i)) {\n        \
    \        if (i % 2 == 0) even += 1\n                else odd += 1\n          \
    \  }\n        }\n        (even, odd)", "        // Fill up this function body\n\
    \        // `n` is the upper bound of the range\n        var even = 0\n      \
    \  var odd = 0\n        for (i <- 1 to n.toInt) {\n            if (isPalindrome(i))\
    \ {\n                if (i % 2 == 0) {\n                    even += 1\n      \
    \          } else {\n                    odd += 1\n                }\n       \
    \     }\n        }\n        return (even, odd)"]
stop_tokens:
- "\n    }\n"
