name: HumanEval_73_smallest_change
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array arr of integers, find the minimum number of elements that\n\
  \    // need to be changed to make the array palindromic. A palindromic array is\
  \ an array that\n    // is read the same backwards and forwards. In one change,\
  \ you can change one element to any other element.\n    // For example:\n    //\
  \ >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong,\
  \ 7l.toLong, 9l.toLong, 6l.toLong)))\n    // (4l)\n    // >>> smallestChange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong)))\n    // (1l)\n\
  \    // >>> smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 2l.toLong,\
  \ 1l.toLong)))\n    // (0l)\n    def smallestChange(arr : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 4l.toLong, 7l.toLong, 9l.toLong, 6l.toLong)))\
  \ == (4l));\n    assert(smallestChange((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 4l.toLong, 4l.toLong, 2l.toLong))) == (1l));\n    assert(smallestChange((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 1l.toLong))) == (0l));\n    assert(smallestChange((List[Long](3l.toLong,\
  \ 1l.toLong, 1l.toLong, 3l.toLong))) == (0l));\n    assert(smallestChange((List[Long](1l.toLong)))\
  \ == (0l));\n    assert(smallestChange((List[Long](0l.toLong, 1l.toLong))) == (1l));\n\
  \    }\n\n}\n"
completions: ["        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n\
    \        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n        \
    \        if (i == j) dp(i)(j) = 0\n                else dp(i)(j) = Long.MaxValue\n\
    \            }\n        }\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i <= j) {\n                    if (i ==\
    \ j) dp(i)(j) = 0\n                    else if (i + 1 == j) dp(i)(j) = if (arr(i)\
    \ == arr(j)) 0 else 1\n                    else {\n                        dp(i)(j)\
    \ = min(dp(i)(j), dp(i + 1)(j - 1) + (if (arr(i) == arr(j)) 0 else 1))\n     \
    \                   dp(i)(j) = min(dp(i)(j), dp(i + 1)(j) + 1)\n             \
    \           dp(i)(j) = min(dp(i)(j), dp(i)(j - 1) + 1)\n                    }\n\
    \                }\n            }\n        }\n        dp(0)(n - 1)", "       \
    \ val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i\
    \ <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) {\n  \
    \              dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n            }\n      \
    \  }\n        for (i <- 2 until n) {\n            for (j <- 0 until n - i) {\n\
    \                dp(j)(j + i) = min(dp(j + 1)(j + i - 1) + abs(arr(j) - arr(j\
    \ + i)), dp(j + 1)(j + i) + abs(arr(j) - arr(j + i - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            dp(i)(i)\
    \ = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n  \
    \      }\n        for (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until\
    \ n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)),\
    \ dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n        }\n       \
    \ dp(0)(n - 1)", "        val n = arr.length\n        val dp = Array.ofDim[Long](n,\
    \ n)\n        for (i <- 0 until n) {\n            dp(i)(i) = 0\n            if\
    \ (i + 1 < n) dp(i)(i + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for\
    \ (i <- n - 3 to 0 by -1) {\n            for (j <- i + 2 until n) {\n        \
    \        dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n\
    \            for (i <- 0 until n - l) {\n                dp(i)(i + l) = min(dp(i\
    \ + 1)(i + l - 1) + abs(arr(i) - arr(i + l)), dp(i + 1)(i + l) + abs(arr(i) -\
    \ arr(i + 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n \
    \           for (i <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i\
    \ + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i + 1)(i + k) + abs(arr(i) -\
    \ arr(i + 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val\
    \ n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <-\
    \ 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i +\
    \ 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n \
    \           for (i <- 0 until n - k) {\n                val j = i + k\n      \
    \          dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1)\
    \ + abs(arr(j) - arr(j - 1)))\n            }\n        }\n        dp(0)(n - 1)",
  "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for\
    \ (i <- 0 until n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by\
    \ -1) {\n            for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i\
    \ + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n\
    \            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else dp(i)(j) = Long.MaxValue\n            }\n        }\n   \
    \     for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n             \
    \   val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i +\
    \ 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) +\
    \ 1\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                val j = i + k\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          for (j <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n\
    \                else if (i + 1 == j) dp(i)(j) = if (arr(i) == arr(j)) 0 else\
    \ 1\n                else dp(i)(j) = Long.MaxValue\n            }\n        }\n\
    \        for (l <- 2 until n) {\n            for (i <- 0 until n - l) {\n    \
    \            val j = i + l\n                if (arr(i) == arr(j)) dp(i)(j) = dp(i\
    \ + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1))\
    \ + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n\
    \        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n  \
    \          dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (i <- n - 3 to 0 by -1) {\n          \
    \  for (j <- i + 2 until n) {\n                dp(i)(j) = min(dp(i + 1)(j) + abs(arr(i)\
    \ - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j - 1)))\n            }\n   \
    \     }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp =\
    \ Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n            for (j\
    \ <- 0 until n) {\n                if (i == j) dp(i)(j) = 0\n                else\
    \ dp(i)(j) = Long.MaxValue\n            }\n        }\n        for (l <- 2 to n)\
    \ {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n\
    \                if (arr(i) == arr(j)) dp(i)(j) = dp(i + 1)(j - 1)\n         \
    \       else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j - 1)) + 1\n            }\n \
    \       }\n        dp(0)(n - 1)", "        val n = arr.length\n        val dp\
    \ = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = 0\n     \
    \   for (i <- 0 until n - 1) dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n\
    \        for (len <- 3 to n) {\n            for (i <- 0 to n - len) {\n      \
    \          val j = i + len - 1\n                if (arr(i) == arr(j)) dp(i)(j)\
    \ = dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) {\n             \
    \   dp(i)(i + 1) = if (arr(i) == arr(i + 1)) 0 else 1\n            }\n       \
    \ }\n        for (l <- 3 to n) {\n            for (i <- 0 to n - l) {\n      \
    \          val j = i + l - 1\n                if (arr(i) == arr(j)) dp(i)(j) =\
    \ dp(i + 1)(j - 1)\n                else dp(i)(j) = min(dp(i + 1)(j), dp(i)(j\
    \ - 1)) + 1\n            }\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) {\n            dp(i)(i) = 0\n            if (i < n - 1) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (k <- 2 until n) {\n            for (i\
    \ <- 0 until n - k) {\n                dp(i)(i + k) = min(dp(i + 1)(i + k) + abs(arr(i)\
    \ - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i + k) - arr(i + k - 1)))\n      \
    \      }\n        }\n        dp(0)(n - 1)", "        val n = arr.length\n    \
    \    val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) {\n      \
    \      dp(i)(i) = 0\n            if (i + 1 < n) {\n                dp(i)(i + 1)\
    \ = abs(arr(i) - arr(i + 1))\n            }\n        }\n        for (k <- 2 until\
    \ n) {\n            for (i <- 0 until n - k) {\n                dp(i)(i + k) =\
    \ min(dp(i + 1)(i + k - 1) + abs(arr(i) - arr(i + k)), dp(i)(i + k - 1) + abs(arr(i\
    \ + k) - arr(i + k - 1)))\n            }\n        }\n        dp(0)(n - 1)", " \
    \       val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n       \
    \ for (i <- 0 until n) dp(i)(i) = 0\n        for (i <- 0 until n - 1) dp(i)(i\
    \ + 1) = abs(arr(i) - arr(i + 1))\n        for (i <- 2 until n) {\n          \
    \  for (j <- 0 until n - i) {\n                dp(j)(j + i) = min(dp(j + 1)(j\
    \ + i - 1) + abs(arr(j) - arr(j + i)), dp(j + 1)(j + i) + abs(arr(j) - arr(j +\
    \ i - 1)))\n            }\n        }\n        dp(0)(n - 1)", "        val n =\
    \ arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until\
    \ n) {\n            dp(i)(i) = 0\n            if (i + 1 < n) dp(i)(i + 1) = abs(arr(i)\
    \ - arr(i + 1))\n        }\n        for (l <- 2 until n) {\n            for (i\
    \ <- 0 until n - l) {\n                val j = i + l\n                dp(i)(j)\
    \ = min(dp(i + 1)(j) + abs(arr(i) - arr(i + 1)), dp(i)(j - 1) + abs(arr(j) - arr(j\
    \ - 1)))\n            }\n        }\n        dp(0)(n - 1)"]
stop_tokens:
- "\n    }\n"
