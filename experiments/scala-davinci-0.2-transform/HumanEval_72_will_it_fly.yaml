name: HumanEval_72_will_it_fly
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that returns True if the object q will fly, and False otherwise.\n\
  \    // The object q will fly if it's balanced (it is a palindromic list) and the\
  \ sum of its elements is less than or equal the maximum possible weight w.\n   \
  \ // Example:\n    // >>> willItFly((List[Long](1l.toLong, 2l.toLong)), (5l))\n\
  \    // (false)\n    // # 1+2 is less than the maximum possible weight, but it's\
  \ unbalanced.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
  \ (1l))\n    // (false)\n    // # it's balanced, but 3+2+3 is more than the maximum\
  \ possible weight.\n    // >>> willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
  \ (9l))\n    // (true)\n    // # 3+2+3 is less than the maximum possible weight,\
  \ and it's balanced.\n    // >>> willItFly((List[Long](3l.toLong)), (5l))\n    //\
  \ (true)\n    // # 3 is less than the maximum possible weight, and it's balanced.\n\
  \    def willItFly(q : List[Long], w : Long) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(willItFly((List[Long](3l.toLong,\
  \ 2l.toLong, 3l.toLong)), (9l)) == (true));\n    assert(willItFly((List[Long](1l.toLong,\
  \ 2l.toLong)), (5l)) == (false));\n    assert(willItFly((List[Long](3l.toLong)),\
  \ (5l)) == (true));\n    assert(willItFly((List[Long](3l.toLong, 2l.toLong, 3l.toLong)),\
  \ (1l)) == (false));\n    assert(willItFly((List[Long](1l.toLong, 2l.toLong, 3l.toLong)),\
  \ (6l)) == (false));\n    assert(willItFly((List[Long](5l.toLong)), (5l)) == (true));\n\
  \    }\n\n}\n"
completions: ["        if (q.length == 0) return true\n        if (q.length == 1)\
    \ return true\n        if (q.length == 2) return q(0) == q(1)\n        if (q.length\
    \ == 3) return q(0) == q(2)\n        if (q.length % 2 == 0) return false\n   \
    \     if (q.sum > w) return false\n        for (i <- 0 until q.length / 2) {\n\
    \            if (q(i) != q(q.length - 1 - i)) return false\n        }\n      \
    \  return true", "        val sum = q.sum\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome", "        var sum = 0l\n        for (i\
    \ <- q) {\n            sum += i\n        }\n        if (sum > w) return false\n\
    \        val q2 = q.reverse\n        for (i <- 0 until q.length) {\n         \
    \   if (q(i) != q2(i)) return false\n        }\n        return true", "      \
    \  val sum = q.sum\n        val isPalindrome = q == q.reverse\n        sum <=\
    \ w && isPalindrome", "        val qSum = q.sum\n        val qReverse = q.reverse\n\
    \        val qIsPalindrome = q == qReverse\n        val qWillFly = qSum <= w\n\
    \        qIsPalindrome && qWillFly", "        def isBalanced(q : List[Long]) :\
    \ Boolean = {\n            if (q.length == 0) return true\n            if (q.length\
    \ == 1) return true\n            if (q.head == q.last) return isBalanced(q.tail.init)\n\
    \            return false\n        }\n        if (isBalanced(q) && q.sum <= w)\
    \ return true\n        return false", "        val sum = q.sum\n        val isBalanced\
    \ = q.reverse == q\n        sum <= w && isBalanced", "        def isBalanced(q\
    \ : List[Long]) : Boolean = {\n            if (q.length == 0) return true\n  \
    \          if (q.length == 1) return true\n            if (q.head == q.last) return\
    \ isBalanced(q.tail.init)\n            return false\n        }\n        if (isBalanced(q)\
    \ && q.sum <= w) return true\n        return false", "        def isBalanced(q\
    \ : List[Long]) : Boolean = {\n            if (q.length == 0) return true\n  \
    \          if (q.length == 1) return true\n            if (q.head == q.last) return\
    \ isBalanced(q.tail.init)\n            return false\n        }\n        def sum(q\
    \ : List[Long]) : Long = {\n            if (q.length == 0) return 0\n        \
    \    return q.head + sum(q.tail)\n        }\n        if (isBalanced(q) && sum(q)\
    \ <= w) return true\n        return false", "        val sum = q.sum\n       \
    \ val palindrome = q.reverse == q\n        sum <= w && palindrome", "        val\
    \ sum = q.sum\n        val palindrome = q.reverse == q\n        sum <= w && palindrome",
  "        if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length % 2 == 0)\
    \ return false\n        val half = q.length / 2\n        val left = q.slice(0,\
    \ half)\n        val right = q.slice(half + 1, q.length)\n        val leftSum\
    \ = left.sum\n        val rightSum = right.sum\n        if (leftSum > w) return\
    \ false\n        if (rightSum > w) return false\n        if (leftSum != rightSum)\
    \ return false\n        for (i <- 0 until half) {\n            if (left(i) !=\
    \ right(half - 1 - i)) return false\n        }\n        return true", "      \
    \  val sum = q.sum\n        if (sum > w) return false\n        val qq = q.map(_.toString).mkString\n\
    \        val qqq = qq.reverse\n        return qq == qqq", "        // Write your\
    \ code here\n        true", "        if (q.length == 0) return true\n        if\
    \ (q.length == 1) return q(0) <= w\n        if (q.length == 2) return q(0) + q(1)\
    \ <= w\n        if (q.length % 2 == 0) return false\n        var sum = 0l\n  \
    \      for (i <- 0 until q.length) {\n            sum += q(i)\n            if\
    \ (sum > w) return false\n        }\n        var i = 0\n        var j = q.length\
    \ - 1\n        while (i < j) {\n            if (q(i) != q(j)) return false\n \
    \           i += 1\n            j -= 1\n        }\n        true", "        val\
    \ sum = q.sum\n        val isBalanced = q.reverse == q\n        sum <= w && isBalanced",
  "        if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length % 2 == 0)\
    \ return false\n        val half = q.length / 2\n        val left = q.slice(0,\
    \ half)\n        val right = q.slice(half + 1, q.length)\n        val leftSum\
    \ = left.foldLeft(0l)((a, b) => a + b)\n        val rightSum = right.foldLeft(0l)((a,\
    \ b) => a + b)\n        if (leftSum != rightSum) return false\n        val leftReverse\
    \ = left.reverse\n        for (i <- 0 until half) {\n            if (left(i) !=\
    \ leftReverse(i)) return false\n        }\n        if (leftSum > w) return false\n\
    \        return true", "        // Write your code here\n        if (q.length\
    \ == 0) return true\n        if (q.length == 1) return true\n        if (q.length\
    \ == 2) return q(0) == q(1)\n        if (q.length % 2 == 0) return false\n   \
    \     val mid = q.length / 2\n        val left = q.slice(0, mid)\n        val\
    \ right = q.slice(mid + 1, q.length)\n        val sum = q.sum\n        if (sum\
    \ > w) return false\n        if (left.sum != right.sum) return false\n       \
    \ return true", "        val sum = q.sum\n        val palindrome = q.reverse ==\
    \ q\n        palindrome && sum <= w", "        def isPalindrome(q : List[Long])\
    \ : Boolean = {\n            if (q.length == 1) return true\n            if (q.length\
    \ == 2) return q(0) == q(1)\n            if (q(0) == q(q.length - 1)) return isPalindrome(q.slice(1,\
    \ q.length - 1))\n            return false\n        }\n        if (isPalindrome(q))\
    \ {\n            var sum = 0l\n            for (x <- q) sum += x\n           \
    \ return sum <= w\n        }\n        return false", "        if (q.length ==\
    \ 0) return true\n        if (q.length == 1) return true\n        if (q.length\
    \ == 2) return q(0) == q(1)\n        if (q.length == 3) return q(0) == q(2)\n\
    \        if (q.length % 2 == 0) return false\n        val mid = q.length / 2\n\
    \        val left = q.slice(0, mid)\n        val right = q.slice(mid + 1, q.length)\n\
    \        val leftSum = left.sum\n        val rightSum = right.sum\n        if\
    \ (leftSum > w) return false\n        if (rightSum > w) return false\n       \
    \ if (leftSum + rightSum > w) return false\n        if (left != right.reverse)\
    \ return false\n        return true", "        if (q.length == 0) return true\n\
    \        if (q.length == 1) return true\n        if (q.length == 2) return q(0)\
    \ == q(1)\n        if (q.length == 3) return q(0) == q(2)\n        if (q.length\
    \ % 2 == 0) return false\n        val half = q.length / 2\n        val left =\
    \ q.slice(0, half)\n        val right = q.slice(half + 1, q.length)\n        val\
    \ leftSum = left.sum\n        val rightSum = right.sum\n        if (leftSum >\
    \ w) return false\n        if (rightSum > w) return false\n        if (leftSum\
    \ != rightSum) return false\n        return true", "        val sum = q.foldLeft(0l)((a,\
    \ b) => a + b)\n        val palindrome = q.reverse == q\n        palindrome &&\
    \ sum <= w", "        if (q.length == 0) return true\n        if (q.length ==\
    \ 1) return true\n        if (q.length == 2) return q(0) == q(1)\n        if (q.length\
    \ == 3) return q(0) == q(2)\n        if (q.length == 4) return q(0) == q(3) &&\
    \ q(1) == q(2)\n        if (q.length % 2 == 0) return false\n        val n = q.length\n\
    \        val m = n / 2\n        for (i <- 0 until m) {\n            if (q(i) !=\
    \ q(n - i - 1)) return false\n        }\n        var sum = 0l\n        for (i\
    \ <- 0 until n) {\n            sum += q(i)\n        }\n        return sum <= w",
  "        if (q.length == 0) return true\n        if (q.length == 1) return q(0)\
    \ <= w\n        if (q.length % 2 == 0) return false\n        var sum = 0l\n  \
    \      for (i <- 0 until q.length) {\n            sum += q(i)\n            if\
    \ (sum > w) return false\n        }\n        if (sum > w) return false\n     \
    \   var i = 0\n        var j = q.length - 1\n        while (i < j) {\n       \
    \     if (q(i) != q(j)) return false\n            i += 1\n            j -= 1\n\
    \        }\n        return true", "        val sum = q.sum\n        val isPalindrome\
    \ = q == q.reverse\n        sum <= w && isPalindrome", "        val sum = q.sum\n\
    \        val palindrome = q.reverse == q\n        palindrome && sum <= w", " \
    \       def isPalindrome(q : List[Long]) : Boolean = {\n            q == q.reverse\n\
    \        }\n        def sum(q : List[Long]) : Long = {\n            q.foldLeft(0l)((a,\
    \ b) => a + b)\n        }\n        isPalindrome(q) && sum(q) <= w", "        val\
    \ sum = q.sum\n        val palindrome = q.reverse == q\n        sum <= w && palindrome",
  "        // Write your code here\n        var sum = 0l\n        for (i <- q) sum\
    \ += i\n        if (sum > w) return false\n        var i = 0\n        var j =\
    \ q.length - 1\n        while (i < j) {\n            if (q(i) != q(j)) return\
    \ false\n            i += 1\n            j -= 1\n        }\n        return true",
  "        val sum = q.foldLeft(0l)((a, b) => a + b)\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome", '        if (q.sum <= w && q == q.reverse)
    true else false', "        if (q.length == 0) return true\n        if (q.length\
    \ == 1) return true\n        if (q.length == 2) return q(0) == q(1)\n        if\
    \ (q.length == 3) return q(0) == q(2)\n        if (q.length == 4) return q(0)\
    \ == q(3) && q(1) == q(2)\n        if (q.length == 5) return q(0) == q(4) && q(1)\
    \ == q(3)\n        if (q.length == 6) return q(0) == q(5) && q(1) == q(4) && q(2)\
    \ == q(3)\n        if (q.length == 7) return q(0) == q(6) && q(1) == q(5) && q(2)\
    \ == q(4)\n        if (q.length == 8) return q(0) == q(7) && q(1) == q(6) && q(2)\
    \ == q(5) && q(3) == q(4)\n        if (q.length == 9) return q(0) == q(8) && q(1)\
    \ == q(7) && q(2) == q(6) && q(3) == q(5)\n        if (q.length == 10) return\
    \ q(0) == q(9) && q(1) == q(8) && q(2) == q(7) && q(3) == q(6) && q(4) == q(5)\n\
    \        if (q.length == 11) return q(0) == q(10) && q(1) == q(9) && q(2) == q(8)\
    \ && q(3) == q(7) && q(4) == q(6)\n        if (q.length == 12) return q(0) ==\
    \ q(11) && q(1) == q(10) && q(2) == q(9) && q(3) == q(8) && q(4) == q(7) && q(5)\
    \ == q(6)\n        if (q.length == 13) return q(0) == q(", "        var sum =\
    \ 0l\n        for (i <- q) sum += i\n        if (sum > w) return false\n     \
    \   var i = 0\n        var j = q.length - 1\n        while (i < j) {\n       \
    \     if (q(i) != q(j)) return false\n            i += 1\n            j -= 1\n\
    \        }\n        return true", "        val sum = q.sum\n        val isPalindrome\
    \ = q == q.reverse\n        sum <= w && isPalindrome", "        def isPalindrome(q\
    \ : List[Long]) : Boolean = {\n            def isPalindrome(q : List[Long], i\
    \ : Int) : Boolean = {\n                if (i >= q.length / 2) true\n        \
    \        else if (q(i) != q(q.length - 1 - i)) false\n                else isPalindrome(q,\
    \ i + 1)\n            }\n            isPalindrome(q, 0)\n        }\n        def\
    \ sum(q : List[Long]) : Long = {\n            def sum(q : List[Long], i : Int,\
    \ s : Long) : Long = {\n                if (i >= q.length) s\n               \
    \ else sum(q, i + 1, s + q(i))\n            }\n            sum(q, 0, 0)\n    \
    \    }\n        isPalindrome(q) && sum(q) <= w", "        val sum = q.sum\n  \
    \      val isBalanced = q == q.reverse\n        sum <= w && isBalanced", "   \
    \     // Write your code here\n        true", "        val sum = q.sum\n     \
    \   val palindrome = q.reverse == q\n        sum <= w && palindrome", "      \
    \  val sum = q.foldLeft(0l)((a, b) => a + b)\n        val palindrome = q.reverse\
    \ == q\n        palindrome && sum <= w", "        if (q.length == 0) return true\n\
    \        if (q.length == 1) return true\n        if (q.length == 2) return q(0)\
    \ == q(1)\n        if (q.length == 3) return q(0) == q(2)\n        if (q.length\
    \ % 2 == 0) return false\n        val half = q.length / 2\n        var sum = 0l\n\
    \        for (i <- 0 until half) {\n            sum += q(i)\n        }\n     \
    \   for (i <- half + 1 until q.length) {\n            sum += q(i)\n        }\n\
    \        if (sum > w) return false\n        for (i <- 0 until half) {\n      \
    \      if (q(i) != q(q.length - 1 - i)) return false\n        }\n        return\
    \ true", "        val sum = q.sum\n        val isBalanced = q == q.reverse\n \
    \       sum <= w && isBalanced", "        // Write your code here\n        true",
  "        val sum = q.sum\n        val isBalanced = q == q.reverse\n        sum <=\
    \ w && isBalanced", "        if (q.length == 0) return true\n        if (q.length\
    \ == 1) return true\n        if (q.length == 2) return q(0) == q(1)\n        if\
    \ (q.length % 2 == 0) return false\n        val half = q.length / 2\n        val\
    \ left = q.slice(0, half)\n        val right = q.slice(half + 1, q.length)\n \
    \       val rightReversed = right.reverse\n        if (left == rightReversed)\
    \ {\n            val sum = q.sum\n            if (sum <= w) return true\n    \
    \    }\n        return false", "        // Write your code here\n        val sum\
    \ = q.sum\n        val isBalanced = q.reverse == q\n        sum <= w && isBalanced",
  "        if (q.size == 0) return true\n        if (q.size == 1) return true\n  \
    \      if (q.size % 2 == 0) return false\n        if (q.size == 2) return false\n\
    \        if (q.size == 3) return true\n        if (q.size == 4) return false\n\
    \        if (q.size == 5) return true\n        if (q.size == 6) return false\n\
    \        if (q.size == 7) return true\n        if (q.size == 8) return false\n\
    \        if (q.size == 9) return true\n        if (q.size == 10) return false\n\
    \        if (q.size == 11) return true\n        if (q.size == 12) return false\n\
    \        if (q.size == 13) return true\n        if (q.size == 14) return false\n\
    \        if (q.size == 15) return true\n        if (q.size == 16) return false\n\
    \        if (q.size == 17) return true\n        if (q.size == 18) return false\n\
    \        if (q.size == 19) return true\n        if (q.size == 20) return false\n\
    \        if (q.size == 21) return true\n        if (q.size == 22) return false\n\
    \        if (q.size == 23) return true\n        if (q.size == 24) return false\n\
    \        if (q.size == 25) return true\n        if (q.size == 26) return false\n\
    \        if (q.size == 27) return true\n        if (q.size == 28) return false\n\
    \        if (q.size == 29) return true\n        if (q.size == 30) return false\n\
    \        if (q.size == 31) return true\n        if (q.size == 32) return false\n\
    \        if (q.size == 33) return true\n        if (q.size == 34) return false\n\
    \        if (q.size == 35) return true\n        if (q.size == 36) return false\n\
    \        if (q.size == 37) return true\n        if (q.size == 38) return false\n\
    \        if (q.size == 39) return true\n        if (q.size == 40) return false\n\
    \        if (q.", "        def isBalanced(q : List[Long]) : Boolean = {\n    \
    \        q.reverse == q\n        }\n        def sum(q : List[Long]) : Long = {\n\
    \            q.foldLeft(0l)((acc, x) => acc + x)\n        }\n        isBalanced(q)\
    \ && sum(q) <= w", "        def isPalindrome(q : List[Long]) : Boolean = {\n \
    \           if (q.length <= 1) true\n            else if (q.head == q.last) isPalindrome(q.tail.init)\n\
    \            else false\n        }\n        if (isPalindrome(q)) q.sum <= w\n\
    \        else false", "        if (q.length == 0) return true\n        if (q.length\
    \ == 1) return q(0) <= w\n        if (q.length == 2) return q(0) + q(1) <= w\n\
    \        if (q.length % 2 == 0) return false\n        val n = q.length / 2\n \
    \       var sum = 0l\n        for (i <- 0 until n) {\n            sum += q(i)\n\
    \            sum += q(q.length - 1 - i)\n        }\n        sum <= w", "     \
    \   def isPalindrome(q : List[Long]) : Boolean = {\n            def isPalindromeHelper(q\
    \ : List[Long], qReverse : List[Long]) : Boolean = (q, qReverse) match {\n   \
    \             case (Nil, Nil) => true\n                case (Nil, _) => false\n\
    \                case (_, Nil) => false\n                case (x :: xs, y :: ys)\
    \ => if (x == y) isPalindromeHelper(xs, ys) else false\n            }\n      \
    \      isPalindromeHelper(q, q.reverse)\n        }\n        def sum(q : List[Long])\
    \ : Long = q match {\n            case Nil => 0\n            case x :: xs => x\
    \ + sum(xs)\n        }\n        isPalindrome(q) && sum(q) <= w", "        var\
    \ sum = 0l\n        for (i <- q) sum += i\n        if (sum > w) return false\n\
    \        var left = 0\n        var right = q.length - 1\n        while (left <\
    \ right) {\n            if (q(left) != q(right)) return false\n            left\
    \ += 1\n            right -= 1\n        }\n        return true", "        def\
    \ sum(l : List[Long]) : Long = l match {\n            case Nil => 0\n        \
    \    case x :: xs => x + sum(xs)\n        }\n        def isPalindrome(l : List[Long])\
    \ : Boolean = l match {\n            case Nil => true\n            case x :: Nil\
    \ => true\n            case x :: xs => x == xs.last && isPalindrome(xs.init)\n\
    \        }\n        isPalindrome(q) && sum(q) <= w", "        if (q.size == 0)\
    \ return true\n        if (q.size == 1) return true\n        if (q.size == 2)\
    \ return false\n        if (q.size % 2 == 0) return false\n        if (q.size\
    \ == 3) return q(0) + q(1) + q(2) <= w\n        val mid = q.size / 2\n       \
    \ val left = q.slice(0, mid)\n        val right = q.slice(mid + 1, q.size)\n \
    \       val sum = q(mid) + left.sum + right.sum\n        if (sum > w) return false\n\
    \        if (left.size == 1 && right.size == 1) return true\n        if (left.size\
    \ == 2 && right.size == 2) return false\n        if (left.size == 3 && right.size\
    \ == 3) return left(0) + left(1) + left(2) + right(0) + right(1) + right(2) <=\
    \ w\n        if (left.size == 3 && right.size == 2) return false\n        if (left.size\
    \ == 2 && right.size == 3) return false\n        if (left.size == 4 && right.size\
    \ == 4) return false\n        if (left.size == 4 && right.size == 3) return false\n\
    \        if (left.size == 3 && right.size == 4) return false\n        if (left.size\
    \ == 5 && right.size == 5) return left(0) + left(1) + left(2) + left(3) + left(4)\
    \ + right(0) + right(1) + right(2) + right(3) + right(4) <= w\n        if (left.size\
    \ == 5 && right.size == 4) return false\n        if (left.size == 4 && right.size\
    \ == 5) return false\n        if (left.size == 6 && right.size == 6) return false\n\
    \        if (left.size == 6 && right.size == 5) return false\n        if (left.size\
    \ == 5 && right.size == 6) return false\n        if (left.size == 7 && right.size\
    \ == 7) return left(0) + left(1) + left(2) + left(3)", "        if (q.length ==\
    \ 0) return true\n        if (q.length == 1) return true\n        if (q.length\
    \ == 2) return q(0) == q(1)\n        if (q.length == 3) return q(0) == q(2)\n\
    \        if (q.length % 2 == 0) return false\n        if (q.length % 2 == 1) {\n\
    \            val half = q.length / 2\n            val left = q.slice(0, half)\n\
    \            val right = q.slice(half + 1, q.length)\n            if (left ==\
    \ right.reverse) {\n                val sum = q.sum\n                if (sum <=\
    \ w) return true\n                else return false\n            }\n         \
    \   else return false\n        }\n        return false", "        def isPalindrome(q\
    \ : List[Long]) : Boolean = {\n            if (q.length == 1) true\n         \
    \   else if (q.length == 2) q(0) == q(1)\n            else if (q(0) == q(q.length\
    \ - 1)) isPalindrome(q.slice(1, q.length - 1))\n            else false\n     \
    \   }\n        def sum(q : List[Long]) : Long = {\n            if (q.length ==\
    \ 1) q(0)\n            else q(0) + sum(q.slice(1, q.length))\n        }\n    \
    \    if (isPalindrome(q) && sum(q) <= w) true\n        else false", "        //\
    \ Write your code here\n        // Return either True or False\n        true",
  "        if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length == 3) return\
    \ q(0) == q(2)\n        if (q.length == 4) return q(0) == q(3) && q(1) == q(2)\n\
    \        if (q.length == 5) return q(0) == q(4) && q(1) == q(3)\n        if (q.length\
    \ == 6) return q(0) == q(5) && q(1) == q(4) && q(2) == q(3)\n        if (q.length\
    \ == 7) return q(0) == q(6) && q(1) == q(5) && q(2) == q(4)\n        if (q.length\
    \ == 8) return q(0) == q(7) && q(1) == q(6) && q(2) == q(5) && q(3) == q(4)\n\
    \        if (q.length == 9) return q(0) == q(8) && q(1) == q(7) && q(2) == q(6)\
    \ && q(3) == q(5)\n        if (q.length == 10) return q(0) == q(9) && q(1) ==\
    \ q(8) && q(2) == q(7) && q(3) == q(6) && q(4) == q(5)\n        if (q.length ==\
    \ 11) return q(0) == q(10) && q(1) == q(9) && q(2) == q(8) && q(3) == q(7) &&\
    \ q(4) == q(6)\n        if (q.length == 12) return q(0) == q(11) && q(1) == q(10)\
    \ && q(2) == q(9) && q(3) == q(8) && q(4) == q(7) && q(5) == q(6)\n        if\
    \ (q.length == 13) return q(0) == q(", "        if (q.length == 0) return true\n\
    \        if (q.length == 1) return true\n        if (q.length == 2) return q(0)\
    \ == q(1)\n        if (q.length % 2 == 0) return false\n        var sum = 0l\n\
    \        for (i <- 0 until q.length) {\n            sum += q(i)\n        }\n \
    \       if (sum > w) return false\n        for (i <- 0 until q.length / 2) {\n\
    \            if (q(i) != q(q.length - 1 - i)) return false\n        }\n      \
    \  return true", "        val sum = q.sum\n        val isPalindrome = q.reverse\
    \ == q\n        return sum <= w && isPalindrome", "        def isBalanced(q :\
    \ List[Long]) : Boolean = {\n            if (q.length == 0) return true\n    \
    \        if (q.length == 1) return true\n            if (q.head == q.last) return\
    \ isBalanced(q.slice(1, q.length - 1))\n            return false\n        }\n\
    \        if (isBalanced(q) && q.sum <= w) return true\n        return false",
  "        if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length == 3) return\
    \ q(0) == q(2)\n        if (q.length == 4) return q(0) == q(3) && q(1) == q(2)\n\
    \        if (q.length % 2 == 0) return false\n        val n = q.length\n     \
    \   val m = n / 2\n        val a = q.slice(0, m)\n        val b = q.slice(m +\
    \ 1, n)\n        val c = q.slice(m, m + 1)\n        val d = a.sum + b.sum + c(0)\n\
    \        if (d > w) return false\n        if (a.length == 1) return a(0) == b(0)\n\
    \        if (a.length == 2) return a(0) == b(1) && a(1) == b(0)\n        if (a.length\
    \ == 3) return a(0) == b(2) && a(1) == b(1) && a(2) == b(0)\n        if (a.length\
    \ == 4) return a(0) == b(3) && a(1) == b(2) && a(2) == b(1) && a(3) == b(0)\n\
    \        if (a.length % 2 == 0) return false\n        val e = a.length\n     \
    \   val f = e / 2\n        val g = a.slice(0, f)\n        val h = a.slice(f +\
    \ 1, e)\n        val i = b.slice(0, f)\n        val j = b.slice(f + 1, e)\n  \
    \      if (g.length != i.length || h.length != j.length) return false\n      \
    \  if (g.length == 1) return g(0) == i(0) && h(0) == j(0)\n        if (g.length\
    \ == 2) return g(0) == i(1) && g(1) == i(0) && h(0) == j(1)", "        def isBalanced(q\
    \ : List[Long]) : Boolean = {\n            if (q.length == 0) return true\n  \
    \          if (q.length == 1) return true\n            if (q.head == q.last) return\
    \ isBalanced(q.tail.init)\n            return false\n        }\n        def sum(q\
    \ : List[Long]) : Long = {\n            if (q.length == 0) return 0\n        \
    \    return q.head + sum(q.tail)\n        }\n        if (isBalanced(q) && sum(q)\
    \ <= w) return true\n        return false", "        if (q.length == 0) return\
    \ true\n        if (q.length == 1) return true\n        if (q.length == 2) return\
    \ q(0) == q(1)\n        if (q.length % 2 == 0) return false\n        val mid =\
    \ q.length / 2\n        val left = q.slice(0, mid)\n        val right = q.slice(mid\
    \ + 1, q.length)\n        val sum = left.sum + right.sum\n        if (sum > w)\
    \ return false\n        if (left.length == right.length) {\n            if (left.length\
    \ == 1) return left(0) == right(0)\n            if (left.length == 2) return left(0)\
    \ == right(1) && left(1) == right(0)\n            if (left.length % 2 == 0) return\
    \ false\n            val mid = left.length / 2\n            val leftleft = left.slice(0,\
    \ mid)\n            val leftright = left.slice(mid + 1, left.length)\n       \
    \     val rightleft = right.slice(0, mid)\n            val rightright = right.slice(mid\
    \ + 1, right.length)\n            val leftsum = leftleft.sum + leftright.sum\n\
    \            val rightsum = rightleft.sum + rightright.sum\n            if (leftsum\
    \ != rightsum) return false\n            if (leftleft.length == leftright.length)\
    \ {\n                if (leftleft.length == 1) return leftleft(0) == leftright(0)\n\
    \                if (leftleft.length == 2) return leftleft(0) == leftright(1)\
    \ && leftleft(1) == leftright(0)\n                if (leftleft.length % 2 == 0)\
    \ return false\n                val mid = leftleft.length / 2\n              \
    \  val leftleftleft = leftleft.slice(0, mid)\n                val leftleftright\
    \ = leftleft.slice(mid + 1, leftleft.length)\n                val leftrightsum\
    \ = leftleftleft.sum + leftleftright.sum\n                val rightleftleft =\
    \ rightleft.slice(0, mid)\n                val rightleftright = rightleft.slice(mid\
    \ + 1, rightleft.length)\n                val rightrightsum = right", "      \
    \  if (q.length == 0) return true\n        if (q.length == 1) return true\n  \
    \      if (q.length == 2) return q(0) == q(1)\n        if (q.length % 2 == 0)\
    \ return false\n        if (q.sum > w) return false\n        for (i <- 0 until\
    \ q.length / 2) {\n            if (q(i) != q(q.length - 1 - i)) return false\n\
    \        }\n        return true", "        def isPalindrome(q : List[Long]) :\
    \ Boolean = {\n            def isPalindromeHelper(q : List[Long], i : Int) : Boolean\
    \ = {\n                if (i == q.length / 2) true\n                else if (q(i)\
    \ == q(q.length - 1 - i)) isPalindromeHelper(q, i + 1)\n                else false\n\
    \            }\n            isPalindromeHelper(q, 0)\n        }\n        def sum(q\
    \ : List[Long]) : Long = {\n            def sumHelper(q : List[Long], i : Int,\
    \ acc : Long) : Long = {\n                if (i == q.length) acc\n           \
    \     else sumHelper(q, i + 1, acc + q(i))\n            }\n            sumHelper(q,\
    \ 0, 0)\n        }\n        isPalindrome(q) && sum(q) <= w", "        // Write\
    \ your code here\n        true", "        val sum = q.sum\n        val palindrome\
    \ = q.reverse == q\n        sum <= w && palindrome", "        var sum = 0l\n \
    \       for (i <- q) {\n            sum += i\n        }\n        if (sum > w)\
    \ return false\n        var q2 = q.reverse\n        for (i <- 0 until q.length)\
    \ {\n            if (q(i) != q2(i)) return false\n        }\n        return true",
  "        // Write your code here\n        if (q.length == 0) return true\n     \
    \   if (q.length == 1) return true\n        if (q.length == 2) return q(0) ==\
    \ q(1)\n        if (q.length % 2 == 0) return false\n        val half = q.length\
    \ / 2\n        val left = q.slice(0, half)\n        val right = q.slice(half +\
    \ 1, q.length)\n        val leftSum = left.sum\n        val rightSum = right.sum\n\
    \        if (leftSum > w) return false\n        if (rightSum > w) return false\n\
    \        if (leftSum != rightSum) return false\n        for (i <- 0 until half)\
    \ {\n            if (left(i) != right(half - 1 - i)) return false\n        }\n\
    \        return true", '        q.sum <= w && q == q.reverse', "        if (q.length\
    \ == 0) return true\n        if (q.length == 1) return true\n        if (q.length\
    \ == 2) return q(0) == q(1)\n        if (q.length % 2 == 0) return false\n   \
    \     if (q.sum > w) return false\n        var i = 0\n        var j = q.length\
    \ - 1\n        while (i < j) {\n            if (q(i) != q(j)) return false\n \
    \           i += 1\n            j -= 1\n        }\n        return true", "   \
    \     val sum = q.sum\n        val palindrome = q.reverse == q\n        palindrome\
    \ && sum <= w", "        var sum = 0l\n        for (i <- q) {\n            sum\
    \ += i\n        }\n        if (sum > w) return false\n        var q2 = q.reverse\n\
    \        for (i <- 0 until q.length) {\n            if (q(i) != q2(i)) return\
    \ false\n        }\n        return true", "        val sum = q.sum\n        val\
    \ isBalanced = q == q.reverse\n        sum <= w && isBalanced", '        q.sum
    <= w && q == q.reverse', "        def isBalanced(q : List[Long]) : Boolean = {\n\
    \            if (q.length == 0) return true\n            if (q.length == 1) return\
    \ true\n            if (q.head == q.last) return isBalanced(q.tail.init)\n   \
    \         return false\n        }\n        def sum(q : List[Long]) : Long = {\n\
    \            if (q.length == 0) return 0\n            return q.head + sum(q.tail)\n\
    \        }\n        if (isBalanced(q) && sum(q) <= w) return true\n        return\
    \ false", "        val sum = q.sum\n        val palindrome = q.reverse == q\n\
    \        palindrome && sum <= w", "        // Write your code here\n        false",
  "        def isBalanced(q : List[Long]) : Boolean = {\n            if (q.length\
    \ == 0) true\n            else if (q.length == 1) true\n            else if (q.head\
    \ == q.last) isBalanced(q.tail.init)\n            else false\n        }\n    \
    \    def sum(q : List[Long]) : Long = {\n            if (q.length == 0) 0\n  \
    \          else q.head + sum(q.tail)\n        }\n        if (isBalanced(q) &&\
    \ sum(q) <= w) true\n        else false", "        if (q.length == 0) return true\n\
    \        if (q.length == 1) return true\n        if (q.length == 2) return q(0)\
    \ == q(1)\n        if (q.length == 3) return q(0) == q(2)\n        if (q.length\
    \ % 2 == 0) return false\n        var sum = 0l\n        for (i <- 0 until q.length)\
    \ {\n            sum += q(i)\n        }\n        if (sum > w) return false\n \
    \       for (i <- 0 until q.length / 2) {\n            if (q(i) != q(q.length\
    \ - 1 - i)) return false\n        }\n        return true", '        if (q.sum
    <= w && q == q.reverse) true else false', "        if (q.length == 0) return true\n\
    \        if (q.length == 1) return true\n        if (q.length == 2) return q(0)\
    \ == q(1)\n        if (q.length % 2 == 0) return false\n        val half = q.length\
    \ / 2\n        val left = q.slice(0, half)\n        val right = q.slice(half +\
    \ 1, q.length)\n        val leftSum = left.sum\n        val rightSum = right.sum\n\
    \        if (leftSum > w) return false\n        if (rightSum > w) return false\n\
    \        if (leftSum != rightSum) return false\n        for (i <- 0 until half)\
    \ {\n            if (left(i) != right(half - 1 - i)) return false\n        }\n\
    \        return true", "        def isBalanced(q : List[Long]) : Boolean = {\n\
    \            if (q.length == 0) return true\n            if (q.length == 1) return\
    \ true\n            if (q.head == q.last) return isBalanced(q.tail.init)\n   \
    \         return false\n        }\n        if (isBalanced(q) && q.sum <= w) return\
    \ true\n        return false", "        if (q.length == 0) return true\n     \
    \   if (q.length == 1) return true\n        if (q.length == 2) return q(0) ==\
    \ q(1)\n        if (q.length == 3) return q(0) == q(2)\n        if (q.length ==\
    \ 4) return q(0) == q(3) && q(1) == q(2)\n        if (q.length == 5) return q(0)\
    \ == q(4) && q(1) == q(3)\n        if (q.length == 6) return q(0) == q(5) && q(1)\
    \ == q(4) && q(2) == q(3)\n        if (q.length == 7) return q(0) == q(6) && q(1)\
    \ == q(5) && q(2) == q(4)\n        if (q.length == 8) return q(0) == q(7) && q(1)\
    \ == q(6) && q(2) == q(5) && q(3) == q(4)\n        if (q.length == 9) return q(0)\
    \ == q(8) && q(1) == q(7) && q(2) == q(6) && q(3) == q(5)\n        if (q.length\
    \ == 10) return q(0) == q(9) && q(1) == q(8) && q(2) == q(7) && q(3) == q(6) &&\
    \ q(4) == q(5)\n        if (q.length == 11) return q(0) == q(10) && q(1) == q(9)\
    \ && q(2) == q(8) && q(3) == q(7) && q(4) == q(6)\n        if (q.length == 12)\
    \ return q(0) == q(11) && q(1) == q(10) && q(2) == q(9) && q(3) == q(8) && q(4)\
    \ == q(7) && q(5) == q(6)\n        if (q.length == 13) return q(0) == q(", " \
    \       val sum = q.sum\n        val isPalindrome = q.reverse == q\n        sum\
    \ <= w && isPalindrome", "        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced", "        def isBalanced(q : List[Long])\
    \ : Boolean = {\n            if (q.length == 0) return true\n            if (q.length\
    \ == 1) return true\n            if (q.head == q.last) return isBalanced(q.tail.init)\n\
    \            else return false\n        }\n        if (isBalanced(q) && q.sum\
    \ <= w) return true\n        else return false", "        val sum = q.sum\n  \
    \      val isBalanced = q == q.reverse\n        sum <= w && isBalanced", "   \
    \     def isPalindrome(q : List[Long]) : Boolean = {\n            q == q.reverse\n\
    \        }\n        isPalindrome(q) && q.sum <= w", "        val sum = q.foldLeft(0l)((a,\
    \ b) => a + b)\n        val palindrome = q.reverse == q\n        palindrome &&\
    \ sum <= w", "        // Write your code here\n        true", "        if (q.length\
    \ == 0) return true\n        if (q.length == 1) return true\n        if (q.length\
    \ == 2) return q(0) == q(1)\n        if (q.length % 2 == 0) return false\n   \
    \     val m = q.length / 2\n        val s = q.slice(0, m)\n        val t = q.slice(m\
    \ + 1, q.length)\n        val u = s.zip(t).map(x => x._1 + x._2)\n        val\
    \ v = u.foldLeft(0l)((x, y) => x + y)\n        if (v > w) return false\n     \
    \   return true", "        val sum = q.sum\n        val palindrome = q.reverse\
    \ == q\n        sum <= w && palindrome", "        if (q.length == 0) return true\n\
    \        if (q.sum > w) return false\n        if (q.length == 1) return true\n\
    \        val q2 = q.slice(1, q.length - 1)\n        if (q.head == q.last) willItFly(q2,\
    \ w)\n        else false", "        val sum = q.sum\n        val palindrome =\
    \ q.reverse == q\n        palindrome && sum <= w", "        var sum = 0l\n   \
    \     for (i <- q) {\n            sum += i\n        }\n        if (sum > w) return\
    \ false\n        var left = 0\n        var right = q.length - 1\n        while\
    \ (left < right) {\n            if (q(left) != q(right)) return false\n      \
    \      left += 1\n            right -= 1\n        }\n        return true", " \
    \       // Write your code here\n        true", "        val sum = q.sum\n   \
    \     val isBalanced = q == q.reverse\n        sum <= w && isBalanced", "    \
    \    // Write your code here\n        true", "        def isBalanced(q : List[Long])\
    \ : Boolean = {\n            if (q.length == 0) return true\n            if (q.length\
    \ == 1) return true\n            if (q.head == q.last) return isBalanced(q.tail.init)\n\
    \            return false\n        }\n        if (isBalanced(q) && q.sum <= w)\
    \ return true\n        return false", "        val sum = q.sum\n        val isBalanced\
    \ = q == q.reverse\n        sum <= w && isBalanced", "        val sum = q.sum\n\
    \        val isBalanced = q == q.reverse\n        sum <= w && isBalanced", " \
    \       if (q.size == 0) return true\n        if (q.size == 1) return true\n \
    \       if (q.size == 2) return q(0) == q(1)\n        if (q.size == 3) return\
    \ q(0) == q(2)\n        if (q.size % 2 == 0) return false\n        val n = q.size\n\
    \        val m = n / 2\n        val s = q.sum\n        if (s > w) return false\n\
    \        for (i <- 0 until m) {\n            if (q(i) != q(n - i - 1)) return\
    \ false\n        }\n        return true", "        val sum = q.sum\n        val\
    \ isBalanced = q.reverse == q\n        sum <= w && isBalanced", "        val sum\
    \ = q.sum\n        val max = w\n        val isBalanced = q == q.reverse\n    \
    \    sum <= max && isBalanced", "        var sum = 0l\n        for (i <- q) sum\
    \ += i\n        if (sum > w) return false\n        var i = 0\n        var j =\
    \ q.length - 1\n        while (i < j) {\n            if (q(i) != q(j)) return\
    \ false\n            i += 1\n            j -= 1\n        }\n        return true",
  "        val sum = q.sum\n        val palindrome = q.reverse == q\n        sum <=\
    \ w && palindrome", "        if (q.length == 0) return true\n        if (q.length\
    \ == 1) return q(0) <= w\n        if (q.length % 2 == 0) return false\n      \
    \  val half = q.length / 2\n        val left = q.slice(0, half)\n        val right\
    \ = q.slice(half + 1, q.length)\n        val leftSum = left.sum\n        val rightSum\
    \ = right.sum\n        if (leftSum != rightSum) return false\n        if (leftSum\
    \ > w) return false\n        return true", "        val sum = q.sum\n        val\
    \ isBalanced = q.reverse == q\n        sum <= w && isBalanced", "        val sum\
    \ = q.sum\n        val isBalanced = q.reverse == q\n        sum <= w && isBalanced",
  "        val sum = q.sum\n        val palindrome = q.reverse == q\n        sum <=\
    \ w && palindrome", "        def isBalanced(q : List[Long]) : Boolean = {\n  \
    \          if (q.length == 0) return true\n            if (q.length == 1) return\
    \ true\n            if (q.head == q.last) return isBalanced(q.tail.init)\n   \
    \         return false\n        }\n        if (isBalanced(q) && q.sum <= w) return\
    \ true\n        return false", '        return q.sum <= w && q == q.reverse',
  "        if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length == 3) return\
    \ q(0) == q(2)\n        if (q.length % 2 == 0) return false\n        val mid =\
    \ q.length / 2\n        val left = q.slice(0, mid)\n        val right = q.slice(mid\
    \ + 1, q.length)\n        val leftSum = left.sum\n        val rightSum = right.sum\n\
    \        if (leftSum > w) return false\n        if (rightSum > w) return false\n\
    \        if (leftSum != rightSum) return false\n        for (i <- 0 until mid)\
    \ {\n            if (left(i) != right(mid - i - 1)) return false\n        }\n\
    \        true", "        val sum = q.sum\n        val isBalanced = q.reverse ==\
    \ q\n        sum <= w && isBalanced", "        if (q.length == 0) return true\n\
    \        if (q.length == 1) return true\n        if (q.length == 2) return q(0)\
    \ == q(1)\n        if (q.length == 3) return q(0) == q(2)\n        if (q.length\
    \ == 4) return q(0) == q(3) && q(1) == q(2)\n        if (q.length == 5) return\
    \ q(0) == q(4) && q(1) == q(3)\n        if (q.length == 6) return q(0) == q(5)\
    \ && q(1) == q(4) && q(2) == q(3)\n        if (q.length == 7) return q(0) == q(6)\
    \ && q(1) == q(5) && q(2) == q(4)\n        if (q.length == 8) return q(0) == q(7)\
    \ && q(1) == q(6) && q(2) == q(5) && q(3) == q(4)\n        if (q.length == 9)\
    \ return q(0) == q(8) && q(1) == q(7) && q(2) == q(6) && q(3) == q(5)\n      \
    \  if (q.length == 10) return q(0) == q(9) && q(1) == q(8) && q(2) == q(7) &&\
    \ q(3) == q(6) && q(4) == q(5)\n        if (q.length == 11) return q(0) == q(10)\
    \ && q(1) == q(9) && q(2) == q(8) && q(3) == q(7) && q(4) == q(6)\n        if\
    \ (q.length == 12) return q(0) == q(11) && q(1) == q(10) && q(2) == q(9) && q(3)\
    \ == q(8) && q(4) == q(7) && q(5) == q(6)\n        if (q.length == 13) return\
    \ q(0) == q(", "        // Write your code here\n        true", "        val sum\
    \ = q.sum\n        val isBalanced = q.reverse == q\n        sum <= w && isBalanced",
  "        val sum = q.sum\n        val balanced = q == q.reverse\n        balanced\
    \ && sum <= w", "        def isBalanced(q : List[Long]) : Boolean = {\n      \
    \      q == q.reverse\n        }\n        def sum(q : List[Long]) : Long = {\n\
    \            q.foldLeft(0l)((a, b) => a + b)\n        }\n        isBalanced(q)\
    \ && sum(q) <= w", "        def isPalindrome(q : List[Long]) : Boolean = {\n \
    \           def isPalindrome(q : List[Long], i : Int) : Boolean = {\n        \
    \        if (i >= q.length / 2) true\n                else if (q(i) != q(q.length\
    \ - 1 - i)) false\n                else isPalindrome(q, i + 1)\n            }\n\
    \            isPalindrome(q, 0)\n        }\n        def sum(q : List[Long]) :\
    \ Long = {\n            def sum(q : List[Long], i : Int, acc : Long) : Long =\
    \ {\n                if (i >= q.length) acc\n                else sum(q, i + 1,\
    \ acc + q(i))\n            }\n            sum(q, 0, 0)\n        }\n        isPalindrome(q)\
    \ && sum(q) <= w", "        // Your code here\n        val sum = q.sum\n     \
    \   val isBalanced = q.reverse == q\n        sum <= w && isBalanced", "      \
    \  val sum = q.sum\n        val isPalindrome = q.reverse == q\n        sum <=\
    \ w && isPalindrome", '        q.sum <= w && q == q.reverse', "        def isPalindrome(q\
    \ : List[Long]) : Boolean = {\n            q == q.reverse\n        }\n       \
    \ def sum(q : List[Long]) : Long = {\n            q.foldLeft(0l)((a, b) => a +\
    \ b)\n        }\n        isPalindrome(q) && sum(q) <= w", "        val sum = q.sum\n\
    \        val isBalanced = q.reverse == q\n        sum <= w && isBalanced", " \
    \       if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length % 2 == 0)\
    \ return false\n        val half = q.length / 2\n        val left = q.slice(0,\
    \ half)\n        val right = q.slice(half + 1, q.length)\n        val leftSum\
    \ = left.sum\n        val rightSum = right.sum\n        if (leftSum > w) return\
    \ false\n        if (rightSum > w) return false\n        if (leftSum != rightSum)\
    \ return false\n        for (i <- 0 until half) {\n            if (left(i) !=\
    \ right(half - 1 - i)) return false\n        }\n        return true", "      \
    \  def isPalindrome(q : List[Long]) : Boolean = {\n            if (q.length ==\
    \ 1) return true\n            if (q.head == q.last) return isPalindrome(q.tail.init)\n\
    \            return false\n        }\n        if (isPalindrome(q) && q.sum <=\
    \ w) return true\n        return false", "        // Write your code here\n  \
    \      // Return True if the object q will fly, and False otherwise.\n       \
    \ val sum = q.sum\n        val isBalanced = q.reverse == q\n        sum <= w &&\
    \ isBalanced", "        var sum = 0l\n        for (i <- q) sum += i\n        if\
    \ (sum > w) return false\n        var l = 0\n        var r = q.length - 1\n  \
    \      while (l < r) {\n            if (q(l) != q(r)) return false\n         \
    \   l += 1\n            r -= 1\n        }\n        return true", "        val\
    \ sum = q.sum\n        val isBalanced = q.reverse == q\n        sum <= w && isBalanced",
  "        def isPalindrome(q : List[Long]) : Boolean = {\n            if (q.length\
    \ == 1) true\n            else if (q.length == 2) q(0) == q(1)\n            else\
    \ if (q(0) == q(q.length - 1)) isPalindrome(q.slice(1, q.length - 1))\n      \
    \      else false\n        }\n        def sum(q : List[Long]) : Long = {\n   \
    \         if (q.length == 1) q(0)\n            else q(0) + sum(q.slice(1, q.length))\n\
    \        }\n        if (isPalindrome(q) && sum(q) <= w) true\n        else false",
  "        val sum = q.sum\n        val isBalanced = q == q.reverse\n        sum <=\
    \ w && isBalanced", "        if (q.length == 0) return true\n        if (q.length\
    \ == 1) return q(0) <= w\n        if (q.length % 2 == 0) return false\n      \
    \  val half = q.length / 2\n        val left = q.slice(0, half)\n        val right\
    \ = q.slice(half + 1, q.length)\n        val leftSum = left.sum\n        val rightSum\
    \ = right.sum\n        if (leftSum != rightSum) return false\n        if (leftSum\
    \ + q(half) > w) return false\n        return true", "        val sum = q.sum\n\
    \        val isBalanced = q == q.reverse\n        sum <= w && isBalanced", " \
    \       if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length % 2 == 0)\
    \ return false\n        var sum = 0l\n        for (i <- 0 until q.length) {\n\
    \            sum += q(i)\n        }\n        if (sum > w) return false\n     \
    \   for (i <- 0 until q.length / 2) {\n            if (q(i) != q(q.length - 1\
    \ - i)) return false\n        }\n        return true", "        // Write your\
    \ code here\n        true", "        val sum = q.foldLeft(0l)((a, b) => a + b)\n\
    \        val palindrome = q.reverse == q\n        sum <= w && palindrome", " \
    \       if (q.size == 0) return true\n        if (q.size == 1) return q(0) <=\
    \ w\n        if (q.size == 2) return q(0) + q(1) <= w\n        if (q.size % 2\
    \ == 0) return false\n        val mid = q.size / 2\n        var sum = 0l\n   \
    \     for (i <- 0 until mid) {\n            sum += q(i)\n            if (sum >\
    \ w) return false\n        }\n        for (i <- mid + 1 until q.size) {\n    \
    \        sum += q(i)\n            if (sum > w) return false\n        }\n     \
    \   return true", "        if (q.length == 0) return true\n        if (q.length\
    \ == 1) return q(0) <= w\n        if (q.length == 2) return q(0) + q(1) <= w\n\
    \        if (q.length % 2 == 0) return false\n        val mid = q.length / 2\n\
    \        val left = q.slice(0, mid)\n        val right = q.slice(mid + 1, q.length)\n\
    \        if (left.sum + right.sum + q(mid) > w) return false\n        for (i <-\
    \ 0 until mid) {\n            if (left(i) != right(mid - i - 1)) return false\n\
    \        }\n        return true", "        val sum = q.sum\n        val isBalanced\
    \ = q == q.reverse\n        return isBalanced && sum <= w", "        val sum =\
    \ q.sum\n        val isBalanced = q == q.reverse\n        sum <= w && isBalanced",
  "        if (q.length == 0) return true\n        if (q.length == 1) return q(0)\
    \ <= w\n        if (q.length == 2) return q(0) + q(1) <= w\n        if (q.length\
    \ % 2 == 0) return false\n        val half = q.length / 2\n        val left =\
    \ q.slice(0, half)\n        val right = q.slice(half + 1, q.length)\n        val\
    \ leftSum = left.sum\n        val rightSum = right.sum\n        if (leftSum !=\
    \ rightSum) return false\n        leftSum + q(half) <= w", "        val sum =\
    \ q.sum\n        val isBalanced = q.reverse == q\n        sum <= w && isBalanced",
  "        // Write your code here\n        false", "        if (q.length == 0) return\
    \ true\n        if (q.length == 1) return true\n        if (q.length == 2) return\
    \ q(0) == q(1)\n        if (q.length == 3) return q(0) == q(2)\n        if (q.length\
    \ % 2 == 0) return false\n        var sum = 0l\n        for (i <- 0 until q.length)\
    \ {\n            sum += q(i)\n        }\n        if (sum > w) return false\n \
    \       var i = 0\n        var j = q.length - 1\n        while (i < j) {\n   \
    \         if (q(i) != q(j)) return false\n            i += 1\n            j -=\
    \ 1\n        }\n        return true", "        def isPalindrome(q : List[Long])\
    \ : Boolean = {\n            q.reverse == q\n        }\n        def sum(q : List[Long])\
    \ : Long = {\n            q.foldLeft(0l)((a, b) => a + b)\n        }\n       \
    \ isPalindrome(q) && sum(q) <= w", "        val sum = q.sum\n        val isBalanced\
    \ = q == q.reverse\n        sum <= w && isBalanced", "        var sum = 0l\n \
    \       for (i <- q) sum += i\n        if (sum > w) return false\n        var\
    \ i = 0\n        var j = q.length - 1\n        while (i < j) {\n            if\
    \ (q(i) != q(j)) return false\n            i += 1\n            j -= 1\n      \
    \  }\n        return true", "        val sum = q.foldLeft(0l)((a,b) => a + b)\n\
    \        val isBalanced = q.zip(q.reverse).foldLeft(true)((a,b) => a && b._1 ==\
    \ b._2)\n        sum <= w && isBalanced", "        val sum = q.sum\n        val\
    \ palindrome = q.reverse == q\n        return (sum <= w) && palindrome", "   \
    \     if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length % 2 == 0)\
    \ return false\n        val half = q.length / 2\n        val left = q.slice(0,\
    \ half)\n        val right = q.slice(half + 1, q.length)\n        val leftSum\
    \ = left.sum\n        val rightSum = right.sum\n        if (leftSum > w) return\
    \ false\n        if (rightSum > w) return false\n        if (leftSum != rightSum)\
    \ return false\n        for (i <- 0 until half) {\n            if (left(i) !=\
    \ right(half - 1 - i)) return false\n        }\n        return true", "      \
    \  def isPalindrome(q : List[Long]) : Boolean = {\n            def isPalindromeHelper(q\
    \ : List[Long], r : List[Long]) : Boolean = {\n                if (q.length ==\
    \ 0) true\n                else if (q.head != r.head) false\n                else\
    \ isPalindromeHelper(q.tail, r.tail)\n            }\n            isPalindromeHelper(q,\
    \ q.reverse)\n        }\n        def sum(q : List[Long]) : Long = {\n        \
    \    def sumHelper(q : List[Long], acc : Long) : Long = {\n                if\
    \ (q.length == 0) acc\n                else sumHelper(q.tail, acc + q.head)\n\
    \            }\n            sumHelper(q, 0)\n        }\n        isPalindrome(q)\
    \ && sum(q) <= w", "        val sum = q.sum\n        val isBalanced = q == q.reverse\n\
    \        isBalanced && sum <= w", "        val sum = q.sum\n        val max =\
    \ q.max\n        val min = q.min\n        val palindrome = q.reverse == q\n  \
    \      if (sum <= w && palindrome && max == min) true else false", "        val\
    \ sum = q.sum\n        val palindrome = q.reverse == q\n        sum <= w && palindrome",
  "        def isPalindrome(q : List[Long]) : Boolean = {\n            if (q.length\
    \ == 1) true\n            else if (q.length == 2) q(0) == q(1)\n            else\
    \ if (q(0) == q(q.length - 1)) isPalindrome(q.slice(1, q.length - 1))\n      \
    \      else false\n        }\n        def sum(q : List[Long]) : Long = {\n   \
    \         if (q.length == 1) q(0)\n            else q(0) + sum(q.slice(1, q.length))\n\
    \        }\n        isPalindrome(q) && sum(q) <= w", "        val sum = q.sum\n\
    \        val isPalindrome = q.reverse == q\n        sum <= w && isPalindrome",
  "        // Write your code here\n        true", "        def isPalindrome(l : List[Long])\
    \ : Boolean = {\n            if (l.length == 1) true\n            else if (l.head\
    \ == l.last) isPalindrome(l.slice(1, l.length - 1))\n            else false\n\
    \        }\n        if (isPalindrome(q) && q.sum <= w) true\n        else false",
  "        // Your code here\n        true", "        val sum = q.foldLeft(0l)((a,\
    \ b) => a + b)\n        val palindrome = q.reverse == q\n        sum <= w && palindrome",
  "        val sum = q.sum\n        val palindrome = q.reverse == q\n        sum <=\
    \ w && palindrome", "        // Write your code here\n        true", "       \
    \ // Write your code here\n        true", "        // Write your code here\n \
    \       true", "        val sum = q.sum\n        val isBalanced = q == q.reverse\n\
    \        sum <= w && isBalanced", "        val sum = q.sum\n        val balanced\
    \ = q == q.reverse\n        sum <= w && balanced", "        val sum = q.sum\n\
    \        val isBalanced = q == q.reverse\n        sum <= w && isBalanced", " \
    \       // Write your code here\n        true", "        if (q.length == 0) return\
    \ true\n        if (q.length == 1) return true\n        if (q.length == 2) return\
    \ q(0) == q(1)\n        if (q.length % 2 == 0) return false\n        val mid =\
    \ q.length / 2\n        val left = q.slice(0, mid)\n        val right = q.slice(mid\
    \ + 1, q.length)\n        if (left.sum + right.sum > w) return false\n       \
    \ if (left != right.reverse) return false\n        return true", "        // Write\
    \ your code here\n        return false", "        // Write your code here\n  \
    \      true", "        val sum = q.sum\n        val isBalanced = q == q.reverse\n\
    \        sum <= w && isBalanced", "        // Your code here\n        true", " \
    \       def isPalindrome(q : List[Long]) : Boolean = {\n            if (q.length\
    \ == 1) true\n            else if (q.length == 2) q(0) == q(1)\n            else\
    \ if (q(0) == q(q.length - 1)) isPalindrome(q.slice(1, q.length - 1))\n      \
    \      else false\n        }\n        def sum(q : List[Long]) : Long = {\n   \
    \         if (q.length == 1) q(0)\n            else q(0) + sum(q.slice(1, q.length))\n\
    \        }\n        isPalindrome(q) && sum(q) <= w", "        val sum = q.sum\n\
    \        val palindrome = q.reverse == q\n        sum <= w && palindrome", " \
    \       val sum = q.sum\n        val isBalanced = q == q.reverse\n        sum\
    \ <= w && isBalanced", "        val sum = q.sum\n        val isPalindrome = q.reverse\
    \ == q\n        sum <= w && isPalindrome", "        def isPalindrome(q : List[Long])\
    \ : Boolean = {\n            if (q.length <= 1) true\n            else if (q.head\
    \ == q.last) isPalindrome(q.tail.init)\n            else false\n        }\n  \
    \      def sum(q : List[Long]) : Long = {\n            if (q.length == 0) 0\n\
    \            else q.head + sum(q.tail)\n        }\n        isPalindrome(q) &&\
    \ sum(q) <= w", "        // Write your code here\n        true", "        if (q.length\
    \ == 0) return true\n        if (q.length == 1) return q(0) <= w\n        if (q.length\
    \ == 2) return q(0) + q(1) <= w\n        if (q.length % 2 == 0) return false\n\
    \        val half = q.length / 2\n        val left = q.slice(0, half)\n      \
    \  val right = q.slice(half + 1, q.length)\n        val leftSum = left.sum\n \
    \       val rightSum = right.sum\n        if (leftSum != rightSum) return false\n\
    \        leftSum + q(half) <= w", "        if (q.length == 0) return true\n  \
    \      if (q.length == 1) return true\n        if (q.length == 2) return (q(0)\
    \ == q(1))\n        if (q.length == 3) return (q(0) == q(2))\n        if (q.length\
    \ == 4) return (q(0) == q(3)) && (q(1) == q(2))\n        if (q.length == 5) return\
    \ (q(0) == q(4)) && (q(1) == q(3))\n        if (q.length == 6) return (q(0) ==\
    \ q(5)) && (q(1) == q(4)) && (q(2) == q(3))\n        if (q.length == 7) return\
    \ (q(0) == q(6)) && (q(1) == q(5)) && (q(2) == q(4))\n        if (q.length ==\
    \ 8) return (q(0) == q(7)) && (q(1) == q(6)) && (q(2) == q(5)) && (q(3) == q(4))\n\
    \        if (q.length == 9) return (q(0) == q(8)) && (q(1) == q(7)) && (q(2) ==\
    \ q(6)) && (q(3) == q(5))\n        if (q.length == 10) return (q(0) == q(9)) &&\
    \ (q(1) == q(8)) && (q(2) == q(7)) && (q(3) == q(6)) && (q(4) == q(5))\n     \
    \   if (q.length == 11) return (q(0) == q(10)) && (q(1) == q(9)) && (q(2) == q(8))\
    \ && (q(3) == q(7)) && (q(4) == q(6))\n        if (q.length == 12) return (q(0)\
    \ == q(11)) && (q(1) == q(10)) && (q(2) == q(9)) && (q(3) == q(8)) && (q(", '        q.sum
    <= w && q == q.reverse', "        val sum = q.sum\n        val isBalanced = q\
    \ == q.reverse\n        sum <= w && isBalanced", "        def isPalindrome(q :\
    \ List[Long]) : Boolean = {\n            q == q.reverse\n        }\n        def\
    \ sum(q : List[Long]) : Long = {\n            q.foldLeft(0l)((a, b) => a + b)\n\
    \        }\n        isPalindrome(q) && sum(q) <= w", "        val sum = q.sum\n\
    \        val palindrome = q.reverse == q\n        sum <= w && palindrome", " \
    \       if (q.length == 0) return true\n        if (q.length == 1) return true\n\
    \        if (q.length == 2) return q(0) == q(1)\n        if (q.length % 2 == 0)\
    \ return false\n        val mid = q.length / 2\n        val left = q.slice(0,\
    \ mid)\n        val right = q.slice(mid + 1, q.length)\n        val leftSum =\
    \ left.sum\n        val rightSum = right.sum\n        if (leftSum > w || rightSum\
    \ > w) return false\n        if (leftSum != rightSum) return false\n        for\
    \ (i <- 0 until mid) {\n            if (left(i) != right(mid - i - 1)) return\
    \ false\n        }\n        return true", "        if (q.length == 0) return true\n\
    \        if (q.length == 1) return true\n        if (q.length % 2 == 0) return\
    \ false\n        val half = q.length / 2\n        val left = q.slice(0, half)\n\
    \        val right = q.slice(half + 1, q.length)\n        val leftSum = left.sum\n\
    \        val rightSum = right.sum\n        if (leftSum > w) return false\n   \
    \     if (rightSum > w) return false\n        if (leftSum != rightSum) return\
    \ false\n        return true", "        val sum = q.sum\n        val palindrome\
    \ = q.reverse == q\n        palindrome && sum <= w", "        def isBalanced(q\
    \ : List[Long]) : Boolean = {\n            q.reverse == q\n        }\n       \
    \ def sum(q : List[Long]) : Long = {\n            q.foldLeft(0l)((x, y) => x +\
    \ y)\n        }\n        isBalanced(q) && sum(q) <= w", "        val sum = q.sum\n\
    \        val isBalanced = q.reverse == q\n        sum <= w && isBalanced", " \
    \       def isBalanced(q : List[Long]) : Boolean = {\n            if (q.length\
    \ <= 1) true\n            else if (q.head == q.last) isBalanced(q.tail.init)\n\
    \            else false\n        }\n        def sum(q : List[Long]) : Long = {\n\
    \            if (q.length == 0) 0\n            else q.head + sum(q.tail)\n   \
    \     }\n        if (isBalanced(q) && sum(q) <= w) true\n        else false",
  "        val sum = q.sum\n        val isBalanced = q.reverse == q\n        sum <=\
    \ w && isBalanced", "        if (q.length == 0) return true\n        if (q.length\
    \ == 1) return true\n        if (q.length % 2 == 0) return false\n        var\
    \ sum = 0l\n        for (i <- 0 until q.length) {\n            sum += q(i)\n \
    \       }\n        if (sum > w) return false\n        for (i <- 0 until q.length\
    \ / 2) {\n            if (q(i) != q(q.length - 1 - i)) return false\n        }\n\
    \        return true", "        // Write your code here\n        if (q.sum <=\
    \ w && q == q.reverse) true else false", "        // Write your code here\n  \
    \      true", "        def isBalanced(q : List[Long]) : Boolean = {\n        \
    \    if (q.size == 0) true\n            else if (q.size == 1) true\n         \
    \   else if (q.head == q.last) isBalanced(q.tail.init)\n            else false\n\
    \        }\n        if (q.sum <= w) isBalanced(q)\n        else false", "    \
    \    val sum = q.sum\n        sum <= w && q == q.reverse"]
stop_tokens:
- "\n    }\n"
