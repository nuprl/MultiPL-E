name: HumanEval_133_sum_squares
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of numbers.\n    // You need to return the sum of squared\
  \ numbers in the given list,\n    // round each element in the list to the upper\
  \ int(Ceiling) first.\n    // Examples:\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat)))\n    // (14l)\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 4.0f.toFloat, 9.0f.toFloat)))\n    // (98l)\n    // >>> lst((List[Float](1.0f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat)))\n    // (84l)\n    // >>> lst((List[Float](1.4f.toFloat,\
  \ 4.2f.toFloat, 0.0f.toFloat)))\n    // (29l)\n    // >>> lst((List[Float](-2.4f.toFloat,\
  \ 1.0f.toFloat, 1.0f.toFloat)))\n    // (6l)\n    def sumSquares(lst : List[Float])\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat))) == (14l));\n    assert(sumSquares((List[Float](1.0f.toFloat,\
  \ 3.0f.toFloat, 5.0f.toFloat, 7.0f.toFloat))) == (84l));\n    assert(sumSquares((List[Float](1.4f.toFloat,\
  \ 4.2f.toFloat, 0.0f.toFloat))) == (29l));\n    assert(sumSquares((List[Float](-2.4f.toFloat,\
  \ 1.0f.toFloat, 1.0f.toFloat))) == (6l));\n    assert(sumSquares((List[Float](100.0f.toFloat,\
  \ 1.0f.toFloat, 15.0f.toFloat, 2.0f.toFloat))) == (10230l));\n    assert(sumSquares((List[Float](10000.0f.toFloat,\
  \ 10000.0f.toFloat))) == (200000000l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 4.6f.toFloat, 6.3f.toFloat))) == (75l));\n    assert(sumSquares((List[Float](-1.4f.toFloat,\
  \ 17.9f.toFloat, 18.9f.toFloat, 19.9f.toFloat))) == (1086l));\n    assert(sumSquares((List[Float](0.0f.toFloat)))\
  \ == (0l));\n    assert(sumSquares((List[Float](-1.0f.toFloat))) == (1l));\n   \
  \ assert(sumSquares((List[Float](-1.0f.toFloat, 1.0f.toFloat, 0.0f.toFloat))) ==\
  \ (2l));\n    }\n\n}\n"
completions: ["        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n\
    \        sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', " \
    \       // Write your code here\n        lst.map(x => ceil(x).toLong).map(x =>\
    \ x * x).sum", "        // Write your code here\n        var sum = 0l\n      \
    \  for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n    \
    \    }\n        sum", "        var sum = 0l\n        for (i <- lst) {\n      \
    \      sum += ceil(i).toLong * ceil(i).toLong\n        }\n        return sum",
  "        // your code here\n        return 0l", "        // your code here\n   \
    \     var sum = 0l\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        sum", "        // Your Code Here\n    \
    \    var sum = 0l\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        sum", "        // Your code here\n    \
    \    lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Your code\
    \ here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        //\
    \ Your Code Here\n        return 0", "        // Write your code here\n      \
    \  return 0l", "        // Write your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  "        // Write your code here\n        val lst2 = lst.map(x => ceil(x).toInt)\n\
    \        lst2.map(x => x * x).sum", "        // Your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", "        // Your Code Here\n      \
    \  var sum = 0l\n        for (i <- lst) {\n            sum += ceil(i).toLong *\
    \ ceil(i).toLong\n        }\n        sum", "        // Write your code here\n\
    \        lst.map(x => ceil(x).toLong).map(x => x * x).sum", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        // Your Code Here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", "        // Your code here\n      \
    \  lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Your code goes\
    \ here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        //\
    \ Write your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // Your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // Your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // Write your code here\n        return 0", "        // your code here\n\
    \        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Your code\
    \ here\n        return 0l", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Write your code here\n        var sum = 0l\n   \
    \     for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n \
    \       }\n        sum", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Write your code here\n        var result : Long\
    \ = 0\n        for (i <- lst) {\n            result += ceil(i).toLong * ceil(i).toLong\n\
    \        }\n        return result", "        // Your code here\n        return\
    \ 0l", "        // Write your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Write your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your Code Here\n        var sum : Long = 0\n   \
    \     for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n \
    \       }\n        return sum", "        // your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", "        // Write your code here\n\
    \        return 0", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Write your code here\n        lst.map(x => ceil(x).toLong\
    \ * ceil(x).toLong).sum", "        // Write your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", "        // Your code here\n      \
    \  lst.map(x => ceil(x).toLong).map(x => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        // Your code here\n        return 0l", "        // Write\
    \ your code here\n        var sum = 0l\n        for (i <- lst) {\n           \
    \ sum += pow(ceil(i).toInt, 2).toLong\n        }\n        sum", "        // Write\
    \ your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", " \
    \       // your code here\n        0", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        // Write your code here\n        var sum = 0l\n     \
    \   for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n   \
    \     }\n        sum", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // your code here\n        var sum = 0l\n        for\
    \ (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n\
    \        sum", "        // your code here\n        var sum = 0l\n        for (i\
    \ <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n \
    \       sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum', "  \
    \      // your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // Write your code here\n        lst.map(x => ceil(x).toLong).map(x =>\
    \ x * x).sum", "        var sum : Long = 0\n        for (i <- lst) {\n       \
    \     sum += ceil(i).toLong * ceil(i).toLong\n        }\n        return sum",
  "        // your code here\n        return 0l", "        // Write your code here\n\
    \        return 0l", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  "        // your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // Your Code Here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // Write your code here\n        return 0l", "        // Your Code Here\n\
    \        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Your code\
    \ here\n        var sum = 0l\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        sum", "        // your code here\n    \
    \    lst.map(x => ceil(x).toLong).map(x => x * x).sum", '        lst.map(x =>
    ceil(x).toLong).map(x => x * x).sum', "        // your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", "        // Write your code here\n\
    \        return 0l", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your Code Here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your code here\n        return 0l", "        //\
    \ Your Code Here\n        return 0", "        // Your code here\n        return\
    \ 0;", "        // Your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your Code Here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", '        lst.map(x => ceil(x).toLong).map(x => x * x).sum',
  "        // your code here\n        return 0l", "        // Your Code Here\n   \
    \     return 0l", "        // Your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your code here\n        var sum = 0L\n        for\
    \ (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n\
    \        sum", "        // Write your code here\n        var sum : Long = 0\n\
    \        for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n\
    \        }\n        return sum", "        // Write your code here\n        var\
    \ sum : Long = 0\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        return sum", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        // Your code here\n        var sum = 0l\n        for\
    \ (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n\
    \        sum", "        // Write your code here\n        var sum = 0l\n      \
    \  for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n    \
    \    }\n        sum", "        // Write your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Write your code here\n        var sum = 0l\n   \
    \     for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n \
    \       }\n        sum", "        // Your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your Code Here\n        0", "        // Your Code\
    \ Here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        //\
    \ Your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", " \
    \       // Write your code here\n        lst.map(x => ceil(x).toLong).map(x =>\
    \ x * x).sum", "        // Your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your Code Here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your Code Here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Write your code here\n        return 0l", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        // your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", "        // Your code here\n      \
    \  lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Your code here\n\
    \        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // your code\
    \ here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        //\
    \ Write your code here\n        return 0l", "        // Write your code here\n\
    \        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Your Code\
    \ Here\n        var sum = 0l\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        sum", "        var sum : Long = 0\n   \
    \     for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n \
    \       }\n        return sum", "        // your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", "        // Your code here\n      \
    \  lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Write your code\
    \ here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        //\
    \ Write your code here\n        return 0l", '        lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        // Write your code here\n        var sum = 0l\n     \
    \   for (i <- lst) {\n            sum += pow(ceil(i).toInt, 2).toLong\n      \
    \  }\n        sum", "        // Your code here\n        var sum = 0l\n       \
    \ for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n     \
    \   }\n        sum", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your code here\n        return 0l", "        //\
    \ Your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", " \
    \       // your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // Your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // Write your code here\n        return 0l", "        // Write your code\
    \ here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        //\
    \ Write your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // Write your code here\n        return 0l", "        // Your Code Here\n\
    \        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // your code\
    \ here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        //\
    \ Write your code here\n        var sum : Long = 0\n        for (i <- lst) {\n\
    \            sum += ceil(i).toLong * ceil(i).toLong\n        }\n        return\
    \ sum", "        // Write your code here\n        return 0l", "        // Your\
    \ code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "    \
    \    // Your Code Here\n        return 0", "        // your code here\n      \
    \  return 0l", "        // Your Code Here\n        return 0l", "        // Write\
    \ your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", " \
    \       // This is your job. Find the sum of squares of the given list.\n    \
    \    // You need to round each element to the upper int(Ceiling) first.\n    \
    \    // For example, 1.4 -> 2, 1.0 -> 1, -2.4 -> -2.\n        // Then, you need\
    \ to square each element and sum them up.\n        // For example, 2^2 + 2^2 +\
    \ 2^2 = 12.\n        // You need to return the sum of squares of the given list.\n\
    \        // For example, if the given list is (1.0, 2.0, 3.0),\n        // you\
    \ need to return 14.\n        // Please write your code bellow.\n        // You\
    \ can add auxiliary functions as you wish.\n        // You can add auxiliary classes\
    \ as you wish.\n        // You can define any data structure as you wish.\n  \
    \      // You can use any library function as you wish.\n        // You can use\
    \ any library class as you wish.\n        // You can use any language feature\
    \ as you wish.\n        // You can use any IDE feature as you wish.\n        //\
    \ You can use any algorithm as you wish.\n        // You can use any design pattern\
    \ as you wish.\n        // You can use any data structure as you wish.\n     \
    \   // You can use any library function as you wish.\n        // You can use any\
    \ library class as you wish.\n        // You can use any language feature as you\
    \ wish.\n        // You can use any IDE feature as you wish.\n        // You can\
    \ use any algorithm as you wish.\n        // You can use any design pattern as\
    \ you wish.\n        // You can use any data structure as you wish.\n        //\
    \ You can use any library function as you wish.\n        // You can use any library\
    \ class as you wish.\n        // You can use any language feature as you wish.\n\
    \        // You can use any IDE feature as you wish.\n        // You can use any\
    \ algorithm as you wish.\n        // You can use any design pattern as you wish.\n\
    \        // You can use any data structure as you wish.\n        // You can use\
    \ any library function as you wish.\n        // You can use any library class\
    \ as you wish.\n        // You can use any language feature as you wish.\n   \
    \     // You can use any", "        // your code goes here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", "        // your code here\n      \
    \  lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Write your code\
    \ here\n        var sum = 0l\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        sum", "        // your code here\n    \
    \    var sum = 0l\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        sum", "        // Write your code here\n\
    \        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Your Code\
    \ Here\n        return 0", '        return lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        // your code here\n        return lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Write your code here\n        return 0l", "    \
    \    // Write your code here\n        var sum = 0l\n        for (i <- lst) {\n\
    \            sum += ceil(i).toLong * ceil(i).toLong\n        }\n        sum",
  "        // your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // Write your code here\n        lst.map(x => ceil(x).toLong).map(x =>\
    \ x * x).sum", "        // Write your code here\n        return 0l", "       \
    \ // Your Code Here\n        return lst.map(x => ceil(x).toLong).map(x => x *\
    \ x).sum", "        // Write your code here\n        var sum = 0l\n        for\
    \ (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n\
    \        sum", "        // Your Code Here\n        return 0", "        // Your\
    \ Code Here\n        return 0", "        // Write your code here\n        return\
    \ 0l", "        // Write your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // your code here\n        var sum : Long = 0\n   \
    \     for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n \
    \       }\n        return sum", '        return lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        // Write your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your code here\n        return 0l", "        //\
    \ Your Code Here\n        return 0", "        // your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", '        return lst.map(x => ceil(x).toLong).map(x
    => x * x).sum', "        // Your code here\n        return 0", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        // your code here\n        return\
    \ 0l", "        // your code here\n        return 0l", "        // Write your\
    \ code here\n        return 0l", "        // Write your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", "        // your code here\n      \
    \  lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Write your code\
    \ here\n        return 0", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // your code here\n        var sum = 0l\n        for\
    \ (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n        }\n\
    \        sum", "        // Write your code here\n        var sum = 0l\n      \
    \  for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n    \
    \    }\n        sum", "        // Write your code here\n        var sum = 0l\n\
    \        for (i <- lst) {\n            sum += ceil(i).toLong * ceil(i).toLong\n\
    \        }\n        sum", "        // Write your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", "        // Your code here\n      \
    \  var sum = 0l\n        for (i <- lst) {\n            sum += ceil(i).toLong *\
    \ ceil(i).toLong\n        }\n        sum", "        // Your code here\n      \
    \  var sum = 0l\n        for (i <- lst) {\n            sum += ceil(i).toLong *\
    \ ceil(i).toLong\n        }\n        sum", "        // Your Code Here\n      \
    \  return 0", "        // your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your code here\n        var sum = 0l\n        for\
    \ (i <- lst) {\n            sum += pow(ceil(i).toInt, 2).toLong\n        }\n \
    \       sum", "        // Your code here\n        lst.map(x => ceil(x).toLong).map(x\
    \ => x * x).sum", "        // Your Code Here\n        return 0l", "        //\
    \ Write your code here\n        var sum = 0l\n        for (i <- lst) {\n     \
    \       sum += ceil(i).toLong * ceil(i).toLong\n        }\n        sum", "   \
    \     // Your code here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum",
  "        // Write your code here\n        return 0l", "        // your code here\n\
    \        return 0l", "        val lst2 = lst.map(x => ceil(x).toInt)\n       \
    \ val lst3 = lst2.map(x => x * x)\n        lst3.sum", "        // your code here\n\
    \        lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Your code\
    \ here\n        var sum = 0l\n        for (i <- lst) {\n            sum += ceil(i).toLong\
    \ * ceil(i).toLong\n        }\n        sum", "        // Your code here\n    \
    \    lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // Your Code\
    \ Here\n        lst.map(x => ceil(x).toLong).map(x => x * x).sum", '        lst.map(x
    => ceil(x).toLong).map(x => x * x).sum', "        // your code here\n        lst.map(x\
    \ => ceil(x).toLong).map(x => x * x).sum", "        // your code here\n      \
    \  lst.map(x => ceil(x).toLong).map(x => x * x).sum", "        // your code here\n\
    \        lst.map(x => ceil(x).toLong).map(x => x * x).sum"]
stop_tokens:
- "\n    }\n"
