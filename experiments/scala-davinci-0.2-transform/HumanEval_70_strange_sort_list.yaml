name: HumanEval_70_strange_sort_list
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of integers, return list in strange order.\n    // Strange sorting,\
  \ is when you start with the minimum value,\n    // then maximum of the remaining\
  \ integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))\n\
  \    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n    def strangeSortList(lst\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
  \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong,\
  \ 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
  \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong,\
  \ 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
  \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
  \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        // Fill up this function body\n        // 'lst' is a list of\
    \ integers\n        // 'return' a list of integers in strange order\n        var\
    \ result = List[Long]()\n        var lst2 = lst.sortWith(_ < _)\n        var lst3\
    \ = lst.sortWith(_ > _)\n        var i = 0\n        while (i < lst.length) {\n\
    \            if (i % 2 == 0) {\n                result = result :+ lst2(0)\n \
    \               lst2 = lst2.drop(1)\n            } else {\n                result\
    \ = result :+ lst3(0)\n                lst3 = lst3.drop(1)\n            }\n  \
    \          i += 1\n        }\n        result", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var sortedList = lst.sorted\n        var\
    \ result = List[Long]()\n        var i = 0\n        while (i < sortedList.length)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ sortedList(i)\n\
    \            } else {\n                result = result :+ sortedList(sortedList.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        result", " \
    \       var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3\
    \ = List[Long]()\n        var i = 0\n        while (i < lst1.length) {\n     \
    \       lst3 = lst3 :+ lst1(i)\n            if (i < lst2.length) lst3 = lst3 :+\
    \ lst2(i)\n            i += 1\n        }\n        lst3", "        var result :\
    \ List[Long] = List[Long]()\n        var lst2 : List[Long] = lst\n        while\
    \ (lst2.length > 0) {\n            result = result :+ lst2.min\n            lst2\
    \ = lst2.filter(x => x != lst2.min)\n            if (lst2.length > 0) {\n    \
    \            result = result :+ lst2.max\n                lst2 = lst2.filter(x\
    \ => x != lst2.max)\n            }\n        }\n        return result", "     \
    \   // Fill up this function body\n        // 'lst' is a list of integers\n  \
    \      // 'return' a list of integers in strange order\n        var lst1 = lst.sorted\n\
    \        var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var\
    \ i = 0\n        while (i < lst1.length) {\n            if (i % 2 == 0) {\n  \
    \              lst3 = lst3 :+ lst1(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(i)\n            }\n            i += 1\n        }\n        return\
    \ lst3", "        if (lst.isEmpty) return lst\n        var lst2 = lst.sorted\n\
    \        var lst3 = ListBuffer[Long]()\n        var i = 0\n        while (i <\
    \ lst2.length) {\n            if (i % 2 == 0) {\n                lst3 += lst2(i)\n\
    \            } else {\n                lst3 += lst2(lst2.length - 1 - i)\n   \
    \         }\n            i += 1\n        }\n        lst3.toList", "        val\
    \ sorted = lst.sorted\n        val result = new ListBuffer[Long]\n        var\
    \ i = 0\n        var j = sorted.length - 1\n        while (i <= j) {\n       \
    \     result += sorted(i)\n            if (i != j) result += sorted(j)\n     \
    \       i += 1\n            j -= 1\n        }\n        result.toList", "     \
    \   var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n\
    \        while (i < lst2.length) {\n            if (i % 2 == 0) {\n          \
    \      lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3 = lst3\
    \ :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n\
    \        return lst3", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n   \
    \     var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i\
    \ += 1\n        }\n        lst3", "        if (lst.length == 0) return lst\n \
    \       var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n    \
    \    var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i\
    \ += 1\n        }\n        return lst3", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        lst", "        val lstSorted = lst.sorted\n      \
    \  val lstSortedReversed = lstSorted.reverse\n        val lstSortedReversedTail\
    \ = lstSortedReversed.tail\n        val lstSortedReversedTailTail = lstSortedReversedTail.tail\n\
    \        val lstSortedReversedTailTailTail = lstSortedReversedTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTail = lstSortedReversedTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTail = lstSortedReversedTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTail", "        if (lst.length ==\
    \ 0) return lst\n        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 += lst2(i)\n            } else {\n              \
    \  lst3 += lst2(lst2.length - 1 - i)\n            }\n            i += 1\n    \
    \    }\n        return lst3.toList", "        val sorted = lst.sorted\n      \
    \  val n = sorted.length\n        val result = new ArrayBuffer[Long]\n       \
    \ var i = 0\n        while (i < n) {\n            if (i % 2 == 0) result += sorted(i)\n\
    \            else result += sorted(n - i / 2 - 1)\n            i += 1\n      \
    \  }\n        result.toList", "        // Fill up this function body\n       \
    \ // 'lst' is a list of integers\n        // 'return' a list of integers in strange\
    \ order\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n    \
    \    var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i\
    \ += 1\n        }\n        return lst3", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        if (lst.isEmpty) return lst\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ var sorted = lst.sorted\n        var result = List[Long]()\n        var i =\
    \ 0\n        while (i < sorted.length) {\n            if (i % 2 == 0) {\n    \
    \            result = result :+ sorted(i)\n            } else {\n            \
    \    result = result :+ sorted(sorted.length - 1 - i)\n            }\n       \
    \     i += 1\n        }\n        return result", "        var lst1 = lst.sortWith(_\
    \ < _)\n        var lst2 = lst.sortWith(_ > _)\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst1.head\n                lst1 = lst1.tail\n\
    \            } else {\n                lst3 = lst3 :+ lst2.head\n            \
    \    lst2 = lst2.tail\n            }\n            i += 1\n        }\n        lst3",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        lst3", "        var lst2\
    \ = lst.sorted\n        var lst3 = List[Long]()\n        while (lst2.length >\
    \ 0) {\n            lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n \
    \           if (lst2.length > 0) {\n                lst3 = lst3 :+ lst2.last\n\
    \                lst2 = lst2.dropRight(1)\n            }\n        }\n        return\
    \ lst3", "        // Fill up this function body\n        // 'lst' is a list of\
    \ integers\n        // 'return' a list of integers in strange order\n        var\
    \ lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n    \
    \    while (i < lst2.length) {\n            if (i % 2 == 0) {\n              \
    \  lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3 = lst3 :+\
    \ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n  \
    \      return lst3", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3\
    \ = List[Long]()\n        var i = 0\n        while (i < lst1.length) {\n     \
    \       lst3 = lst3 :+ lst1(i)\n            if (i < lst2.length) {\n         \
    \       lst3 = lst3 :+ lst2(i)\n            }\n            i += 1\n        }\n\
    \        lst3", "        // Fill up this function body\n        // 'lst' is a\
    \ list of integers\n        // 'lst.length' is the length of the list\n      \
    \  // 'lst(i)' is the ith element of the list\n        // 'lst.min' is the minimum\
    \ element of the list\n        // 'lst.max' is the maximum element of the list\n\
    \        // 'lst.sorted' is the sorted list\n        // 'lst.sortWith(_ < _)'\
    \ is the sorted list\n        // 'lst.sortWith(_ > _)' is the reverse sorted list\n\
    \        // 'lst.sortWith(_ % 2 == _ % 2)' is the list sorted by even and odd\n\
    \        // 'lst.sortWith(_ % 2 != _ % 2)' is the list sorted by odd and even\n\
    \        // 'lst.sortWith(_.abs < _.abs)' is the list sorted by absolute value\n\
    \        // 'lst.sortWith(_.abs > _.abs)' is the list sorted by reverse absolute\
    \ value\n        // 'lst.sortWith(_.toString < _.toString)' is the list sorted\
    \ by string value\n        // 'lst.sortWith(_.toString > _.toString)' is the list\
    \ sorted by reverse string value\n        // 'lst.sortWith(_.toString.length <\
    \ _.toString.length)' is the list sorted by string length\n        // 'lst.sortWith(_.toString.length\
    \ > _.toString.length)' is the list sorted by reverse string length\n        //\
    \ 'lst.sortWith(_.toString.reverse < _.toString.reverse)' is the list sorted by\
    \ string reverse\n        // 'lst.sortWith(_.toString.reverse > _.toString.reverse)'\
    \ is the list sorted by reverse string reverse\n        // 'lst.sortWith(_.toString.head\
    \ < _.toString.head)' is the list sorted by string head\n        // 'lst.sortWith(_.toString.head\
    \ > _.toString.head)' is the list sorted by reverse string head\n        // 'lst.sortWith(_.toString.last\
    \ < _.toString.last)' is the list sorted by string last\n        // 'lst.sortWith(_.toString.",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = List[Long]()\n        var i = 0\n        while (i <\
    \ lst2.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+\
    \ lst2(i)\n            } else {\n                lst3 = lst3 :+ lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        lst3", "   \
    \     var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i =\
    \ 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n      \
    \          lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n   \
    \     }\n        return lst3", "        // Fill up this function body\n      \
    \  // 'lst' is a list of integers\n        // 'return' a list of integers in strange\
    \ order\n        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 += lst2(i)\n            } else {\n              \
    \  lst3 += lst2(lst2.length - 1 - i)\n            }\n            i += 1\n    \
    \    }\n        return lst3.toList", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        var list = lst.sorted\n        var result = List[Long]()\n\
    \        var i = 0\n        while (i < list.length) {\n            if (i % 2 ==\
    \ 0) {\n                result = result :+ list(i)\n            } else {\n   \
    \             result = result :+ list(list.length - 1 - i)\n            }\n  \
    \          i += 1\n        }\n        result", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst2 = lst.sorted\n        var lst3 =\
    \ ListBuffer[Long]()\n        var i = 0\n        while (i < lst2.length) {\n \
    \           if (i % 2 == 0) {\n                lst3 += lst2(i)\n            }\
    \ else {\n                lst3 += lst2(lst2.length - 1 - i)\n            }\n \
    \           i += 1\n        }\n        return lst3.toList", "        if (lst.length\
    \ == 0) return List[Long]()\n        var lst2 = lst.sorted\n        var lst3 =\
    \ List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n       \
    \     if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n            }\
    \ else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n         \
    \   }\n            i += 1\n        }\n        lst3", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'return' a\
    \ list of integers in strange order\n        var lst1 = lst.sorted\n        var\
    \ lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var lst4 = List[Long]()\n\
    \        var lst5 = List[Long]()\n        var lst6 = List[Long]()\n        var\
    \ lst7 = List[Long]()\n        var lst8 = List[Long]()\n        var lst9 = List[Long]()\n\
    \        var lst10 = List[Long]()\n        var lst11 = List[Long]()\n        var\
    \ lst12 = List[Long]()\n        var lst13 = List[Long]()\n        var lst14 =\
    \ List[Long]()\n        var lst15 = List[Long]()\n        var lst16 = List[Long]()\n\
    \        var lst17 = List[Long]()\n        var lst18 = List[Long]()\n        var\
    \ lst19 = List[Long]()\n        var lst20 = List[Long]()\n        var lst21 =\
    \ List[Long]()\n        var lst22 = List[Long]()\n        var lst23 = List[Long]()\n\
    \        var lst24 = List[Long]()\n        var lst25 = List[Long]()\n        var\
    \ lst26 = List[Long]()\n        var lst27 = List[Long]()\n        var lst28 =\
    \ List[Long]()\n        var lst29 = List[Long]()\n        var lst30 = List[Long]()\n\
    \        var lst31 = List[Long]()\n        var lst32 = List[Long]()\n        var\
    \ lst33 = List[Long]()\n        var lst34 = List[Long]()\n        var lst35 =\
    \ List[Long]()\n        var lst36 = List[Long]()\n        var lst37 = List[Long]()\n\
    \        var lst38 = List[Long]()\n        var lst39 = List[Long]()\n        var\
    \ lst40 = List[Long]", "        if (lst.length == 0) return lst\n        var lst2\
    \ = lst.sorted\n        var result = ListBuffer[Long]()\n        var i = 0\n \
    \       while (i < lst2.length) {\n            if (i % 2 == 0) {\n           \
    \     result += lst2(i)\n            } else {\n                result += lst2(lst2.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        return result.toList",
  "        // Fill in the code here.\n        return lst", "        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = List[Long]()\n        while (lst2.length > 0) {\n \
    \           lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n         \
    \   if (lst2.length > 0) {\n                lst3 = lst3 :+ lst2.last\n       \
    \         lst2 = lst2.init\n            }\n        }\n        lst3", "       \
    \ var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst1.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst1(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(i)\n            }\n            i += 1\n        }\n\
    \        return lst3", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n        var lst4\
    \ = List[Long]()\n        var i = 0\n        while (i < lst.length) {\n      \
    \      if (i % 2 == 0) {\n                lst4 = lst4 :+ lst2(i)\n           \
    \ } else {\n                lst4 = lst4 :+ lst3(i)\n            }\n          \
    \  i += 1\n        }\n        return lst4", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst2 = lst.sorted\n        var lst3 =\
    \ ListBuffer[Long]()\n        var i = 0\n        while (i < lst2.length) {\n \
    \           if (i % 2 == 0) {\n                lst3 += lst2(i)\n            }\
    \ else {\n                lst3 += lst2(lst2.length - 1 - i)\n            }\n \
    \           i += 1\n        }\n        lst3.toList", "        // Fill up this\
    \ function body\n        // 'lst' is the list of integers\n        // Return the\
    \ list in strange order\n        // You can add auxiliary functions as needed\n\
    \        def strangeSortListHelper(lst : List[Long], acc : List[Long]) : List[Long]\
    \ = {\n            if (lst.isEmpty) acc\n            else {\n                val\
    \ min = lst.min\n                val max = lst.max\n                val lst1 =\
    \ lst.filter(_ != min)\n                val lst2 = lst1.filter(_ != max)\n   \
    \             strangeSortListHelper(lst2, acc :+ min :+ max)\n            }\n\
    \        }\n        strangeSortListHelper(lst, List[Long]())", "        // Fill\
    \ up this function body\n        // 'lst' is a list of integers\n        // 'return'\
    \ a list of integers in strange order\n        var lst1 = lst.sorted\n       \
    \ var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var i = 0\n\
    \        while (i < lst1.length) {\n            if (i % 2 == 0) {\n          \
    \      lst3 = lst3 :+ lst1(i)\n            } else {\n                lst3 = lst3\
    \ :+ lst2(i)\n            }\n            i += 1\n        }\n        return lst3",
  "        if (lst.isEmpty) List[Long]()\n        else {\n            val min = lst.min\n\
    \            val max = lst.max\n            val lst2 = lst.filter(x => x != min\
    \ && x != max)\n            List(min) ::: List(max) ::: strangeSortList(lst2)\n\
    \        }", "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n\
    \        var i = 0\n        while (i < sorted.length) {\n            if (i % 2\
    \ == 0) {\n                result += sorted(i)\n            } else {\n       \
    \         result += sorted(sorted.length - 1 - i)\n            }\n           \
    \ i += 1\n        }\n        result.toList", "        var sorted = lst.sorted\n\
    \        var result = List[Long]()\n        var i = 0\n        while (i < sorted.length)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ sorted(i)\n\
    \            } else {\n                result = result :+ sorted(sorted.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        return result",
  "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i =\
    \ 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) lst3 = lst3\
    \ :+ lst2(i)\n            else lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n\
    \            i += 1\n        }\n        return lst3", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'return' a\
    \ list of integers in strange order\n        var lst2 = lst.sorted\n        var\
    \ lst3 = List[Long]()\n        var i = 0\n        var j = lst2.length - 1\n  \
    \      while (i < j) {\n            lst3 = lst3 :+ lst2(i)\n            lst3 =\
    \ lst3 :+ lst2(j)\n            i += 1\n            j -= 1\n        }\n       \
    \ if (i == j) lst3 = lst3 :+ lst2(i)\n        lst3", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'return' a\
    \ list of integers in strange order\n        var lst2 = lst.sorted\n        var\
    \ lst3 = lst2.reverse\n        var lst4 = List[Long]()\n        var i = 0\n  \
    \      while (i < lst.length) {\n            if (i % 2 == 0) {\n             \
    \   lst4 = lst4 :+ lst2(i)\n            } else {\n                lst4 = lst4\
    \ :+ lst3(i)\n            }\n            i += 1\n        }\n        return lst4",
  "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i =\
    \ 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n      \
    \          lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n   \
    \     }\n        return lst3", "        // Fill up this function body\n      \
    \  // `lst` is a list of integers\n        // You have to return a list of integers\
    \ in strange order\n        // You can write auxiliary functions if you want\n\
    \        // You can write auxiliary classes if you want\n        // You can create\
    \ new instances of classes if you want\n        // You can mutate objects if you\
    \ want\n        // Your code must type check and it must not have any type errors\n\
    \        // Type of `lst` is List[Long]\n        // Type of return value must\
    \ be List[Long]\n        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n\
    \        var lst3 = ListBuffer[Long]()\n        var lst4 = ListBuffer[Long]()\n\
    \        var lst5 = ListBuffer[Long]()\n        var lst6 = ListBuffer[Long]()\n\
    \        var lst7 = ListBuffer[Long]()\n        var lst8 = ListBuffer[Long]()\n\
    \        var lst9 = ListBuffer[Long]()\n        var lst10 = ListBuffer[Long]()\n\
    \        var lst11 = ListBuffer[Long]()\n        var lst12 = ListBuffer[Long]()\n\
    \        var lst13 = ListBuffer[Long]()\n        var lst14 = ListBuffer[Long]()\n\
    \        var lst15 = ListBuffer[Long]()\n        var lst16 = ListBuffer[Long]()\n\
    \        var lst17 = ListBuffer[Long]()\n        var lst18 = ListBuffer[Long]()\n\
    \        var lst19 = ListBuffer[Long]()\n        var lst20 = ListBuffer[Long]()\n\
    \        var lst21 = ListBuffer[Long]()\n        var lst22 = ListBuffer[Long]()\n\
    \        var lst23 = ListBuffer[Long]()\n        var lst24 = ListBuffer[Long]()\n\
    \        var lst25 = ListBuffer[Long]()\n        var lst26 = ListBuffer[Long]()\n\
    \        var lst27 = ListBuffer[Long]()\n        var lst28 = ListBuffer[Long]()\n\
    \        var lst29 = ListBuffer[Long]()\n        var lst30 = ListBuffer[Long]()\n",
  "        if (lst.length == 0) return lst\n        var result = List[Long]()\n  \
    \      var lst2 = lst.sorted\n        var min = lst2.head\n        var max = lst2.last\n\
    \        var minIndex = lst.indexOf(min)\n        var maxIndex = lst.indexOf(max)\n\
    \        var lst3 = lst.slice(minIndex, maxIndex + 1)\n        var lst4 = lst.slice(maxIndex\
    \ + 1, lst.length)\n        var lst5 = lst.slice(0, minIndex)\n        var lst6\
    \ = lst4 ++ lst5\n        var lst7 = lst3.reverse\n        var lst8 = lst7 ++\
    \ lst6\n        return lst8", "        // Fill up this function body\n       \
    \ // 'lst' is a list of integers\n        // 'return' a list of integers in strange\
    \ order\n        return lst", "        var lst1 = lst.sorted\n        var lst2\
    \ = lst1.reverse\n        var lst3 = List[Long]()\n        var i = 0\n       \
    \ while (i < lst1.length) {\n            lst3 = lst3 :+ lst1(i)\n            if\
    \ (i < lst2.length) {\n                lst3 = lst3 :+ lst2(i)\n            }\n\
    \            i += 1\n        }\n        lst3", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'lst' has to be returned\
    \ in strange order\n        // Example:\n        // >>> strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n        // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n        // >>> strangeSortList((List[Long](5l.toLong,\
    \ 5l.toLong, 5l.toLong, 5l.toLong)))\n        // (List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong))\n        // >>> strangeSortList((List[Long]()))\n   \
    \     // (List[Long]())\n        val lst2 = lst.sorted\n        val lst3 = lst2.reverse\n\
    \        val lst4 = lst3.tail\n        val lst5 = lst4.reverse\n        val lst6\
    \ = lst5.tail\n        val lst7 = lst6.reverse\n        val lst8 = lst7.tail\n\
    \        val lst9 = lst8.reverse\n        val lst10 = lst9.tail\n        val lst11\
    \ = lst10.reverse\n        val lst12 = lst11.tail\n        val lst13 = lst12.reverse\n\
    \        val lst14 = lst13.tail\n        val lst15 = lst14.reverse\n        val\
    \ lst16 = lst15.tail\n        val lst17 = lst16.reverse\n        val lst18 = lst17.tail\n\
    \        val lst19 = lst18.reverse\n        val lst20 = lst19.tail\n        val\
    \ lst21 = lst20.reverse\n        val lst22 = lst21.tail\n        val lst23 = lst22.reverse\n\
    \        val lst24 = lst23.tail\n        val lst25 = lst24.reverse\n        val\
    \ lst26 = lst25.tail\n        val lst27 = lst26.reverse\n       ", "        var\
    \ lst2 = lst.sorted\n        var lst3 = lst2.reverse\n        var lst4 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            lst4 = lst4\
    \ :+ lst2(i)\n            if (i < lst3.length) {\n                lst4 = lst4\
    \ :+ lst3(i)\n            }\n            i += 1\n        }\n        lst4", " \
    \       if (lst.length == 0) return lst\n        var lst2 = lst.sorted\n     \
    \   var lst3 = List[Long]()\n        while (lst2.length > 0) {\n            lst3\
    \ = lst3 :+ lst2.head\n            lst2 = lst2.tail\n            if (lst2.length\
    \ > 0) {\n                lst3 = lst3 :+ lst2.last\n                lst2 = lst2.init\n\
    \            }\n        }\n        return lst3", "        if (lst.isEmpty) return\
    \ lst\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n      \
    \  while (lst2.nonEmpty) {\n            lst3 = lst3 :+ lst2.head\n           \
    \ lst2 = lst2.tail\n            if (lst2.nonEmpty) {\n                lst3 = lst3\
    \ :+ lst2.last\n                lst2 = lst2.init\n            }\n        }\n \
    \       return lst3", "        // Fill up this function body\n        // `lst`\
    \ is a list of integers\n        // You have to return a list of integers in strange\
    \ order\n        // You can use any number of lines\n        // You can use any\
    \ number of helper functions\n        // You can use any number of variables\n\
    \        // You can use any number of loops\n        // You can use any number\
    \ of if statements\n        // You can use any number of return statements\n \
    \       // You can use any number of break statements\n        // You can use\
    \ any number of continue statements\n        // You can use any number of while\
    \ loops\n        // You can use any number of for loops\n        // You can use\
    \ any number of do while loops\n        // You can use any number of switch statements\n\
    \        // You can use any number of case statements\n        // You can use\
    \ any number of default statements\n        // You can use any number of goto\
    \ statements\n        // You can use any number of throw statements\n        //\
    \ You can use any number of try statements\n        // You can use any number\
    \ of catch statements\n        // You can use any number of finally statements\n\
    \        // You can use any number of throw statements\n        // You can use\
    \ any number of throw statements\n        // You can use any number of throw statements\n\
    \        // You can use any number of throw statements\n        // You can use\
    \ any number of throw statements\n        // You can use any number of throw statements\n\
    \        // You can use any number of throw statements\n        // You can use\
    \ any number of throw statements\n        // You can use any number of throw statements\n\
    \        // You can use any number of throw statements\n        // You can use\
    \ any number of throw statements\n        // You can use any number of throw statements\n\
    \        // You can use any number of throw statements\n        // You can use\
    \ any number of throw statements\n        // You can use any number of throw statements\n\
    \        // You can use any number of throw statements\n        // You can use\
    \ any number of throw statements\n        // You can use any number of throw statements\n\
    \        // You can use any number of throw statements\n        // You can use\
    \ any number of throw statements\n        // You can use any number of throw statements\n\
    \        // You can use any number of throw statements\n        // You can use\
    \ any number of throw statements\n        // You can use any number of throw statements\n\
    \        // You can use any", "        // Fill up this function body\n       \
    \ // `lst` is a list of integers\n        // You have to return a list of integers\
    \ in strange order\n        // You can use the functions `min` and `max`\n   \
    \     // You can use the function `lst.sortWith(_ < _)` to sort a list\n     \
    \   // You can use the function `lst.reverse` to reverse a list\n        // You\
    \ can use the function `lst.filter` to filter a list\n        // You can use the\
    \ function `lst.drop` to drop elements from a list\n        // You can use the\
    \ function `lst.take` to take elements from a list\n        // You can use the\
    \ function `lst.splitAt` to split a list at a given index\n        // You can\
    \ use the function `lst.zip` to zip two lists\n        // You can use the function\
    \ `lst.unzip` to unzip a list of pairs\n        // You can use the function `lst.partition`\
    \ to partition a list\n        // You can use the function `lst.groupBy` to group\
    \ a list\n        // You can use the function `lst.map` to map a list\n      \
    \  // You can use the function `lst.flatMap` to flatMap a list\n        // You\
    \ can use the function `lst.foldLeft` to foldLeft a list\n        // You can use\
    \ the function `lst.foldRight` to foldRight a list\n        // You can use the\
    \ function `lst.reduceLeft` to reduceLeft a list\n        // You can use the function\
    \ `lst.reduceRight` to reduceRight a list\n        // You can use the function\
    \ `lst.scanLeft` to scanLeft a list\n        // You can use the function `lst.scanRight`\
    \ to scanRight a list\n        // You can use the function `lst.slice` to slice\
    \ a list\n        // You can use the function `lst.takeWhile` to takeWhile a list\n\
    \        // You can use the function `lst.dropWhile` to dropWhile a list\n   \
    \     // You can use the function `lst.span` to span a list\n        // You can\
    \ use the function `lst.splitAt` to splitAt a list\n        // You can use the",
  "        // Fill in the code here.\n        var lst2 = lst.sorted\n        var lst3\
    \ = List[Long]()\n        var i = 0\n        var j = lst2.length - 1\n       \
    \ while (i <= j) {\n            lst3 = lst3 :+ lst2(i)\n            if (i != j)\
    \ {\n                lst3 = lst3 :+ lst2(j)\n            }\n            i += 1\n\
    \            j -= 1\n        }\n        lst3", "        // Fill in the code here.\n\
    \        return lst", "        // Fill in the code here.\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n        var\
    \ i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n  \
    \              lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            }\n            i += 1\n\
    \        }\n        lst3", "        // Fill in the code here.\n        var result\
    \ = List[Long]()\n        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n\
    \        var lst4 = lst2 ++ lst3\n        var lst5 = lst4.distinct\n        var\
    \ lst6 = lst5.sorted\n        var lst7 = lst6.reverse\n        var lst8 = lst6\
    \ ++ lst7\n        var lst9 = lst8.distinct\n        var lst10 = lst9.sorted\n\
    \        var lst11 = lst10.reverse\n        var lst12 = lst10 ++ lst11\n     \
    \   var lst13 = lst12.distinct\n        var lst14 = lst13.sorted\n        var\
    \ lst15 = lst14.reverse\n        var lst16 = lst14 ++ lst15\n        var lst17\
    \ = lst16.distinct\n        var lst18 = lst17.sorted\n        var lst19 = lst18.reverse\n\
    \        var lst20 = lst18 ++ lst19\n        var lst21 = lst20.distinct\n    \
    \    var lst22 = lst21.sorted\n        var lst23 = lst22.reverse\n        var\
    \ lst24 = lst22 ++ lst23\n        var lst25 = lst24.distinct\n        var lst26\
    \ = lst25.sorted\n        var lst27 = lst26.reverse\n        var lst28 = lst26\
    \ ++ lst27\n        var lst29 = lst28.distinct\n        var lst30 = lst29.sorted\n\
    \        var lst31 = lst30.reverse\n        var lst32 = lst30 ++ lst31\n     \
    \   var lst33 = lst32.distinct\n        var lst34 = lst33.sorted\n        var\
    \ lst35 = lst34.reverse\n        var lst36 = lst34 ++ lst35\n        var lst37\
    \ = lst36.distinct\n        var lst38 = lst37.sorted\n        var lst39 = lst38.reverse\n",
  "        // Fill up this function body\n        // `lst` is a list of integers\n\
    \        // You have to return a list of integers in strange order\n        //\
    \ You can write helper functions\n        // You can write multiple sub-solutions\n\
    \        // You can store intermediate results in local variables\n        //\
    \ You can import standard libraries\n        // You can import your own libraries\n\
    \        // You can write your own classes\n        // You can create your own\
    \ objects\n        // You can create your own packages\n        // You can create\
    \ your own libraries\n        // You can use any programming paradigm\n      \
    \  // You can use any programming language\n        // You can use any algorithm\n\
    \        // You can use any data structure\n        // You can use any library\n\
    \        // You can use any tool\n        // You can use any resource\n      \
    \  // You can use any technique\n        // You can use any pattern\n        //\
    \ You can use any principle\n        // You can use any method\n        // You\
    \ can use any process\n        // You can use any procedure\n        // You can\
    \ use any function\n        // You can use any approach\n        // You can use\
    \ any strategy\n        // You can use any tactic\n        // You can use any\
    \ technique\n        // You can use any tool\n        // You can use any resource\n\
    \        // You can use any technique\n        // You can use any pattern\n  \
    \      // You can use any principle\n        // You can use any method\n     \
    \   // You can use any process\n        // You can use any procedure\n       \
    \ // You can use any function\n        // You can use any approach\n        //\
    \ You can use any strategy\n        // You can use any tactic\n        // You\
    \ can use any technique\n        // You can use any tool\n        // You can use\
    \ any resource\n        // You can use any technique\n        // You can use any\
    \ pattern\n        // You can use any principle\n        // You can use any method\n\
    \        // You can use any process\n        // You can use any procedure\n  \
    \      // You can use any function\n        // You can use any approach\n    \
    \    // You can use any strategy\n        // You can use any tactic\n        //\
    \ You can use any technique\n        // You can use any tool\n        // You can\
    \ use any resource\n        // You can use any technique\n        // You can use\
    \ any pattern\n        // You can use any principle", "        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - i / 2\
    \ - 1)\n            }\n            i += 1\n        }\n        lst3", "       \
    \ var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n\
    \        while (i < lst2.length) {\n            if (i % 2 == 0) {\n          \
    \      lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3 = lst3\
    \ :+ lst2(lst2.length - i - 1)\n            }\n            i += 1\n        }\n\
    \        return lst3", "        // Fill up this function body\n        // `lst`\
    \ is the list of integers\n        // You have to return the list of integers\
    \ in strange order\n        // You can create new lists, but don't mutate the\
    \ input list\n        // You can also use built-in functions, but don't use mutable\
    \ data structures\n        // For example, you can use `ListBuffer` or `ArrayBuffer`\n\
    \        // But you cannot use `scala.collection.mutable.List`\n        var lst1\
    \ = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3 = ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < lst1.length) {\n            lst3 += lst1(i)\n\
    \            if (i < lst2.length) {\n                lst3 += lst2(i)\n       \
    \     }\n            i += 1\n        }\n        return lst3.toList", "       \
    \ // Fill up this function body\n        // You can add another function as well,\
    \ if required\n        if (lst.isEmpty) return lst\n        val sorted = lst.sorted\n\
    \        val min = sorted.head\n        val max = sorted.last\n        val mid\
    \ = sorted.slice(1, sorted.length - 1)\n        var result = List[Long]()\n  \
    \      var i = 0\n        while (i < mid.length) {\n            result = result\
    \ :+ min\n            result = result :+ max\n            i += 1\n        }\n\
    \        if (mid.length % 2 == 1) {\n            result = result :+ min\n    \
    \    }\n        result = result :+ max\n        result = result :+ min\n     \
    \   result", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            }\n      \
    \      i += 1\n        }\n        return lst3", "        if (lst.length == 0)\
    \ {\n            return lst\n        }\n        var lst2 = lst.sorted\n      \
    \  var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ // Fill up this function body\n        // `lst` is a list of integers\n    \
    \    // You have to return a list of integers in strange order\n        // You\
    \ can write helper functions\n        // You can write multiple sub-solutions\n\
    \        // You can store intermediate results in local variables\n        //\
    \ You can import standard library functions\n        // You can import standard\
    \ library classes\n        // You can use regular expressions\n        // You\
    \ can use Scala's pattern matching\n        // You can use Scala's for comprehensions\n\
    \        // You can use Scala's while loops\n        // You can use Scala's do-while\
    \ loops\n        // You can use Scala's for loops\n        // You can use Scala's\
    \ if-else statements\n        // You can use Scala's match statements\n      \
    \  // You can use Scala's try-catch statements\n        // You can use Scala's\
    \ try-finally statements\n        // You can use Scala's try-catch-finally statements\n\
    \        // You can use Scala's yield statements\n        // You can use Scala's\
    \ implicit statements\n        // You can use Scala's implicit conversions\n \
    \       // You can use Scala's implicit parameters\n        // You can use Scala's\
    \ implicit classes\n        // You can use Scala's implicit functions\n      \
    \  // You can use Scala's implicit methods\n        // You can use Scala's implicit\
    \ values\n        // You can use Scala's implicit variables\n        // You can\
    \ use Scala's implicit defs\n        // You can use Scala's implicit objects\n\
    \        // You can use Scala's implicit traits\n        // You can use Scala's\
    \ implicit classes\n        // You can use Scala's implicit functions\n      \
    \  // You can use Scala's implicit methods\n        // You can use Scala's implicit\
    \ values\n        // You can use Scala's implicit variables\n        // You can\
    \ use Scala's implicit defs\n        // You can use Scala's implicit objects\n\
    \        // You can use Scala's implicit traits\n        // You can use Scala's\
    \ implicit classes\n        // You can use Scala's implicit functions\n      \
    \  // You can use Scala's implicit methods\n        // You can use Scala's implicit\
    \ values\n        // You can use Scala's implicit variables\n        // You can\
    \ use Scala's implicit defs\n        // You can use Scala's implicit objects\n\
    \        // You can use Scala's implicit traits\n        // You can use Scala's\
    \ implicit classes\n        // You can use Scala's implicit functions\n      \
    \  // You", "        if (lst.isEmpty) return lst\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        while (!lst2.isEmpty) {\n          \
    \  lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n            if (!lst2.isEmpty)\
    \ {\n                lst3 = lst3 :+ lst2.last\n                lst2 = lst2.init\n\
    \            }\n        }\n        return lst3", "        // Fill in the code\
    \ here.\n        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n    \
    \    var lst3 = List[Long]()\n        var i = 0\n        while (i < lst1.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst1(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(i)\n            }\n\
    \            i += 1\n        }\n        lst3", "        // Fill up this function\
    \ body\n        // `lst` is a list of integers\n        // You need to return\
    \ a list of integers in strange order\n        // You can change the signature\
    \ of this function according to your need\n        // You can create other functions\
    \ as well, according to your need\n        var lst1 = lst.sorted\n        var\
    \ lst2 = lst1.reverse\n        var lst3 = ListBuffer[Long]()\n        var i =\
    \ 0\n        while (i < lst1.length) {\n            if (i % 2 == 0) {\n      \
    \          lst3 += lst1(i)\n            } else {\n                lst3 += lst2(i)\n\
    \            }\n            i += 1\n        }\n        return lst3.toList", " \
    \       def strangeSortListHelper(lst : List[Long], acc : List[Long]) : List[Long]\
    \ = {\n            if (lst.length == 0) acc\n            else {\n            \
    \    val min = lst.min\n                val max = lst.max\n                val\
    \ minIndex = lst.indexOf(min)\n                val maxIndex = lst.indexOf(max)\n\
    \                val newLst = lst.updated(minIndex, max).updated(maxIndex, min)\n\
    \                strangeSortListHelper(newLst.tail, acc :+ newLst.head)\n    \
    \        }\n        }\n        strangeSortListHelper(lst, List[Long]())", "  \
    \      // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = ListBuffer[Long]()\n        var i = 0\n        var j = lst2.length\
    \ - 1\n        while (i <= j) {\n            lst3 += lst2(i)\n            if (i\
    \ != j) lst3 += lst2(j)\n            i += 1\n            j -= 1\n        }\n \
    \       lst3.toList", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var lst4\
    \ = List[Long]()\n        for (i <- 0 until lst2.length) {\n            if (i\
    \ % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n\
    \                lst4 = lst4 :+ lst2(i)\n            }\n        }\n        lst3\
    \ ::: lst4.reverse", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'lst' has to be returned\
    \ in strange order\n        // You can add/remove functions as required in this\
    \ problem\n        def strangeSortListHelper(lst : List[Long], result : List[Long])\
    \ : List[Long] = {\n            if (lst.isEmpty) result\n            else {\n\
    \                val (min, max) = (lst.min, lst.max)\n                val (minIndex,\
    \ maxIndex) = (lst.indexOf(min), lst.indexOf(max))\n                val newList\
    \ = lst.updated(minIndex, max).updated(maxIndex, min)\n                strangeSortListHelper(newList.filterNot(x\
    \ => x == min || x == max), result :+ min :+ max)\n            }\n        }\n\
    \        strangeSortListHelper(lst, List[Long]())", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst1 = lst.sortWith(_ < _)\n        var\
    \ lst2 = lst.sortWith(_ > _)\n        var lst3 = List[Long]()\n        var i =\
    \ 0\n        while (i < lst.length) {\n            if (i % 2 == 0) {\n       \
    \         lst3 = lst3 :+ lst1(0)\n                lst1 = lst1.drop(1)\n      \
    \      } else {\n                lst3 = lst3 :+ lst2(0)\n                lst2\
    \ = lst2.drop(1)\n            }\n            i += 1\n        }\n        lst3",
  "        // Fill up this function body\n        // `lst` is a list of integers\n\
    \        // You have to return a list of integers in strange order\n        //\
    \ You can write helper functions\n        // You can write multiple sub-solutions\n\
    \        // You can store intermediate results in local variables\n        //\
    \ You can import standard libraries\n        // You can use `return` statement\n\
    \        // You can use `println` statement for debugging\n        // You can\
    \ use `if` and `else`\n        // You can use `for` and `while`\n        // You\
    \ can use `List` and `Set`\n        // You can use `ListBuffer` and `ArrayBuffer`\n\
    \        // You can use `Map` and `HashMap`\n        // You can use `Tuple2`\n\
    \        // You can use `Tuple3`\n        // You can use `Tuple4`\n        //\
    \ You can use `Tuple5`\n        // You can use `Tuple6`\n        // You can use\
    \ `Tuple7`\n        // You can use `Tuple8`\n        // You can use `Tuple9`\n\
    \        // You can use `Tuple10`\n        // You can use `Tuple11`\n        //\
    \ You can use `Tuple12`\n        // You can use `Tuple13`\n        // You can\
    \ use `Tuple14`\n        // You can use `Tuple15`\n        // You can use `Tuple16`\n\
    \        // You can use `Tuple17`\n        // You can use `Tuple18`\n        //\
    \ You can use `Tuple19`\n        // You can use `Tuple20`\n        // You can\
    \ use `Tuple21`\n        // You can use `Tuple22`\n        // You can use `Tuple23`\n\
    \        // You can use `Tuple24`\n        // You can use `Tuple25`\n        //\
    \ You can use `Tuple26`\n        // You can use `Tuple27`\n        // You can\
    \ use `Tuple28`\n        // You can use `Tuple29`\n        // You can use `Tuple30`\n\
    \        // You can use `Tuple31`\n        // You can use `Tuple32`\n        //\
    \ You can use `Tuple", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var result = List[Long]()\n        var lst2 = lst.sorted\n        var\
    \ lst3 = lst2.reverse\n        var lst4 = lst2 ++ lst3\n        var i = 0\n  \
    \      while (i < lst4.length) {\n            result = result :+ lst4(i)\n   \
    \         i += 2\n        }\n        i = 1\n        while (i < lst4.length) {\n\
    \            result = result :+ lst4(i)\n            i += 2\n        }\n     \
    \   result", "        // Fill up this function body\n        // 'lst' is a list\
    \ of integers\n        // 'return' a list of integers in strange order\n     \
    \   var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3 =\
    \ List[Long]()\n        var i = 0\n        while (i < lst1.length) {\n       \
    \     lst3 = lst3 :+ lst1(i)\n            lst3 = lst3 :+ lst2(i)\n           \
    \ i += 1\n        }\n        return lst3", "        val sorted = lst.sorted\n\
    \        val min = sorted.head\n        val max = sorted.last\n        val mid\
    \ = sorted.slice(1, sorted.length - 1)\n        val mid1 = mid.slice(0, mid.length\
    \ / 2)\n        val mid2 = mid.slice(mid.length / 2, mid.length)\n        val\
    \ mid2r = mid2.reverse\n        val result = ListBuffer[Long]()\n        result\
    \ += min\n        for (i <- 0 until mid1.length) {\n            result += mid1(i)\n\
    \            result += mid2r(i)\n        }\n        if (mid1.length != mid2r.length)\
    \ result += mid2r.last\n        result += max\n        result.toList", "     \
    \   // Fill up this function body\n        // 'lst' is a list of integers\n  \
    \      // 'lst.length' is the length of the list\n        // 'lst(i)' is the ith\
    \ element of the list\n        // 'lst.min' is the minimum element of the list\n\
    \        // 'lst.max' is the maximum element of the list\n        // 'lst.sorted'\
    \ is the sorted list\n        // 'lst.sorted.reverse' is the reverse sorted list\n\
    \        // 'lst.distinct' is the list with duplicates removed\n        // 'lst.distinct.sorted'\
    \ is the sorted list with duplicates removed\n        // 'lst.distinct.sorted.reverse'\
    \ is the reverse sorted list with duplicates removed\n        // 'lst.sum' is\
    \ the sum of the list\n        // 'lst.product' is the product of the list\n \
    \       // 'lst.head' is the first element of the list\n        // 'lst.tail'\
    \ is the list without the first element\n        // 'lst.last' is the last element\
    \ of the list\n        // 'lst.init' is the list without the last element\n  \
    \      // 'lst.reverse' is the list in reverse order\n        // 'lst.take(n)'\
    \ is the first n elements of the list\n        // 'lst.drop(n)' is the list without\
    \ the first n elements\n        // 'lst.slice(i,j)' is the sublist from the ith\
    \ element to the jth element\n        // 'lst.splitAt(n)' is a pair of lists,\
    \ the first list has the first n elements\n        // 'lst.apply(i)' is the ith\
    \ element of the list\n        // 'lst.indices' is the list of valid indices\n\
    \        // 'lst.indices.reverse' is the list of valid indices in reverse order\n\
    \        // 'lst.indices.reverse.map(i => lst(i))' is the list in reverse order\n\
    \        // 'lst.indices.map(i => lst(i))' is the list\n        // 'lst.indices.map(i\
    \ => lst(i)).sum' is the sum of the list\n", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst2 = lst.sorted\n        var lst3 =\
    \ List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n       \
    \     if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n            }\
    \ else {\n                lst3 = lst3 :+ lst2(lst2.length - i - 1)\n         \
    \   }\n            i += 1\n        }\n        lst3", "        // Fill up this\
    \ function body\n        // `lst` is a list of integers\n        // You need to\
    \ return a list of integers in strange order\n        // You can change the signature\
    \ of this function\n        // You can add/remove/modify function parameters\n\
    \        // You can add/remove/modify function local variables\n        // You\
    \ can define new functions\n        // You can return a value of any type\n  \
    \      // You can modify the return type\n        // You can use any other library\
    \ functions\n        // You can use any control structures\n        // You can\
    \ use any other Scala features\n        var lst2 = lst.sortWith((x, y) => x <\
    \ y)\n        var lst3 = ListBuffer[Long]()\n        var i = 0\n        while\
    \ (i < lst2.length) {\n            if (i % 2 == 0) {\n                lst3 +=\
    \ lst2(i)\n            } else {\n                lst3 += lst2(lst2.length - i\
    \ / 2 - 1)\n            }\n            i += 1\n        }\n        lst3.toList",
  "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i =\
    \ 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n      \
    \          lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            }\n            i += 1\n\
    \        }\n        return lst3", "        // Fill up this function body\n   \
    \     // 'lst' is the list of integers\n        // Return the list in strange\
    \ order\n        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n    \
    \    var lst3 = List[Long]()\n        var i = 0\n        while (i < lst1.length)\
    \ {\n            lst3 = lst3 :+ lst1(i)\n            if (i < lst2.length) {\n\
    \                lst3 = lst3 :+ lst2(i)\n            }\n            i += 1\n \
    \       }\n        return lst3", "        // Fill up this function body\n    \
    \    // 'lst' is a list of integers\n        // 'return' a list of integers in\
    \ strange order\n        var result = List[Long]()\n        var lst2 = lst.sorted\n\
    \        var lst3 = lst2.reverse\n        var i = 0\n        while (i < lst.length)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ lst2(i)\n\
    \            } else {\n                result = result :+ lst3(i)\n          \
    \  }\n            i += 1\n        }\n        result", "        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        while (lst2.length\
    \ > 0) {\n            lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n\
    \            if (lst2.length > 0) {\n                lst3 = lst3 :+ lst2.last\n\
    \                lst2 = lst2.init\n            }\n        }\n        lst3", " \
    \       var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i\
    \ = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n    \
    \            lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n   \
    \     }\n        lst3", "        var lst2 = lst.sorted\n        var lst3 = new\
    \ ListBuffer[Long]\n        var i = 0\n        while (i < lst2.length) {\n   \
    \         if (i % 2 == 0) {\n                lst3 += lst2(i)\n            } else\
    \ {\n                lst3 += lst2(lst2.length - i / 2 - 1)\n            }\n  \
    \          i += 1\n        }\n        return lst3.toList", "        var lst2 =\
    \ lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n        while (lst2.length\
    \ > 0) {\n            lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n\
    \            if (lst2.length > 0) {\n                lst3 = lst3 :+ lst2.last\n\
    \                lst2 = lst2.dropRight(1)\n            }\n        }\n        return\
    \ lst3", "        // Fill up this function body\n        // `lst` is a list of\
    \ integers\n        // You have to return a list of integers in strange order\n\
    \        // You can write helper functions\n        // You can write multiple\
    \ sub-solutions\n        // You can store intermediate results in a mutable data\
    \ structure\n        // You can write your own data structure\n        // You\
    \ can import any library you want\n        // You can write your own library\n\
    \        // You can submit multiple solutions\n        // You can submit your\
    \ own test cases\n        // You can submit your own test case generator\n   \
    \     // You can submit your own test case validator\n        // You can submit\
    \ your own test case runner\n        // You can submit your own test case printer\n\
    \        // You can submit your own test case visualizer\n        // You can submit\
    \ your own test case debugger\n        // You can submit your own test case profiler\n\
    \        // You can submit your own test case tracer\n        // You can submit\
    \ your own test case coverage checker\n        // You can submit your own test\
    \ case memory checker\n        // You can submit your own test case time checker\n\
    \        // You can submit your own test case correctness checker\n        //\
    \ You can submit your own test case performance checker\n        // You can submit\
    \ your own test case stress tester\n        // You can submit your own test case\
    \ load tester\n        // You can submit your own test case correctness tester\n\
    \        // You can submit your own test case performance tester\n        // You\
    \ can submit your own test case stress tester\n        // You can submit your\
    \ own test case load tester\n        // You can submit your own test case correctness\
    \ tester\n        // You can submit your own test case performance tester\n  \
    \      // You can submit your own test case stress tester\n        // You can\
    \ submit your own test case load tester\n        // You can submit your own test\
    \ case correctness tester\n        // You can submit your own test case performance\
    \ tester\n        // You can submit your own test case stress tester\n       \
    \ // You can submit your own test case load tester\n        // You can submit\
    \ your own test case correctness tester\n        // You can submit your own test\
    \ case performance tester\n        // You can submit your own test case stress\
    \ tester\n        // You can submit your own test case load tester\n        //\
    \ You can submit your", "        if (lst.length == 0) return lst\n        var\
    \ lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n    \
    \    while (i < lst2.length) {\n            if (i % 2 == 0) lst3 = lst3 :+ lst2(i)\n\
    \            else lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            i += 1\n\
    \        }\n        return lst3", "        var lst2 = lst.sorted\n        var\
    \ lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n\
    \            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n     \
    \       } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n \
    \           }\n            i += 1\n        }\n        return lst3", "        //\
    \ Fill up this function body\n        // 'lst' is a list of integers\n       \
    \ // 'lst' has to be returned in a strange order\n        // You can add any auxiliary\
    \ functions you want\n        // You can create any new data structures you want\n\
    \        // Example:\n        // >>> strangeSortList((List[Long](1l.toLong, 2l.toLong,\
    \ 3l.toLong, 4l.toLong)))\n        // (List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
    \ 3l.toLong))\n        // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n        // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n        // >>> strangeSortList((List[Long]()))\n        // (List[Long]())\n\
    \        lst.sortWith(_ < _)", "        // Fill up this function body\n      \
    \  // 'lst' is the list of integers\n        // Return the list in strange order\n\
    \        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3\
    \ = List[Long]()\n        var i = 0\n        while (i < lst1.length) {\n     \
    \       if (i % 2 == 0) {\n                lst3 = lst3 :+ lst1(i)\n          \
    \  } else {\n                lst3 = lst3 :+ lst2(i)\n            }\n         \
    \   i += 1\n        }\n        lst3", "        var lst2 = lst.sorted\n       \
    \ var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) lst3 = lst3 :+ lst2(i)\n            else lst3\
    \ = lst3 :+ lst2(lst2.length - i - 1)\n            i += 1\n        }\n       \
    \ lst3", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n   \
    \     var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            }\n         \
    \   i += 1\n        }\n        return lst3", "        var result = List[Long]()\n\
    \        var remaining = lst\n        while (remaining.length > 0) {\n       \
    \     val min = remaining.min\n            val max = remaining.max\n         \
    \   result = result :+ min\n            if (max != min) {\n                result\
    \ = result :+ max\n            }\n            remaining = remaining.filter(x =>\
    \ x != min && x != max)\n        }\n        return result", "        // Fill up\
    \ this function body\n        // `lst` is a list of integers\n        // You need\
    \ to return a list of integers in strange order\n        // You can create other\
    \ functions as well, if required\n        var lst1 = lst.sorted\n        var lst2\
    \ = lst1.reverse\n        var lst3 = ListBuffer[Long]()\n        var lst4 = ListBuffer[Long]()\n\
    \        var lst5 = ListBuffer[Long]()\n        var lst6 = ListBuffer[Long]()\n\
    \        var lst7 = ListBuffer[Long]()\n        var lst8 = ListBuffer[Long]()\n\
    \        var lst9 = ListBuffer[Long]()\n        var lst10 = ListBuffer[Long]()\n\
    \        var lst11 = ListBuffer[Long]()\n        var lst12 = ListBuffer[Long]()\n\
    \        var lst13 = ListBuffer[Long]()\n        var lst14 = ListBuffer[Long]()\n\
    \        var lst15 = ListBuffer[Long]()\n        var lst16 = ListBuffer[Long]()\n\
    \        var lst17 = ListBuffer[Long]()\n        var lst18 = ListBuffer[Long]()\n\
    \        var lst19 = ListBuffer[Long]()\n        var lst20 = ListBuffer[Long]()\n\
    \        var lst21 = ListBuffer[Long]()\n        var lst22 = ListBuffer[Long]()\n\
    \        var lst23 = ListBuffer[Long]()\n        var lst24 = ListBuffer[Long]()\n\
    \        var lst25 = ListBuffer[Long]()\n        var lst26 = ListBuffer[Long]()\n\
    \        var lst27 = ListBuffer[Long]()\n        var lst28 = ListBuffer[Long]()\n\
    \        var lst29 = ListBuffer[Long]()\n        var lst30 = ListBuffer[Long]()\n\
    \        var lst31 = ListBuffer[Long]()\n        var lst32 = ListBuffer[Long]()\n\
    \        var lst33 = ListBuffer[Long]()\n        var lst34 = ListBuffer[Long]()\n\
    \        var lst35 = ListBuffer[Long]()\n        var lst36 = ListBuffer[Long]",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - i / 2\
    \ - 1)\n            }\n            i += 1\n        }\n        return lst3", " \
    \       // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = List[Long]()\n        var lst4 = List[Long]()\n   \
    \     var lst5 = List[Long]()\n        var lst6 = List[Long]()\n        var lst7\
    \ = List[Long]()\n        var lst8 = List[Long]()\n        var lst9 = List[Long]()\n\
    \        var lst10 = List[Long]()\n        var lst11 = List[Long]()\n        var\
    \ lst12 = List[Long]()\n        var lst13 = List[Long]()\n        var lst14 =\
    \ List[Long]()\n        var lst15 = List[Long]()\n        var lst16 = List[Long]()\n\
    \        var lst17 = List[Long]()\n        var lst18 = List[Long]()\n        var\
    \ lst19 = List[Long]()\n        var lst20 = List[Long]()\n        var lst21 =\
    \ List[Long]()\n        var lst22 = List[Long]()\n        var lst23 = List[Long]()\n\
    \        var lst24 = List[Long]()\n        var lst25 = List[Long]()\n        var\
    \ lst26 = List[Long]()\n        var lst27 = List[Long]()\n        var lst28 =\
    \ List[Long]()\n        var lst29 = List[Long]()\n        var lst30 = List[Long]()\n\
    \        var lst31 = List[Long]()\n        var lst32 = List[Long]()\n        var\
    \ lst33 = List[Long]()\n        var lst34 = List[Long]()\n        var lst35 =\
    \ List[Long]()\n        var lst36 = List[Long]()\n        var lst37 = List[Long]()\n\
    \        var lst38 = List[Long]()\n        var lst39 = List[Long]()\n        var\
    \ lst40 = List[Long]()\n        var lst41 =", "        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - i / 2\
    \ - 1)\n            }\n            i += 1\n        }\n        return lst3", " \
    \       // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'lst' has to be returned in strange order\n        // Remove line\
    \ below and start coding\n        lst", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        lst.sorted", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'lst' can be empty\n     \
    \   // Return a list of integers in strange order\n        // You can use any\
    \ data structure provided in Scala's standard library\n        // You can also\
    \ define new data structures\n        // You can import any library in Scala\n\
    \        // You can also define new functions\n        // You can also submit\
    \ in any other language\n        // But, functions in other languages, will be\
    \ automatically \n        // translated to Scala, before evaluation\n        //\
    \ Your code will be evaluated on a few test cases\n        // If your code passes\
    \ all test cases, it will be accepted\n        // If your code fails any test\
    \ case, it will be rejected\n        // You can write to stderr for debugging\
    \ purposes, using any method\n        // provided in Scala, or Java\n        //\
    \ Stderr will not be captured\n        // Stdout will be captured and compared\
    \ with expected output\n        // If your code's output matches expected output,\
    \ it will be accepted\n        // If your code's output does not match expected\
    \ output, it will be rejected\n        // You must not use any method provided\
    \ in Java's standard library for this problem\n        // You must not use any\
    \ method provided in Scala's standard library for this problem\n        // You\
    \ can use any method provided in Scala, or Java's standard library for other problems\n\
    \        // You can use any method provided in Scala, or Java's standard library\
    \ for other problems\n        // You can use any method provided in Scala, or\
    \ Java's standard library for other problems\n        // You can use any method\
    \ provided in Scala, or Java's standard library for other problems\n        //\
    \ You can use any method provided in Scala, or Java's standard library for other\
    \ problems\n        // You can use any method provided in Scala, or Java's standard\
    \ library for other problems\n        // You can use any method provided in Scala,\
    \ or Java's standard library for other problems\n        // You can use any method\
    \ provided in Scala, or Java's standard library for other problems\n        //\
    \ You can use any method provided in Scala, or Java's standard library for other\
    \ problems\n        // You can use any method provided in Scala, or Java's standard\
    \ library for other problems\n        // You can use any method provided in Scala,\
    \ or Java's standard library for other problems\n        // You can use any method\
    \ provided in", "        // Fill up this function body\n        // 'lst' is a\
    \ list of integers\n        // 'lst.sorted' will give you a sorted list of integers\n\
    \        // 'lst.min' will give you minimum value in the list\n        // 'lst.max'\
    \ will give you maximum value in the list\n        // 'lst.length' will give you\
    \ the length of the list\n        // You can access first element of the list\
    \ like this: lst(0)\n        // You can access second element of the list like\
    \ this: lst(1)\n        // and so on.\n        // You can also use lst.apply(0),\
    \ lst.apply(1)\n        // and so on.\n        // You can add elements to list\
    \ like this: lst :+ 1l.toLong\n        // You can add elements to the beginning\
    \ of the list like this: 1l.toLong +: lst\n        // You can remove element from\
    \ the list like this: lst.filterNot(_ == 1l.toLong)\n        // You can iterate\
    \ over list like this: lst.foreach(println)\n        // You can also use for loop:\
    \ for (i <- 0 until lst.length)\n        // You can access ith element of the\
    \ list like this: lst(i)\n        // You can also use lst.apply(i)\n        //\
    \ You can add element to the list like this: lst :+ ithElement\n        // You\
    \ can add element to the beginning of the list like this: ithElement +: lst\n\
    \        // You can remove element from the list like this: lst.filterNot(_ ==\
    \ ithElement)\n        // You can iterate over list like this: lst.foreach(println)\n\
    \        // You can also use for loop: for (j <- 0 until lst.length)\n       \
    \ // You can access jth element of the list like this: lst(j)\n        // You\
    \ can also use lst.apply(j)\n        // You can add element to the list like this:\
    \ lst :+ jthElement\n        // You can add element to the beginning of the list\
    \ like this: jthElement +: lst\n        // You can remove element from the list\
    \ like this: lst.filterNot", "        var lst2 = lst.sorted\n        var lst3\
    \ = List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n     \
    \       if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n          \
    \  } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n      \
    \      }\n            i += 1\n        }\n        return lst3", "        // Fill\
    \ up this function body\n        // 'lst' is a list of integers\n        // Return\
    \ a list of integers in strange order\n        var lst2 = lst.sorted\n       \
    \ var lst3 = List[Long]()\n        var i = 0\n        while(i < lst2.length) {\n\
    \            if(i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n      \
    \      } else {\n                lst3 = lst3 :+ lst2(lst2.length - i - 1)\n  \
    \          }\n            i += 1\n        }\n        lst3", "        // Fill up\
    \ this function body\n        // 'lst' is a list of integers\n        // 'return'\
    \ a list of integers in strange order\n        // You can add another function\
    \ as well, if required\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            }\n      \
    \      i += 1\n        }\n        lst3", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'lst.length' is the length\
    \ of the list\n        // 'lst(i)' is the ith element of the list\n        //\
    \ 'lst.min' is the minimum element of the list\n        // 'lst.max' is the maximum\
    \ element of the list\n        // 'lst.sorted' is the sorted list\n        //\
    \ 'lst.sorted.reverse' is the reverse sorted list\n        // 'lst.distinct' is\
    \ the list with duplicates removed\n        // 'lst.distinct.sorted' is the sorted\
    \ list with duplicates removed\n        // 'lst.distinct.sorted.reverse' is the\
    \ reverse sorted list with duplicates removed\n        // 'lst.sum' is the sum\
    \ of all elements in the list\n        // 'lst.product' is the product of all\
    \ elements in the list\n        // 'lst.head' is the first element of the list\n\
    \        // 'lst.tail' is the list without the first element\n        // 'lst.last'\
    \ is the last element of the list\n        // 'lst.init' is the list without the\
    \ last element\n        // 'lst.take(i)' is the first i elements of the list\n\
    \        // 'lst.drop(i)' is the list without the first i elements\n        //\
    \ 'lst.takeRight(i)' is the last i elements of the list\n        // 'lst.dropRight(i)'\
    \ is the list without the last i elements\n        // 'lst.slice(i, j)' is the\
    \ list of elements from i to j\n        // 'lst.slice(i, j)' is the list of elements\
    \ from i to j\n        // 'lst.slice(i, j)' is the list of elements from i to\
    \ j\n        // 'lst.slice(i, j)' is the list of elements from i to j\n      \
    \  // 'lst.slice(i, j)' is the list of elements from i to j\n        // 'lst.slice(i,\
    \ j)' is the list of elements from i to j\n        // 'lst.slice(i, j)' is the\
    \ list of elements from i to j\n        //", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst1 = lst.sorted\n        var lst2 =\
    \ lst1.reverse\n        var lst3 = List[Long]()\n        var i = 0\n        while\
    \ (i < lst1.length) {\n            lst3 = lst3 :+ lst1(i)\n            if (i <\
    \ lst2.length) {\n                lst3 = lst3 :+ lst2(i)\n            }\n    \
    \        i += 1\n        }\n        lst3", "        // Fill up this function body\n\
    \        // 'lst' is the list of integers\n        // Return the list in strange\
    \ order\n        lst.sortWith(_ < _)", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 += lst2(i)\n            } else {\n              \
    \  lst3 += lst2(lst2.length - 1 - i)\n            }\n            i += 1\n    \
    \    }\n        return lst3.toList", "        var lst2 = lst.sortWith(_ < _)\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - i - 1)\n\
    \            }\n            i += 1\n        }\n        lst3", "        // Fill\
    \ up this function body\n        // 'lst' is a list of integers\n        // 'return'\
    \ a list of integers in strange order\n        var lst2 = lst.sorted\n       \
    \ var lst3 = List[Long]()\n        while (lst2.length > 0) {\n            lst3\
    \ = lst3 :+ lst2.head\n            lst2 = lst2.tail\n            if (lst2.length\
    \ > 0) {\n                lst3 = lst3 :+ lst2.last\n                lst2 = lst2.dropRight(1)\n\
    \            }\n        }\n        lst3", "        // Fill up this function body\n\
    \        // `lst` is a list of integers\n        // You have to return a list\
    \ of integers in strange order\n        // You can use the `sort` function\n \
    \       // You can use the `reverse` function\n        // You can use the `min`\
    \ function\n        // You can use the `max` function\n        // You can use\
    \ the `filter` function\n        // You can use the `::` function\n        //\
    \ You can use the `:+` function\n        // You can use the `++` function\n  \
    \      // You can use the `drop` function\n        // You can use the `take` function\n\
    \        // You can use the `length` function\n        // You can use the `reverse`\
    \ function\n        // You can use the `::` function\n        // You can use the\
    \ `:+` function\n        // You can use the `++` function\n        // You can\
    \ use the `drop` function\n        // You can use the `take` function\n      \
    \  // You can use the `length` function\n        // You can use the `reverse`\
    \ function\n        // You can use the `::` function\n        // You can use the\
    \ `:+` function\n        // You can use the `++` function\n        // You can\
    \ use the `drop` function\n        // You can use the `take` function\n      \
    \  // You can use the `length` function\n        // You can use the `reverse`\
    \ function\n        // You can use the `::` function\n        // You can use the\
    \ `:+` function\n        // You can use the `++` function\n        // You can\
    \ use the `drop` function\n        // You can use the `take` function\n      \
    \  // You can use the `length` function\n        // You can use the `reverse`\
    \ function\n        // You can use the `::` function\n        // You can use the\
    \ `:+` function\n        // You can use the `++` function\n        // You can\
    \ use the `drop` function\n        // You can use the `take` function\n      \
    \  // You can use the `length` function\n        // You can use the `reverse`\
    \ function\n        // You can use the `::` function\n        // You can use the\
    \ `:+` function\n        // You can use the `++`", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst2 = lst.sorted\n        var lst3 =\
    \ List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n       \
    \     if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n            }\
    \ else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n         \
    \   }\n            i += 1\n        }\n        lst3", "        // Fill up this\
    \ function body\n        // 'lst' is a list of integers\n        // 'return' a\
    \ list of integers in strange order\n        var lst2 = lst.sorted\n        var\
    \ lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n\
    \            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n     \
    \       } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n \
    \           }\n            i += 1\n        }\n        lst3", "        // Fill\
    \ up this function body\n        // `lst` is the list of integers\n        //\
    \ You have to return the list in strange order\n        // You can use the helper\
    \ functions defined below\n        // You can use `scala.math.abs` to get absolute\
    \ value of a number\n        // You can use `scala.math.min` to get minimum of\
    \ two numbers\n        // You can use `scala.math.max` to get maximum of two numbers\n\
    \        // You can use `scala.math.min` to get minimum of two numbers\n     \
    \   // You can use `scala.math.max` to get maximum of two numbers\n        //\
    \ You can use `scala.math.min` to get minimum of two numbers\n        // You can\
    \ use `scala.math.max` to get maximum of two numbers\n        // You can use `scala.math.min`\
    \ to get minimum of two numbers\n        // You can use `scala.math.max` to get\
    \ maximum of two numbers\n        // You can use `scala.math.min` to get minimum\
    \ of two numbers\n        // You can use `scala.math.max` to get maximum of two\
    \ numbers\n        // You can use `scala.math.min` to get minimum of two numbers\n\
    \        // You can use `scala.math.max` to get maximum of two numbers\n     \
    \   // You can use `scala.math.min` to get minimum of two numbers\n        //\
    \ You can use `scala.math.max` to get maximum of two numbers\n        // You can\
    \ use `scala.math.min` to get minimum of two numbers\n        // You can use `scala.math.max`\
    \ to get maximum of two numbers\n        // You can use `scala.math.min` to get\
    \ minimum of two numbers\n        // You can use `scala.math.max` to get maximum\
    \ of two numbers\n        // You can use `scala.math.min` to get minimum of two\
    \ numbers\n        // You can use `scala.math.max` to get maximum of two numbers\n\
    \        // You can use `scala.math.min` to get minimum of two numbers\n     \
    \   // You can use `scala.math.max` to get maximum of two numbers\n        //\
    \ You can use `sc", "        // Fill up this function body\n        // 'lst' is\
    \ a list of integers\n        // 'lst' is not empty\n        // 'lst' is sorted\
    \ in ascending order\n        // Return a list of integers in strange order\n\
    \        var result = List[Long]()\n        var lst2 = lst\n        var i = 0\n\
    \        while (i < lst.length) {\n            if (i % 2 == 0) {\n           \
    \     result = result :+ lst2.min\n                lst2 = lst2.filter(_ != lst2.min)\n\
    \            } else {\n                result = result :+ lst2.max\n         \
    \       lst2 = lst2.filter(_ != lst2.max)\n            }\n            i += 1\n\
    \        }\n        result", "        // Fill up this function body\n        //\
    \ `lst` is a list of integers\n        // You have to return a list of integers\
    \ in strange order\n        // Do not change the signature of this function\n\
    \        // You can add new functions as you wish\n        // But do not change\
    \ the signature of this function\n        // Do not use any mutable data structures\n\
    \        // Do not use any mutable variables\n        // Do not use any mutable\
    \ functions\n        // Do not use any mutable objects\n        // Do not use\
    \ any mutable classes\n        // Do not use any mutable traits\n        // Do\
    \ not use any mutable packages\n        // Do not use any mutable imports\n  \
    \      // Do not use any mutable annotations\n        // Do not use any mutable\
    \ types\n        // Do not use any mutable methods\n        // Do not use any\
    \ mutable fields\n        // Do not use any mutable constants\n        // Do not\
    \ use any mutable literals\n        // Do not use any mutable expressions\n  \
    \      // Do not use any mutable statements\n        // Do not use any mutable\
    \ clauses\n        // Do not use any mutable conditions\n        // Do not use\
    \ any mutable loops\n        // Do not use any mutable functions\n        // Do\
    \ not use any mutable objects\n        // Do not use any mutable classes\n   \
    \     // Do not use any mutable traits\n        // Do not use any mutable packages\n\
    \        // Do not use any mutable imports\n        // Do not use any mutable\
    \ annotations\n        // Do not use any mutable types\n        // Do not use\
    \ any mutable methods\n        // Do not use any mutable fields\n        // Do\
    \ not use any mutable constants\n        // Do not use any mutable literals\n\
    \        // Do not use any mutable expressions\n        // Do not use any mutable\
    \ statements\n        // Do not use any mutable clauses\n        // Do not use\
    \ any mutable conditions\n        // Do not use any mutable loops\n        //\
    \ Do not use any mutable functions\n        // Do not use any mutable objects\n\
    \        // Do not use any mutable classes\n        // Do not use any mutable\
    \ traits\n        // Do not use any mutable packages\n        // Do not use any\
    \ mutable imports\n        // Do not use any mutable annotations\n        // Do\
    \ not use any mutable types\n", "        // Fill up this function body\n     \
    \   // You can add another function as well, if required\n        def strangeSortListHelper(lst\
    \ : List[Long], result : List[Long]) : List[Long] = {\n            if (lst.length\
    \ == 0) result\n            else {\n                val min = lst.min\n      \
    \          val max = lst.max\n                val minIndex = lst.indexOf(min)\n\
    \                val maxIndex = lst.indexOf(max)\n                val newLst =\
    \ lst.updated(minIndex, max).updated(maxIndex, min)\n                strangeSortListHelper(newLst.slice(1,\
    \ newLst.length), result :+ newLst(0))\n            }\n        }\n        strangeSortListHelper(lst,\
    \ List[Long]())", "        val sorted = lst.sorted\n        val min = sorted.head\n\
    \        val max = sorted.last\n        var result = List[Long]()\n        var\
    \ i = 0\n        while (i < sorted.length) {\n            if (i % 2 == 0) {\n\
    \                result = result :+ sorted(i)\n            } else {\n        \
    \        result = result :+ sorted(sorted.length - i - 1)\n            }\n   \
    \         i += 1\n        }\n        result", "        if (lst.length == 0) return\
    \ lst\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n      \
    \  var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n\
    \                lst3 = lst3 :+ lst2(i)\n            } else {\n              \
    \  lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n\
    \        }\n        return lst3", "        // Fill up this function body\n   \
    \     // 'lst' is a list of integers\n        // 'return' a list of integers in\
    \ strange order\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        lst3", "        val sorted = lst.sorted\n      \
    \  val min = sorted.head\n        val max = sorted.last\n        val minMax =\
    \ List(min, max)\n        val rest = sorted.slice(1, sorted.length - 1)\n    \
    \    val restSorted = rest.sorted\n        val restMinMax = List(restSorted.head,\
    \ restSorted.last)\n        val restRest = restSorted.slice(1, restSorted.length\
    \ - 1)\n        val restRestSorted = restRest.sorted\n        val restRestMinMax\
    \ = List(restRestSorted.head, restRestSorted.last)\n        val restRestRest =\
    \ restRestSorted.slice(1, restRestSorted.length - 1)\n        val restRestRestSorted\
    \ = restRestRest.sorted\n        val restRestRestMinMax = List(restRestRestSorted.head,\
    \ restRestRestSorted.last)\n        val restRestRestRest = restRestRestSorted.slice(1,\
    \ restRestRestSorted.length - 1)\n        val restRestRestRestSorted = restRestRestRest.sorted\n\
    \        val restRestRestRestMinMax = List(restRestRestRestSorted.head, restRestRestRestSorted.last)\n\
    \        val restRestRestRestRest = restRestRestRestSorted.slice(1, restRestRestRestSorted.length\
    \ - 1)\n        val restRestRestRestRestSorted = restRestRestRestRest.sorted\n\
    \        val restRestRestRestRestMinMax = List(restRestRestRestRestSorted.head,\
    \ restRestRestRestRestSorted.last)\n        val restRestRestRestRestRest = restRestRestRestRestSorted.slice(1,\
    \ restRestRestRestRestSorted.length - 1)\n        val restRestRestRestRestRestSorted\
    \ = restRestRestRestRestRest.sorted\n        val restRestRestRestRestRestMinMax\
    \ = List(restRestRestRestRestRestSorted.head, restRestRestRestRestRestSorted.last)\n\
    \        val restRestRestRestRestRestRest = restRestRestRestRestRestSorted.slice(1,\
    \ restRestRestRestRestRestSorted.length - 1)\n        val restRestRestRestRestRestRestSorted\
    \ =", "        val sorted = lst.sorted\n        val result = new ListBuffer[Long]\n\
    \        var i = 0\n        var j = sorted.length - 1\n        while (i <= j)\
    \ {\n            result += sorted(i)\n            if (i != j) result += sorted(j)\n\
    \            i += 1\n            j -= 1\n        }\n        result.toList", " \
    \       // Fill up this function body\n        // `lst` is a list of integers\n\
    \        // You have to return a list of integers in strange order\n        //\
    \ If you want to use helper functions, you can define them here\n        // and\
    \ call them from this function body\n        // You can use `ListBuffer` to create\
    \ a mutable list\n        // You can use `ListBuffer.toList` to convert it to\
    \ immutable list\n        // You can use `List.sortWith` to sort a list\n    \
    \    // You can use `List.reverse` to reverse a list\n        // You can use `List.min`\
    \ to get minimum value of a list\n        // You can use `List.max` to get maximum\
    \ value of a list\n        // You can use `List.filter` to filter a list\n   \
    \     // You can use `List.size` to get size of a list\n        // You can use\
    \ `List.slice` to get a sublist\n        // You can use `List.take` to get first\
    \ `n` elements of a list\n        // You can use `List.drop` to drop first `n`\
    \ elements of a list\n        // You can use `List.::` to prepend an element to\
    \ a list\n        // You can use `List.:::` to concatenate two lists\n       \
    \ // You can use `List.++` to concatenate two lists\n        // You can use `List.map`\
    \ to apply a function to each element of a list\n        // You can use `List.flatMap`\
    \ to apply a function to each element of a list\n        // and concatenate all\
    \ the results\n        // You can use `List.foldLeft` to fold a list from left\n\
    \        // You can use `List.foldRight` to fold a list from right\n        //\
    \ You can use `List.zip` to zip two lists\n        // You can use `List.zipWithIndex`\
    \ to zip a list with its index\n        // You can use `List.partition` to partition\
    \ a list\n        // You can use `List.forall` to check if all elements of a list\
    \ satisfy a condition\n        // You can use `List.exists` to check if any element\
    \ of a list satisfies a condition\n        // You can use `List.contains` to check\
    \ if a list contains an element", "        // Fill up this function body\n   \
    \     // 'lst' is a list of integers\n        // 'return' a list of integers in\
    \ strange order\n        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst1.length)\
    \ {\n            lst3 = lst3 :+ lst1(i)\n            if (i < lst2.length) {\n\
    \                lst3 = lst3 :+ lst2(i)\n            }\n            i += 1\n \
    \       }\n        lst3", "        var lst2 = lst.sortWith(_ < _)\n        var\
    \ lst3 = List[Long]()\n        while (lst2.size > 0) {\n            lst3 = lst3\
    \ :+ lst2.head\n            lst2 = lst2.tail\n            if (lst2.size > 0) {\n\
    \                lst3 = lst3 :+ lst2.last\n                lst2 = lst2.init\n\
    \            }\n        }\n        lst3", "        val sorted = lst.sorted\n \
    \       val min = sorted.head\n        val max = sorted.last\n        val mid\
    \ = sorted.slice(1, sorted.length - 1)\n        val mid1 = mid.slice(0, mid.length\
    \ / 2)\n        val mid2 = mid.slice(mid.length / 2, mid.length)\n        val\
    \ mid2rev = mid2.reverse\n        val result = List(min) ++ mid2rev ++ List(max)\
    \ ++ mid1\n        result", "        // Fill up this function body\n        //\
    \ 'lst' is a list of integers\n        // 'return' a list of integers in strange\
    \ order\n        var result = List[Long]()\n        var lst2 = lst.sorted\n  \
    \      var lst3 = lst2.reverse\n        var lst4 = lst3.tail\n        var lst5\
    \ = lst4.reverse\n        var lst6 = lst5.tail\n        var lst7 = lst6.reverse\n\
    \        var lst8 = lst7.tail\n        var lst9 = lst8.reverse\n        var lst10\
    \ = lst9.tail\n        var lst11 = lst10.reverse\n        var lst12 = lst11.tail\n\
    \        var lst13 = lst12.reverse\n        var lst14 = lst13.tail\n        var\
    \ lst15 = lst14.reverse\n        var lst16 = lst15.tail\n        var lst17 = lst16.reverse\n\
    \        var lst18 = lst17.tail\n        var lst19 = lst18.reverse\n        var\
    \ lst20 = lst19.tail\n        var lst21 = lst20.reverse\n        var lst22 = lst21.tail\n\
    \        var lst23 = lst22.reverse\n        var lst24 = lst23.tail\n        var\
    \ lst25 = lst24.reverse\n        var lst26 = lst25.tail\n        var lst27 = lst26.reverse\n\
    \        var lst28 = lst27.tail\n        var lst29 = lst28.reverse\n        var\
    \ lst30 = lst29.tail\n        var lst31 = lst30.reverse\n        var lst32 = lst31.tail\n\
    \        var lst33 = lst32.reverse\n        var lst34 = lst33.tail\n        var\
    \ lst35 = lst34.reverse\n        var lst36 = lst35.tail\n        var lst37 = lst36.reverse\n\
    \        var lst38 = lst37.tail\n        var lst39 = lst38.reverse\n        var\
    \ lst40 = lst39.tail\n", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        lst3", "        if (lst.isEmpty) return lst\n  \
    \      var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n        var\
    \ i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) lst3 +=\
    \ lst2(i)\n            else lst3 += lst2(lst2.length - 1 - i)\n            i +=\
    \ 1\n        }\n        return lst3.toList", "        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) lst3 = lst3 :+ lst2(i)\n            else lst3\
    \ = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            i += 1\n        }\n   \
    \     lst3", "        // Fill up this function body\n        // 'lst' is a list\
    \ of integers\n        // 'return' a list of integers in strange order\n     \
    \   var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n\
    \        while (i < lst2.length) {\n            if (i % 2 == 0) {\n          \
    \      lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3 = lst3\
    \ :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n\
    \        return lst3", "        var result = List[Long]()\n        var lst2 =\
    \ lst.sorted\n        var i = 0\n        while (i < lst2.length) {\n         \
    \   if (i % 2 == 0) {\n                result = result :+ lst2(i)\n          \
    \  } else {\n                result = result :+ lst2(lst2.length - 1 - i)\n  \
    \          }\n            i += 1\n        }\n        return result", "       \
    \ var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n        var\
    \ i = 0\n        var j = lst2.length - 1\n        while (i <= j) {\n         \
    \   lst3 = lst3 :+ lst2(i)\n            if (i != j) lst3 = lst3 :+ lst2(j)\n \
    \           i += 1\n            j -= 1\n        }\n        lst3", "        //\
    \ Fill up this function body\n        // 'lst' is a list of integers\n       \
    \ // 'return' a list of integers in strange order\n        var result = List[Long]()\n\
    \        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n        var i\
    \ = 0\n        while (i < lst.length) {\n            if (i % 2 == 0) {\n     \
    \           result = result :+ lst2(i)\n            } else {\n               \
    \ result = result :+ lst3(i)\n            }\n            i += 1\n        }\n \
    \       result", "        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n\
    \        while (lst2.length > 0) {\n            lst3 = lst3 :+ lst2.head\n   \
    \         lst2 = lst2.tail\n            if (lst2.length > 0) {\n             \
    \   lst3 = lst3 :+ lst2.last\n                lst2 = lst2.init\n            }\n\
    \        }\n        lst3", "        // Fill up this function body\n        //\
    \ `lst` is a list of integers\n        // You have to return a list of integers\
    \ in strange order\n        // If the input list is empty, return empty list\n\
    \        // If the input list has only one element, return the same list\n   \
    \     var result = List[Long]()\n        var lst2 = lst.sorted\n        var lst3\
    \ = lst2.reverse\n        var lst4 = lst2 ++ lst3\n        var lst5 = lst4.distinct\n\
    \        var lst6 = lst5.sorted\n        var lst7 = lst6.reverse\n        var\
    \ lst8 = lst6 ++ lst7\n        var lst9 = lst8.distinct\n        var lst10 = lst9.sorted\n\
    \        var lst11 = lst10.reverse\n        var lst12 = lst10 ++ lst11\n     \
    \   var lst13 = lst12.distinct\n        var lst14 = lst13.sorted\n        var\
    \ lst15 = lst14.reverse\n        var lst16 = lst14 ++ lst15\n        var lst17\
    \ = lst16.distinct\n        var lst18 = lst17.sorted\n        var lst19 = lst18.reverse\n\
    \        var lst20 = lst18 ++ lst19\n        var lst21 = lst20.distinct\n    \
    \    var lst22 = lst21.sorted\n        var lst23 = lst22.reverse\n        var\
    \ lst24 = lst22 ++ lst23\n        var lst25 = lst24.distinct\n        var lst26\
    \ = lst25.sorted\n        var lst27 = lst26.reverse\n        var lst28 = lst26\
    \ ++ lst27\n        var lst29 = lst28.distinct\n        var lst30 = lst29.sorted\n\
    \        var lst31 = lst30.reverse\n        var lst32 = lst30 ++ lst31\n     \
    \   var lst33 = lst32.distinct\n        var lst34 = lst33.sorted\n        var\
    \ lst35 = lst34.", "        // Fill up this function body\n        // You can\
    \ add another function as well, if required\n        var lst1 = lst.sorted\n \
    \       var lst2 = lst1.reverse\n        var lst3 = ListBuffer[Long]()\n     \
    \   var i = 0\n        while (i < lst1.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 += lst1(i)\n            } else {\n                lst3\
    \ += lst2(i)\n            }\n            i += 1\n        }\n        lst3.toList",
  "        if (lst.isEmpty) return lst\n        var lst2 = lst.sorted\n        var\
    \ lst3 = List[Long]()\n        var lst4 = List[Long]()\n        var lst5 = List[Long]()\n\
    \        var lst6 = List[Long]()\n        var lst7 = List[Long]()\n        var\
    \ lst8 = List[Long]()\n        var lst9 = List[Long]()\n        var lst10 = List[Long]()\n\
    \        var lst11 = List[Long]()\n        var lst12 = List[Long]()\n        var\
    \ lst13 = List[Long]()\n        var lst14 = List[Long]()\n        var lst15 =\
    \ List[Long]()\n        var lst16 = List[Long]()\n        var lst17 = List[Long]()\n\
    \        var lst18 = List[Long]()\n        var lst19 = List[Long]()\n        var\
    \ lst20 = List[Long]()\n        var lst21 = List[Long]()\n        var lst22 =\
    \ List[Long]()\n        var lst23 = List[Long]()\n        var lst24 = List[Long]()\n\
    \        var lst25 = List[Long]()\n        var lst26 = List[Long]()\n        var\
    \ lst27 = List[Long]()\n        var lst28 = List[Long]()\n        var lst29 =\
    \ List[Long]()\n        var lst30 = List[Long]()\n        var lst31 = List[Long]()\n\
    \        var lst32 = List[Long]()\n        var lst33 = List[Long]()\n        var\
    \ lst34 = List[Long]()\n        var lst35 = List[Long]()\n        var lst36 =\
    \ List[Long]()\n        var lst37 = List[Long]()\n        var lst38 = List[Long]()\n\
    \        var lst39 = List[Long]()\n        var lst40 = List[Long]()\n        var\
    \ lst41 = List[Long]()\n        var lst42 = List[Long]()\n        var lst43 =",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        lst.sortWith(_\
    \ < _)", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n   \
    \     var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i\
    \ += 1\n        }\n        return lst3", "        var lst2 = lst.sortWith(_ <\
    \ _)\n        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) lst3 = lst3 :+ lst2(i)\n            else lst3\
    \ = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            i += 1\n        }\n   \
    \     return lst3", "        // Fill up this function body\n        // 'lst' is\
    \ a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3\
    \ = List[Long]()\n        var i = 0\n        while (i < lst1.length) {\n     \
    \       if (i % 2 == 0) {\n                lst3 = lst3 :+ lst1(i)\n          \
    \  } else {\n                lst3 = lst3 :+ lst2(i)\n            }\n         \
    \   i += 1\n        }\n        return lst3", "        // Fill up this function\
    \ body\n        // `lst` is a list of integers\n        // You have to return\
    \ a list of integers in strange order\n        // You can use `sortWith` function\
    \ to sort the list\n        // You can use `reverse` function to reverse the list\n\
    \        // You can use `:::` function to concatenate two lists\n        // You\
    \ can use `List.empty` to create an empty list\n        // You can use `List(x)`\
    \ to create a list with one element `x`\n        // You can use `List(x, y)` to\
    \ create a list with two elements `x` and `y`\n        // You can use `List(x,\
    \ y, z)` to create a list with three elements `x`, `y` and `z`\n        // You\
    \ can use `List(x, y, z, w)` to create a list with four elements `x`, `y`, `z`\
    \ and `w`\n        // You can use `List(x, y, z, w, v)` to create a list with\
    \ five elements `x`, `y`, `z`, `w` and `v`\n        // You can use `List(x, y,\
    \ z, w, v, u)` to create a list with six elements `x`, `y`, `z`, `w`, `v` and\
    \ `u`\n        // You can use `List(x, y, z, w, v, u, t)` to create a list with\
    \ seven elements `x`, `y`, `z`, `w`, `v`, `u` and `t`\n        // You can use\
    \ `List(x, y, z, w, v, u, t, s)` to create a list with eight elements `x`, `y`,\
    \ `z`, `w`, `v`, `u`, `t` and `s`\n        // You can use `List(x, y, z, w, v,\
    \ u, t, s, r)` to create a list with nine elements `x`, `y`, `z`, `w`, `v`, `u`,\
    \ `t`, `s` and `r`\n        // You can use `List(x, y, z, w, v, u, t, s, r, q)`",
  "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        while (lst2.length\
    \ > 0) {\n            lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n\
    \            if (lst2.length > 0) {\n                lst3 = lst3 :+ lst2.last\n\
    \                lst2 = lst2.dropRight(1)\n            }\n        }\n        return\
    \ lst3", "        if (lst.length == 0) return lst\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        while (lst2.length > 0) {\n        \
    \    lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n            if (lst2.length\
    \ > 0) {\n                lst3 = lst3 :+ lst2.last\n                lst2 = lst2.init\n\
    \            }\n        }\n        return lst3", "        // Fill up this function\
    \ body\n        // `lst` is a list of integers\n        // You have to return\
    \ a list of integers in strange order\n        // strangeSortList((List[Long](1l.toLong,\
    \ 2l.toLong, 3l.toLong, 4l.toLong)))\n        // (List[Long](1l.toLong, 4l.toLong,\
    \ 2l.toLong, 3l.toLong))\n        // strangeSortList((List[Long](5l.toLong, 5l.toLong,\
    \ 5l.toLong, 5l.toLong)))\n        // (List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
    \ 5l.toLong))\n        // strangeSortList((List[Long]()))\n        // (List[Long]())\n\
    \        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3\
    \ = ListBuffer[Long]()\n        var i = 0\n        while (i < lst1.length) {\n\
    \            if (i % 2 == 0) {\n                lst3 += lst1(i)\n            }\
    \ else {\n                lst3 += lst2(i)\n            }\n            i += 1\n\
    \        }\n        lst3.toList", "        if (lst.length == 0) {\n          \
    \  return lst\n        }\n        val lstSorted = lst.sorted\n        val lstSortedReversed\
    \ = lstSorted.reverse\n        val lstSortedReversedTail = lstSortedReversed.tail\n\
    \        val lstSortedReversedTailTail = lstSortedReversedTail.tail\n        val\
    \ lstSortedReversedTailTailTail = lstSortedReversedTailTail.tail\n        val\
    \ lstSortedReversedTailTailTailTail = lstSortedReversedTailTailTail.tail\n   \
    \     val lstSortedReversedTailTailTailTailTail = lstSortedReversedTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTailTailTailTail.tail",
  "        var sortedList = lst.sorted\n        var result = List[Long]()\n      \
    \  var i = 0\n        while (i < sortedList.length) {\n            if (i % 2 ==\
    \ 0) {\n                result = result :+ sortedList(i)\n            } else {\n\
    \                result = result :+ sortedList(sortedList.length - 1 - i)\n  \
    \          }\n            i += 1\n        }\n        return result", "       \
    \ var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n\
    \        while (i < lst2.length) {\n            if (i % 2 == 0) {\n          \
    \      lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3 = lst3\
    \ :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n\
    \        return lst3", "        var result = List[Long]()\n        var lst2 =\
    \ lst.sorted\n        while (lst2.length > 0) {\n            result = result :+\
    \ lst2.head\n            lst2 = lst2.tail\n            if (lst2.length > 0) {\n\
    \                result = result :+ lst2.last\n                lst2 = lst2.init\n\
    \            }\n        }\n        result", "        var lst2 = lst.sorted\n \
    \       var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) lst3 = lst3 :+ lst2(i)\n            else lst3\
    \ = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            i += 1\n        }\n   \
    \     return lst3", "        if (lst.isEmpty) {\n            return List[Long]()\n\
    \        }\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n \
    \       var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        var lst2 = lst.sortWith(_\
    \ < _)\n        var lst3 = List[Long]()\n        var i = 0\n        while (i <\
    \ lst2.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+\
    \ lst2(i)\n            } else {\n                lst3 = lst3 :+ lst2(lst2.length\
    \ - i / 2 - 1)\n            }\n            i += 1\n        }\n        return lst3",
  "        if (lst.length == 0) return List[Long]()\n        var result = List[Long]()\n\
    \        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n        var i\
    \ = 0\n        while (i < lst.length) {\n            if (i % 2 == 0) {\n     \
    \           result = result :+ lst2.head\n                lst2 = lst2.tail\n \
    \           } else {\n                result = result :+ lst3.head\n         \
    \       lst3 = lst3.tail\n            }\n            i += 1\n        }\n     \
    \   return result", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        var lst1 = lst.sortWith(_\
    \ < _)\n        var lst2 = lst.sortWith(_ > _)\n        var lst3 = List[Long]()\n\
    \        for (i <- 0 until lst.length) {\n            if (i % 2 == 0) lst3 = lst3\
    \ :+ lst1(i)\n            else lst3 = lst3 :+ lst2(i)\n        }\n        lst3",
  "        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n     \
    \   var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            }\n         \
    \   i += 1\n        }\n        lst3", "        var lst2 = lst.sorted\n       \
    \ var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ // Fill in the code here.\n        // You can add more functions as needed.\n\
    \        // Do not modify the function signature.\n        def strangeSortListHelper(lst\
    \ : List[Long], acc : List[Long]) : List[Long] = {\n            if (lst.isEmpty)\
    \ acc\n            else {\n                val min = lst.min\n               \
    \ val max = lst.max\n                val lst1 = lst.filter(x => x != min && x\
    \ != max)\n                strangeSortListHelper(lst1, acc :+ min :+ max)\n  \
    \          }\n        }\n        strangeSortListHelper(lst, List[Long]())", " \
    \       // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst1 = lst.sorted\n\
    \        var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var\
    \ lst4 = List[Long]()\n        var lst5 = List[Long]()\n        var lst6 = List[Long]()\n\
    \        var lst7 = List[Long]()\n        var lst8 = List[Long]()\n        var\
    \ lst9 = List[Long]()\n        var lst10 = List[Long]()\n        var lst11 = List[Long]()\n\
    \        var lst12 = List[Long]()\n        var lst13 = List[Long]()\n        var\
    \ lst14 = List[Long]()\n        var lst15 = List[Long]()\n        var lst16 =\
    \ List[Long]()\n        var lst17 = List[Long]()\n        var lst18 = List[Long]()\n\
    \        var lst19 = List[Long]()\n        var lst20 = List[Long]()\n        var\
    \ lst21 = List[Long]()\n        var lst22 = List[Long]()\n        var lst23 =\
    \ List[Long]()\n        var lst24 = List[Long]()\n        var lst25 = List[Long]()\n\
    \        var lst26 = List[Long]()\n        var lst27 = List[Long]()\n        var\
    \ lst28 = List[Long]()\n        var lst29 = List[Long]()\n        var lst30 =\
    \ List[Long]()\n        var lst31 = List[Long]()\n        var lst32 = List[Long]()\n\
    \        var lst33 = List[Long]()\n        var lst34 = List[Long]()\n        var\
    \ lst35 = List[Long]()\n        var lst36 = List[Long]()\n        var lst37 =\
    \ List[Long]()\n        var lst38 = List[Long]()\n        var lst39 = List[Long]()\n\
    \        var lst40 = List[Long]", "        // Fill up this function body\n   \
    \     // 'lst' is a list of integers\n        // 'return' a list of integers in\
    \ strange order\n        var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst1.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst1(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(i)\n            }\n\
    \            i += 1\n        }\n        return lst3", "        // Fill in the\
    \ code here.\n        var lst1 = lst.sortWith(_ < _)\n        var lst2 = lst.sortWith(_\
    \ > _)\n        var lst3 = List[Long]()\n        var i = 0\n        while (i <\
    \ lst.length) {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+\
    \ lst1(0)\n                lst1 = lst1.drop(1)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(0)\n                lst2 = lst2.drop(1)\n      \
    \      }\n            i += 1\n        }\n        lst3", "        // Fill in the\
    \ code here.\n        lst.sortWith(_ < _)", "        val sorted = lst.sorted\n\
    \        val (min, max) = (sorted.head, sorted.last)\n        val (minLst, maxLst)\
    \ = (sorted.filter(_ == min), sorted.filter(_ == max))\n        val (minLstSize,\
    \ maxLstSize) = (minLst.size, maxLst.size)\n        val (minLstSizeHalf, maxLstSizeHalf)\
    \ = (minLstSize / 2, maxLstSize / 2)\n        val (minLstSizeHalfR, maxLstSizeHalfR)\
    \ = (minLstSize - minLstSizeHalf, maxLstSize - maxLstSizeHalf)\n        val (minLstHalf,\
    \ maxLstHalf) = (minLst.take(minLstSizeHalf), maxLst.take(maxLstSizeHalf))\n \
    \       val (minLstHalfR, maxLstHalfR) = (minLst.takeRight(minLstSizeHalfR), maxLst.takeRight(maxLstSizeHalfR))\n\
    \        val (minLstHalfReverse, maxLstHalfReverse) = (minLstHalfR.reverse, maxLstHalfR.reverse)\n\
    \        val (minLstHalfReverseSize, maxLstHalfReverseSize) = (minLstHalfReverse.size,\
    \ maxLstHalfReverse.size)\n        val (minLstHalfReverseSizeHalf, maxLstHalfReverseSizeHalf)\
    \ = (minLstHalfReverseSize / 2, maxLstHalfReverseSize / 2)\n        val (minLstHalfReverseSizeHalfR,\
    \ maxLstHalfReverseSizeHalfR) = (minLstHalfReverseSize - minLstHalfReverseSizeHalf,\
    \ maxLstHalfReverseSize - maxLstHalfReverseSizeHalf)\n        val (minLstHalfReverseHalf,\
    \ maxLstHalfReverseHalf) = (minLstHalfReverse.take(minLstHalfReverseSizeHalf),\
    \ maxLstHalfReverse.take(maxLstHalfReverseSizeHalf))\n        val (minL", "  \
    \      val sorted = lst.sorted\n        val min = sorted.head\n        val max\
    \ = sorted.last\n        val minIndex = lst.indexOf(min)\n        val maxIndex\
    \ = lst.indexOf(max)\n        val minIndex2 = lst.indexOf(min, minIndex + 1)\n\
    \        val maxIndex2 = lst.indexOf(max, maxIndex + 1)\n        val minIndex3\
    \ = lst.indexOf(min, minIndex2 + 1)\n        val maxIndex3 = lst.indexOf(max,\
    \ maxIndex2 + 1)\n        val minIndex4 = lst.indexOf(min, minIndex3 + 1)\n  \
    \      val maxIndex4 = lst.indexOf(max, maxIndex3 + 1)\n        List(lst(minIndex),\
    \ lst(maxIndex), lst(minIndex2), lst(maxIndex2), lst(minIndex3), lst(maxIndex3),\
    \ lst(minIndex4), lst(maxIndex4))", "        var lst2 = lst.sorted\n        var\
    \ lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n\
    \            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n     \
    \       } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n \
    \           }\n            i += 1\n        }\n        lst3", "        var result\
    \ = List[Long]()\n        var lst2 = lst.sortWith(_ < _)\n        var lst3 = lst.sortWith(_\
    \ > _)\n        for (i <- 0 until lst.length) {\n            if (i % 2 == 0) {\n\
    \                result = result :+ lst2.head\n                lst2 = lst2.tail\n\
    \            } else {\n                result = result :+ lst3.head\n        \
    \        lst3 = lst3.tail\n            }\n        }\n        result", "      \
    \  // Fill up this function body\n        // 'lst' is a list of integers\n   \
    \     // 'return' a list of integers in strange order\n        lst.sortWith(_\
    \ < _)", "        var list = lst.sorted\n        var res = List[Long]()\n    \
    \    var i = 0\n        while (i < list.length) {\n            if (i % 2 == 0)\
    \ res = res :+ list(i)\n            else res = res :+ list(list.length - i / 2\
    \ - 1)\n            i += 1\n        }\n        res", "        if (lst.length ==\
    \ 0) return lst\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        var result = List[Long]()\n\
    \        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n        var lst4\
    \ = lst2 ++ lst3\n        var lst5 = lst4.distinct\n        var lst6 = lst5.sorted\n\
    \        var lst7 = lst6.reverse\n        var lst8 = lst7.distinct\n        var\
    \ lst9 = lst8.sorted\n        var lst10 = lst9.reverse\n        var lst11 = lst10.distinct\n\
    \        var lst12 = lst11.sorted\n        var lst13 = lst12.reverse\n       \
    \ var lst14 = lst13.distinct\n        var lst15 = lst14.sorted\n        var lst16\
    \ = lst15.reverse\n        var lst17 = lst16.distinct\n        var lst18 = lst17.sorted\n\
    \        var lst19 = lst18.reverse\n        var lst20 = lst19.distinct\n     \
    \   var lst21 = lst20.sorted\n        var lst22 = lst21.reverse\n        var lst23\
    \ = lst22.distinct\n        var lst24 = lst23.sorted\n        var lst25 = lst24.reverse\n\
    \        var lst26 = lst25.distinct\n        var lst27 = lst26.sorted\n      \
    \  var lst28 = lst27.reverse\n        var lst29 = lst28.distinct\n        var\
    \ lst30 = lst29.sorted\n        var lst31 = lst30.reverse\n        var lst32 =\
    \ lst31.distinct\n        var lst33 = lst32.sorted\n        var lst34 = lst33.reverse\n\
    \        var lst35 = lst34.distinct\n        var lst36 = lst35.sorted\n      \
    \  var lst37 = lst36.reverse\n        var lst38 = lst37.distinct\n        var\
    \ lst39 = lst38.sorted\n        var lst40 = lst39.reverse\n        var lst41 =\
    \ l", "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        lst3", "        var result\
    \ : List[Long] = List[Long]()\n        var min : Long = Long.MaxValue\n      \
    \  var max : Long = Long.MinValue\n        var minIndex : Int = 0\n        var\
    \ maxIndex : Int = 0\n        for (i <- 0 until lst.length) {\n            if\
    \ (lst(i) < min) {\n                min = lst(i)\n                minIndex = i\n\
    \            }\n            if (lst(i) > max) {\n                max = lst(i)\n\
    \                maxIndex = i\n            }\n        }\n        result = result\
    \ :+ min\n        if (minIndex < maxIndex) {\n            result = result :+ max\n\
    \            for (i <- 0 until lst.length) {\n                if (i != minIndex\
    \ && i != maxIndex) {\n                    result = result :+ lst(i)\n       \
    \         }\n            }\n        } else {\n            for (i <- 0 until lst.length)\
    \ {\n                if (i != minIndex) {\n                    result = result\
    \ :+ lst(i)\n                }\n            }\n            result = result :+\
    \ max\n        }\n        return result", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        lst3", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n          \
    \  i += 1\n        }\n        lst3", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        var lst1 = lst.sortWith(_<_)\n        var lst2 = lst.sortWith(_>_)\n\
    \        var lst3 = List[Long]()\n        for (i <- 0 until lst.length) {\n  \
    \          if (i % 2 == 0) {\n                lst3 = lst3 :+ lst1(i)\n       \
    \     } else {\n                lst3 = lst3 :+ lst2(i)\n            }\n      \
    \  }\n        lst3", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'lst.length' is the length of the list\n \
    \       // 'lst(i)' is the ith element of the list\n        // Return the list\
    \ in strange order\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n       \
    \         lst3 = lst3 :+ lst2(lst2.length - i - 1)\n            }\n          \
    \  i += 1\n        }\n        return lst3", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'lst' has to be returned\
    \ in strange order\n        // You can add any auxiliary functions you want\n\
    \        // You can create any new data structures you want\n        // Example:\n\
    \        // >>> strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)))\n\
    \        // (List[Long](1l.toLong, 4l.toLong, 2l.toLong, 3l.toLong))\n       \
    \ // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong)))\n\
    \        // (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))\n       \
    \ // >>> strangeSortList((List[Long]()))\n        // (List[Long]())\n        def\
    \ strangeSortListHelper(lst : List[Long], acc : List[Long]) : List[Long] = {\n\
    \            if (lst.length == 0) acc\n            else {\n                val\
    \ min = lst.min\n                val max = lst.max\n                val minIndex\
    \ = lst.indexOf(min)\n                val maxIndex = lst.indexOf(max)\n      \
    \          val newLst = lst.patch(minIndex, Nil, 1).patch(maxIndex - 1, Nil, 1)\n\
    \                strangeSortListHelper(newLst, acc :+ min :+ max)\n          \
    \  }\n        }\n        strangeSortListHelper(lst, List())", "        var result\
    \ = List[Long]()\n        var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n\
    \        var i = 0\n        while (i < lst.length) {\n            if (i % 2 ==\
    \ 0) {\n                result = result :+ lst2(i / 2)\n            } else {\n\
    \                result = result :+ lst3(i / 2)\n            }\n            i\
    \ += 1\n        }\n        return result", "        val sorted = lst.sorted\n\
    \        val min = sorted.head\n        val max = sorted.last\n        val mid\
    \ = sorted.drop(1).dropRight(1)\n        val mid1 = mid.grouped(2).map(x => x.reverse).flatten.toList\n\
    \        val mid2 = mid.grouped(2).map(x => x.head).toList\n        val mid3 =\
    \ mid1 ++ mid2\n        val mid4 = if (mid3.length % 2 == 0) mid3 else mid3.dropRight(1)\n\
    \        val mid5 = mid4.grouped(2).map(x => x.reverse).flatten.toList\n     \
    \   val mid6 = mid4.grouped(2).map(x => x.head).toList\n        val mid7 = mid5\
    \ ++ mid6\n        val mid8 = if (mid7.length % 2 == 0) mid7 else mid7.dropRight(1)\n\
    \        val mid9 = mid8.grouped(2).map(x => x.reverse).flatten.toList\n     \
    \   val mid10 = mid8.grouped(2).map(x => x.head).toList\n        val mid11 = mid9\
    \ ++ mid10\n        val mid12 = if (mid11.length % 2 == 0) mid11 else mid11.dropRight(1)\n\
    \        val mid13 = mid12.grouped(2).map(x => x.reverse).flatten.toList\n   \
    \     val mid14 = mid12.grouped(2).map(x => x.head).toList\n        val mid15\
    \ = mid13 ++ mid14\n        val mid16 = if (mid15.length % 2 == 0) mid15 else\
    \ mid15.dropRight(1)\n        val mid17 = mid16.grouped(2).map(x => x.reverse).flatten.toList\n\
    \        val mid18 = mid16.grouped(2).map(x => x.head).toList\n        val mid19\
    \ = mid17 ++ mid18\n        val mid20 = if (mid19.length % 2 == 0) mid19 else\
    \ mid19.dropRight(1)\n        val mid21 = mid20.grouped(2).map(x => x.reverse).",
  "        var result = List[Long]()\n        var lst2 = lst.sorted\n        var min\
    \ = lst2.head\n        var max = lst2.last\n        var minIndex = lst.indexOf(min)\n\
    \        var maxIndex = lst.indexOf(max)\n        var minIndex2 = lst2.indexOf(min)\n\
    \        var maxIndex2 = lst2.indexOf(max)\n        var minIndex3 = lst2.indexOf(min)\n\
    \        var maxIndex3 = lst2.indexOf(max)\n        while (lst2.length > 0) {\n\
    \            if (minIndex3 == 0) {\n                result = result :+ lst2(minIndex3)\n\
    \                lst2 = lst2.slice(1, lst2.length)\n                if (lst2.length\
    \ > 0) {\n                    min = lst2.head\n                    max = lst2.last\n\
    \                    minIndex = lst.indexOf(min)\n                    maxIndex\
    \ = lst.indexOf(max)\n                    minIndex2 = lst2.indexOf(min)\n    \
    \                maxIndex2 = lst2.indexOf(max)\n                    minIndex3\
    \ = lst2.indexOf(min)\n                    maxIndex3 = lst2.indexOf(max)\n   \
    \             }\n            } else if (maxIndex3 == 0) {\n                result\
    \ = result :+ lst2(maxIndex3)\n                lst2 = lst2.slice(1, lst2.length)\n\
    \                if (lst2.length > 0) {\n                    min = lst2.head\n\
    \                    max = lst2.last\n                    minIndex = lst.indexOf(min)\n\
    \                    maxIndex = lst.indexOf(max)\n                    minIndex2\
    \ = lst2.indexOf(min)\n                    maxIndex2 = lst2.indexOf(max)\n   \
    \                 minIndex3 = lst2.indexOf(min)\n                    maxIndex3\
    \ = lst2.indexOf(max)\n                }\n            } else if (minIndex2 ==\
    \ 0) {\n                result = result :+ lst2(minIndex2)\n                l",
  "        var result : List[Long] = List[Long]()\n        var lstCopy : List[Long]\
    \ = lst\n        var min : Long = lstCopy.min\n        var max : Long = lstCopy.max\n\
    \        var minIndex : Int = lstCopy.indexOf(min)\n        var maxIndex : Int\
    \ = lstCopy.indexOf(max)\n        var minIndexes : List[Int] = List[Int]()\n \
    \       var maxIndexes : List[Int] = List[Int]()\n        var i : Int = 0\n  \
    \      while (i < lstCopy.length) {\n            if (lstCopy(i) == min) {\n  \
    \              minIndexes = minIndexes :+ i\n            }\n            if (lstCopy(i)\
    \ == max) {\n                maxIndexes = maxIndexes :+ i\n            }\n   \
    \         i = i + 1\n        }\n        var minIndexesCopy : List[Int] = minIndexes\n\
    \        var maxIndexesCopy : List[Int] = maxIndexes\n        var minIndexesCopy2\
    \ : List[Int] = minIndexes\n        var maxIndexesCopy2 : List[Int] = maxIndexes\n\
    \        var minIndexesCopy3 : List[Int] = minIndexes\n        var maxIndexesCopy3\
    \ : List[Int] = maxIndexes\n        var minIndexesCopy4 : List[Int] = minIndexes\n\
    \        var maxIndexesCopy4 : List[Int] = maxIndexes\n        var minIndexesCopy5\
    \ : List[Int] = minIndexes\n        var maxIndexesCopy5 : List[Int] = maxIndexes\n\
    \        var minIndexesCopy6 : List[Int] = minIndexes\n        var maxIndexesCopy6\
    \ : List[Int] = maxIndexes\n        var minIndexesCopy7 : List[Int] = minIndexes\n\
    \        var maxIndexesCopy7 : List[Int] = maxIndexes\n        var minIndexesCopy8\
    \ : List[Int] = minIndexes\n        var maxIndexesCopy8 : List[Int] = maxIndexes\n\
    \        var minIndexesCopy9 : List[Int] = minIndexes\n        var maxIndexesCopy9\
    \ : List[Int] = max", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n      \
    \  var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0) {\n\
    \                lst3 += lst2(i)\n            } else {\n                lst3 +=\
    \ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n  \
    \      return lst3.toList", "        var lst2 = lst.sorted\n        var lst3 =\
    \ List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n       \
    \     if (i % 2 == 0) lst3 = lst3 :+ lst2(i)\n            else lst3 = lst3 :+\
    \ lst2(lst2.length - i - 1)\n            i += 1\n        }\n        lst3", " \
    \       var lst2 = lst.sorted\n        var lst3 = lst2.reverse\n        var lst4\
    \ = List[Long]()\n        var lst5 = List[Long]()\n        var lst6 = List[Long]()\n\
    \        var lst7 = List[Long]()\n        var lst8 = List[Long]()\n        var\
    \ lst9 = List[Long]()\n        var lst10 = List[Long]()\n        var lst11 = List[Long]()\n\
    \        var lst12 = List[Long]()\n        var lst13 = List[Long]()\n        var\
    \ lst14 = List[Long]()\n        var lst15 = List[Long]()\n        var lst16 =\
    \ List[Long]()\n        var lst17 = List[Long]()\n        var lst18 = List[Long]()\n\
    \        var lst19 = List[Long]()\n        var lst20 = List[Long]()\n        var\
    \ lst21 = List[Long]()\n        var lst22 = List[Long]()\n        var lst23 =\
    \ List[Long]()\n        var lst24 = List[Long]()\n        var lst25 = List[Long]()\n\
    \        var lst26 = List[Long]()\n        var lst27 = List[Long]()\n        var\
    \ lst28 = List[Long]()\n        var lst29 = List[Long]()\n        var lst30 =\
    \ List[Long]()\n        var lst31 = List[Long]()\n        var lst32 = List[Long]()\n\
    \        var lst33 = List[Long]()\n        var lst34 = List[Long]()\n        var\
    \ lst35 = List[Long]()\n        var lst36 = List[Long]()\n        var lst37 =\
    \ List[Long]()\n        var lst38 = List[Long]()\n        var lst39 = List[Long]()\n\
    \        var lst40 = List[Long]()\n        var lst41 = List[Long]()\n        var\
    \ lst42 = List[Long]()\n        var lst43 = List[Long]()\n        var lst44 =\
    \ List", "        // Fill up this function body\n        // `lst` is a list of\
    \ integers\n        // You have to return a list of integers in strange order\n\
    \        // You can write auxiliary functions\n        // You can use standard\
    \ library functions\n        lst", "        var lst2 = lst.sorted\n        var\
    \ lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length) {\n\
    \            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n     \
    \       } else {\n                lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ if (lst.isEmpty) return lst\n        var lst2 = lst.sorted\n        var lst3\
    \ = ListBuffer[Long]()\n        var i = 0\n        while (i < lst2.length) {\n\
    \            if (i % 2 == 0) lst3 += lst2(i)\n            else lst3 += lst2(lst2.length\
    \ - 1 - i)\n            i += 1\n        }\n        return lst3.toList", "    \
    \    // Fill up this function body\n        // `lst` is a list of integers\n \
    \       // You need to return a list of integers in strange order\n        //\
    \ You can change the signature of this function\n        // if you want to, but\
    \ you need to take a list as input\n        // and return a list as output.\n\
    \        // Do not add a \"main\" function\n        var lst1 = lst.sortWith(_\
    \ < _)\n        var lst2 = lst.sortWith(_ > _)\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst1(0)\n                lst1 = lst1.drop(1)\n\
    \            } else {\n                lst3 = lst3 :+ lst2(0)\n              \
    \  lst2 = lst2.drop(1)\n            }\n            i += 1\n        }\n       \
    \ lst3", "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n   \
    \     var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - i / 2 - 1)\n            }\n         \
    \   i += 1\n        }\n        return lst3", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var lst2 = lst.sorted\n        var lst3 =\
    \ new ListBuffer[Long]\n        var i = 0\n        while (i < lst2.length) {\n\
    \            if (i % 2 == 0) {\n                lst3 += lst2(i)\n            }\
    \ else {\n                lst3 += lst2(lst2.length - 1 - i)\n            }\n \
    \           i += 1\n        }\n        lst3.toList", "        def strangeSortListHelper(lst\
    \ : List[Long], acc : List[Long]) : List[Long] = {\n            if (lst.isEmpty)\
    \ acc\n            else {\n                val min = lst.min\n               \
    \ val max = lst.max\n                val minIndex = lst.indexOf(min)\n       \
    \         val maxIndex = lst.indexOf(max)\n                val newLst = lst.filter(x\
    \ => x != min && x != max)\n                if (minIndex < maxIndex) strangeSortListHelper(newLst,\
    \ acc :+ min :+ max)\n                else strangeSortListHelper(newLst, acc :+\
    \ max :+ min)\n            }\n        }\n        strangeSortListHelper(lst, List[Long]())",
  "        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        while (lst2.length\
    \ > 0) {\n            lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n\
    \            if (lst2.length > 0) {\n                lst3 = lst3 :+ lst2.last\n\
    \                lst2 = lst2.dropRight(1)\n            }\n        }\n        return\
    \ lst3"]
stop_tokens:
- "\n    }\n"
