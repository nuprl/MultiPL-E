name: HumanEval_70_strange_sort_list
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given list of integers, return list in strange order.\n    // Strange sorting,\
  \ is when you start with the minimum value,\n    // then maximum of the remaining\
  \ integers, then minimum and so on.\n    // Examples:\n    // >>> strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong)))\n    // (List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))\n    // >>> strangeSortList((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong)))\n    // (List[Long](5l.toLong, 5l.toLong, 5l.toLong, 5l.toLong))\n\
  \    // >>> strangeSortList((List[Long]()))\n    // (List[Long]())\n    def strangeSortList(lst\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(strangeSortList((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong, 4l.toLong, 2l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong))).equals((List[Long](5l.toLong, 9l.toLong, 6l.toLong, 8l.toLong,\
  \ 7l.toLong))));\n    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
  \ 4l.toLong, 5l.toLong))).equals((List[Long](1l.toLong, 5l.toLong, 2l.toLong, 4l.toLong,\
  \ 3l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong, 6l.toLong, 7l.toLong,\
  \ 8l.toLong, 9l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 9l.toLong, 5l.toLong,\
  \ 8l.toLong, 6l.toLong, 7l.toLong))));\n    assert(strangeSortList((List[Long](5l.toLong,\
  \ 5l.toLong, 5l.toLong, 5l.toLong))).equals((List[Long](5l.toLong, 5l.toLong, 5l.toLong,\
  \ 5l.toLong))));\n    assert(strangeSortList((List[Long]())).equals((List[Long]())));\n\
  \    assert(strangeSortList((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 8l.toLong,\
  \ 2l.toLong, 7l.toLong, 3l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))));\n    assert(strangeSortList((List[Long](0l.toLong,\
  \ 2l.toLong, 2l.toLong, 2l.toLong, 5l.toLong, 5l.toLong, -5l.toLong, -5l.toLong))).equals((List[Long](-5l.toLong,\
  \ 5l.toLong, -5l.toLong, 5l.toLong, 0l.toLong, 2l.toLong, 2l.toLong, 2l.toLong))));\n\
  \    assert(strangeSortList((List[Long](111111l.toLong))).equals((List[Long](111111l.toLong))));\n\
  \    }\n\n}\n"
completions: ["        // Fill up this function body\n        // 'lst' is a list of\
    \ integers\n        // 'return' a list of integers in strange order\n        var\
    \ result = List[Long]()\n        var lst2 = lst.sortWith(_ < _)\n        var lst3\
    \ = lst.sortWith(_ > _)\n        var i = 0\n        while (i < lst.length) {\n\
    \            if (i % 2 == 0) {\n                result = result :+ lst2(0)\n \
    \               lst2 = lst2.drop(1)\n            } else {\n                result\
    \ = result :+ lst3(0)\n                lst3 = lst3.drop(1)\n            }\n  \
    \          i += 1\n        }\n        result", "        // Fill up this function\
    \ body\n        // 'lst' is a list of integers\n        // 'return' a list of\
    \ integers in strange order\n        var sortedList = lst.sorted\n        var\
    \ result = List[Long]()\n        var i = 0\n        while (i < sortedList.length)\
    \ {\n            if (i % 2 == 0) {\n                result = result :+ sortedList(i)\n\
    \            } else {\n                result = result :+ sortedList(sortedList.length\
    \ - 1 - i)\n            }\n            i += 1\n        }\n        result", " \
    \       var lst1 = lst.sorted\n        var lst2 = lst1.reverse\n        var lst3\
    \ = List[Long]()\n        var i = 0\n        while (i < lst1.length) {\n     \
    \       lst3 = lst3 :+ lst1(i)\n            if (i < lst2.length) lst3 = lst3 :+\
    \ lst2(i)\n            i += 1\n        }\n        lst3", "        var result :\
    \ List[Long] = List[Long]()\n        var lst2 : List[Long] = lst\n        while\
    \ (lst2.length > 0) {\n            result = result :+ lst2.min\n            lst2\
    \ = lst2.filter(x => x != lst2.min)\n            if (lst2.length > 0) {\n    \
    \            result = result :+ lst2.max\n                lst2 = lst2.filter(x\
    \ => x != lst2.max)\n            }\n        }\n        return result", "     \
    \   // Fill up this function body\n        // 'lst' is a list of integers\n  \
    \      // 'return' a list of integers in strange order\n        var lst1 = lst.sorted\n\
    \        var lst2 = lst1.reverse\n        var lst3 = List[Long]()\n        var\
    \ i = 0\n        while (i < lst1.length) {\n            if (i % 2 == 0) {\n  \
    \              lst3 = lst3 :+ lst1(i)\n            } else {\n                lst3\
    \ = lst3 :+ lst2(i)\n            }\n            i += 1\n        }\n        return\
    \ lst3", "        if (lst.isEmpty) return lst\n        var lst2 = lst.sorted\n\
    \        var lst3 = ListBuffer[Long]()\n        var i = 0\n        while (i <\
    \ lst2.length) {\n            if (i % 2 == 0) {\n                lst3 += lst2(i)\n\
    \            } else {\n                lst3 += lst2(lst2.length - 1 - i)\n   \
    \         }\n            i += 1\n        }\n        lst3.toList", "        val\
    \ sorted = lst.sorted\n        val result = new ListBuffer[Long]\n        var\
    \ i = 0\n        var j = sorted.length - 1\n        while (i <= j) {\n       \
    \     result += sorted(i)\n            if (i != j) result += sorted(j)\n     \
    \       i += 1\n            j -= 1\n        }\n        result.toList", "     \
    \   var lst2 = lst.sorted\n        var lst3 = List[Long]()\n        var i = 0\n\
    \        while (i < lst2.length) {\n            if (i % 2 == 0) {\n          \
    \      lst3 = lst3 :+ lst2(i)\n            } else {\n                lst3 = lst3\
    \ :+ lst2(lst2.length - 1 - i)\n            }\n            i += 1\n        }\n\
    \        return lst3", "        // Fill up this function body\n        // 'lst'\
    \ is a list of integers\n        // 'return' a list of integers in strange order\n\
    \        var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n   \
    \     var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i\
    \ += 1\n        }\n        lst3", "        if (lst.length == 0) return lst\n \
    \       var lst2 = lst.sortWith(_ < _)\n        var lst3 = List[Long]()\n    \
    \    var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i\
    \ += 1\n        }\n        return lst3", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        lst", "        val lstSorted = lst.sorted\n      \
    \  val lstSortedReversed = lstSorted.reverse\n        val lstSortedReversedTail\
    \ = lstSortedReversed.tail\n        val lstSortedReversedTailTail = lstSortedReversedTail.tail\n\
    \        val lstSortedReversedTailTailTail = lstSortedReversedTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTail = lstSortedReversedTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTail = lstSortedReversedTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTailTailTailTailTailTailTail = lstSortedReversedTailTailTailTailTailTailTailTailTailTail.tail\n\
    \        val lstSortedReversedTailTailTailTailTail", "        if (lst.length ==\
    \ 0) return lst\n        var lst2 = lst.sorted\n        var lst3 = ListBuffer[Long]()\n\
    \        var i = 0\n        while (i < lst2.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 += lst2(i)\n            } else {\n              \
    \  lst3 += lst2(lst2.length - 1 - i)\n            }\n            i += 1\n    \
    \    }\n        return lst3.toList", "        val sorted = lst.sorted\n      \
    \  val n = sorted.length\n        val result = new ArrayBuffer[Long]\n       \
    \ var i = 0\n        while (i < n) {\n            if (i % 2 == 0) result += sorted(i)\n\
    \            else result += sorted(n - i / 2 - 1)\n            i += 1\n      \
    \  }\n        result.toList", "        // Fill up this function body\n       \
    \ // 'lst' is a list of integers\n        // 'return' a list of integers in strange\
    \ order\n        var lst2 = lst.sorted\n        var lst3 = List[Long]()\n    \
    \    var i = 0\n        while (i < lst2.length) {\n            if (i % 2 == 0)\
    \ {\n                lst3 = lst3 :+ lst2(i)\n            } else {\n          \
    \      lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n            }\n            i\
    \ += 1\n        }\n        return lst3", "        // Fill up this function body\n\
    \        // 'lst' is a list of integers\n        // 'return' a list of integers\
    \ in strange order\n        if (lst.isEmpty) return lst\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        return lst3", "       \
    \ var sorted = lst.sorted\n        var result = List[Long]()\n        var i =\
    \ 0\n        while (i < sorted.length) {\n            if (i % 2 == 0) {\n    \
    \            result = result :+ sorted(i)\n            } else {\n            \
    \    result = result :+ sorted(sorted.length - 1 - i)\n            }\n       \
    \     i += 1\n        }\n        return result", "        var lst1 = lst.sortWith(_\
    \ < _)\n        var lst2 = lst.sortWith(_ > _)\n        var lst3 = List[Long]()\n\
    \        var i = 0\n        while (i < lst.length) {\n            if (i % 2 ==\
    \ 0) {\n                lst3 = lst3 :+ lst1.head\n                lst1 = lst1.tail\n\
    \            } else {\n                lst3 = lst3 :+ lst2.head\n            \
    \    lst2 = lst2.tail\n            }\n            i += 1\n        }\n        lst3",
  "        // Fill up this function body\n        // 'lst' is a list of integers\n\
    \        // 'return' a list of integers in strange order\n        var lst2 = lst.sorted\n\
    \        var lst3 = List[Long]()\n        var i = 0\n        while (i < lst2.length)\
    \ {\n            if (i % 2 == 0) {\n                lst3 = lst3 :+ lst2(i)\n \
    \           } else {\n                lst3 = lst3 :+ lst2(lst2.length - 1 - i)\n\
    \            }\n            i += 1\n        }\n        lst3", "        var lst2\
    \ = lst.sorted\n        var lst3 = List[Long]()\n        while (lst2.length >\
    \ 0) {\n            lst3 = lst3 :+ lst2.head\n            lst2 = lst2.tail\n \
    \           if (lst2.length > 0) {\n                lst3 = lst3 :+ lst2.last\n\
    \                lst2 = lst2.dropRight(1)\n            }\n        }\n        return\
    \ lst3"]
stop_tokens:
- "\n    }\n"
