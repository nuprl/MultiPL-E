language: scala
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val numsSorted = nums.sorted\n        val numsSortedStr = numsSorted.map(x\
    \ => x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n\
    \            case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numsSortedStr.mkString(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp91513nj9.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp91513nj9.scala:21)\n\
    \tat Problem$.main(tmp91513nj9.scala:38)\n\tat Problem.main(tmp91513nj9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(numeralMap(_)).sorted\n\
    \        nums.map(numeralMap.find(_._2 == _).get._1).mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2a0z1y62.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        nums.map(numeralMap.find(_._2 == _).get._1).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value _2 is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659798104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(s => s match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmprvrtjlul.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmprvrtjlul.scala:21)\n\
    \tat Problem$.main(tmprvrtjlul.scala:25)\n\tat Problem.main(tmprvrtjlul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(numeralMap(_)).sorted\n\
    \        nums.map(num => numeralMap.find(_._2 == num).get._1).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmpq9m24v0w.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq9m24v0w.scala:11)\n\
    \tat Problem$.main(tmpq9m24v0w.scala:15)\n\tat Problem.main(tmpq9m24v0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(numeralToInt).sorted\n        nums.map(intToNumeral).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshfhpjkl.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt).sorted\n\e[31m\e[31m   |\e[0m              \
    \                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                            Not found: numeralToInt\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpshfhpjkl.scala:10:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt).sorted\n\e[31m\e[31m   |\e[0m              \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                              No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val sortedString = sorted.map(x =>\
    \ x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n \
    \           case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        sortedString.mkString(\" \")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp8gn7inks.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp8gn7inks.scala:21)\n\
    \tat Problem$.main(tmp8gn7inks.scala:38)\n\tat Problem.main(tmp8gn7inks.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val res = sorted.map(x => x match {\n\
    \            case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        })\n        res.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpzi6wpdtn.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpzi6wpdtn.scala:21)\n\
    \tat Problem$.main(tmpzi6wpdtn.scala:38)\n\tat Problem.main(tmpzi6wpdtn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  var nums = numbers.split(\" \")\n        var nums2 = nums.map(x => x match\
    \ {\n            case \"zero\" => 0\n            case \"one\" => 1\n         \
    \   case \"two\" => 2\n            case \"three\" => 3\n            case \"four\"\
    \ => 4\n            case \"five\" => 5\n            case \"six\" => 6\n      \
    \      case \"seven\" => 7\n            case \"eight\" => 8\n            case\
    \ \"nine\" => 9\n        })\n        var nums3 = nums2.sorted\n        var nums4\
    \ = nums3.map(x => x match {\n            case 0 => \"zero\"\n            case\
    \ 1 => \"one\"\n            case 2 => \"two\"\n            case 3 => \"three\"\
    \n            case 4 => \"four\"\n            case 5 => \"five\"\n           \
    \ case 6 => \"six\"\n            case 7 => \"seven\"\n            case 8 => \"\
    eight\"\n            case 9 => \"nine\"\n        })\n        var result = nums4.mkString(\"\
    \ \")\n        return result\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp__rvd5e0.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp__rvd5e0.scala:22)\n\
    \tat Problem$.main(tmp__rvd5e0.scala:40)\n\tat Problem.main(tmp__rvd5e0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(_.toInt).sorted\n        nums.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpex7h6ulo.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpex7h6ulo.scala:10)\n\
    \tat Problem$.main(tmpex7h6ulo.scala:14)\n\tat Problem.main(tmpex7h6ulo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralToInt = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\"\
    \ -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\"\
    \ -> 8, \"nine\" -> 9)\n        val intToNumeral = Map(0 -> \"zero\", 1 -> \"\
    one\", 2 -> \"two\", 3 -> \"three\", 4 -> \"four\", 5 -> \"five\", 6 -> \"six\"\
    , 7 -> \"seven\", 8 -> \"eight\", 9 -> \"nine\")\n        val numbersList = numbers.split(\"\
    \ \").toList\n        val intList = numbersList.map(numeralToInt(_))\n       \
    \ val sortedIntList = intList.sorted\n        val sortedNumeralList = sortedIntList.map(intToNumeral(_))\n\
    \        sortedNumeralList.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmp1qig7bps.scala:13)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.sortNumbers(tmp1qig7bps.scala:13)\n\
    \tat Problem$.main(tmp1qig7bps.scala:19)\n\tat Problem.main(tmp1qig7bps.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  var nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        var sorted = nums.sorted\n        var result = \"\"\n        for (i <-\
    \ 0 until sorted.length) {\n            result += sorted(i) match {\n        \
    \        case 0 => \"zero\"\n                case 1 => \"one\"\n             \
    \   case 2 => \"two\"\n                case 3 => \"three\"\n                case\
    \ 4 => \"four\"\n                case 5 => \"five\"\n                case 6 =>\
    \ \"six\"\n                case 7 => \"seven\"\n                case 8 => \"eight\"\
    \n                case 9 => \"nine\"\n            }\n            if (i != sorted.length\
    \ - 1) result += \" \"\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqmag0wq2.scala:26:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e[0m \e[31m0\e[0m => \e[31m\"\
    zero\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpqmag0wq2.scala:27:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e[0m \e[31m1\e[0m => \e[31m\"\
    one\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpqmag0wq2.scala:28:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mcase\e[0m \e[31m2\e[0m => \e[31m\"\
    two\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpqmag0wq2.scala:29:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mcase\e[0m \e[31m3\e[0m => \e[31m\"\
    three\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpqmag0wq2.scala:30:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mcase\e[0m \e[31m4\e[0m => \e[31m\"\
    four\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpqmag0wq2.scala:31:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33mcase\e[0m \e[31m5\e[0m => \e[31m\"\
    five\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpqmag0wq2.scala:32:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                \e[33mcase\e[0m \e[31m6\e[0m => \e[31m\"\
    six\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \  "
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsStr = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numsStr.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpb1f28avv.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpb1f28avv.scala:21)\n\
    \tat Problem$.main(tmpb1f28avv.scala:38)\n\tat Problem.main(tmpb1f28avv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(num => num match {\n            case \"\
    zero\" => 0\n            case \"one\" => 1\n            case \"two\" => 2\n  \
    \          case \"three\" => 3\n            case \"four\" => 4\n            case\
    \ \"five\" => 5\n            case \"six\" => 6\n            case \"seven\" =>\
    \ 7\n            case \"eight\" => 8\n            case \"nine\" => 9\n       \
    \ })\n        val sorted = nums.sorted\n        sorted.map(num => num match {\n\
    \            case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmptd0g_xmq.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmptd0g_xmq.scala:21)\n\
    \tat Problem$.main(tmptd0g_xmq.scala:37)\n\tat Problem.main(tmptd0g_xmq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val numeralList = numbers.split(\" \").map(numeralMap(_)).sorted\n\
    \        numeralList.map(numeralMap.find(_._2 == _).get._1).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplsr_u1ws.scala:12:42 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numeralList.map(numeralMap.find(_._2 == _).get._1).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                                      value _2 is\
    \ not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659798263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  var nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums = nums.sorted\n        var result = \"\"\n        for (i <- 0 until\
    \ nums.length) {\n            result += nums(i) + \" \"\n        }\n        result.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpcjs2e2d0.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpcjs2e2d0.scala:21)\n\
    \tat Problem$.main(tmpcjs2e2d0.scala:30)\n\tat Problem.main(tmpcjs2e2d0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(numeralToInt)\n        val sorted = nums.sorted\n\
    \        sorted.map(intToNumeral).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx8pgnpwk.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt)\n\e[31m\e[31m   |\e[0m                     \
    \                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                     Not found: numeralToInt\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpx8pgnpwk.scala:10:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt)\n\e[31m\e[31m   |\e[0m                     \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                       No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(_.toInt).sorted\n        nums.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpex7h6ulo.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpex7h6ulo.scala:10)\n\
    \tat Problem$.main(tmpex7h6ulo.scala:14)\n\tat Problem.main(tmpex7h6ulo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(numeralMap(_)).sorted\n\
    \        nums.map(num => numeralMap.find(_._2 == num).get._1).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmpq9m24v0w.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq9m24v0w.scala:11)\n\
    \tat Problem$.main(tmpq9m24v0w.scala:15)\n\tat Problem.main(tmpq9m24v0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\n            \"zero\" -> 0,\n            \"one\" -> 1,\n\
    \            \"two\" -> 2,\n            \"three\" -> 3,\n            \"four\"\
    \ -> 4,\n            \"five\" -> 5,\n            \"six\" -> 6,\n            \"\
    seven\" -> 7,\n            \"eight\" -> 8,\n            \"nine\" -> 9\n      \
    \  )\n        val numeralList = numbers.split(\" \").toList\n        val numberList\
    \ = numeralList.map(numeral => numeralMap(numeral))\n        val sortedNumberList\
    \ = numberList.sorted\n        val sortedNumeralList = sortedNumberList.map(number\
    \ => numeralMap.find(_._2 == number).get._1)\n        sortedNumeralList.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmp34iq7yn2.scala:23)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.sortNumbers(tmp34iq7yn2.scala:23)\n\
    \tat Problem$.main(tmp34iq7yn2.scala:29)\n\tat Problem.main(tmp34iq7yn2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp92r6cvqg.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp92r6cvqg.scala:21)\n\
    \tat Problem$.main(tmp92r6cvqg.scala:26)\n\tat Problem.main(tmp92r6cvqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsStr = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numsStr.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpb1f28avv.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpb1f28avv.scala:21)\n\
    \tat Problem$.main(tmpb1f28avv.scala:38)\n\tat Problem.main(tmpb1f28avv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  var nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums = nums.sorted\n        var result = \"\"\n        for (i <- 0 until\
    \ nums.length) {\n            result += nums(i) + \" \"\n        }\n        result.trim\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpcjs2e2d0.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpcjs2e2d0.scala:21)\n\
    \tat Problem$.main(tmpcjs2e2d0.scala:30)\n\tat Problem.main(tmpcjs2e2d0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sortedNums = nums.sorted\n        val sortedStrings = sortedNums.map(x\
    \ => x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n\
    \            case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        sortedStrings.mkString(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp2k59s5gh.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp2k59s5gh.scala:21)\n\
    \tat Problem$.main(tmp2k59s5gh.scala:38)\n\tat Problem.main(tmp2k59s5gh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val res = sorted.map(x => x match {\n\
    \            case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        })\n        res.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpzi6wpdtn.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpzi6wpdtn.scala:21)\n\
    \tat Problem$.main(tmpzi6wpdtn.scala:38)\n\tat Problem.main(tmpzi6wpdtn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numberMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val numberList = numbers.split(\" \").map(numberMap(_)).sorted\n\
    \        numberList.map(numberMap.find(_._2 == _).get._1).mkString(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjrlh5o3b.scala:12:40 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numberList.map(numberMap.find(_._2 == _).get._1).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                      ^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value _2 is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659798263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(_.toInt).sorted\n        nums.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpex7h6ulo.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpex7h6ulo.scala:10)\n\
    \tat Problem$.main(tmpex7h6ulo.scala:14)\n\tat Problem.main(tmpex7h6ulo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val nums2 = nums.sorted\n        val nums3 = nums2.map(x => x match {\n\
    \            case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        })\n        nums3.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpcyf5_yan.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpcyf5_yan.scala:21)\n\
    \tat Problem$.main(tmpcyf5_yan.scala:38)\n\tat Problem.main(tmpcyf5_yan.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numStrings = sorted.map(x => x\
    \ match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n   \
    \         case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numStrings.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpx7cufwuy.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpx7cufwuy.scala:21)\n\
    \tat Problem$.main(tmpx7cufwuy.scala:38)\n\tat Problem.main(tmpx7cufwuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsToWords = Map(0 -> \"zero\"\
    , 1 -> \"one\", 2 -> \"two\", 3 -> \"three\", 4 -> \"four\", 5 -> \"five\", 6\
    \ -> \"six\", 7 -> \"seven\", 8 -> \"eight\", 9 -> \"nine\")\n        val words\
    \ = sorted.map(x => numsToWords(x))\n        words.mkString(\" \")\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpxseomzrt.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpxseomzrt.scala:21)\n\
    \tat Problem$.main(tmpxseomzrt.scala:28)\n\tat Problem.main(tmpxseomzrt.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798265
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val numsSorted = nums.sorted\n        val numsSortedStr = numsSorted.map(x\
    \ => x match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n\
    \            case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numsSortedStr.mkString(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp91513nj9.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp91513nj9.scala:21)\n\
    \tat Problem$.main(tmp91513nj9.scala:38)\n\tat Problem.main(tmp91513nj9.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(_.toInt).sorted\n        nums.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpex7h6ulo.scala:10)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpex7h6ulo.scala:10)\n\
    \tat Problem$.main(tmpex7h6ulo.scala:14)\n\tat Problem.main(tmpex7h6ulo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val numeralList = numbers.split(\" \").map(numeralMap(_)).toList.sorted\n\
    \        numeralList.map(numeralMap.find(_._2 == _).get._1).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdmuq0vd8.scala:12:42 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numeralList.map(numeralMap.find(_._2 == _).get._1).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                                      value _2 is\
    \ not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659798263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => {\n            x match {\n       \
    \         case \"zero\" => 0\n                case \"one\" => 1\n            \
    \    case \"two\" => 2\n                case \"three\" => 3\n                case\
    \ \"four\" => 4\n                case \"five\" => 5\n                case \"six\"\
    \ => 6\n                case \"seven\" => 7\n                case \"eight\" =>\
    \ 8\n                case \"nine\" => 9\n            }\n        })\n        val\
    \ sorted = nums.sorted\n        val words = sorted.map(x => {\n            x match\
    \ {\n                case 0 => \"zero\"\n                case 1 => \"one\"\n \
    \               case 2 => \"two\"\n                case 3 => \"three\"\n     \
    \           case 4 => \"four\"\n                case 5 => \"five\"\n         \
    \       case 6 => \"six\"\n                case 7 => \"seven\"\n             \
    \   case 8 => \"eight\"\n                case 9 => \"nine\"\n            }\n \
    \       })\n        words.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp7zyeyq_g.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp7zyeyq_g.scala:23)\n\
    \tat Problem$.main(tmp7zyeyq_g.scala:42)\n\tat Problem.main(tmp7zyeyq_g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numStrings = sorted.map(x => x\
    \ match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n   \
    \         case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numStrings.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpx7cufwuy.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpx7cufwuy.scala:21)\n\
    \tat Problem$.main(tmpx7cufwuy.scala:38)\n\tat Problem.main(tmpx7cufwuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3,\
    \ \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8,\
    \ \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(numMap(_)).sorted\n\
    \        nums.map(num => numMap.find(_._2 == num).get._1).mkString(\" \")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmp1m6f2owf.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp1m6f2owf.scala:11)\n\
    \tat Problem$.main(tmp1m6f2owf.scala:15)\n\tat Problem.main(tmp1m6f2owf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798112
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numStrings = sorted.map(x => x\
    \ match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n   \
    \         case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numStrings.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpx7cufwuy.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpx7cufwuy.scala:21)\n\
    \tat Problem$.main(tmpx7cufwuy.scala:38)\n\tat Problem.main(tmpx7cufwuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.mkString(\" \")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmp92r6cvqg.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmp92r6cvqg.scala:21)\n\
    \tat Problem$.main(tmp92r6cvqg.scala:26)\n\tat Problem.main(tmp92r6cvqg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(numeralMap(_)).sorted\n\
    \        nums.map(numeralMap.find(_._2 == _).get._1).mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2a0z1y62.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        nums.map(numeralMap.find(_._2 == _).get._1).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value _2 is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659798104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(numeralToInt).sorted\n        nums.map(intToNumeral).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpshfhpjkl.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt).sorted\n\e[31m\e[31m   |\e[0m              \
    \                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                            Not found: numeralToInt\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpshfhpjkl.scala:10:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt).sorted\n\e[31m\e[31m   |\e[0m              \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                              No ClassTag available for B\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numStrings = sorted.map(x => x\
    \ match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n   \
    \         case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numStrings.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpx7cufwuy.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpx7cufwuy.scala:21)\n\
    \tat Problem$.main(tmpx7cufwuy.scala:38)\n\tat Problem.main(tmpx7cufwuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralToInt = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\"\
    \ -> 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\"\
    \ -> 8, \"nine\" -> 9)\n        val intToNumeral = Map(0 -> \"zero\", 1 -> \"\
    one\", 2 -> \"two\", 3 -> \"three\", 4 -> \"four\", 5 -> \"five\", 6 -> \"six\"\
    , 7 -> \"seven\", 8 -> \"eight\", 9 -> \"nine\")\n        val numbersList = numbers.split(\"\
    \ \").toList\n        val numbersIntList = numbersList.map(numeralToInt(_))\n\
    \        val numbersIntListSorted = numbersIntList.sorted\n        val numbersListSorted\
    \ = numbersIntListSorted.map(intToNumeral(_))\n        numbersListSorted.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmpatftjrrg.scala:13)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.sortNumbers(tmpatftjrrg.scala:13)\n\
    \tat Problem$.main(tmpatftjrrg.scala:19)\n\tat Problem.main(tmpatftjrrg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val numeralList = numbers.split(\" \").map(numeralMap(_)).sorted\n\
    \        numeralList.map(numeralMap.find(_._2 == _).get._1).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplsr_u1ws.scala:12:42 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        numeralList.map(numeralMap.find(_._2 == _).get._1).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                                      value _2 is\
    \ not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659798263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numsStr = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numsStr.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpb1f28avv.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpb1f28avv.scala:21)\n\
    \tat Problem$.main(tmpb1f28avv.scala:38)\n\tat Problem.main(tmpb1f28avv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => {\n            x match {\n       \
    \         case \"zero\" => 0\n                case \"one\" => 1\n            \
    \    case \"two\" => 2\n                case \"three\" => 3\n                case\
    \ \"four\" => 4\n                case \"five\" => 5\n                case \"six\"\
    \ => 6\n                case \"seven\" => 7\n                case \"eight\" =>\
    \ 8\n                case \"nine\" => 9\n            }\n        })\n        nums.sorted.map(x\
    \ => {\n            x match {\n                case 0 => \"zero\"\n          \
    \      case 1 => \"one\"\n                case 2 => \"two\"\n                case\
    \ 3 => \"three\"\n                case 4 => \"four\"\n                case 5 =>\
    \ \"five\"\n                case 6 => \"six\"\n                case 7 => \"seven\"\
    \n                case 8 => \"eight\"\n                case 9 => \"nine\"\n  \
    \          }\n        }).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5frca70.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5frca70.scala:23)\n\
    \tat Problem$.main(tmpp5frca70.scala:40)\n\tat Problem.main(tmpp5frca70.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(s => s match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmprvrtjlul.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmprvrtjlul.scala:21)\n\
    \tat Problem$.main(tmprvrtjlul.scala:25)\n\tat Problem.main(tmprvrtjlul.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(numeralMap(_)).sorted\n\
    \        nums.map(numeralMap.find(_._2 == _).get._1).mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2a0z1y62.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        nums.map(numeralMap.find(_._2 == _).get._1).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value _2 is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1659798104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").toList\n        val numMap = Map(\"zero\" ->\
    \ 0, \"one\" -> 1, \"two\" -> 2, \"three\" -> 3, \"four\" -> 4, \"five\" -> 5,\
    \ \"six\" -> 6, \"seven\" -> 7, \"eight\" -> 8, \"nine\" -> 9)\n        val numsInt\
    \ = nums.map(numMap(_))\n        val sortedNums = numsInt.sorted\n        val\
    \ sortedNumsStr = sortedNums.map(numMap.map(_.swap))\n        sortedNumsStr.mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmpqexapp8_.scala:12)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.sortNumbers(tmpqexapp8_.scala:12)\n\
    \tat Problem$.main(tmpqexapp8_.scala:18)\n\tat Problem.main(tmpqexapp8_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(numeralToInt)\n        val sorted = nums.sorted\n\
    \        sorted.map(intToNumeral).mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpx8pgnpwk.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt)\n\e[31m\e[31m   |\e[0m                     \
    \                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \                     Not found: numeralToInt\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmpx8pgnpwk.scala:10:55 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(numeralToInt)\n\e[31m\e[31m   |\e[0m                     \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \                       No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m                                          where:    B is a type variable\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659798104
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numStrings = sorted.map(x => x\
    \ match {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n   \
    \         case 2 => \"two\"\n            case 3 => \"three\"\n            case\
    \ 4 => \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\
    \n            case 7 => \"seven\"\n            case 8 => \"eight\"\n         \
    \   case 9 => \"nine\"\n        })\n        numStrings.mkString(\" \")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpx7cufwuy.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpx7cufwuy.scala:21)\n\
    \tat Problem$.main(tmpx7cufwuy.scala:38)\n\tat Problem.main(tmpx7cufwuy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val res = sorted.map(x => x match {\n\
    \            case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        })\n        res.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpzi6wpdtn.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpzi6wpdtn.scala:21)\n\
    \tat Problem$.main(tmpzi6wpdtn.scala:38)\n\tat Problem.main(tmpzi6wpdtn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  // TODO: Implement me\n        return \"\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptw9x4o__.scala:15)\n\tat Problem.main(tmptw9x4o__.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val numeralMap = Map(\"zero\" -> 0, \"one\" -> 1, \"two\" -> 2, \"three\" ->\
    \ 3, \"four\" -> 4, \"five\" -> 5, \"six\" -> 6, \"seven\" -> 7, \"eight\" ->\
    \ 8, \"nine\" -> 9)\n        val nums = numbers.split(\" \").map(numeralMap(_)).sorted\n\
    \        nums.map(num => numeralMap.find(_._2 == num).get._1).mkString(\" \")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.NoSuchElementException: key not found: \n\tat scala.collection.MapOps.default(Map.scala:274)\n\
    \tat scala.collection.MapOps.default$(Map.scala:273)\n\tat scala.collection.AbstractMap.default(Map.scala:405)\n\
    \tat scala.collection.mutable.HashMap.apply(HashMap.scala:425)\n\tat Problem$.$anonfun$1(tmpq9m24v0w.scala:11)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq9m24v0w.scala:11)\n\
    \tat Problem$.main(tmpq9m24v0w.scala:15)\n\tat Problem.main(tmpq9m24v0w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        return numeral.mkString(\" \")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpnomv7w4f.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpnomv7w4f.scala:21)\n\
    \tat Problem$.main(tmpnomv7w4f.scala:38)\n\tat Problem.main(tmpnomv7w4f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798111
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val numeral = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        numeral.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpobvt4xr7.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpobvt4xr7.scala:21)\n\
    \tat Problem$.main(tmpobvt4xr7.scala:38)\n\tat Problem.main(tmpobvt4xr7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        sorted.map(x => x match {\n       \
    \     case 0 => \"zero\"\n            case 1 => \"one\"\n            case 2 =>\
    \ \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\n \
    \           case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        }).mkString(\" \")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpq11ydwj5.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpq11ydwj5.scala:21)\n\
    \tat Problem$.main(tmpq11ydwj5.scala:37)\n\tat Problem.main(tmpq11ydwj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => {\n            x match {\n       \
    \         case \"zero\" => 0\n                case \"one\" => 1\n            \
    \    case \"two\" => 2\n                case \"three\" => 3\n                case\
    \ \"four\" => 4\n                case \"five\" => 5\n                case \"six\"\
    \ => 6\n                case \"seven\" => 7\n                case \"eight\" =>\
    \ 8\n                case \"nine\" => 9\n            }\n        })\n        val\
    \ sorted = nums.sorted\n        val numWords = sorted.map(x => {\n           \
    \ x match {\n                case 0 => \"zero\"\n                case 1 => \"\
    one\"\n                case 2 => \"two\"\n                case 3 => \"three\"\n\
    \                case 4 => \"four\"\n                case 5 => \"five\"\n    \
    \            case 6 => \"six\"\n                case 7 => \"seven\"\n        \
    \        case 8 => \"eight\"\n                case 9 => \"nine\"\n           \
    \ }\n        })\n        numWords.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpolukkli0.scala:21)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpolukkli0.scala:23)\n\
    \tat Problem$.main(tmpolukkli0.scala:42)\n\tat Problem.main(tmpolukkli0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  var nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums = nums.sorted\n        var result = \"\"\n        for (i <- 0 until\
    \ nums.length) {\n            result += nums(i) match {\n                case\
    \ 0 => \"zero\"\n                case 1 => \"one\"\n                case 2 =>\
    \ \"two\"\n                case 3 => \"three\"\n                case 4 => \"four\"\
    \n                case 5 => \"five\"\n                case 6 => \"six\"\n    \
    \            case 7 => \"seven\"\n                case 8 => \"eight\"\n      \
    \          case 9 => \"nine\"\n            }\n            if (i != nums.length\
    \ - 1) result += \" \"\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp6vxvabeh.scala:26:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mcase\e[0m \e[31m0\e[0m => \e[31m\"\
    zero\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp6vxvabeh.scala:27:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mcase\e[0m \e[31m1\e[0m => \e[31m\"\
    one\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp6vxvabeh.scala:28:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mcase\e[0m \e[31m2\e[0m => \e[31m\"\
    two\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp6vxvabeh.scala:29:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                \e[33mcase\e[0m \e[31m3\e[0m => \e[31m\"\
    three\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp6vxvabeh.scala:30:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mcase\e[0m \e[31m4\e[0m => \e[31m\"\
    four\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp6vxvabeh.scala:31:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33mcase\e[0m \e[31m5\e[0m => \e[31m\"\
    five\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \           Values of types Int and Unit cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp6vxvabeh.scala:32:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                \e[33mcase\e[0m \e[31m6\e[0m => \e[31m\"\
    six\"\e[0m\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m\
    \  "
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val nums2 = nums.sorted\n        val nums3 = nums2.map(x => x match {\n\
    \            case 0 => \"zero\"\n            case 1 => \"one\"\n            case\
    \ 2 => \"two\"\n            case 3 => \"three\"\n            case 4 => \"four\"\
    \n            case 5 => \"five\"\n            case 6 => \"six\"\n            case\
    \ 7 => \"seven\"\n            case 8 => \"eight\"\n            case 9 => \"nine\"\
    \n        })\n        nums3.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpcyf5_yan.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpcyf5_yan.scala:21)\n\
    \tat Problem$.main(tmpcyf5_yan.scala:38)\n\tat Problem.main(tmpcyf5_yan.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798264
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(toInt(_)).sorted\n        nums.map(toString(_)).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8gbh2_eu.scala:10:42 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e\
    [31m\" \"\e[0m).map(toInt(_)).sorted\n\e[31m\e[31m   |\e[0m                  \
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                         \
    \                 Not found: toInt\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp8gbh2_eu.scala:10:51\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m10 |\e[0m       \
    \ \e[33mval\e[0m \e[36mnums\e[0m = numbers.split(\e[31m\" \"\e[0m).map(toInt(_)).sorted\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0m                                          No ClassTag available\
    \ for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                    \
    \      where:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1659798263
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val words = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        words.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpsbrvuxlk.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpsbrvuxlk.scala:21)\n\
    \tat Problem$.main(tmpsbrvuxlk.scala:38)\n\tat Problem.main(tmpsbrvuxlk.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        val sorted = nums.sorted\n        val result = sorted.map(x => x match\
    \ {\n            case 0 => \"zero\"\n            case 1 => \"one\"\n         \
    \   case 2 => \"two\"\n            case 3 => \"three\"\n            case 4 =>\
    \ \"four\"\n            case 5 => \"five\"\n            case 6 => \"six\"\n  \
    \          case 7 => \"seven\"\n            case 8 => \"eight\"\n            case\
    \ 9 => \"nine\"\n        })\n        result.mkString(\" \")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpi557ru_z.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpi557ru_z.scala:21)\n\
    \tat Problem$.main(tmpi557ru_z.scala:38)\n\tat Problem.main(tmpi557ru_z.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798106
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six',\
    \ 'seven', 'eight' and 'nine'.\n    // Return the string with numbers sorted from\
    \ smallest to largest\n    // >>> sortNumbers((\"three one five\"))\n    // (\"\
    one three five\")\n    def sortNumbers(numbers : String) : String = {\n      \
    \  val nums = numbers.split(\" \").map(x => x match {\n            case \"zero\"\
    \ => 0\n            case \"one\" => 1\n            case \"two\" => 2\n       \
    \     case \"three\" => 3\n            case \"four\" => 4\n            case \"\
    five\" => 5\n            case \"six\" => 6\n            case \"seven\" => 7\n\
    \            case \"eight\" => 8\n            case \"nine\" => 9\n        })\n\
    \        nums.sorted.mkString(\" \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "scala.MatchError:  (of class java.lang.String)\n\tat Problem$.$anonfun$1(tmpp5cbsk2x.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.sortNumbers(tmpp5cbsk2x.scala:21)\n\
    \tat Problem$.main(tmpp5cbsk2x.scala:25)\n\tat Problem.main(tmpp5cbsk2x.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659798105
