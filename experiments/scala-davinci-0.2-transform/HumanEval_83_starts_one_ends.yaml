name: HumanEval_83_starts_one_ends
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a positive integer n, return the count of the numbers of n-digit\n\
  \    // positive integers that start or end with 1.\n    def startsOneEnds(n : Long)\
  \ : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(startsOneEnds((1l))\
  \ == (1l));\n    assert(startsOneEnds((2l)) == (18l));\n    assert(startsOneEnds((3l))\
  \ == (180l));\n    assert(startsOneEnds((4l)) == (1800l));\n    assert(startsOneEnds((5l))\
  \ == (18000l));\n    }\n\n}\n"
completions: ["        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        if (n == 2) return 3\n        if (n == 3) return 5\n        if (n ==\
    \ 4) return 8\n        if (n == 5) return 13\n        if (n == 6) return 21\n\
    \        if (n == 7) return 34\n        if (n == 8) return 55\n        if (n ==\
    \ 9) return 89\n        if (n == 10) return 144\n        if (n == 11) return 233\n\
    \        if (n == 12) return 377\n        if (n == 13) return 610\n        if\
    \ (n == 14) return 987\n        if (n == 15) return 1597\n        if (n == 16)\
    \ return 2584\n        if (n == 17) return 4181\n        if (n == 18) return 6765\n\
    \        if (n == 19) return 10946\n        if (n == 20) return 17711\n      \
    \  if (n == 21) return 28657\n        if (n == 22) return 46368\n        if (n\
    \ == 23) return 75025\n        if (n == 24) return 121393\n        if (n == 25)\
    \ return 196418\n        if (n == 26) return 317811\n        if (n == 27) return\
    \ 514229\n        if (n == 28) return 832040\n        if (n == 29) return 1346269\n\
    \        if (n == 30) return 2178309\n        if (n == 31) return 3524578\n  \
    \      if (n == 32) return 5702887\n        if (n == 33) return 9227465\n    \
    \    if (n == 34) return 14930352\n        if (n == 35) return 24157817\n    \
    \    if (n == 36) return 39088169\n        if (n == 37) return 63245986\n    \
    \    if (n == 38) return 102334155\n        if (n == 39) return 165580141\n  \
    \      if (n == 40) return 267914296\n        if (n == 41) return 433494437\n\
    \        if (n == 42) return 701408733\n        if (n == 43) return 1134903170\n\
    \        if (n == 44) return 1836311903\n        if (n == 45) return 297", " \
    \       if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n \
    \       dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        var count = 0L\n        for (i <- 1 to n) {\n            count += pow(10,\
    \ i - 1).toLong\n        }\n        count * 2", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        else return (pow(10, n - 1).toLong - pow(10,\
    \ n - 2).toLong) * 2 + startsOneEnds(n - 1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        return\
    \ dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val\
    \ dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n\
    \        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n\
    \            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        if (n == 2) return 4\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        dp(2)(0) = 2\n\
    \        dp(2)(1) = 2\n        for (i <- 3 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  if (n == 2) return 4\n        if (n == 3) return 7\n        if (n == 4) return\
    \ 13\n        if (n == 5) return 24\n        if (n == 6) return 44\n        if\
    \ (n == 7) return 81\n        if (n == 8) return 149\n        if (n == 9) return\
    \ 274\n        if (n == 10) return 504\n        if (n == 11) return 927\n    \
    \    if (n == 12) return 1705\n        if (n == 13) return 3136\n        if (n\
    \ == 14) return 5768\n        if (n == 15) return 10609\n        if (n == 16)\
    \ return 19513\n        if (n == 17) return 35890\n        if (n == 18) return\
    \ 66012\n        if (n == 19) return 121415\n        if (n == 20) return 223317\n\
    \        if (n == 21) return 410744\n        if (n == 22) return 755476\n    \
    \    if (n == 23) return 1389537\n        if (n == 24) return 2555757\n      \
    \  if (n == 25) return 4700770\n        if (n == 26) return 8646064\n        if\
    \ (n == 27) return 15902591\n        if (n == 28) return 29249425\n        if\
    \ (n == 29) return 53798080\n        if (n == 30) return 98950096\n        if\
    \ (n == 31) return 181997601\n        if (n == 32) return 334745777\n        if\
    \ (n == 33) return 615693474\n        if (n == 34) return 1132436852\n       \
    \ if (n == 35) return 2082876103\n        if (n == 36) return 3831006429\n   \
    \     if (n == 37) return 7046314174\n        if (n == 38) return 12964479050\n\
    \        if (n == 39) return 23925712455\n        if (n == 40) return 44134970889\n\
    \        if (n == 41) return 81294404218\n        if (n == 42) return 149023623634\n\
    \        if (n == 43) return 2731308369", "        if (n == 1) return 2\n    \
    \    if (n == 2) return 4\n        if (n == 3) return 7\n        var count = 0L\n\
    \        for (i <- 1 to 9) {\n            count += pow(10, n - 2).toLong\n   \
    \     }\n        count + startsOneEnds(n - 1)", "        if (n == 1) return 2\n\
    \        var result = 0L\n        for (i <- 1 to n) {\n            result += pow(10,\
    \ i - 1).toLong\n        }\n        result * 2", "        if (n == 1) return 2\n\
    \        if (n == 2) return 4\n        if (n == 3) return 8\n        var result\
    \ = 0L\n        var i = 1L\n        while (i <= n) {\n            result += pow(2,\
    \ i - 1).toLong\n            i += 1\n        }\n        result", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        val\
    \ dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        // The number of n-digit positive integers that\
    \ start with 1 is\n        // 9 * 10^(n-1).\n        // The number of n-digit\
    \ positive integers that end with 1 is\n        // 9 * 10^(n-1).\n        // The\
    \ number of n-digit positive integers that start and end with 1 is\n        //\
    \ 9 * 10^(n-2).\n        // Therefore, the number of n-digit positive integers\
    \ that start or end\n        // with 1 is\n        // 2 * 9 * 10^(n-1) - 9 * 10^(n-2).\n\
    \        2 * 9 * pow(10, n - 1).toLong - 9 * pow(10, n - 2).toLong", "       \
    \ if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n \
    \       dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n\
    \        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n\
    \            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        if (n == 2) return 3\n        if (n == 3) return 5\n\
    \        if (n == 4) return 8\n        if (n == 5) return 13\n        if (n ==\
    \ 6) return 21\n        if (n == 7) return 34\n        if (n == 8) return 55\n\
    \        if (n == 9) return 89\n        if (n == 10) return 144\n        if (n\
    \ == 11) return 233\n        if (n == 12) return 377\n        if (n == 13) return\
    \ 610\n        if (n == 14) return 987\n        if (n == 15) return 1597\n   \
    \     if (n == 16) return 2584\n        if (n == 17) return 4181\n        if (n\
    \ == 18) return 6765\n        if (n == 19) return 10946\n        if (n == 20)\
    \ return 17711\n        if (n == 21) return 28657\n        if (n == 22) return\
    \ 46368\n        if (n == 23) return 75025\n        if (n == 24) return 121393\n\
    \        if (n == 25) return 196418\n        if (n == 26) return 317811\n    \
    \    if (n == 27) return 514229\n        if (n == 28) return 832040\n        if\
    \ (n == 29) return 1346269\n        if (n == 30) return 2178309\n        if (n\
    \ == 31) return 3524578\n        if (n == 32) return 5702887\n        if (n ==\
    \ 33) return 9227465\n        if (n == 34) return 14930352\n        if (n == 35)\
    \ return 24157817\n        if (n == 36) return 39088169\n        if (n == 37)\
    \ return 63245986\n        if (n == 38) return 102334155\n        if (n == 39)\
    \ return 165580141\n        if (n == 40) return 267914296\n        if (n == 41)\
    \ return 433494437\n        if (n == 42) return 701408733\n        if (n == 43)\
    \ return 1134903170\n        if (n == 44) return 1836311903\n        if (n ==\
    \ 45) return 297", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n     \
    \   dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n  \
    \          dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        var\
    \ result = 0L\n        for (i <- 1 to n) {\n            val x = pow(10, i - 1).toLong\n\
    \            val y = pow(10, n - i).toLong\n            result += x * y\n    \
    \    }\n        result", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        if (n == 2) return 3\n        val dp = Array.fill(n.toInt\
    \ + 1)(0L)\n        dp(1) = 2\n        dp(2) = 3\n        for (i <- 3 to n.toInt)\
    \ {\n            dp(i) = dp(i - 1) + dp(i - 2)\n        }\n        dp(n.toInt)",
  "        if (n == 1) return 2\n        if (n == 2) return 3\n        val dp = Array.fill(n.toInt\
    \ + 1)(0L)\n        dp(1) = 2\n        dp(2) = 3\n        for (i <- 3 to n.toInt)\
    \ dp(i) = dp(i - 1) + dp(i - 2)\n        dp(n.toInt)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i -\
    \ 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n     \
    \   dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        // The number of n-digit positive\
    \ integers that start with 1 is 10^(n-1).\n        // The number of n-digit positive\
    \ integers that end with 1 is 9 * 10^(n-1).\n        // The number of n-digit\
    \ positive integers that start and end with 1 is\n        // 9 * 10^(n-2).\n \
    \       // The number of n-digit positive integers that start or end with 1 is\n\
    \        // 10^(n-1) + 9 * 10^(n-1) - 9 * 10^(n-2).\n        (pow(10, n - 1) +\
    \ 9 * pow(10, n - 1) - 9 * pow(10, n - 2)).toLong", "        if (n == 1) return\
    \ 2\n        var count = 0L\n        for (i <- 1 to 9) {\n            var num\
    \ = i\n            for (j <- 1 until n) {\n                num *= 10\n       \
    \         num += i\n            }\n            count += num\n        }\n     \
    \   return count", "        // The number of n-digit positive integers that start\
    \ with 1 is the\n        // number of (n - 1)-digit positive integers.\n     \
    \   // The number of n-digit positive integers that end with 1 is the\n      \
    \  // number of (n - 1)-digit positive integers that are not divisible by\n  \
    \      // 10.\n        // The number of n-digit positive integers that start or\
    \ end with 1 is\n        // the sum of the above two numbers.\n        if (n ==\
    \ 1) 1\n        else startsOneEnds(n - 1) + startsOneEnds(n - 1) - startsOneEnds(n\
    \ - 2)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return\
    \ 2\n        var result = 0L\n        for (i <- 1 to n) {\n            result\
    \ += pow(10, i - 1).toLong\n        }\n        result * 2", "        if (n ==\
    \ 1) return 2\n        var result = 0L\n        for (i <- 1 to 9) {\n        \
    \    result += pow(10, n - 1).toLong\n        }\n        result", "        if\
    \ (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n    \
    \    dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n \
    \           dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n\
    \        val a = Array.fill(n.toInt + 1)(0L)\n        a(1) = 2\n        for (i\
    \ <- 2 to n.toInt) {\n            a(i) = a(i - 1) * 9 + pow(10, i - 1).toLong\n\
    \        }\n        a(n.toInt)", "        if (n == 1) return 2\n        val dp\
    \ = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n\
    \        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n\
    \            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)",
  "        if (n == 1) return 2\n        var count = 0L\n        for (i <- 1 to 9)\
    \ {\n            val x = pow(10, n - 1).toLong\n            val y = pow(10, n\
    \ - 2).toLong\n            count += (i * y)\n            count += (x - y)\n  \
    \      }\n        count", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        if (n == 1) return 2\n        if (n == 2) return 4\n   \
    \     var count = 3\n        for (i <- 3 to n) {\n            count = count *\
    \ 2 + 1\n        }\n        return count", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) 1\n        else {\n            val dp = Array.fill(n.toInt\
    \ + 1)(0L)\n            dp(1) = 1\n            for (i <- 2 to n.toInt) {\n   \
    \             dp(i) = dp(i - 1) * 9 + pow(10, i - 1).toLong\n            }\n \
    \           dp(n.toInt)\n        }", "        if (n == 1) return 2\n        val\
    \ dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n\
    \        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n\
    \            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)",
  "        var count = 0L\n        for (i <- 1 to n) {\n            count += pow(10,\
    \ i - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      if (n == 2) return 3\n        val dp = Array.fill(n.toInt + 1)(0L)\n  \
    \      dp(1) = 2\n        dp(2) = 3\n        for (i <- 3 to n.toInt) {\n     \
    \       dp(i) = dp(i - 1) + dp(i - 2)\n        }\n        dp(n.toInt)", "    \
    \    if (n == 1) return 2\n        var result = 0L\n        for (i <- 1 to n)\
    \ {\n            result += pow(10, i - 1).toLong\n        }\n        result *\
    \ 2", "        if (n == 1) return 2\n        var count = 0L\n        for (i <-\
    \ 1 to 9) {\n            count += pow(10, n - 1).toLong\n        }\n        count",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n   \
    \     dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        var count = 0L\n        for (i <- 1 to 9) {\n      \
    \      val x = pow(10, n - 1).toLong\n            val y = pow(10, n - 2).toLong\n\
    \            count += (x - y) * 2\n        }\n        count", "        if (n ==\
    \ 1) return 2\n        if (n == 2) return 3\n        var count = 0L\n        for\
    \ (i <- 1 to 9) {\n            val s = i.toString\n            val t = s + \"\
    0\" * (n - 1)\n            val u = \"1\" * n\n            val v = \"1\" + \"0\"\
    \ * (n - 1)\n            val w = \"1\" + \"0\" * (n - 2) + \"1\"\n           \
    \ val x = \"1\" + \"0\" * (n - 2) + \"2\"\n            val y = \"1\" + \"0\" *\
    \ (n - 2) + \"3\"\n            val z = \"1\" + \"0\" * (n - 2) + \"4\"\n     \
    \       val a = \"1\" + \"0\" * (n - 2) + \"5\"\n            val b = \"1\" + \"\
    0\" * (n - 2) + \"6\"\n            val c = \"1\" + \"0\" * (n - 2) + \"7\"\n \
    \           val d = \"1\" + \"0\" * (n - 2) + \"8\"\n            val e = \"1\"\
    \ + \"0\" * (n - 2) + \"9\"\n            val f = \"9\" + \"0\" * (n - 1)\n   \
    \         count += BigInt(t).toLong - BigInt(u).toLong + BigInt(v).toLong - BigInt(w).toLong\
    \ + BigInt(x).toLong - BigInt(y).toLong + BigInt(z).toLong - BigInt(a).toLong\
    \ + BigInt(b).toLong - BigInt(c).toLong + BigInt(d).toLong - BigInt(e).toLong\
    \ + BigInt(f).toLong\n        }\n        count", "        // The number of n-digit\
    \ positive integers that start with 1 is\n        // 9 * 10^(n-1)\n        //\
    \ The number of n-digit positive integers that end with 1 is\n        // 10^(n-1)\n\
    \        // The number of n-digit positive integers that start and end with 1\
    \ is\n        // 9 * 10^(n-2)\n        // The number of n-digit positive integers\
    \ that start or end with 1 is\n        // 9 * 10^(n-1) + 10^(n-1) - 9 * 10^(n-2)\n\
    \        9 * pow(10, n - 1).toLong + pow(10, n - 1).toLong - 9 * pow(10, n - 2).toLong",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        if (n == 2) return 4\n        if (n == 3)\
    \ return 9\n        if (n == 4) return 20\n        if (n == 5) return 46\n   \
    \     if (n == 6) return 103\n        if (n == 7) return 233\n        if (n ==\
    \ 8) return 525\n        if (n == 9) return 1182\n        if (n == 10) return\
    \ 2660\n        if (n == 11) return 5985\n        if (n == 12) return 13467\n\
    \        if (n == 13) return 30301\n        if (n == 14) return 67968\n      \
    \  if (n == 15) return 152210\n        if (n == 16) return 344955\n        if\
    \ (n == 17) return 773135\n        if (n == 18) return 1738181\n        if (n\
    \ == 19) return 3917261\n        if (n == 20) return 8837667\n        if (n ==\
    \ 21) return 19903198\n        if (n == 22) return 44782196\n        if (n ==\
    \ 23) return 100759940\n        if (n == 24) return 226195457\n        if (n ==\
    \ 25) return 508475341\n        if (n == 26) return 1140587732\n        if (n\
    \ == 27) return 2555208930\n        if (n == 28) return 5726623062\n        if\
    \ (n == 29) return 12864938240\n        if (n == 30) return 28983965860\n    \
    \    if (n == 31) return 64817756320\n        if (n == 32) return 144977738480\n\
    \        if (n == 33) return 324391993449\n        if (n == 34) return 726249766683\n\
    \        if (n == 35) return 1618282052201\n        if (n == 36) return 3611972564951\n\
    \        if (n == 37) return 8042978115530\n        if (n == 38) return 17978068609820\n\
    \        if (n == 39) return 40338096537620\n        if (n == 40) return 90295389846440\n\
    \        if (n == 41) return 2023360380", "        if (n == 1) return 2\n    \
    \    var result = 0L\n        for (i <- 1 until n) {\n            result += pow(10,\
    \ i).toLong\n        }\n        result * 2 + 2", "        if (n == 1) return 2\n\
    \        if (n == 2) return 3\n        var count = 0\n        for (i <- 1 to 9)\
    \ {\n            count += pow(10, n - 1).toLong\n            count += pow(10,\
    \ n - 2).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      if (n == 2) return 3\n        var sum = 0L\n        for (i <- 1 to 9) {\n\
    \            sum += pow(10, n - 1).toLong\n        }\n        sum", "        if\
    \ (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        val\
    \ dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n   \
    \     dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        var\
    \ count = 0\n        for (i <- 1 to 9) {\n            val x = pow(10, n - 1).toLong\n\
    \            val y = pow(10, n - 2).toLong\n            count += (i * y)\n   \
    \         count += (x - y)\n        }\n        count", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        var result = 0L\n        for (i <- 1 to n)\
    \ {\n            result += pow(10, i - 1).toLong\n        }\n        result *\
    \ 2", "        if (n == 1) return 2\n        if (n == 2) return 3\n        return\
    \ startsOneEnds(n - 1) + startsOneEnds(n - 2)", "        // The number of n-digit\
    \ positive integers that start with 1 is\n        // 9 * 10^(n-1).\n        //\
    \ The number of n-digit positive integers that end with 1 is\n        // 10^(n-1).\n\
    \        // The number of n-digit positive integers that start and end with 1\
    \ is\n        // 9 * 10^(n-2).\n        // The number of n-digit positive integers\
    \ that start or end with 1 is\n        // 9 * 10^(n-1) + 10^(n-1) - 9 * 10^(n-2).\n\
    \        9 * pow(10, n - 1).toLong + pow(10, n - 1).toLong - 9 * pow(10, n - 2).toLong",
  "        if (n == 1) return 2\n        val pow = pow(10, n - 1).toLong\n       \
    \ val pow2 = pow * 10\n        val pow3 = pow2 * 10\n        val pow4 = pow3 *\
    \ 10\n        val pow5 = pow4 * 10\n        val pow6 = pow5 * 10\n        val\
    \ pow7 = pow6 * 10\n        val pow8 = pow7 * 10\n        val pow9 = pow8 * 10\n\
    \        val pow10 = pow9 * 10\n        val pow11 = pow10 * 10\n        val pow12\
    \ = pow11 * 10\n        val pow13 = pow12 * 10\n        val pow14 = pow13 * 10\n\
    \        val pow15 = pow14 * 10\n        val pow16 = pow15 * 10\n        val pow17\
    \ = pow16 * 10\n        val pow18 = pow17 * 10\n        val pow19 = pow18 * 10\n\
    \        val pow20 = pow19 * 10\n        val pow21 = pow20 * 10\n        val pow22\
    \ = pow21 * 10\n        val pow23 = pow22 * 10\n        val pow24 = pow23 * 10\n\
    \        val pow25 = pow24 * 10\n        val pow26 = pow25 * 10\n        val pow27\
    \ = pow26 * 10\n        val pow28 = pow27 * 10\n        val pow29 = pow28 * 10\n\
    \        val pow30 = pow29 * 10\n        val pow31 = pow30 * 10\n        val pow32\
    \ = pow31 * 10\n        val pow33 = pow32 * 10\n        val pow34 = pow33 * 10\n\
    \        val pow35 = pow34 * 10\n        val pow36 = pow35 * 10\n        val pow37\
    \ = pow36 * 10\n        val pow38 = pow37 * 10\n        val pow39 = pow38 * 10\n\
    \        val pow40 = pow39 * 10\n        val pow41 = pow40 * 10\n        val pow42\
    \ = pow41 * 10\n        val pow43 = pow42 * 10\n        val pow44 = pow43 * 10\n\
    \        val pow45 = pow44 * 10\n        val pow46 = pow45 * 10\n        val pow47\
    \ = pow46 * 10\n        val pow48 = pow47 * 10\n        val pow49 = pow48 * 10\n\
    \        val pow50 = pow49", "        if (n == 1) return 2\n        var count\
    \ = 0L\n        for (i <- 1 to n) {\n            val x = pow(10, i - 1).toLong\n\
    \            count += x * 9\n        }\n        count", "        if (n == 1) return\
    \ 2\n        if (n == 2) return 3\n        var result = 0L\n        for (i <-\
    \ 1 to 9) {\n            result += pow(10, n - 1).toLong\n        }\n        result",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  if (n == 2) return 3\n        var result = 0L\n        for (i <- 1 to 9) {\n\
    \            result += pow(10, n - 1).toLong\n        }\n        result", "  \
    \      var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      var sum = 0L\n        for (i <- 1 to n) {\n            sum += pow(10, i\
    \ - 1).toLong\n        }\n        sum * 2", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 1\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return\
    \ 2\n        if (n == 2) return 4\n        var count = 4\n        for (i <- 3\
    \ to n.toInt) {\n            count += (count * 9)\n        }\n        return count",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        var result = 0L\n        for (i <- 1 to n) {\n     \
    \       result += pow(10, i - 1).toLong\n        }\n        result", "       \
    \ if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt, 2)\n     \
    \   dp(0)(0) = 1\n        dp(0)(1) = 1\n        for (i <- 1 until n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)", "    \
    \    if (n == 1) return 2\n        var result = 0L\n        for (i <- 1 to n)\
    \ {\n            result += pow(10, i - 1).toLong\n        }\n        result *\
    \ 2", "        if (n == 1) return 2\n        if (n == 2) return 4\n        var\
    \ result = 0L\n        var power = 1L\n        for (i <- 1 to n) {\n         \
    \   result += power\n            power *= 10\n        }\n        power /= 10\n\
    \        result += power\n        result", "        val p = pow(10, n - 1).toLong\n\
    \        val q = pow(10, n).toLong\n        val r = q / 10\n        val s = q\
    \ - 1\n        val t = (s - r) / 9\n        val u = (s - r) % 9\n        val v\
    \ = (p - 1) / 9\n        val w = (p - 1) % 9\n        val x = (t - v) * 9 + u\
    \ + w + 1\n        x", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n \
    \       dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        if (n == 2) return 4\n        if (n == 3)\
    \ return 6\n        if (n == 4) return 10\n        if (n == 5) return 16\n   \
    \     if (n == 6) return 26\n        if (n == 7) return 42\n        if (n == 8)\
    \ return 68\n        if (n == 9) return 110\n        if (n == 10) return 178\n\
    \        if (n == 11) return 288\n        if (n == 12) return 466\n        if\
    \ (n == 13) return 754\n        if (n == 14) return 1220\n        if (n == 15)\
    \ return 1974\n        if (n == 16) return 3194\n        if (n == 17) return 5168\n\
    \        if (n == 18) return 8362\n        if (n == 19) return 13530\n       \
    \ if (n == 20) return 21892\n        if (n == 21) return 35422\n        if (n\
    \ == 22) return 57344\n        if (n == 23) return 92766\n        if (n == 24)\
    \ return 150010\n        if (n == 25) return 242774\n        if (n == 26) return\
    \ 392884\n        if (n == 27) return 635670\n        if (n == 28) return 1028544\n\
    \        if (n == 29) return 1664214\n        if (n == 30) return 2692758\n  \
    \      if (n == 31) return 4356990\n        if (n == 32) return 7053688\n    \
    \    if (n == 33) return 11406764\n        if (n == 34) return 18463450\n    \
    \    if (n == 35) return 29867114\n        if (n == 36) return 48330168\n    \
    \    if (n == 37) return 78193212\n        if (n == 38) return 126529372\n   \
    \     if (n == 39) return 204762506\n        if (n == 40) return 331290758\n \
    \       if (n == 41) return 536014060\n        if (n == 42) return 867297466\n\
    \        if (n == 43) return 1403302330\n        if (n == 44) return 2273594796\n\
    \        if (", "        if (n == 1) return 2\n        var result = 0L\n     \
    \   for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n       \
    \ }\n        result * 2", "        // The number of n-digit positive integers\
    \ that start with 1 is the\n        // number of (n - 1)-digit positive integers.\n\
    \        // The number of n-digit positive integers that end with 1 is the\n \
    \       // number of (n - 1)-digit positive integers that start with 1.\n    \
    \    // The number of n-digit positive integers that start or end with 1 is\n\
    \        // the sum of these two.\n        if (n == 1) return 2\n        else\
    \ return startsOneEnds(n - 1) + startsOne(n - 1)", "        if (n == 1) return\
    \ 2\n        if (n == 2) return 4\n        if (n == 3) return 8\n        var sum\
    \ = 0L\n        for (i <- 1 to n - 1) {\n            sum += pow(2, i).toLong\n\
    \        }\n        sum * 2", "        if (n == 1) return 2\n        var count\
    \ = 0\n        for (i <- 1 to n) {\n            count += pow(10, i - 1).toLong\n\
    \        }\n        count * 2", "        val dp = Array.ofDim[Long](n.toInt +\
    \ 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt)\
    \ {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1)\
    \ = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "     \
    \   if (n == 1) return 2\n        if (n == 2) return 4\n        var count = 0L\n\
    \        for (i <- 1 to 9) {\n            count += pow(10, n - 1).toLong\n   \
    \     }\n        count += pow(10, n - 2).toLong\n        count", "        if (n\
    \ == 1) return 2\n        if (n == 2) return 4\n        if (n == 3) return 7\n\
    \        var count = 0L\n        for (i <- 1 to 9) {\n            count += pow(10,\
    \ n - 2).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      var result = 0L\n        for (i <- 1 to n) {\n            result += pow(10,\
    \ i - 1).toLong\n        }\n        result * 2", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        // The number of n-digit numbers that start with 1 is 10^(n-1).\n     \
    \   // The number of n-digit numbers that end with 1 is 10^(n-1).\n        //\
    \ The number of n-digit numbers that start and end with 1 is 9.\n        // The\
    \ number of n-digit numbers that start with 1 and end with 0 is\n        // 9\
    \ * 10^(n-2).\n        // The number of n-digit numbers that start with 0 and\
    \ end with 1 is\n        // 9 * 10^(n-2).\n        // The number of n-digit numbers\
    \ that start and end with 0 is\n        // 9 * 10^(n-2).\n        // The number\
    \ of n-digit numbers that start with 1 and end with 1 is\n        // 9 * 10^(n-2).\n\
    \        // The number of n-digit numbers that start with 0 and end with 0 is\n\
    \        // 9 * 10^(n-2).\n        // The number of n-digit numbers that start\
    \ or end with 1 is\n        // 10^(n-1) + 10^(n-1) + 9 + 9 * 10^(n-2) + 9 * 10^(n-2)\
    \ + 9 * 10^(n-2) +\n        // 9 * 10^(n-2) + 9 * 10^(n-2) = 2 * 10^(n-1) + 9\
    \ * 10^(n-2) + 9.\n        2 * pow(10, n - 1).toLong + 9 * pow(10, n - 2).toLong\
    \ + 9", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        var count = 0L\n        for (i <- 1 to n) {\n            count += pow(10,\
    \ i - 1).toLong\n        }\n        count", "        if (n == 1) return 2\n  \
    \      val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i\
    \ - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n)(0) +\
    \ dp(n)(1)", "        var count = 0L\n        for (i <- 1 to 9) {\n          \
    \  val s = i.toString\n            val num = s * n\n            if (num.toLong\
    \ % 10 == 1) count += 1\n        }\n        count", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i -\
    \ 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n     \
    \   dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return 2\n        val\
    \ dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        if (n == 2) return 3\n        var count =\
    \ 2\n        for (i <- 3 to n.toInt) count += pow(2, i - 1).toLong\n        return\
    \ count", "        if (n == 1) return 10\n        var result = 0L\n        for\
    \ (i <- 1 to 9) {\n            val x = pow(10, n - 1).toLong\n            val\
    \ y = pow(10, n - 2).toLong\n            result += x - y\n        }\n        result",
  "        if (n == 1) return 2\n        var result = 0L\n        for (i <- 1 to n)\
    \ {\n            val x = pow(10, i - 1).toLong\n            result += x\n    \
    \    }\n        result * 2", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        var count = 0L\n        for (i\
    \ <- 1L to n) {\n            count += pow(10, i - 1).toLong\n        }\n     \
    \   count", "        if (n == 1) return 2\n        if (n == 2) return 3\n    \
    \    var count = 3\n        var i = 3\n        while (i <= n) {\n            count\
    \ += pow(2, i - 1).toLong\n            i += 1\n        }\n        return count",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 1\n      \
    \  if (n == 2) return 10\n        var result = 0L\n        for (i <- 1 to 9) {\n\
    \            result += pow(10, n - 1).toLong\n        }\n        result", "  \
    \      if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        if (n == 2) return 4\n        if (n == 3)\
    \ return 8\n        if (n == 4) return 16\n        if (n == 5) return 32\n   \
    \     if (n == 6) return 64\n        if (n == 7) return 128\n        if (n ==\
    \ 8) return 256\n        if (n == 9) return 512\n        if (n == 10) return 1024\n\
    \        if (n == 11) return 2048\n        if (n == 12) return 4096\n        if\
    \ (n == 13) return 8192\n        if (n == 14) return 16384\n        if (n == 15)\
    \ return 32768\n        if (n == 16) return 65536\n        if (n == 17) return\
    \ 131072\n        if (n == 18) return 262144\n        if (n == 19) return 524288\n\
    \        if (n == 20) return 1048576\n        if (n == 21) return 2097152\n  \
    \      if (n == 22) return 4194304\n        if (n == 23) return 8388608\n    \
    \    if (n == 24) return 16777216\n        if (n == 25) return 33554432\n    \
    \    if (n == 26) return 67108864\n        if (n == 27) return 134217728\n   \
    \     if (n == 28) return 268435456\n        if (n == 29) return 536870912\n \
    \       if (n == 30) return 1073741824\n        if (n == 31) return 2147483648L\n\
    \        if (n == 32) return 4294967296L\n        if (n == 33) return 8589934592L\n\
    \        if (n == 34) return 17179869184L\n        if (n == 35) return 34359738368L\n\
    \        if (n == 36) return 68719476736L\n        if (n == 37) return 137438953472L\n\
    \        if (n == 38) return 274877906944L\n        if (n == 39) return 549755813888L\n\
    \        if (n == 40) return 1099511627776L\n        if (n == 41) return 2199023255552L\n\
    \        if (n", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        var count\
    \ = 0L\n        for (i <- 1 to n) {\n            count += pow(10, i - 1).toLong\n\
    \        }\n        count", "        if (n == 1) 1\n        else {\n         \
    \   val dp = Array.fill(n.toInt + 1)(0L)\n            dp(1) = 1\n            for\
    \ (i <- 2 to n.toInt) {\n                dp(i) = dp(i - 1) * 10 - dp(i - 2)\n\
    \            }\n            dp(n.toInt)\n        }", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        // The number of n-digit positive integers that start with 1 is\n     \
    \   // 10^(n-1) - 1.\n        // The number of n-digit positive integers that\
    \ end with 1 is\n        // 9 * 10^(n-1).\n        10L * pow(10, n - 1).toLong\
    \ - 1L + 9L * pow(10, n - 1).toLong", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  if (n == 2) return 4\n        if (n == 3) return 7\n        if (n == 4) return\
    \ 13\n        if (n == 5) return 24\n        if (n == 6) return 44\n        if\
    \ (n == 7) return 81\n        if (n == 8) return 149\n        if (n == 9) return\
    \ 274\n        if (n == 10) return 504\n        if (n == 11) return 927\n    \
    \    if (n == 12) return 1705\n        if (n == 13) return 3136\n        if (n\
    \ == 14) return 5768\n        if (n == 15) return 10609\n        if (n == 16)\
    \ return 19513\n        if (n == 17) return 35890\n        if (n == 18) return\
    \ 66012\n        if (n == 19) return 121415\n        if (n == 20) return 223317\n\
    \        if (n == 21) return 410744\n        if (n == 22) return 755476\n    \
    \    if (n == 23) return 1389537\n        if (n == 24) return 2555757\n      \
    \  if (n == 25) return 4700770\n        if (n == 26) return 8646064\n        if\
    \ (n == 27) return 15902591\n        if (n == 28) return 29249425\n        if\
    \ (n == 29) return 53798080\n        if (n == 30) return 98950096\n        if\
    \ (n == 31) return 181997601\n        if (n == 32) return 334745777\n        if\
    \ (n == 33) return 615693474\n        if (n == 34) return 1132436852\n       \
    \ if (n == 35) return 2082876103\n        if (n == 36) return 3831006429\n   \
    \     if (n == 37) return 7046314174\n        if (n == 38) return 12964479050\n\
    \        if (n == 39) return 23925712455\n        if (n == 40) return 44134970889\n\
    \        if (n == 41) return 81294404218\n        if (n == 42) return 149023645383\n\
    \        if (n == 43) return 2731308369", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt, 2)\n        dp(0)(0) = 1\n  \
    \      dp(0)(1) = 1\n        for (i <- 1 until n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n.toInt, 2)\n        dp(0)(0) = 1\n  \
    \      dp(0)(1) = 1\n        for (i <- 1 until n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)", "        if (n == 1) return\
    \ 2\n        if (n == 2) return 3\n        var result = 1L\n        for (i <-\
    \ 1 to n - 1) {\n            result *= 10\n            result += 1\n        }\n\
    \        result *= 9\n        result", "        if (n == 1) return 2\n       \
    \ val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        if (n == 2) return\
    \ 3\n        var result = 0L\n        for (i <- 1 to n) {\n            result\
    \ += pow(10, i - 1).toLong\n        }\n        result * 2", "        val dp =\
    \ Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) =\
    \ 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) +\
    \ dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        if (n == 1) return 2\n        var result = 0L\n        for (i <- 1 to n)\
    \ {\n            val x = pow(10, i - 1).toLong\n            result += 9 * x\n\
    \        }\n        result", "        if (n == 1) return 2\n        var count\
    \ = 0\n        for (i <- 1 to 9) {\n            val a = pow(10, n - 1).toLong\n\
    \            val b = pow(10, n - 2).toLong\n            count += (a - b) * 2\n\
    \        }\n        count", "        if (n == 1) return 2\n        var result\
    \ = 0L\n        for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n\
    \        }\n        result * 2", "        if (n == 1) return 10\n        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 9\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ * 10 - dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n      \
    \  dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        // The number of n-digit positive integers that start with 1 is\n     \
    \   // 10^(n-1). The number of n-digit positive integers that end with 1 is\n\
    \        // 9*10^(n-2).\n        10L * pow(10, n - 1).toLong + 9L * pow(10, n\
    \ - 2).toLong", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        var count = 0L\n     \
    \   for (i <- 1 to n) {\n            count += pow(10, i - 1).toLong\n        }\n\
    \        count", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        var count = 0L\n        for (i <- 1 to 9) {\n  \
    \          count += pow(10, n - 1).toLong\n        }\n        count", "      \
    \  if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        val dp\
    \ = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 1\n        dp(1)(1)\
    \ = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i - 1)(0)\
    \ + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0)\
    \ + dp(n.toInt)(1)", "        // The number of n-digit positive integers that\
    \ start with 1 is\n        // 9 * 10^(n-1).\n        // The number of n-digit\
    \ positive integers that end with 1 is\n        // 10^(n-1).\n        // The number\
    \ of n-digit positive integers that start and end with 1 is\n        // 9 * 10^(n-2).\n\
    \        // The number of n-digit positive integers that start or end with 1 is\n\
    \        // the sum of the three numbers above.\n        if (n == 1) 1\n     \
    \   else 9 * pow(10, n - 1).toLong + 10 * pow(10, n - 2).toLong + 9 * pow(10,\
    \ n - 2).toLong", "        if (n == 1) return 2\n        var result = 0L\n   \
    \     for (i <- 1 to n) {\n            result += pow(10, i - 1).toLong\n     \
    \   }\n        result * 2", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        // Count\
    \ the number of n-digit numbers that start with 1.\n        val startOne = pow(10,\
    \ n - 1).toLong\n        // Count the number of n-digit numbers that end with\
    \ 1.\n        val endOne = pow(10, n - 1).toLong\n        // Count the number\
    \ of n-digit numbers that start and end with 1.\n        val startEndOne = pow(10,\
    \ n - 2).toLong\n        startOne + endOne - startEndOne", "        val dp = Array.ofDim[Long](n.toInt\
    \ + 1, 2)\n        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to\
    \ n.toInt) {\n            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n           \
    \ dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)",
  "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 0\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0) = dp(i\
    \ - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n   \
    \     dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return 2\n      \
    \  if (n == 2) return 5\n        if (n == 3) return 13\n        if (n == 4) return\
    \ 34\n        if (n == 5) return 89\n        if (n == 6) return 233\n        if\
    \ (n == 7) return 610\n        if (n == 8) return 1597\n        if (n == 9) return\
    \ 4181\n        if (n == 10) return 10946\n        if (n == 11) return 28657\n\
    \        if (n == 12) return 75025\n        if (n == 13) return 196418\n     \
    \   if (n == 14) return 514229\n        if (n == 15) return 1346269\n        if\
    \ (n == 16) return 3524578\n        if (n == 17) return 9227465\n        if (n\
    \ == 18) return 24157817\n        if (n == 19) return 63245986\n        if (n\
    \ == 20) return 165580141\n        if (n == 21) return 433494437\n        if (n\
    \ == 22) return 1134903170\n        if (n == 23) return 2971215073L\n        if\
    \ (n == 24) return 7778742049L\n        if (n == 25) return 20365011074L\n   \
    \     if (n == 26) return 53316291173L\n        if (n == 27) return 139583862445L\n\
    \        if (n == 28) return 365435296162L\n        if (n == 29) return 956722026041L\n\
    \        if (n == 30) return 2504730781961L\n        if (n == 31) return 6557470319842L\n\
    \        if (n == 32) return 17167680177565L\n        if (n == 33) return 44945570212853L\n\
    \        if (n == 34) return 117669030460994L\n        if (n == 35) return 308061521170129L\n\
    \        if (n == 36) return 806515533049393L\n        if (n == 37) return 2111485077978050L\n\
    \        if (n == 38) return 5551115123127783L\n        if (n == 39) return 1447",
  "        if (n == 1) return 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n  \
    \      dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n) {\n     \
    \       dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n)(0) + dp(n)(1)", "        if (n == 1) return\
    \ 10\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0) = 9\n\
    \        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) * 10 - dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n  \
    \      }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n == 1) return\
    \ 2\n        val dp = Array.ofDim[Long](n + 1, 2)\n        dp(1)(0) = 1\n    \
    \    dp(1)(1) = 1\n        for (i <- 2 to n) {\n            dp(i)(0) = dp(i -\
    \ 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n     \
    \   dp(n)(0) + dp(n)(1)", "        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n\
    \        dp(1)(0) = 0\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n\
    \            dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i\
    \ - 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n\
    \ == 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n       \
    \ dp(1)(0) = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n    \
    \        dp(i)(0) = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i -\
    \ 1)(0)\n        }\n        dp(n.toInt)(0) + dp(n.toInt)(1)", "        if (n ==\
    \ 1) return 2\n        val dp = Array.ofDim[Long](n.toInt + 1, 2)\n        dp(1)(0)\
    \ = 1\n        dp(1)(1) = 1\n        for (i <- 2 to n.toInt) {\n            dp(i)(0)\
    \ = dp(i - 1)(0) + dp(i - 1)(1)\n            dp(i)(1) = dp(i - 1)(0)\n       \
    \ }\n        dp(n.toInt)(0) + dp(n.toInt)(1)"]
stop_tokens:
- "\n    }\n"
