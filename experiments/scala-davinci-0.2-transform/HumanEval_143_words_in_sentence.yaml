name: HumanEval_143_words_in_sentence
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string representing a sentence,\n    // the sentence contains\
  \ some words separated by a space,\n    // and you have to return a string that\
  \ contains the words from the original sentence,\n    // whose lengths are prime\
  \ numbers,\n    // the order of the words in the new string should be the same as\
  \ the original one.\n    // Example 1:\n    // >>> wordsInSentence((\"This is a\
  \ test\"))\n    // (\"is\")\n    // Example 2:\n    // >>> wordsInSentence((\"lets\
  \ go for swimming\"))\n    // (\"go for\")\n    // Constraints:\n    // * 1 <= len(sentence)\
  \ <= 100\n    // * sentence contains only letters\n    def wordsInSentence(sentence\
  \ : String) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(wordsInSentence((\"\
  This is a test\")).equals((\"is\")));\n    assert(wordsInSentence((\"lets go for\
  \ swimming\")).equals((\"go for\")));\n    assert(wordsInSentence((\"there is no\
  \ place available here\")).equals((\"there is no place\")));\n    assert(wordsInSentence((\"\
  Hi I am Hussein\")).equals((\"Hi am Hussein\")));\n    assert(wordsInSentence((\"\
  go for it\")).equals((\"go for it\")));\n    assert(wordsInSentence((\"here\")).equals((\"\
  \")));\n    assert(wordsInSentence((\"here is\")).equals((\"is\")));\n    }\n\n\
  }\n"
completions: ["        val words = sentence.split(\" \")\n        val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val result = new StringBuilder\n        for (word <-\
    \ words) {\n            if (primes.contains(word.length)) {\n                result.append(word)\n\
    \                result.append(\" \")\n            }\n        }\n        result.toString.trim",
  "        // Write your code here\n        val words = sentence.split(\" \")\n  \
    \      val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n      \
    \      var isPrime = true\n            for (j <- 2 to i - 1) {\n             \
    \   if (i % j == 0) {\n                    isPrime = false\n                 \
    \   break\n                }\n            }\n            if (isPrime) primes +=\
    \ i\n        }\n        val result = ArrayBuffer[String]()\n        for (word\
    \ <- words) {\n            if (primes.contains(word.length)) result += word\n\
    \        }\n        result.mkString(\" \")", "        val words = sentence.split(\"\
    \ \")\n        var result = \"\"\n        for (word <- words) {\n            if\
    \ (isPrime(word.length)) {\n                result += word + \" \"\n         \
    \   }\n        }\n        result.trim", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val sb = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                sb.append(word)\n                sb.append(\" \")\n     \
    \       }\n        }\n        sb.toString.trim", "        val words = sentence.split(\"\
    \ \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new\
    \ ArrayBuffer[String]\n        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        def isPrime(n\
    \ : Int) : Boolean = {\n            if (n <= 1) return false\n            if (n\
    \ == 2) return true\n            for (i <- 2 to sqrt(n).toInt) if (n % i == 0)\
    \ return false\n            return true\n        }\n        val words = sentence.split(\"\
    \ \")\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            if (isPrime(word.length)) {\n                if (result.length >\
    \ 0) result.append(\" \")\n                result.append(word)\n            }\n\
    \        }\n        return result.toString", "        val words = sentence.split(\"\
    \ \")\n        val primes = ArrayBuffer[Int]()\n        for (i <- 2 to 100) {\n\
    \            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        val result = new StringBuilder\n        for\
    \ (word <- words) {\n            if (primes.contains(word.length)) {\n       \
    \         result.append(word + \" \")\n            }\n        }\n        result.toString.trim",
  "        val words = sentence.split(\" \")\n        val primes = List(2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97)\n        val result = new StringBuilder\n        for (word <- words)\
    \ {\n            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ // Write your code here\n        val words = sentence.split(\" \")\n       \
    \ val primes = (2 to 100).filter(isPrime)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val words = sentence.split(\" \")\n  \
    \      val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        val primes = Array(2, 3, 5, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n\
    \        val words = sentence.split(\" \")\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        // Write your code here\n        val words\
    \ = sentence.split(\" \")\n        val primes = ArrayBuffer[Int]()\n        for\
    \ (i <- 2 to 100) {\n            var isPrime = true\n            for (j <- 2 to\
    \ sqrt(i).toInt) {\n                if (i % j == 0) {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isPrime) primes += i\n        }\n        val result = ArrayBuffer[String]()\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ result += word\n        }\n        result.mkString(\" \")", "        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (word <- words) {\n       \
    \     if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ // Write your code here\n        null", "        val words = sentence.split(\"\
    \ \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim", "        // Write your code here\n        val words\
    \ = sentence.split(\" \")\n        val primes = Array(2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n  \
    \      val result = new StringBuilder\n        for (i <- 0 until words.length)\
    \ {\n            if (primes.contains(words(i).length)) {\n                result.append(words(i)\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ val words = sentence.split(\" \")\n        val primes = List(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97)\n        val result = new StringBuilder\n        for (word <- words) {\n\
    \            if (primes.contains(word.length)) {\n                result.append(word\
    \ + \" \")\n            }\n        }\n        result.toString.trim", "       \
    \ // Write your code here\n        null", "        val words = sentence.split(\"\
    \ \")\n        val primes = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)\n        val result = new StringBuilder\n\
    \        for (word <- words) {\n            if (primes.contains(word.length))\
    \ {\n                result.append(word + \" \")\n            }\n        }\n \
    \       result.toString.trim"]
stop_tokens:
- "\n    }\n"
