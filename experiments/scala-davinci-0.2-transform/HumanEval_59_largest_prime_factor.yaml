name: HumanEval_59_largest_prime_factor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n\
  \    // (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        var m = n\n        var i = 2l\n        while (i <= m) {\n \
    \           if (m % i == 0) {\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        i", "        var largestPrimeFactor\
    \ = 0l\n        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i\n                n /= i\n     \
    \       }\n            else i += 1\n        }\n        largestPrimeFactor", " \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        return i", "        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        i", "        var largest = 0l\n        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i\n                n /= i\n            }\n            else i += 1\n      \
    \  }\n        largest", "        var x = n\n        var i = 2l\n        while\
    \ (i <= x) {\n            if (x % i == 0) {\n                x /= i\n        \
    \        i -= 1\n            }\n            i += 1\n        }\n        i", " \
    \       var result = 0l\n        var m = n\n        while (m % 2 == 0) {\n   \
    \         result = 2\n            m /= 2\n        }\n        var i = 3\n     \
    \   while (i <= sqrt(m)) {\n            while (m % i == 0) {\n               \
    \ result = i\n                m /= i\n            }\n            i += 2\n    \
    \    }\n        if (m > 2) result = m\n        result", "        var nn = n\n\
    \        var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                nn /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i", "        var max = 1l\n        var i = 2l\n   \
    \     while (i <= n) {\n            if (n % i == 0) {\n                max = i\n\
    \                n /= i\n            }\n            else i += 1\n        }\n \
    \       max", "        var x = n\n        var i = 2l\n        while (i <= x) {\n\
    \            if (x % i == 0) {\n                x /= i\n                i -= 1\n\
    \            }\n            i += 1\n        }\n        i", "        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        return i", "        val factors = new ArrayBuffer[Long]\n\
    \        var m = n\n        for (i <- 2l to sqrt(n).toLong) {\n            while\
    \ (m % i == 0) {\n                factors += i\n                m /= i\n     \
    \       }\n        }\n        if (m > 1) factors += m\n        factors.max", " \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        i", "        var largestPrimeFactor\
    \ = 1l\n        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i\n                n /= i\n     \
    \       }\n            else i += 1\n        }\n        largestPrimeFactor", " \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        i", "        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        return i", "        var i = 2l\n        var n2 = n\n     \
    \   while (i <= n2) {\n            if (n2 % i == 0) {\n                n2 /= i\n\
    \                i -= 1\n            }\n            i += 1\n        }\n      \
    \  return i", "        var largestPrimeFactor = 1l\n        var i = 2l\n     \
    \   while (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i\n                n /= i\n            }\n            else i += 1\n      \
    \  }\n        largestPrimeFactor", "        def largestPrimeFactor(n : Long, k\
    \ : Long) : Long = {\n            if (n % k == 0) largestPrimeFactor(n / k, k)\n\
    \            else if (k * k > n) n\n            else largestPrimeFactor(n, k +\
    \ 1)\n        }\n        largestPrimeFactor(n, 2)", "        var max = 0l\n  \
    \      var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n \
    \               max = i\n                n /= i\n            }\n            else\
    \ i += 1\n        }\n        max"]
stop_tokens:
- "\n    }\n"
