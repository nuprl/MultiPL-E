name: HumanEval_59_largest_prime_factor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  \    // >>> largestPrimeFactor((13195l))\n    // (29l)\n    // >>> largestPrimeFactor((2048l))\n\
  \    // (2l)\n    def largestPrimeFactor(n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(largestPrimeFactor((15l))\
  \ == (5l));\n    assert(largestPrimeFactor((27l)) == (3l));\n    assert(largestPrimeFactor((63l))\
  \ == (7l));\n    assert(largestPrimeFactor((330l)) == (11l));\n    assert(largestPrimeFactor((13195l))\
  \ == (29l));\n    }\n\n}\n"
completions: ["        var m = n\n        var i = 2l\n        while (i <= m) {\n \
    \           if (m % i == 0) {\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        i", "        var largestPrimeFactor\
    \ = 0l\n        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i\n                n /= i\n     \
    \       }\n            else i += 1\n        }\n        largestPrimeFactor", " \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        return i", "        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        i", "        var largest = 0l\n        var i = 2l\n\
    \        while (i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i\n                n /= i\n            }\n            else i += 1\n      \
    \  }\n        largest", "        var x = n\n        var i = 2l\n        while\
    \ (i <= x) {\n            if (x % i == 0) {\n                x /= i\n        \
    \        i -= 1\n            }\n            i += 1\n        }\n        i", " \
    \       var result = 0l\n        var m = n\n        while (m % 2 == 0) {\n   \
    \         result = 2\n            m /= 2\n        }\n        var i = 3\n     \
    \   while (i <= sqrt(m)) {\n            while (m % i == 0) {\n               \
    \ result = i\n                m /= i\n            }\n            i += 2\n    \
    \    }\n        if (m > 2) result = m\n        result", "        var nn = n\n\
    \        var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                nn /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i", "        var max = 1l\n        var i = 2l\n   \
    \     while (i <= n) {\n            if (n % i == 0) {\n                max = i\n\
    \                n /= i\n            }\n            else i += 1\n        }\n \
    \       max", "        var x = n\n        var i = 2l\n        while (i <= x) {\n\
    \            if (x % i == 0) {\n                x /= i\n                i -= 1\n\
    \            }\n            i += 1\n        }\n        i", "        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        return i", "        val factors = new ArrayBuffer[Long]\n\
    \        var m = n\n        for (i <- 2l to sqrt(n).toLong) {\n            while\
    \ (m % i == 0) {\n                factors += i\n                m /= i\n     \
    \       }\n        }\n        if (m > 1) factors += m\n        factors.max", " \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        i", "        var largestPrimeFactor\
    \ = 1l\n        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largestPrimeFactor = i\n                n /= i\n     \
    \       }\n            else i += 1\n        }\n        largestPrimeFactor", " \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        i", "        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        return i", "        var i = 2l\n        var n2 = n\n     \
    \   while (i <= n2) {\n            if (n2 % i == 0) {\n                n2 /= i\n\
    \                i -= 1\n            }\n            i += 1\n        }\n      \
    \  return i", "        var largestPrimeFactor = 1l\n        var i = 2l\n     \
    \   while (i <= n) {\n            if (n % i == 0) {\n                largestPrimeFactor\
    \ = i\n                n /= i\n            }\n            else i += 1\n      \
    \  }\n        largestPrimeFactor", "        def largestPrimeFactor(n : Long, k\
    \ : Long) : Long = {\n            if (n % k == 0) largestPrimeFactor(n / k, k)\n\
    \            else if (k * k > n) n\n            else largestPrimeFactor(n, k +\
    \ 1)\n        }\n        largestPrimeFactor(n, 2)", "        var max = 0l\n  \
    \      var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n \
    \               max = i\n                n /= i\n            }\n            else\
    \ i += 1\n        }\n        max", "        var m = n\n        var i = 2l\n  \
    \      while (i <= m) {\n            if (m % i == 0) {\n                m /= i\n\
    \                i -= 1\n            }\n            i += 1\n        }\n      \
    \  i", "        var largest = 0l\n        var i = 2l\n        while (i <= n) {\n\
    \            if (n % i == 0) {\n                largest = i\n                n\
    \ /= i\n            }\n            else i += 1\n        }\n        largest", " \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n                i -= 1\n           \
    \ }\n            i += 1\n        }\n        return i", "        var result = 0l\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                result = i\n                n /= i\n            }\n         \
    \   else i += 1\n        }\n        result", "        var largest = 0l\n     \
    \   var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n    \
    \            largest = i\n                n /= i\n            }\n            else\
    \ i += 1\n        }\n        largest", "        var m = n\n        var i = 2l\n\
    \        while (i <= m) {\n            if (m % i == 0) {\n                m /=\
    \ i\n                i -= 1\n            }\n            i += 1\n        }\n  \
    \      i", "        def largestPrimeFactor(n : Long, factor : Long) : Long = {\n\
    \            if (n % factor == 0) largestPrimeFactor(n / factor, factor)\n   \
    \         else if (factor * factor > n) n\n            else largestPrimeFactor(n,\
    \ factor + 1)\n        }\n        largestPrimeFactor(n, 2)", "        val primes\
    \ = new PrimeIterator\n        var largestPrimeFactor = 1l\n        var x = n\n\
    \        while (x > 1) {\n            val p = primes.next\n            while (x\
    \ % p == 0) {\n                largestPrimeFactor = p\n                x /= p\n\
    \            }\n        }\n        largestPrimeFactor", "        def largestPrimeFactor(n\
    \ : Long, p : Long) : Long = {\n            if (n % p == 0) largestPrimeFactor(n\
    \ / p, p)\n            else if (p * p > n) n\n            else largestPrimeFactor(n,\
    \ p + 1)\n        }\n        largestPrimeFactor(n, 2)", "        var m = n\n \
    \       var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                i -= 1\n            }\n            i\
    \ += 1\n        }\n        i", "        var m = n\n        var i = 2l\n      \
    \  while (i <= m) {\n            if (m % i == 0) {\n                m /= i\n \
    \               while (m % i == 0) m /= i\n            }\n            i += 1\n\
    \        }\n        return i - 1", "        def largestPrimeFactor(n : Long, i\
    \ : Long) : Long = {\n            if (i > sqrt(n)) n\n            else if (n %\
    \ i == 0) largestPrimeFactor(n / i, i)\n            else largestPrimeFactor(n,\
    \ i + 1)\n        }\n        largestPrimeFactor(n, 2)", "        var result =\
    \ 0l\n        var m = n\n        var i = 2l\n        while (i <= m) {\n      \
    \      if (m % i == 0) {\n                result = i\n                m /= i\n\
    \            }\n            else i += 1\n        }\n        result", "       \
    \ var largest = 0l\n        var i = 2l\n        while (i <= n) {\n           \
    \ if (n % i == 0) {\n                largest = i\n                n /= i\n   \
    \         }\n            else i += 1\n        }\n        largest", "        var\
    \ m = n\n        var i = 2l\n        while (i * i <= m) {\n            if (m %\
    \ i == 0) {\n                m /= i\n                i -= 1\n            }\n \
    \           i += 1\n        }\n        m", "        var m = n\n        var i =\
    \ 2l\n        while (i * i <= m) {\n            if (m % i == 0) m /= i\n     \
    \       else i += 1\n        }\n        m", "        var m = n\n        var p\
    \ = 2l\n        while (m % p == 0) {\n            m /= p\n        }\n        p\
    \ += 1\n        while (m > 1) {\n            while (m % p == 0) {\n          \
    \      m /= p\n            }\n            p += 2\n        }\n        p - 2", " \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n                while (m % i == 0) m\
    \ /= i\n            }\n            i += 1\n        }\n        i - 1", "      \
    \  var largest = 0l\n        var i = 2l\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                largest = i\n                n /= i\n  \
    \          }\n            else i += 1\n        }\n        largest", "        var\
    \ m = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n                i -= 1\n            }\n      \
    \      i += 1\n        }\n        i", "        var x = n\n        var i = 2l\n\
    \        while (i <= x) {\n            if (x % i == 0) {\n                x /=\
    \ i\n                i -= 1\n            }\n            i += 1\n        }\n  \
    \      return i", "        var m = n\n        var p = 2l\n        while (m > 1)\
    \ {\n            if (m % p == 0) {\n                m /= p\n            } else\
    \ {\n                p += 1\n            }\n        }\n        p", "        def\
    \ largestPrimeFactor(n : Long, d : Long) : Long = {\n            if (n % d ==\
    \ 0) largestPrimeFactor(n / d, d)\n            else if (d * d > n) n\n       \
    \     else largestPrimeFactor(n, d + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)", "        var max = 0l\n        var i = 2l\n        var nn = n\n       \
    \ while (i <= nn) {\n            if (nn % i == 0) {\n                max = i\n\
    \                nn /= i\n            }\n            else i += 1\n        }\n\
    \        max", "        var largest = 0l\n        var i = 2l\n        while (i\
    \ <= sqrt(n)) {\n            if (n % i == 0) {\n                largest = i\n\
    \                n /= i\n            }\n            else i += 1\n        }\n \
    \       if (n > largest) n else largest", "        var max = 0l\n        var x\
    \ = n\n        var i = 2l\n        while (i <= x) {\n            if (x % i ==\
    \ 0) {\n                max = i\n                x /= i\n            }\n     \
    \       else i += 1\n        }\n        max", "        var m = n\n        var\
    \ i = 2l\n        while (i * i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        return m", "        var m = n\n        var i = 2l\n      \
    \  while (i <= sqrt(m)) {\n            if (m % i == 0) {\n                m /=\
    \ i\n                i -= 1\n            }\n            i += 1\n        }\n  \
    \      m", "        var x = n\n        var p = 2l\n        while (x % p == 0)\
    \ {\n            x /= p\n        }\n        p += 1\n        while (x > 1) {\n\
    \            while (x % p == 0) {\n                x /= p\n            }\n   \
    \         p += 2\n        }\n        p - 2", "        var x = n\n        var i\
    \ = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n            \
    \    x /= i\n                i -= 1\n            }\n            i += 1\n     \
    \   }\n        return i", "        var x = n\n        var factor = 2l\n      \
    \  while (x > 1) {\n            if (x % factor == 0) {\n                x /= factor\n\
    \                while (x % factor == 0) x /= factor\n            }\n        \
    \    factor += 1\n        }\n        factor", "        var p = 2l\n        var\
    \ m = n\n        while (p * p <= m) {\n            if (m % p == 0) {\n       \
    \         m /= p\n            } else {\n                p += 1\n            }\n\
    \        }\n        m", "        var primeFactors = new ListBuffer[Long]\n   \
    \     var i = 2l\n        var m = n\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                primeFactors += i\n                m /= i\n\
    \            }\n            else i += 1\n        }\n        primeFactors.max",
  "        var maxPrime = -1l\n        var num = n\n        while (num % 2 == 0) {\n\
    \            maxPrime = 2\n            num /= 2\n        }\n        var i = 3\n\
    \        while (i <= sqrt(num)) {\n            while (num % i == 0) {\n      \
    \          maxPrime = i\n                num /= i\n            }\n           \
    \ i += 2\n        }\n        if (num > 2) maxPrime = num\n        return maxPrime",
  "        var max = 0l\n        var i = 2l\n        while (i <= n) {\n          \
    \  if (n % i == 0) {\n                max = i\n                n /= i\n      \
    \      }\n            else i += 1\n        }\n        max", "        var m = n\n\
    \        var i = 2l\n        while (i <= sqrt(m)) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n                i -= 1\n            }\n      \
    \      i += 1\n        }\n        m", "        var m = n\n        var p = 2l\n\
    \        while (m % p == 0) {\n            m /= p\n        }\n        p += 1\n\
    \        while (m > 1) {\n            while (m % p == 0) {\n                m\
    \ /= p\n            }\n            p += 2\n        }\n        p - 2", "      \
    \  var x = n\n        var i = 2l\n        while (i <= sqrt(x)) {\n           \
    \ if (x % i == 0) {\n                x /= i\n                i -= 1\n        \
    \    }\n            i += 1\n        }\n        x", "        var largest = 0l\n\
    \        var i = 2l\n        while (i <= sqrt(n)) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        if (n > largest) n else largest",
  "        val primes = new ArrayBuffer[Long]\n        var m = n\n        while (m\
    \ % 2 == 0) {\n            primes += 2\n            m /= 2\n        }\n      \
    \  var i = 3\n        while (i <= sqrt(m)) {\n            while (m % i == 0) {\n\
    \                primes += i\n                m /= i\n            }\n        \
    \    i += 2\n        }\n        if (m > 1) primes += m\n        primes.max", " \
    \       var largest = 0l\n        var i = 2l\n        while (i <= n) {\n     \
    \       if (n % i == 0) {\n                largest = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        largest", "      \
    \  var max = 0l\n        var m = n\n        for (i <- 2l to sqrt(n).toLong) {\n\
    \            if (m % i == 0) {\n                max = i\n                while\
    \ (m % i == 0) m /= i\n            }\n        }\n        if (m > 1) max = m\n\
    \        max", "        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        i", "        val\
    \ primes = new PrimeIterator\n        var result = 1l\n        while (n > 1) {\n\
    \            val p = primes.next\n            while (n % p == 0) {\n         \
    \       result = p\n                n /= p\n            }\n        }\n       \
    \ result", "        var x = n\n        var i = 2l\n        while (i <= x) {\n\
    \            if (x % i == 0) {\n                x /= i\n                i -= 1\n\
    \            }\n            i += 1\n        }\n        i", "        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        i", "        var m = n\n        var p = 2l\n    \
    \    while (m % p == 0) {\n            m /= p\n        }\n        p += 1\n   \
    \     while (m > 1) {\n            while (m % p == 0) {\n                m /=\
    \ p\n            }\n            p += 2\n        }\n        p - 2", "        var\
    \ largest = 0l\n        var i = 2l\n        while (i <= n) {\n            if (n\
    \ % i == 0) {\n                largest = i\n                n /= i\n         \
    \   }\n            else i += 1\n        }\n        largest", "        var largest\
    \ = 0l\n        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                largest = i\n                n /= i\n            }\n \
    \           else i += 1\n        }\n        largest", "        var result = 1l\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                result = i\n                n /= i\n            }\n         \
    \   else i += 1\n        }\n        result", "        var largest = 0l\n     \
    \   var i = 2l\n        while (i <= sqrt(n)) {\n            if (n % i == 0) {\n\
    \                if (isPrime(i)) largest = i\n                if (isPrime(n /\
    \ i)) largest = n / i\n            }\n            i += 1\n        }\n        largest",
  "        val primes = new PrimeGenerator(n)\n        var p = primes.next\n     \
    \   var m = n\n        while (p * p <= m) {\n            if (m % p == 0) {\n \
    \               m /= p\n                p = primes.next\n            } else {\n\
    \                p = primes.next\n            }\n        }\n        m", "    \
    \    var result = 0l\n        var i = 2l\n        while (i <= n) {\n         \
    \   if (n % i == 0) {\n                result = i\n                n /= i\n  \
    \          }\n            else i += 1\n        }\n        result", "        var\
    \ m = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        return i", "        var m = n\n        var\
    \ i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      m /= i\n            } else {\n                i += 1\n            }\n \
    \       }\n        i", "        var m = n\n        var i = 2l\n        while (i\
    \ <= m) {\n            if (m % i == 0) {\n                m /= i\n           \
    \ } else {\n                i += 1\n            }\n        }\n        i", "  \
    \      var x = n\n        var i = 2l\n        while (i <= x) {\n            if\
    \ (x % i == 0) {\n                x /= i\n                i -= 1\n           \
    \ }\n            i += 1\n        }\n        i", "        var m = n\n        var\
    \ i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      m /= i\n                i -= 1\n            }\n            i += 1\n   \
    \     }\n        return i", "        var factors = new ListBuffer[Long]\n    \
    \    var i = 2l\n        while (i <= sqrt(n)) {\n            if (n % i == 0) {\n\
    \                factors += i\n                factors += n / i\n            }\n\
    \            i += 1\n        }\n        factors.filter(x => isPrime(x)).max",
  "        var x = n\n        var i = 2l\n        while (i <= x) {\n            if\
    \ (x % i == 0) {\n                x /= i\n                i -= 1\n           \
    \ }\n            i += 1\n        }\n        i", "        var m = n\n        var\
    \ i = 2l\n        while (i * i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n                i -= 1\n            }\n            i += 1\n\
    \        }\n        m", "        var x = n\n        var p = 2l\n        while\
    \ (x > 1) {\n            if (x % p == 0) {\n                x /= p\n         \
    \   } else {\n                p += 1\n            }\n        }\n        p", " \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n                i -= 1\n           \
    \ }\n            i += 1\n        }\n        i", "        def largestPrimeFactor(n\
    \ : Long, i : Long) : Long = {\n            if (i > n) throw new Exception(\"\
    No prime factor found\")\n            if (n % i == 0) {\n                if (isPrime(n\
    \ / i)) n / i\n                else largestPrimeFactor(n / i, i)\n           \
    \ }\n            else largestPrimeFactor(n, i + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)", "        var max = 0l\n        var i = 2l\n        while (i <= n) {\n \
    \           if (n % i == 0) {\n                max = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        max", "        var\
    \ m = n\n        var i = 2l\n        while (i * i <= m) {\n            if (m %\
    \ i == 0) {\n                m /= i\n                i -= 1\n            }\n \
    \           i += 1\n        }\n        m", "        var m = n\n        var i =\
    \ 2l\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  m /= i\n                i -= 1\n            }\n            i += 1\n       \
    \ }\n        i", "        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                m /= i\n                i\
    \ -= 1\n            }\n            i += 1\n        }\n        i", "        var\
    \ m = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n                i -= 1\n            }\n      \
    \      i += 1\n        }\n        i", "        def largestPrimeFactor(n : Long,\
    \ d : Long) : Long = {\n            if (n % d == 0) largestPrimeFactor(n / d,\
    \ d)\n            else if (d * d > n) n\n            else largestPrimeFactor(n,\
    \ d + 1)\n        }\n        largestPrimeFactor(n, 2)", "        var m = n\n \
    \       var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n                while (m % i == 0) m /= i\n         \
    \   }\n            i += 1\n        }\n        m", "        var largest = 0l\n\
    \        var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n\
    \                largest = i\n                n /= i\n            }\n        \
    \    else i += 1\n        }\n        largest", "        var max = 0l\n       \
    \ var i = 2l\n        while (i <= sqrt(n)) {\n            if (n % i == 0) {\n\
    \                if (isPrime(i)) max = i\n                if (isPrime(n / i))\
    \ max = n / i\n            }\n            i += 1\n        }\n        max", " \
    \       var nn = n\n        var i = 2l\n        while (i <= nn) {\n          \
    \  if (nn % i == 0) {\n                nn /= i\n                i -= 1\n     \
    \       }\n            i += 1\n        }\n        return i", "        val factors\
    \ = new ArrayBuffer[Long]()\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors += i\n  \
    \              m /= i\n            }\n            else i += 1\n        }\n   \
    \     factors.max", "        var largest = 0l\n        var i = 2l\n        while\
    \ (i <= n) {\n            if (n % i == 0) {\n                largest = i\n   \
    \             n /= i\n            }\n            else i += 1\n        }\n    \
    \    largest", "        var m = n\n        var p = 2l\n        while (m % p ==\
    \ 0) {\n            m /= p\n        }\n        p += 1\n        while (m > 1) {\n\
    \            while (m % p == 0) {\n                m /= p\n            }\n   \
    \         p += 2\n        }\n        p - 2", "        var m = n\n        var i\
    \ = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n            \
    \    m /= i\n                i -= 1\n            }\n            i += 1\n     \
    \   }\n        i", "        var x = n\n        var i = 2l\n        while (i <=\
    \ x) {\n            if (x % i == 0) {\n                x /= i\n              \
    \  i -= 1\n            }\n            i += 1\n        }\n        i", "       \
    \ var largest = 1l\n        var i = 2l\n        while (i <= n) {\n           \
    \ if (n % i == 0) {\n                largest = i\n                n /= i\n   \
    \         }\n            else i += 1\n        }\n        largest", "        var\
    \ largest = 0l\n        var i = 2l\n        while (i <= n) {\n            if (n\
    \ % i == 0) {\n                largest = i\n                n /= i\n         \
    \   }\n            else i += 1\n        }\n        largest", "        var i =\
    \ 2l\n        var n2 = n\n        while (i * i <= n2) {\n            if (n2 %\
    \ i == 0) {\n                n2 /= i\n                i -= 1\n            }\n\
    \            i += 1\n        }\n        n2", "        var m = n\n        var i\
    \ = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n            \
    \    m /= i\n                i -= 1\n            }\n            i += 1\n     \
    \   }\n        i", "        var result = 0l\n        var x = n\n        while\
    \ (x % 2 == 0) {\n            result = 2\n            x /= 2\n        }\n    \
    \    var i = 3\n        while (i <= sqrt(x)) {\n            while (x % i == 0)\
    \ {\n                result = i\n                x /= i\n            }\n     \
    \       i += 2\n        }\n        if (x > 2) result = x\n        result", " \
    \       def largestPrimeFactor(n : Long, p : Long) : Long = {\n            if\
    \ (n % p == 0) largestPrimeFactor(n / p, p)\n            else if (p * p > n) n\n\
    \            else largestPrimeFactor(n, p + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)", "        var m = n\n        var i = 2l\n        while (i <= m) {\n    \
    \        if (m % i == 0) {\n                m /= i\n            } else {\n   \
    \             i += 1\n            }\n        }\n        i", "        var x = n\n\
    \        var factor = 2l\n        while (x > 1) {\n            if (x % factor\
    \ == 0) {\n                x /= factor\n                while (x % factor == 0)\
    \ x /= factor\n            }\n            factor += 1\n        }\n        factor",
  "        def largestPrimeFactor(n : Long, p : Long) : Long = {\n            if (n\
    \ % p == 0) largestPrimeFactor(n / p, p)\n            else if (p * p > n) n\n\
    \            else largestPrimeFactor(n, p + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)", "        var m = n\n        var k = 2l\n        while (m > 1) {\n     \
    \       if (m % k == 0) {\n                m /= k\n            } else {\n    \
    \            k += 1\n            }\n        }\n        k", "        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                m /= i\n            } else {\n                i += 1\n      \
    \      }\n        }\n        i", "        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    return i", "        var p = 2l\n        var nn = n\n        while (p * p\
    \ <= nn) {\n            if (nn % p == 0) nn /= p\n            else p += 1\n  \
    \      }\n        nn", "        var i = 2l\n        var nn = n\n        while\
    \ (i <= nn) {\n            if (nn % i == 0) {\n                nn /= i\n     \
    \           i -= 1\n            }\n            i += 1\n        }\n        i",
  "        var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        i", "        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        return i", "        var m = n\n        var i = 2l\n      \
    \  while (i <= m) {\n            if (m % i == 0) {\n                m /= i\n \
    \           } else {\n                i += 1\n            }\n        }\n     \
    \   i", "        var m = n\n        var i = 2l\n        while (i <= m) {\n   \
    \         if (m % i == 0) {\n                m /= i\n            } else {\n  \
    \              i += 1\n            }\n        }\n        i", "        var max\
    \ = 0l\n        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                max = i\n                n /= i\n            }\n     \
    \       else i += 1\n        }\n        max", "        def largestPrimeFactor(n\
    \ : Long, i : Long) : Long = {\n            if (i * i > n) n\n            else\
    \ if (n % i == 0) largestPrimeFactor(n / i, i)\n            else largestPrimeFactor(n,\
    \ i + 1)\n        }\n        largestPrimeFactor(n, 2)", "        var nn = n\n\
    \        var i = 2l\n        while (i <= sqrt(nn)) {\n            if (nn % i ==\
    \ 0) {\n                nn /= i\n                i -= 1\n            }\n     \
    \       i += 1\n        }\n        nn", "        val primes = new PrimeGenerator\n\
    \        var p = primes.next\n        var m = n\n        while (p * p <= m) {\n\
    \            while (m % p == 0) m /= p\n            p = primes.next\n        }\n\
    \        m", "        var i = 2l\n        var m = n\n        while (i <= m) {\n\
    \            if (m % i == 0) {\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        i", "        var result\
    \ = 1l\n        var i = 2l\n        while (i <= n) {\n            if (n % i ==\
    \ 0) {\n                result = i\n                n /= i\n            }\n  \
    \          else i += 1\n        }\n        result", "        var m = n\n     \
    \   var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n    \
    \            m /= i\n            } else {\n                i += 1\n          \
    \  }\n        }\n        return i", "        var largest = 1l\n        var m =\
    \ n\n        for (i <- 2l to sqrt(n).toLong) {\n            while (m % i == 0)\
    \ {\n                m /= i\n                largest = i\n            }\n    \
    \    }\n        if (m > 1) largest = m\n        largest", "        var largest\
    \ = 0l\n        var m = n\n        var i = 2l\n        while (i <= m) {\n    \
    \        if (m % i == 0) {\n                largest = i\n                m /=\
    \ i\n            }\n            else i += 1\n        }\n        largest", "  \
    \      // Find the largest prime factor of n.\n        // >>> largestPrimeFactor((13195l))\n\
    \        // (29l)\n        // >>> largestPrimeFactor((2048l))\n        // (2l)\n\
    \        def largestPrimeFactor(n : Long, p : Long) : Long = {\n            if\
    \ (n % p == 0) largestPrimeFactor(n / p, p)\n            else if (p * p > n) n\n\
    \            else largestPrimeFactor(n, p + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)", "        var x = n\n        var i = 2l\n        while (i <= x) {\n    \
    \        if (x % i == 0) {\n                x /= i\n                i -= 1\n \
    \           }\n            i += 1\n        }\n        i", "        var largest\
    \ = 0l\n        var i = 2l\n        while (i * i <= n) {\n            if (n %\
    \ i == 0) {\n                largest = i\n                n /= i\n           \
    \ }\n            else i += 1\n        }\n        if (n > largest) n else largest",
  "        var largest = 0l\n        var i = 2l\n        while (i <= sqrt(n)) {\n\
    \            if (n % i == 0) {\n                if (isPrime(i)) largest = i\n\
    \                if (isPrime(n / i)) largest = n / i\n            }\n        \
    \    i += 1\n        }\n        largest", "        def largestPrimeFactor0(n :\
    \ Long, p : Long) : Long = {\n            if (n % p == 0) largestPrimeFactor0(n\
    \ / p, p)\n            else if (p == 2) largestPrimeFactor0(n, p + 1)\n      \
    \      else if (p * p > n) n\n            else largestPrimeFactor0(n, p + 2)\n\
    \        }\n        largestPrimeFactor0(n, 2)", "        var m = n\n        var\
    \ i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n          \
    \      m /= i\n            } else {\n                i += 1\n            }\n \
    \       }\n        return i", "        def largestPrimeFactor(n : Long, i : Long)\
    \ : Long = {\n            if (i * i > n) n\n            else if (n % i == 0) largestPrimeFactor(n\
    \ / i, i)\n            else largestPrimeFactor(n, i + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)", "        def largestPrimeFactor(n : Long, factor : Long) : Long = {\n \
    \           if (n == 1) factor\n            else if (n % factor == 0) largestPrimeFactor(n\
    \ / factor, factor)\n            else largestPrimeFactor(n, factor + 1)\n    \
    \    }\n        largestPrimeFactor(n, 2)", "        var largest = 0l\n       \
    \ var i = 2l\n        while (i <= sqrt(n)) {\n            if (n % i == 0) {\n\
    \                if (isPrime(i)) largest = i\n                if (isPrime(n /\
    \ i)) return n / i\n            }\n            i += 1\n        }\n        largest",
  "        var largest = 0l\n        var i = 2l\n        while (i <= n) {\n      \
    \      if (n % i == 0) {\n                largest = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        largest", "      \
    \  def largestPrimeFactor(n : Long, factor : Long) : Long = {\n            if\
    \ (n == 1) factor\n            else if (n % factor == 0) largestPrimeFactor(n\
    \ / factor, factor)\n            else largestPrimeFactor(n, factor + 1)\n    \
    \    }\n        largestPrimeFactor(n, 2)", "        var p = 2l\n        var m\
    \ = n\n        while (m % p == 0) {\n            m /= p\n        }\n        p\
    \ += 1\n        while (p * p <= m) {\n            while (m % p == 0) {\n     \
    \           m /= p\n            }\n            p += 2\n        }\n        if (m\
    \ > 1) m else p", "        var largest = 1l\n        var i = 2l\n        var nn\
    \ = n\n        while (i <= nn) {\n            if (nn % i == 0) {\n           \
    \     largest = i\n                nn /= i\n            }\n            else i\
    \ += 1\n        }\n        largest", "        var largest = 0l\n        var i\
    \ = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n            \
    \    largest = i\n                n /= i\n            }\n            else i +=\
    \ 1\n        }\n        largest", "        // Find the largest prime factor of\
    \ n.\n        // The largest prime factor of n is less than or equal to sqrt(n).\n\
    \        // If n is a prime, then n is the largest prime factor of n.\n      \
    \  // If n is not a prime, then n is divisible by a prime p.\n        // The largest\
    \ prime factor of n is either p or the largest prime factor of n / p.\n      \
    \  // If n is not a prime, then n is divisible by a prime p.\n        // The largest\
    \ prime factor of n is either p or the largest prime factor of n / p.\n      \
    \  def largestPrimeFactor(n : Long, p : Long) : Long = {\n            if (n ==\
    \ p) p\n            else if (n % p == 0) largestPrimeFactor(n / p, p)\n      \
    \      else largestPrimeFactor(n, p + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)", "        val primes = new ArrayBuffer[Long]\n        var m = n\n      \
    \  while (m % 2 == 0) {\n            primes += 2\n            m /= 2\n       \
    \ }\n        var i = 3\n        while (i <= sqrt(m)) {\n            while (m %\
    \ i == 0) {\n                primes += i\n                m /= i\n           \
    \ }\n            i += 2\n        }\n        if (m > 1) primes += m\n        primes.max",
  "        var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n                i -= 1\n           \
    \ }\n            i += 1\n        }\n        i", "        var p = 2l\n        var\
    \ nn = n\n        while (nn % p == 0) {\n            nn /= p\n        }\n    \
    \    p += 1\n        while (p * p <= nn) {\n            while (nn % p == 0) {\n\
    \                nn /= p\n            }\n            p += 2\n        }\n     \
    \   if (nn > 1) nn else p", "        var largestPrimeFactor = 1l\n        var\
    \ current = n\n        while (current % 2 == 0) {\n            largestPrimeFactor\
    \ = 2\n            current /= 2\n        }\n        var factor = 3\n        while\
    \ (factor <= sqrt(current)) {\n            if (current % factor == 0) {\n    \
    \            largestPrimeFactor = factor\n                current /= factor\n\
    \            }\n            else factor += 2\n        }\n        if (current >\
    \ largestPrimeFactor) largestPrimeFactor = current\n        largestPrimeFactor",
  "        var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n                i -= 1\n           \
    \ }\n            i += 1\n        }\n        i", "        var i = 2l\n        var\
    \ m = n\n        while (i <= m) {\n            if (m % i == 0) {\n           \
    \     m /= i\n            } else {\n                i += 1\n            }\n  \
    \      }\n        i", "        var x = n\n        var p = 2l\n        while (x\
    \ % p == 0) {\n            x /= p\n        }\n        p += 1\n        while (x\
    \ > 1) {\n            while (x % p == 0) {\n                x /= p\n         \
    \   }\n            p += 2\n        }\n        p - 2", "        var i = 2l\n  \
    \      var n2 = n\n        while (i <= sqrt(n)) {\n            if (n2 % i == 0)\
    \ {\n                n2 /= i\n                i -= 1\n            }\n        \
    \    i += 1\n        }\n        n2", "        var m = n\n        var p = 2l\n\
    \        while (m % p == 0) {\n            m /= p\n        }\n        p += 1\n\
    \        while (m > 1) {\n            while (m % p == 0) {\n                m\
    \ /= p\n            }\n            p += 2\n        }\n        p - 2", "      \
    \  var largestPrimeFactor = 0l\n        var i = 2l\n        while (i <= sqrt(n))\
    \ {\n            if (n % i == 0) {\n                largestPrimeFactor = i\n \
    \               while (n % i == 0) n /= i\n            }\n            i += 1\n\
    \        }\n        if (n > 1) largestPrimeFactor = n\n        largestPrimeFactor",
  "        var factor = 2l\n        var num = n\n        while (factor <= num) {\n\
    \            if (num % factor == 0) {\n                num /= factor\n       \
    \     } else {\n                factor += 1\n            }\n        }\n      \
    \  factor", "        var m = n\n        var p = 2l\n        while (m % p == 0)\
    \ {\n            m /= p\n        }\n        p += 1\n        while (m > 1) {\n\
    \            while (m % p == 0) {\n                m /= p\n            }\n   \
    \         p += 2\n        }\n        p - 2", "        var nn = n\n        var\
    \ i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n        \
    \        nn /= i\n                i -= 1\n            }\n            i += 1\n\
    \        }\n        return i", "        var n2 = n\n        var i = 2l\n     \
    \   while (i <= n2) {\n            if (n2 % i == 0) {\n                n2 /= i\n\
    \                i -= 1\n            }\n            i += 1\n        }\n      \
    \  i", "        var max = 0l\n        var i = 2l\n        while (i <= n) {\n \
    \           if (n % i == 0) {\n                max = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        max", "        var\
    \ m = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n                i -= 1\n            }\n      \
    \      i += 1\n        }\n        return i", "        var largest = 1l\n     \
    \   var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n    \
    \            largest = i\n                n /= i\n            }\n            else\
    \ i += 1\n        }\n        largest", "        var i = 2l\n        var m = n\n\
    \        while (i <= m) {\n            if (m % i == 0) {\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        return i", "        var m = n\n        var i = 2l\n        while (i <=\
    \ m) {\n            if (m % i == 0) {\n                m /= i\n              \
    \  i -= 1\n            }\n            i += 1\n        }\n        return i", " \
    \       var x = n\n        var i = 2l\n        while (i <= x) {\n            if\
    \ (x % i == 0) {\n                x /= i\n                i -= 1\n           \
    \ }\n            i += 1\n        }\n        i", "        var largest = 0l\n  \
    \      var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n \
    \               largest = i\n                n /= i\n            }\n         \
    \   else i += 1\n        }\n        largest", "        var primeFactors = new\
    \ ListBuffer[Long]()\n        var i = 2l\n        var nn = n\n        while (i\
    \ <= nn) {\n            if (nn % i == 0) {\n                primeFactors += i\n\
    \                nn /= i\n            }\n            else i += 1\n        }\n\
    \        primeFactors.max", "        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                m /= i\n        \
    \        i -= 1\n            }\n            i += 1\n        }\n        return\
    \ i", "        var m = n\n        var i = 2l\n        while (i * i <= m) {\n \
    \           if (m % i == 0) {\n                m /= i\n                i -= 1\n\
    \            }\n            i += 1\n        }\n        m", "        var result\
    \ = 0l\n        var m = n\n        var i = 2l\n        while (i <= m) {\n    \
    \        if (m % i == 0) {\n                result = i\n                m /= i\n\
    \            }\n            else i += 1\n        }\n        result", "       \
    \ var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m %\
    \ i == 0) {\n                m /= i\n                i -= 1\n            }\n \
    \           i += 1\n        }\n        i", "        var max = 0l\n        var\
    \ x = n\n        while (x % 2 == 0) {\n            max = 2\n            x /= 2\n\
    \        }\n        var i = 3\n        while (i <= sqrt(x)) {\n            while\
    \ (x % i == 0) {\n                max = i\n                x /= i\n          \
    \  }\n            i += 2\n        }\n        if (x > 2) max = x\n        max",
  "        var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n                i -= 1\n           \
    \ }\n            i += 1\n        }\n        return i", "        var i = 2l\n \
    \       var nn = n\n        while (i * i <= nn) {\n            if (nn % i == 0)\
    \ {\n                nn /= i\n                i -= 1\n            }\n        \
    \    i += 1\n        }\n        nn", "        var largest = 0l\n        var i\
    \ = 2l\n        while (i <= sqrt(n)) {\n            if (n % i == 0) {\n      \
    \          largest = i\n                while (n % i == 0) n /= i\n          \
    \  }\n            i += 1\n        }\n        if (n > 1) largest = n\n        largest",
  "        var result = 0l\n        var i = 2l\n        while (i <= n) {\n       \
    \     if (n % i == 0) {\n                result = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        result", "       \
    \ val factors = new ArrayBuffer[Long]\n        var m = n\n        while (m % 2\
    \ == 0) {\n            factors += 2\n            m /= 2\n        }\n        var\
    \ i = 3\n        while (i <= sqrt(m)) {\n            while (m % i == 0) {\n  \
    \              factors += i\n                m /= i\n            }\n         \
    \   i += 2\n        }\n        if (m > 2) factors += m\n        factors.max",
  "        var largest = 0l\n        var i = 2l\n        while (i <= n) {\n      \
    \      if (n % i == 0) {\n                largest = i\n                n /= i\n\
    \            }\n            else i += 1\n        }\n        largest", "      \
    \  var x = n\n        var factor = 2l\n        while (x > 1) {\n            if\
    \ (x % factor == 0) {\n                x /= factor\n                while (x %\
    \ factor == 0) x /= factor\n            }\n            factor += 1\n        }\n\
    \        factor", "        var max = 1l\n        var i = 2l\n        var nn =\
    \ n\n        while (i <= nn) {\n            if (nn % i == 0) {\n             \
    \   max = i\n                nn /= i\n            }\n            else i += 1\n\
    \        }\n        max", "        var largest = 0l\n        var i = 2l\n    \
    \    while (i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i\n                n /= i\n            }\n            else i += 1\n      \
    \  }\n        largest", "        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                m /= i\n        \
    \        i -= 1\n            }\n            i += 1\n        }\n        i", " \
    \       var max = 0l\n        var i = 2l\n        while (i <= n) {\n         \
    \   if (n % i == 0) {\n                max = i\n                n /= i\n     \
    \       }\n            else i += 1\n        }\n        max", "        def largestPrimeFactor(n\
    \ : Long, p : Long) : Long = {\n            if (n % p == 0) largestPrimeFactor(n\
    \ / p, p)\n            else if (p * p > n) n\n            else largestPrimeFactor(n,\
    \ p + 1)\n        }\n        largestPrimeFactor(n, 2)", "        var max = 1l\n\
    \        var i = 2l\n        var nn = n\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                max = i\n                nn /= i\n   \
    \         }\n            else i += 1\n        }\n        max", "        var i\
    \ = 2l\n        var nn = n\n        while (i <= nn) {\n            if (nn % i\
    \ == 0) {\n                nn /= i\n                i -= 1\n            }\n  \
    \          i += 1\n        }\n        i", "        var largest = 0l\n        var\
    \ i = 2l\n        var nn = n\n        while (i <= nn) {\n            if (nn %\
    \ i == 0) {\n                nn /= i\n                largest = i\n          \
    \  }\n            else i += 1\n        }\n        largest", "        def largestPrimeFactor(n\
    \ : Long, current : Long) : Long = {\n            if (n == 1) current\n      \
    \      else if (n % current == 0) largestPrimeFactor(n / current, current)\n \
    \           else largestPrimeFactor(n, current + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)", "        var largest = 0l\n        var i = 2l\n        while (i <= sqrt(n))\
    \ {\n            if (n % i == 0) {\n                if (isPrime(i)) largest =\
    \ i\n                if (isPrime(n / i)) largest = n / i\n            }\n    \
    \        i += 1\n        }\n        largest", "        var m = n\n        var\
    \ p = 2l\n        while (m > 1) {\n            while (m % p == 0) {\n        \
    \        m /= p\n            }\n            p += 1\n        }\n        p - 1",
  "        var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n                i -= 1\n           \
    \ }\n            i += 1\n        }\n        i", "        def largestPrimeFactor(n\
    \ : Long, i : Long) : Long = {\n            if (i > n) throw new Exception(\"\
    n is prime\")\n            if (n % i == 0) {\n                if (isPrime(n /\
    \ i)) n / i\n                else largestPrimeFactor(n / i, i)\n            }\n\
    \            else largestPrimeFactor(n, i + 1)\n        }\n        largestPrimeFactor(n,\
    \ 2)", "        var p = 2l\n        var m = n\n        while (m > 1) {\n     \
    \       if (m % p == 0) {\n                m /= p\n            } else {\n    \
    \            p += 1\n            }\n        }\n        p", "        var result\
    \ = 0l\n        var current = n\n        while (current % 2 == 0) {\n        \
    \    result = 2\n            current /= 2\n        }\n        var i = 3\n    \
    \    while (i <= sqrt(current)) {\n            while (current % i == 0) {\n  \
    \              result = i\n                current /= i\n            }\n     \
    \       i += 2\n        }\n        if (current > result) result = current\n  \
    \      result", "        var largest = 0l\n        var i = 2l\n        while (i\
    \ <= sqrt(n)) {\n            if (n % i == 0) {\n                largest = i\n\
    \                while (n % i == 0) n /= i\n            }\n            i += 1\n\
    \        }\n        if (n > 1) largest = n\n        largest", "        var m =\
    \ n\n        var i = 2l\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                m /= i\n            } else {\n                i += 1\n  \
    \          }\n        }\n        i", "        var x = n\n        var i = 2l\n\
    \        while (i <= x) {\n            if (x % i == 0) {\n                x /=\
    \ i\n                i -= 1\n            }\n            i += 1\n        }\n  \
    \      i", "        var m = n\n        var p = 2l\n        while (m > 1) {\n \
    \           if (m % p == 0) {\n                m /= p\n            } else {\n\
    \                p += 1\n            }\n        }\n        p", "        var m\
    \ = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        return i", "        var result = 0l\n     \
    \   var i = 2l\n        while (i <= n) {\n            if (n % i == 0) {\n    \
    \            result = i\n                n /= i\n            }\n            else\
    \ i += 1\n        }\n        result", "        var m = n\n        var i = 2l\n\
    \        while (i <= m) {\n            if (m % i == 0) {\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        i", "        var i = 2l\n        var nn = n\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                nn /= i\n               \
    \ i -= 1\n            }\n            i += 1\n        }\n        i", "        def\
    \ largestPrimeFactor(n : Long, p : Long) : Long = {\n            if (n == 1) p\n\
    \            else if (n % p == 0) largestPrimeFactor(n / p, p)\n            else\
    \ largestPrimeFactor(n, p + 1)\n        }\n        largestPrimeFactor(n, 2)",
  "        var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        return i"]
stop_tokens:
- "\n    }\n"
