language: scala
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        return (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((t, n) => (t._1\
    \ + n, t._2 * n))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (n <- numbers) {\n            sum += n\n            product *= n\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        return (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var sum = 0l\n  \
    \      var product = 1l\n        for (i <- numbers) {\n            sum += i\n\
    \            product *= i\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        return (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (n <- numbers) {\n            sum += n\n            product *= n\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var sum = 0l\n  \
    \      var product = 1l\n        for (i <- numbers) {\n            sum += i\n\
    \            product *= i\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        return (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        return (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        return (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        return (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((t, n) => (t._1\
    \ + n, t._2 * n))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (i <- numbers) {\n            sum += i\n            product *= i\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // TODO: Implement this method\n        (0l,\
    \ 1l)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpotkoje7i.scala:16)\n\tat Problem.main(tmpotkoje7i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        var sum = 0l\n  \
    \      var product = 1l\n        for (i <- numbers) {\n            sum += i\n\
    \            product *= i\n        }\n        (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((a, b) => (a._1\
    \ + b, a._2 * b))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        return (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (i <- numbers) {\n            sum += i\n            product *= i\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (n <- numbers) {\n            sum += n\n            product *= n\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (i <- numbers) {\n            sum += i\n            product\
    \ *= i\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (i <- numbers) {\n            sum += i\n            product *= i\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (i <- numbers) {\n            sum += i\n            product *= i\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((acc, x) => (acc._1\
    \ + x, acc._2 * x))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((x, y) => (x._1\
    \ + y, x._2 * y))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (i <- numbers) {\n            sum += i\n            product\
    \ *= i\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659804021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((acc, x) => (acc._1\
    \ + x, acc._2 * x))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (i <- numbers) {\n            sum += i\n            product *= i\n\
    \        }\n        (sum, product)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        return (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((x, y) => (x._1\
    \ + y, x._2 * y))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        // TODO: Implement this method\n        return\
    \ (0l, 0l)\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5p16gnx3.scala:15)\n\tat Problem.main(tmp5p16gnx3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659804021
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        numbers.foldLeft((0l, 1l))((t, n) => (t._1\
    \ + n, t._2 * n))\n    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        return (sum, product)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum : Long = 0\n        var product :\
    \ Long = 1\n        for (number <- numbers) {\n            sum += number\n   \
    \         product *= number\n        }\n        (sum, product)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        if (numbers.isEmpty) return (0, 1)\n     \
    \   var sum = 0l\n        var product = 1l\n        for (i <- numbers) {\n   \
    \         sum += i\n            product *= i\n        }\n        (sum, product)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        (numbers.sum, numbers.product)\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        return (sum, product)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n\
    \    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.sum\n        val product\
    \ = numbers.product\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        var sum = 0l\n        var product = 1l\n \
    \       for (number <- numbers) {\n            sum += number\n            product\
    \ *= number\n        }\n        (sum, product)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(sumProduct((List[Long]())).equals(((0l, 1l))));\n    assert(sumProduct((List[Long](1l.toLong,\
    \ 1l.toLong, 1l.toLong))).equals(((3l, 1l))));\n    assert(sumProduct((List[Long](100l.toLong,\
    \ 0l.toLong))).equals(((100l, 0l))));\n    assert(sumProduct((List[Long](3l.toLong,\
    \ 5l.toLong, 7l.toLong))).equals(((15l, 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l,\
    \ 10l))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // For a given list of integers, return a tuple consisting of a sum and\
    \ a product of all the integers in a list.\n    // Empty sum should be equal to\
    \ 0 and empty product should be equal to 1.\n    // >>> sumProduct((List[Long]()))\n\
    \    // ((0l, 1l))\n    // >>> sumProduct((List[Long](1l.toLong, 2l.toLong, 3l.toLong,\
    \ 4l.toLong)))\n    // ((10l, 24l))\n    def sumProduct(numbers : List[Long])\
    \ : Tuple2[Long, Long] = {\n        val sum = numbers.foldLeft(0l)(_ + _)\n  \
    \      val product = numbers.foldLeft(1l)(_ * _)\n        (sum, product)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(sumProduct((List[Long]())).equals(((0l,\
    \ 1l))));\n    assert(sumProduct((List[Long](1l.toLong, 1l.toLong, 1l.toLong))).equals(((3l,\
    \ 1l))));\n    assert(sumProduct((List[Long](100l.toLong, 0l.toLong))).equals(((100l,\
    \ 0l))));\n    assert(sumProduct((List[Long](3l.toLong, 5l.toLong, 7l.toLong))).equals(((15l,\
    \ 105l))));\n    assert(sumProduct((List[Long](10l.toLong))).equals(((10l, 10l))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659803960
