name: HumanEval_25_factorize
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n    // Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n    // Input number should be\
  \ equal to the product of all factors\n    // >>> factorize((8l))\n    // (List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))\n    // >>> factorize((25l))\n    // (List[Long](5l.toLong,\
  \ 5l.toLong))\n    // >>> factorize((70l))\n    // (List[Long](2l.toLong, 5l.toLong,\
  \ 7l.toLong))\n    def factorize(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(factorize((2l)).equals((List[Long](2l.toLong))));\n\
  \    assert(factorize((4l)).equals((List[Long](2l.toLong, 2l.toLong))));\n    assert(factorize((8l)).equals((List[Long](2l.toLong,\
  \ 2l.toLong, 2l.toLong))));\n    assert(factorize((57l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong))));\n    assert(factorize((3249l)).equals((List[Long](3l.toLong, 3l.toLong,\
  \ 19l.toLong, 19l.toLong))));\n    assert(factorize((185193l)).equals((List[Long](3l.toLong,\
  \ 3l.toLong, 3l.toLong, 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((20577l)).equals((List[Long](3l.toLong,\
  \ 19l.toLong, 19l.toLong, 19l.toLong))));\n    assert(factorize((18l)).equals((List[Long](2l.toLong,\
  \ 3l.toLong, 3l.toLong))));\n    }\n\n}\n"
completions: ["        var factors = List[Long]()\n        var nn = n\n        for\
    \ (i <- 2l to nn) {\n            while (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var m = n\n        var i = 2l\n        while (i * i <=\
    \ m) {\n            while (m % i == 0) {\n                result = result :+ i\n\
    \                m /= i\n            }\n            i += 1\n        }\n      \
    \  if (m > 1) result = result :+ m\n        return result", "        var result\
    \ = List[Long]()\n        var x = n\n        var i = 2l\n        while (i <= x)\
    \ {\n            if (x % i == 0) {\n                result = i :: result\n   \
    \             x /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        result", "        var result = List[Long]()\n      \
    \  var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m\
    \ % i == 0) {\n                result = result :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    result", "        var factors = List[Long]()\n        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var nn = n\n        var i = 2l\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var x = n\n        for (i <- 2l to n) {\n            while\
    \ (x % i == 0) {\n                result = result :+ i\n                x /= i\n\
    \            }\n        }\n        result", "        var factors = List[Long]()\n\
    \        var nn = n\n        var p = 2l\n        while (nn > 1) {\n          \
    \  while (nn % p == 0) {\n                factors = factors :+ p\n           \
    \     nn /= p\n            }\n            p += 1\n        }\n        factors",
  "        val factors = new ListBuffer[Long]\n        var m = n\n        var i =\
    \ 2l\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors += i\n                m /= i\n            } else {\n              \
    \  i += 1\n            }\n        }\n        factors.toList", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var nn = n\n        var factors = List[Long]()\n \
    \       var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ }\n            else i += 1\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var nn = n\n        var factors = List[Long]()\n \
    \       var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ }\n            else i += 1\n        }\n        factors", "        var factors\
    \ = new ListBuffer[Long]()\n        var nn = n\n        var i = 2l\n        while\
    \ (i <= nn) {\n            if (nn % i == 0) {\n                factors += i\n\
    \                nn /= i\n            } else {\n                i += 1\n     \
    \       }\n        }\n        factors.toList", "        var result = List[Long]()\n\
    \        var x = n\n        var i = 2l\n        while (i <= x) {\n           \
    \ if (x % i == 0) {\n                result = result :+ i\n                x /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        result", "        var result = List[Long]()\n        var m = n\n    \
    \    var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n   \
    \             result = result :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result", "    \
    \    var factors = List[Long]()\n        var nn = n\n        var i = 2l\n    \
    \    while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = new ListBuffer[Long]()\n        var nn = n\n        var i = 2l\n        while\
    \ (i <= nn) {\n            if (nn % i == 0) {\n                factors += i\n\
    \                nn /= i\n            } else {\n                i += 1\n     \
    \       }\n        }\n        factors.toList", "        var result = List[Long]()\n\
    \        var x = n\n        var i = 2l\n        while (i <= x) {\n           \
    \ if (x % i == 0) {\n                result = result :+ i\n                x /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        result", "        var factors = List[Long]()\n        var nn = n\n  \
    \      var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var i = 2l\n        var nn = n\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        val factors\
    \ = ListBuffer[Long]()\n        var m = n\n        var i = 2l\n        while (i\
    \ <= m) {\n            if (m % i == 0) {\n                factors += i\n     \
    \           m /= i\n            } else {\n                i += 1\n           \
    \ }\n        }\n        factors.toList", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        var factors = List[Long]()\n        var m\
    \ = n\n        var i = 2l\n        while (i <= m) {\n            while (m % i\
    \ == 0) {\n                factors = factors :+ i\n                m /= i\n  \
    \          }\n            i += 1\n        }\n        factors", "        var result\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                result = result :+ i\n   \
    \             m /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        result", "        var factors = List[Long]()\n     \
    \   var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m\
    \ % i == 0) {\n                factors = factors :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    factors", "        var factors = List[Long]()\n        var m = n\n      \
    \  var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n     \
    \           factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        val primes = new PrimeGenerator(n).getPrimes\n\
    \        var result = List[Long]()\n        var nn = n\n        for (p <- primes)\
    \ {\n            while (nn % p == 0) {\n                result = p :: result\n\
    \                nn /= p\n            }\n        }\n        result", "       \
    \ var factors = List[Long]()\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var nn = n\n \
    \       var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2l\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        val factors =\
    \ new ArrayBuffer[Long]\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors += i\n  \
    \              m /= i\n            } else {\n                i += 1\n        \
    \    }\n        }\n        factors.toList", "        var factors = List[Long]()\n\
    \        var x = n\n        while (x % 2 == 0) {\n            factors = 2l ::\
    \ factors\n            x /= 2\n        }\n        var i = 3\n        while (i\
    \ <= sqrt(x)) {\n            while (x % i == 0) {\n                factors = i.toLong\
    \ :: factors\n                x /= i\n            }\n            i += 2\n    \
    \    }\n        if (x > 1) factors = x.toLong :: factors\n        factors", " \
    \       var factors = List[Long]()\n        var nn = n\n        var i = 2l\n \
    \       while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        def factorize(n\
    \ : Long, d : Long) : List[Long] = {\n            if (n == 1) Nil\n          \
    \  else if (n % d == 0) d :: factorize(n / d, d)\n            else factorize(n,\
    \ d + 1)\n        }\n        factorize(n, 2)", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n \
    \               factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var i = 2l\n        var m = n\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var result = List[Long]()\n        var x = n\n   \
    \     var i = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n  \
    \              result = result :+ i\n                x /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result", "    \
    \    var factors = new ListBuffer[Long]\n        var m = n\n        var i = 2l\n\
    \        while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ += i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors.toList", "        var nn = n\n    \
    \    var result = List[Long]()\n        var i = 2l\n        while (i <= nn) {\n\
    \            if (nn % i == 0) {\n                result = result :+ i\n      \
    \          nn /= i\n            } else {\n                i += 1\n           \
    \ }\n        }\n        result", "        var factors = List[Long]()\n       \
    \ var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m %\
    \ i == 0) {\n                factors = factors :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    factors", "        var factors = new ListBuffer[Long]\n        var nn = n\n\
    \        var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors += i\n                nn /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors.toList", " \
    \       var factors = List[Long]()\n        var m = n\n        var i = 2l\n  \
    \      while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                result = result :+ i\n  \
    \              nn /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        result", "        var result = List[Long]()\n    \
    \    var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m\
    \ % i == 0) {\n                result = result :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    result", "        var factors = List[Long]()\n        var m = n\n       \
    \ for (i <- 2l to sqrt(n).toLong) {\n            while (m % i == 0) {\n      \
    \          factors = factors :+ i\n                m /= i\n            }\n   \
    \     }\n        if (m > 1) factors = factors :+ m\n        factors", "      \
    \  var result = List[Long]()\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                result = result :+\
    \ i\n                m /= i\n            } else {\n                i += 1\n  \
    \          }\n        }\n        result", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n \
    \               factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        val factors = new ArrayBuffer[Long]()\n        var m = n\n        var i\
    \ = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n            \
    \    factors += i\n                m /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors.toList", "        var factors\
    \ = new ListBuffer[Long]\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors += i\n  \
    \              m /= i\n            } else {\n                i += 1\n        \
    \    }\n        }\n        factors.toList", "        var result = List[Long]()\n\
    \        var nn = n\n        for (i <- 2l to nn) {\n            if (nn % i ==\
    \ 0) {\n                result = result :+ i\n                nn /= i\n      \
    \          i -= 1\n            }\n        }\n        result", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        val factors = new ListBuffer[Long]\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors += i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var result = List[Long]()\n        var nn = n\n \
    \       var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                result = result :+ i\n                nn /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        result", " \
    \       var factors = List[Long]()\n        var m = n\n        var i = 2l\n  \
    \      while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                factors = factors :+ i\n\
    \                nn /= i\n            } else {\n                i += 1\n     \
    \       }\n        }\n        factors", "        var result = List[Long]()\n \
    \       var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                result = result :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    result", "        val factors = ListBuffer[Long]()\n        var m = n\n \
    \       var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                factors += i\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors.toList", " \
    \       var result = List[Long]()\n        var m = n\n        var i = 2l\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                result\
    \ = result :+ i\n                m /= i\n            } else {\n              \
    \  i += 1\n            }\n        }\n        result", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        val factors = ListBuffer[Long]()\n       \
    \ var m = n\n        for (i <- 2l to n) {\n            while (m % i == 0) {\n\
    \                factors += i\n                m /= i\n            }\n       \
    \ }\n        factors.toList", "        var factors = List[Long]()\n        var\
    \ nn = n\n        var i = 2l\n        while (i <= nn) {\n            if (nn %\
    \ i == 0) {\n                factors = factors :+ i\n                nn /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    factors", "        var factors = new ListBuffer[Long]()\n        var m =\
    \ n\n        var i = 2l\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                factors += i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors.toList",
  "        var nn = n\n        var factors = List[Long]()\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            else i +=\
    \ 1\n        }\n        factors", "        var factors = List[Long]()\n      \
    \  var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m\
    \ % i == 0) {\n                factors = factors :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    factors", "        var factors = List[Long]()\n        var m = n\n      \
    \  var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n     \
    \           factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var nn = n\n        var i = 2l\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var result = List[Long]()\n   \
    \     var nn = n\n        var i = 2l\n        while (i <= nn) {\n            if\
    \ (nn % i == 0) {\n                result = result :+ i\n                nn /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        result", "        var factors = List[Long]()\n        var m = n\n   \
    \     var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n  \
    \              factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var nn = n\n\
    \        var result = List[Long]()\n        var i = 2l\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                result = result :+ i\n  \
    \              nn /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        result", "        var result = List[Long]()\n    \
    \    var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m\
    \ % i == 0) {\n                result = i :: result\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    result", "        var factors = List[Long]()\n        var nn = n\n      \
    \  for (i <- 2l to nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n                i -= 1\n          \
    \  }\n        }\n        factors", "        var factors = List[Long]()\n     \
    \   var nn = n\n        for (i <- 2l to nn) {\n            while (nn % i == 0)\
    \ {\n                factors = factors :+ i\n                nn /= i\n       \
    \     }\n        }\n        factors", "        var result = List[Long]()\n   \
    \     var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                result = result :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    result", "        var factors = new ListBuffer[Long]()\n        var nn =\
    \ n\n        var i = 2l\n        while (i <= nn) {\n            if (nn % i ==\
    \ 0) {\n                factors += i\n                nn /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors.toList",
  "        var result = List[Long]()\n        var nn = n\n        var i = 2l\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                result\
    \ = result :+ i\n                nn /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        result", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var result = List[Long]()\n        var x = n\n   \
    \     var i = 2l\n        while (i <= x) {\n            if (x % i == 0) {\n  \
    \              result = result :+ i\n                x /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result", "    \
    \    var factors = List[Long]()\n        var m = n\n        var i = 2l\n     \
    \   while (i <= m) {\n            if (m % i == 0) {\n                factors =\
    \ factors :+ i\n                m /= i\n            } else {\n               \
    \ i += 1\n            }\n        }\n        factors", "        var result = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                result = result :+ i\n               \
    \ nn /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        result", "        var factors = List[Long]()\n        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2l\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var n2 = n\n        var i = 2l\n        while (i <= n2) {\n           \
    \ if (n2 % i == 0) {\n                factors = factors :+ i\n               \
    \ n2 /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        factors", "        var factors = List[Long]()\n        var m =\
    \ n\n        var i = 2l\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                factors = factors :+ i\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        factors",
  "        var result = List[Long]()\n        var nn = n\n        var i = 2l\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                result\
    \ = result :+ i\n                nn /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        result", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      for (i <- 2l to m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n                i -= 1\n           \
    \ }\n        }\n        factors", "        var result = List[Long]()\n       \
    \ var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m %\
    \ i == 0) {\n                result = result :+ i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  result", "        val factors = new ListBuffer[Long]\n        var m = n\n \
    \       var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                factors += i\n                m /= i\n            } else {\n\
    \                i += 1\n            }\n        }\n        factors.toList", " \
    \       var factors = new ListBuffer[Long]\n        var m = n\n        var i =\
    \ 2l\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors += i\n                m /= i\n            } else {\n              \
    \  i += 1\n            }\n        }\n        factors.toList", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var result = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                result = result :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        result", "        var factors = List[Long]()\n        var m = n\n   \
    \     for (i <- 2l to sqrt(n).toLong) {\n            while (m % i == 0) {\n  \
    \              factors = factors :+ i\n                m /= i\n            }\n\
    \        }\n        if (m > 1) factors = factors :+ m\n        factors", "   \
    \     var result = List[Long]()\n        var m = n\n        var i = 2l\n     \
    \   while (i <= m) {\n            if (m % i == 0) {\n                result =\
    \ result :+ i\n                m /= i\n            } else {\n                i\
    \ += 1\n            }\n        }\n        result", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      var d = 2l\n        while (m > 1) {\n            while (m % d == 0) {\n\
    \                factors = factors :+ d\n                m /= d\n            }\n\
    \            d += 1\n        }\n        factors", "        var result = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                result = result :+ i\n               \
    \ nn /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        result", "        var factors = List[Long]()\n        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var nn = n\n        var factors = List[Long]()\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            else i +=\
    \ 1\n        }\n        factors", "        var factors = List[Long]()\n      \
    \  var x = n\n        var i = 2l\n        while (i <= x) {\n            while\
    \ (x % i == 0) {\n                factors = factors :+ i\n                x /=\
    \ i\n            }\n            i += 1\n        }\n        factors", "       \
    \ var factors = List[Long]()\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = new ListBuffer[Long]\n        var m\
    \ = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors += i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors.toList",
  "        val primes = new PrimeGenerator(n).getPrimes\n        val factors = new\
    \ ListBuffer[Long]\n        var nn = n\n        for (p <- primes) {\n        \
    \    while (nn % p == 0) {\n                factors += p\n                nn /=\
    \ p\n            }\n        }\n        factors.toList", "        var factors =\
    \ new ListBuffer[Long]\n        var m = n\n        for (i <- 2l to sqrt(n).toLong)\
    \ {\n            while (m % i == 0) {\n                factors += i\n        \
    \        m /= i\n            }\n        }\n        if (m > 1) factors += m\n \
    \       factors.toList", "        var factors = List[Long]()\n        var nn =\
    \ n\n        var i = 2l\n        while (i <= nn) {\n            if (nn % i ==\
    \ 0) {\n                factors = factors :+ i\n                nn /= i\n    \
    \        } else {\n                i += 1\n            }\n        }\n        factors",
  "        var result = List[Long]()\n        var nn = n\n        var i = 2l\n   \
    \     while (i <= nn) {\n            if (nn % i == 0) {\n                result\
    \ = result :+ i\n                nn /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        result", "        var factors =\
    \ List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                factors = factors :+ i\n\
    \                nn /= i\n            } else {\n                i += 1\n     \
    \       }\n        }\n        factors", "        var result = List[Long]()\n \
    \       var m = n\n        for (i <- 2l to n) {\n            while (m % i == 0)\
    \ {\n                result = result :+ i\n                m /= i\n          \
    \  }\n        }\n        result", "        var result = List[Long]()\n       \
    \ var m = n\n        var i = 2l\n        while (i * i <= m) {\n            while\
    \ (m % i == 0) {\n                result = i :: result\n                m /= i\n\
    \            }\n            i += 1\n        }\n        if (m > 1) result = m ::\
    \ result\n        result", "        var factors = List[Long]()\n        var nn\
    \ = n\n        while (nn % 2 == 0) {\n            factors = factors :+ 2\n   \
    \         nn /= 2\n        }\n        var i = 3\n        while (i <= sqrt(nn))\
    \ {\n            while (nn % i == 0) {\n                factors = factors :+ i\n\
    \                nn /= i\n            }\n            i += 2\n        }\n     \
    \   if (nn > 2) factors = factors :+ nn\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var n2 = n\n        var i = 2l\n        while (i <= n2) {\n           \
    \ if (n2 % i == 0) {\n                factors = factors :+ i\n               \
    \ n2 /= i\n            } else {\n                i += 1\n            }\n     \
    \   }\n        factors", "        var factors = List[Long]()\n        var m =\
    \ n\n        var i = 2l\n        while (i <= m) {\n            if (m % i == 0)\
    \ {\n                factors = factors :+ i\n                m /= i\n        \
    \    } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2l\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                result = result :+ i\n   \
    \             m /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        result", "        var result = List[Long]()\n      \
    \  var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m\
    \ % i == 0) {\n                result = result :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    result", "        var factors = List[Long]()\n        var m = n\n       \
    \ var d = 2l\n        while (m > 1) {\n            while (m % d == 0) {\n    \
    \            factors = factors :+ d\n                m /= d\n            }\n \
    \           d += 1\n        }\n        factors", "        var result = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                result = result :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        result", "        var factors = List[Long]()\n        var m = n\n   \
    \     var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n  \
    \              factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var result = List[Long]()\n        var x = n\n        while (x % 2 == 0)\
    \ {\n            result = 2 :: result\n            x /= 2\n        }\n       \
    \ var i = 3\n        while (i <= sqrt(x)) {\n            while (x % i == 0) {\n\
    \                result = i :: result\n                x /= i\n            }\n\
    \            i += 2\n        }\n        if (x > 1) result = x :: result\n    \
    \    result", "        var factors = List[Long]()\n        var m = n\n       \
    \ var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n      \
    \          factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                factors = factors :+ i\n\
    \                nn /= i\n            } else {\n                i += 1\n     \
    \       }\n        }\n        factors", "        var factors = List[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors = factors :+ i\n             \
    \   nn /= i\n            } else {\n                i += 1\n            }\n   \
    \     }\n        factors", "        var factors = List[Long]()\n        var m\
    \ = n\n        var i = 2l\n        while (i <= m) {\n            if (m % i ==\
    \ 0) {\n                factors = factors :+ i\n                m /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = new ListBuffer[Long]\n        var m = n\n        var i =\
    \ 2l\n        while (i <= m) {\n            if (m % i == 0) {\n              \
    \  factors += i\n                m /= i\n            } else {\n              \
    \  i += 1\n            }\n        }\n        factors.toList", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = List[Long]()\n  \
    \      var m = n\n        var i = 2l\n        while (i <= m) {\n            if\
    \ (m % i == 0) {\n                factors = factors :+ i\n                m /=\
    \ i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var result = List[Long]()\n        var m = n\n   \
    \     var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n  \
    \              result = result :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result", "    \
    \    var factors = List[Long]()\n        var nn = n\n        var i = 2l\n    \
    \    while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors", "        var factors = new ListBuffer[Long]\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors += i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var result = List[Long]()\n        var x = n\n  \
    \      while (x % 2 == 0) {\n            result = 2 :: result\n            x /=\
    \ 2\n        }\n        var i = 3\n        while (i <= sqrt(x)) {\n          \
    \  while (x % i == 0) {\n                result = i :: result\n              \
    \  x /= i\n            }\n            i += 2\n        }\n        if (x > 1) result\
    \ = x :: result\n        result", "        var factors = List[Long]()\n      \
    \  var m = n\n        var i = 2l\n        while (i <= m) {\n            if (m\
    \ % i == 0) {\n                factors = factors :+ i\n                m /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    factors", "        var factors = List[Long]()\n        var m = n\n      \
    \  var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n     \
    \           factors = factors :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        factors", "   \
    \     var factors = List[Long]()\n        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        for (i <- 2 to sqrt(n).toInt) {\n \
    \           while (m % i == 0) {\n                factors = factors :+ i\n   \
    \             m /= i\n            }\n        }\n        if (m > 1) factors = factors\
    \ :+ m\n        factors", "        var result = List[Long]()\n        var m =\
    \ n\n        var p = 2l\n        while (m > 1) {\n            while (m % p ==\
    \ 0) {\n                result = result :+ p\n                m /= p\n       \
    \     }\n            p += 1\n        }\n        result", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var factors = new ListBuffer[Long]\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors += i\n                m /= i\n  \
    \          } else {\n                i += 1\n            }\n        }\n      \
    \  factors.toList", "        var factors = List[Long]()\n        var m = n\n \
    \       var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2l\n   \
    \     while (i <= m) {\n            while (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            }\n            i += 1\n\
    \        }\n        factors", "        var factors = List[Long]()\n        var\
    \ x = n\n        var i = 2l\n        while (i <= x) {\n            if (x % i ==\
    \ 0) {\n                factors = factors :+ i\n                x /= i\n     \
    \       } else {\n                i += 1\n            }\n        }\n        factors",
  "        var result = List[Long]()\n        var m = n\n        var i = 2l\n    \
    \    while (i <= m) {\n            if (m % i == 0) {\n                result =\
    \ result :+ i\n                m /= i\n            } else {\n                i\
    \ += 1\n            }\n        }\n        result", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var m = n\n  \
    \      var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n \
    \               factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        val factors = ListBuffer[Long]()\n        var x = n\n        var i = 2l\n\
    \        while (i <= x) {\n            if (x % i == 0) {\n                factors\
    \ += i\n                x /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors.toList", "        val factors = new\
    \ ListBuffer[Long]\n        var m = n\n        var i = 2l\n        while (i <=\
    \ m) {\n            if (m % i == 0) {\n                factors += i\n        \
    \        m /= i\n            } else {\n                i += 1\n            }\n\
    \        }\n        factors.toList", "        var factors = List[Long]()\n   \
    \     var nn = n\n        var i = 2l\n        while (i <= nn) {\n            if\
    \ (nn % i == 0) {\n                factors = factors :+ i\n                nn\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var nn = n\n \
    \       var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ } else {\n                i += 1\n            }\n        }\n        factors",
  "        var nn = n\n        var factors = List[Long]()\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            }\n            else i +=\
    \ 1\n        }\n        factors", "        var result = List[Long]()\n       \
    \ var nn = n\n        for (i <- 2l to nn) {\n            if (nn % i == 0) {\n\
    \                result = result :+ i\n                nn /= i\n             \
    \   i -= 1\n            }\n        }\n        result", "        var factors =\
    \ new ListBuffer[Long]()\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors += i\n  \
    \              m /= i\n            } else {\n                i += 1\n        \
    \    }\n        }\n        factors.toList", "        var result = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i * i <= m) {\n       \
    \     while (m % i == 0) {\n                result = i :: result\n           \
    \     m /= i\n            }\n            i += 1\n        }\n        if (m > 1)\
    \ result = m :: result\n        result", "        var factors = List[Long]()\n\
    \        var m = n\n        var i = 2l\n        while (i <= m) {\n           \
    \ if (m % i == 0) {\n                factors = factors :+ i\n                m\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var nn = n\n \
    \       var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        for (i <- 2l to\
    \ n) {\n            while (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            }\n        }\n        factors", "  \
    \      var factors = List[Long]()\n        var m = n\n        var i = 2l\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                result = result :+ i\n   \
    \             m /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        result", "        var m = n\n        var result = List[Long]()\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                result = result :+ i\n                m /= i\n            } else\
    \ {\n                i += 1\n            }\n        }\n        result", "    \
    \    var factors = List[Long]()\n        var m = n\n        while (m % 2 == 0)\
    \ {\n            factors = 2l :: factors\n            m /= 2\n        }\n    \
    \    var i = 3\n        while (i <= sqrt(m)) {\n            while (m % i == 0)\
    \ {\n                factors = i.toLong :: factors\n                m /= i\n \
    \           }\n            i += 2\n        }\n        if (m > 1) factors = m ::\
    \ factors\n        factors", "        var factors = List[Long]()\n        var\
    \ nn = n\n        while (nn % 2 == 0) {\n            factors = 2l :: factors\n\
    \            nn /= 2\n        }\n        var i = 3\n        while (i <= sqrt(nn))\
    \ {\n            while (nn % i == 0) {\n                factors = i.toLong ::\
    \ factors\n                nn /= i\n            }\n            i += 2\n      \
    \  }\n        if (nn > 2) factors = nn :: factors\n        factors", "       \
    \ var factors = List[Long]()\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            } else {\n                i += 1\n\
    \            }\n        }\n        factors", '        val primes = List(2l, 3l,
    5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l,
    67l, 71l, 73l, 79l, 83l, 89l, 97l, 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l,
    139l, 149l, 151l, 157l, 163l, 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l,
    211l, 223l, 227l, 229l, 233l, 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l,
    281l, 283l, 293l, 307l, 311l, 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l,
    367l, 373l, 379l, 383l, 389l, 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l,
    443l, 449l, 457l, 461l, 463l, 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l,
    523l, 541l, 547l, 557l, 563l, 569l, 571l, 577l, 587l, 593l, 599l, 601l, 607l,
    613l, 617l, 619l, 631l, 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l,
    691l, 701l, 709l, 719l, 727l, 733l, 739l, 743l, 751l, 757l, 761l, 769l, 773l,
    787l, 797l, 809l, 811l, 821l, 823l, 827l, 829l, 839l, 853l, 857l,', "        var\
    \ result = List[Long]()\n        var m = n\n        var i = 2l\n        while\
    \ (i <= m) {\n            if (m % i == 0) {\n                result = result :+\
    \ i\n                m /= i\n            } else {\n                i += 1\n  \
    \          }\n        }\n        result", "        var factors = List[Long]()\n\
    \        var m = n\n        for (i <- 2l to m) {\n            while (m % i ==\
    \ 0) {\n                factors = factors :+ i\n                m /= i\n     \
    \       }\n        }\n        factors", "        var nn = n\n        var res =\
    \ List[Long]()\n        for (i <- 2l to nn) {\n            while (nn % i == 0)\
    \ {\n                res = res :+ i\n                nn /= i\n            }\n\
    \        }\n        res", "        var factors = List[Long]()\n        var m =\
    \ n\n        var d = 2l\n        while (m > 1) {\n            while (m % d ==\
    \ 0) {\n                factors = factors :+ d\n                m /= d\n     \
    \       }\n            d += 1\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i * i\
    \ <= m) {\n            while (m % i == 0) {\n                factors = factors\
    \ :+ i\n                m /= i\n            }\n            i += 1\n        }\n\
    \        if (m > 1) factors = factors :+ m\n        factors", "        var result\
    \ = List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                result = result :+ i\n   \
    \             m /= i\n            } else {\n                i += 1\n         \
    \   }\n        }\n        result", "        val factors = new ListBuffer[Long]()\n\
    \        var nn = n\n        var i = 2l\n        while (i <= nn) {\n         \
    \   if (nn % i == 0) {\n                factors += i\n                nn /= i\n\
    \            } else {\n                i += 1\n            }\n        }\n    \
    \    factors.toList", "        var factors = List[Long]()\n        var m = n\n\
    \        var i = 2l\n        while (i <= m) {\n            if (m % i == 0) {\n\
    \                factors = factors :+ i\n                m /= i\n            }\
    \ else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var m = n\n        var i = 2l\n   \
    \     while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var result =\
    \ List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <= nn)\
    \ {\n            if (nn % i == 0) {\n                result = result :+ i\n  \
    \              nn /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        result", "        var factors = List[Long]()\n   \
    \     var nn = n\n        var i = 2l\n        while (i <= nn) {\n            if\
    \ (nn % i == 0) {\n                factors = factors :+ i\n                nn\
    \ /= i\n            } else {\n                i += 1\n            }\n        }\n\
    \        factors", "        var result = List[Long]()\n        var m = n\n   \
    \     var i = 2l\n        while (i * i <= m) {\n            while (m % i == 0)\
    \ {\n                result = result :+ i\n                m /= i\n          \
    \  }\n            i += 1\n        }\n        if (m > 1) result = result :+ m\n\
    \        result", "        var factors = List[Long]()\n        var nn = n\n  \
    \      for (i <- 2l to nn) {\n            while (nn % i == 0) {\n            \
    \    factors = factors :+ i\n                nn /= i\n            }\n        }\n\
    \        factors", "        var factors = List[Long]()\n        var nn = n\n \
    \       var i = 2l\n        while (i <= nn) {\n            if (nn % i == 0) {\n\
    \                factors = factors :+ i\n                nn /= i\n           \
    \ } else {\n                i += 1\n            }\n        }\n        factors",
  "        var factors = List[Long]()\n        var nn = n\n        var i = 2l\n  \
    \      while (i <= nn) {\n            if (nn % i == 0) {\n                factors\
    \ = factors :+ i\n                nn /= i\n            } else {\n            \
    \    i += 1\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var nn = n\n        for (i <- 2l to nn) {\n        \
    \    while (nn % i == 0) {\n                factors = factors :+ i\n         \
    \       nn /= i\n            }\n        }\n        factors", "        var factors\
    \ = List[Long]()\n        var nn = n\n        var i = 2l\n        while (i <=\
    \ nn) {\n            if (nn % i == 0) {\n                factors = factors :+\
    \ i\n                nn /= i\n            } else {\n                i += 1\n \
    \           }\n        }\n        factors", "        var nn = n\n        var factors\
    \ = List[Long]()\n        var i = 2l\n        while (i <= nn) {\n            if\
    \ (nn % i == 0) {\n                factors = factors :+ i\n                nn\
    \ /= i\n            }\n            else i += 1\n        }\n        factors", " \
    \       var factors = List[Long]()\n        var m = n\n        var i = 2l\n  \
    \      while (i <= m) {\n            if (m % i == 0) {\n                factors\
    \ = factors :+ i\n                m /= i\n            } else {\n             \
    \   i += 1\n            }\n        }\n        factors", "        var factors =\
    \ List[Long]()\n        var m = n\n        var i = 2l\n        while (i <= m)\
    \ {\n            if (m % i == 0) {\n                factors = factors :+ i\n \
    \               m /= i\n            } else {\n                i += 1\n       \
    \     }\n        }\n        factors"]
stop_tokens:
- "\n    }\n"
