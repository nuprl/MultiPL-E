name: HumanEval_67_fruit_distribution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this task, you will be given a string that represents a number of apples\
  \ and oranges \n    // that are distributed in a basket of fruit this basket contains\
  \ \n    // apples, oranges, and mango fruits. Given the string that represents the\
  \ total number of \n    // the oranges and apples and an integer that represent\
  \ the total number of the fruits \n    // in the basket return the number of the\
  \ mango fruits in the basket.\n    // for examble:\n    // >>> fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l))\n    // (8l)\n    // >>> fruitDistribution((\"\
  0 apples and 1 oranges\"), (3l))\n    // (2l)\n    // >>> fruitDistribution((\"\
  2 apples and 3 oranges\"), (100l))\n    // (95l)\n    // >>> fruitDistribution((\"\
  100 apples and 1 oranges\"), (120l))\n    // (19l)\n    def fruitDistribution(s\
  \ : String, n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
  \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
  \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
  \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100\
  \ oranges\"), (120l)) == (19l));\n    }\n\n}\n"
completions: ["        // Write your code here\n        val (a, o) = s.split(\" and\
    \ \").map(_.split(\" \")(0).toLong).toList match {\n            case List(a, o)\
    \ => (a, o)\n        }\n        n - a - o", "        // Your code here\n     \
    \   val a = s.split(\" \")\n        val b = a(0).toLong\n        val c = a(2).toLong\n\
    \        n - b - c", "        // Your code here\n        val pattern = \"\"\"\
    (\\d+) apples and (\\d+) oranges\"\"\".r\n        val pattern(apples, oranges)\
    \ = s\n        n - apples.toLong - oranges.toLong", "        // Your Code Here\n\
    \        return 0", "        // Write your code here\n        val arr = s.split(\"\
    \ \")\n        val a = arr(0).toLong\n        val o = arr(2).toLong\n        n\
    \ - a - o", "        // Write your code here\n        val s1 = s.split(\" \")\n\
    \        val apples = s1(0).toLong\n        val oranges = s1(3).toLong\n     \
    \   n - apples - oranges", "        // Your code here\n        val (a, o) = s.split(\"\
    \ and \").map(_.split(\" \")(0).toLong).toList match {\n            case List(a,\
    \ o) => (a, o)\n        }\n        n - a - o", "        // Write your code here\n\
    \        val arr = s.split(\" \")\n        val a = arr(0).toLong\n        val\
    \ o = arr(2).toLong\n        n - a - o", "        // Your Code Here\n        return\
    \ 0l", "        // Write your code here\n        val a = s.split(\" \")(0).toLong\n\
    \        val o = s.split(\" \")(3).toLong\n        n - a - o", "        // Write\
    \ your code here\n        val pattern = \"([0-9]+) apples and ([0-9]+) oranges\"\
    .r\n        val pattern(apples, oranges) = s\n        n - apples.toLong - oranges.toLong",
  "        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).unzip(x =>\
    \ (x(0), x(1)))\n        n - a - o", "        // Your code here\n        val fruits\
    \ = s.split(\" \")\n        val apples = fruits(0).toLong\n        val oranges\
    \ = fruits(2).toLong\n        n - apples - oranges", "        // Write your code\
    \ here\n        val arr = s.split(\" \")\n        val apples = arr(0).toLong\n\
    \        val oranges = arr(3).toLong\n        n - apples - oranges", "       \
    \ val (a, o) = s.split(\" \").map(_.toLong).toList match {\n            case List(a,\
    \ o) => (a, o)\n        }\n        n - a - o", "        // Your Code Here\n  \
    \      val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)",
  "        val (a, o) = s.split(\" \").map(_.toLong).toList match {\n            case\
    \ List(a, o) => (a, o)\n        }\n        n - a - o", "        // Your Code Here\n\
    \        return 0l", "        // Write your code here\n        val fruits = s.split(\"\
    \ \")\n        val apples = fruits(0).toLong\n        val oranges = fruits(3).toLong\n\
    \        n - apples - oranges", "        // Write your code here\n        val\
    \ a = s.split(\" \")(0).toLong\n        val o = s.split(\" \")(3).toLong\n   \
    \     n - a - o"]
stop_tokens:
- "\n    }\n"
