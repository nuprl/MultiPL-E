name: HumanEval_67_fruit_distribution
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // In this task, you will be given a string that represents a number of apples\
  \ and oranges \n    // that are distributed in a basket of fruit this basket contains\
  \ \n    // apples, oranges, and mango fruits. Given the string that represents the\
  \ total number of \n    // the oranges and apples and an integer that represent\
  \ the total number of the fruits \n    // in the basket return the number of the\
  \ mango fruits in the basket.\n    // for examble:\n    // >>> fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l))\n    // (8l)\n    // >>> fruitDistribution((\"\
  0 apples and 1 oranges\"), (3l))\n    // (2l)\n    // >>> fruitDistribution((\"\
  2 apples and 3 oranges\"), (100l))\n    // (95l)\n    // >>> fruitDistribution((\"\
  100 apples and 1 oranges\"), (120l))\n    // (19l)\n    def fruitDistribution(s\
  \ : String, n : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(fruitDistribution((\"\
  5 apples and 6 oranges\"), (19l)) == (8l));\n    assert(fruitDistribution((\"5 apples\
  \ and 6 oranges\"), (21l)) == (10l));\n    assert(fruitDistribution((\"0 apples\
  \ and 1 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"1 apples and\
  \ 0 oranges\"), (3l)) == (2l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (100l)) == (95l));\n    assert(fruitDistribution((\"2 apples and 3\
  \ oranges\"), (5l)) == (0l));\n    assert(fruitDistribution((\"1 apples and 100\
  \ oranges\"), (120l)) == (19l));\n    }\n\n}\n"
completions: ["        // Write your code here\n        val (a, o) = s.split(\" and\
    \ \").map(_.split(\" \")(0).toLong).toList match {\n            case List(a, o)\
    \ => (a, o)\n        }\n        n - a - o", "        // Your code here\n     \
    \   val a = s.split(\" \")\n        val b = a(0).toLong\n        val c = a(2).toLong\n\
    \        n - b - c", "        // Your code here\n        val pattern = \"\"\"\
    (\\d+) apples and (\\d+) oranges\"\"\".r\n        val pattern(apples, oranges)\
    \ = s\n        n - apples.toLong - oranges.toLong", "        // Your Code Here\n\
    \        return 0", "        // Write your code here\n        val arr = s.split(\"\
    \ \")\n        val a = arr(0).toLong\n        val o = arr(2).toLong\n        n\
    \ - a - o", "        // Write your code here\n        val s1 = s.split(\" \")\n\
    \        val apples = s1(0).toLong\n        val oranges = s1(3).toLong\n     \
    \   n - apples - oranges", "        // Your code here\n        val (a, o) = s.split(\"\
    \ and \").map(_.split(\" \")(0).toLong).toList match {\n            case List(a,\
    \ o) => (a, o)\n        }\n        n - a - o", "        // Write your code here\n\
    \        val arr = s.split(\" \")\n        val a = arr(0).toLong\n        val\
    \ o = arr(2).toLong\n        n - a - o", "        // Your Code Here\n        return\
    \ 0l", "        // Write your code here\n        val a = s.split(\" \")(0).toLong\n\
    \        val o = s.split(\" \")(3).toLong\n        n - a - o", "        // Write\
    \ your code here\n        val pattern = \"([0-9]+) apples and ([0-9]+) oranges\"\
    .r\n        val pattern(apples, oranges) = s\n        n - apples.toLong - oranges.toLong",
  "        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).unzip(x =>\
    \ (x(0), x(1)))\n        n - a - o", "        // Your code here\n        val fruits\
    \ = s.split(\" \")\n        val apples = fruits(0).toLong\n        val oranges\
    \ = fruits(2).toLong\n        n - apples - oranges", "        // Write your code\
    \ here\n        val arr = s.split(\" \")\n        val apples = arr(0).toLong\n\
    \        val oranges = arr(3).toLong\n        n - apples - oranges", "       \
    \ val (a, o) = s.split(\" \").map(_.toLong).toList match {\n            case List(a,\
    \ o) => (a, o)\n        }\n        n - a - o", "        // Your Code Here\n  \
    \      val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)",
  "        val (a, o) = s.split(\" \").map(_.toLong).toList match {\n            case\
    \ List(a, o) => (a, o)\n        }\n        n - a - o", "        // Your Code Here\n\
    \        return 0l", "        // Write your code here\n        val fruits = s.split(\"\
    \ \")\n        val apples = fruits(0).toLong\n        val oranges = fruits(3).toLong\n\
    \        n - apples - oranges", "        // Write your code here\n        val\
    \ a = s.split(\" \")(0).toLong\n        val o = s.split(\" \")(3).toLong\n   \
    \     n - a - o", "        // Your Code Here\n        var (a, o) = (0, 0)\n  \
    \      var i = 0\n        while (s(i) != ' ') {\n            a = a * 10 + s(i)\
    \ - '0'\n            i += 1\n        }\n        i += 6\n        while (i < s.length)\
    \ {\n            o = o * 10 + s(i) - '0'\n            i += 1\n        }\n    \
    \    n - a - o", "        val s1 = s.split(\" \")\n        val a = s1(0).toLong\n\
    \        val o = s1(3).toLong\n        n - (a + o)", "        // Your code here\n\
    \        val (a, o) = s.split(\" and \").map(_.split(\" \").head.toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        // Your Code Here\n        return 0;", "        // your code here\n   \
    \     0l", "        // Write your code here\n        val (a, o) = s.split(\" and\
    \ \").map(_.split(\" \")(0).toLong).toList match {\n            case List(a, o)\
    \ => (a, o)\n        }\n        n - a - o", "        // Your Code Here\n     \
    \   val fruits = s.split(\" \")\n        val apples = fruits(0).toLong\n     \
    \   val oranges = fruits(3).toLong\n        n - apples - oranges", "        //\
    \ Write your code here\n        val arr = s.split(\" \")\n        val a = arr(0).toLong\n\
    \        val o = arr(2).toLong\n        n - a - o", "        // Your code here\n\
    \        val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)",
  "        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList match\
    \ {\n            case List(a, o) => (a, o)\n        }\n        n - a - o", " \
    \       // Your code here\n        val arr = s.split(\" \")\n        val a = arr(0).toLong\n\
    \        val o = arr(2).toLong\n        n - a - o", "        // Your Code Here\n\
    \        val l = s.split(\" \")\n        val a = l(0).toLong\n        val o =\
    \ l(3).toLong\n        n - a - o", "        // Write your code here\n        val\
    \ (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList match {\n \
    \           case List(a, o) => (a, o)\n        }\n        n - a - o", "      \
    \  // Your Code Here\n        val s1 = s.split(\" \")\n        val apples = s1(0).toLong\n\
    \        val oranges = s1(3).toLong\n        n - apples - oranges", "        val\
    \ pattern = \"([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(apples,\
    \ oranges) = s\n        n - apples.toLong - oranges.toLong", "        // Your\
    \ Code Here\n        return 0", "        // Write your code here\n        val\
    \ a = s.split(\" \")\n        val b = a(0).toLong\n        val c = a(2).toLong\n\
    \        n - b - c", "        // Your Code Here\n        val x = s.split(\" \"\
    )\n        val a = x(0).toLong\n        val o = x(3).toLong\n        n - a - o",
  "        // Your code here\n        val nums = s.split(\" \").map(_.toLong)\n  \
    \      n - nums(0) - nums(2)", "        // Write your code here\n        val (apples,\
    \ oranges) = s.split(\" and \").map(x => x.split(\" \")(0).toLong).toList match\
    \ {\n            case List(a, b) => (a, b)\n        }\n        n - apples - oranges",
  "        // Write your code here\n        val (a, o) = s.split(\" and \").map(_.split(\"\
    \ \")(0).toLong).toList match {\n            case List(a, o) => (a, o)\n     \
    \   }\n        n - a - o", "        // Your code here\n        val nums = s.split(\"\
    \ \").map(_.toLong)\n        n - nums(0) - nums(2)", "        val (a, o) = s.split(\"\
    \ and \").map(_.split(\" \")(0).toLong).unzip(x => (x(0), x(1)))\n        n -\
    \ a - o", "        // Write your code here\n        val (a, o) = s.split(\" and\
    \ \").map(x => x.split(\" \")(0).toLong).toList match {\n            case List(a,\
    \ o) => (a, o)\n        }\n        n - a - o", "        // Your code here\n  \
    \      val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)",
  "        // Write your code here\n        val arr = s.split(\" \")\n        val\
    \ a = arr(0).toLong\n        val o = arr(2).toLong\n        n - a - o", "    \
    \    // Write your code here\n        val (a, o) = s.split(\" and \").map(_.split(\"\
    \ \")(0).toLong).toList match {\n            case List(a, o) => (a, o)\n     \
    \   }\n        n - a - o", "        val nums = s.split(\" \").map(_.toLong)\n\
    \        n - nums(0) - nums(2)", "        // Your Code Here\n        val s1 =\
    \ s.split(\" \")\n        val a = s1(0).toLong\n        val o = s1(3).toLong\n\
    \        n - a - o", "        // Your Code Here\n        val a = s.split(\" \"\
    )\n        val b = a(0).toLong\n        val c = a(2).toLong\n        n - b - c",
  "        // Your code here\n        val (a, o) = s.split(\" \").map(_.toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        val (a, o) = s.split(\" \").map(_.toLong).toList match {\n            case\
    \ List(a, o) => (a, o)\n        }\n        n - a - o", "        // Write your\
    \ code here\n        val a = s.split(\" \")(0).toLong\n        val o = s.split(\"\
    \ \")(3).toLong\n        n - a - o", "        // Write your code here\n      \
    \  val a = s.split(\" \")(0).toLong\n        val o = s.split(\" \")(3).toLong\n\
    \        n - (a + o)", "        // Write your code here\n        val arr = s.split(\"\
    \ \")\n        val numApples = arr(0).toLong\n        val numOranges = arr(3).toLong\n\
    \        n - numApples - numOranges", "        // Write your code here\n     \
    \   val fruits = s.split(\" \")\n        val apples = fruits(0).toLong\n     \
    \   val oranges = fruits(3).toLong\n        n - apples - oranges", "        //\
    \ Your code here\n        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n\
    \        val orange = arr(3).toLong\n        n - apple - orange", "        //\
    \ Write your code here\n        val pattern = \"([0-9]+) apples and ([0-9]+) oranges\"\
    .r\n        val pattern(apples, oranges) = s\n        n - apples.toLong - oranges.toLong",
  "        // Your Code Here\n        return 0", "        // Your Code Here\n    \
    \    return 0", "        // Write your code here\n        val a = s.split(\" \"\
    )\n        val x = a(0).toLong\n        val y = a(2).toLong\n        n - x - y",
  "        // Write your code here\n        val (a, o) = s.split(\" and \").map(_.split(\"\
    \ \")(0).toLong).toList match {\n            case List(x, y) => (x, y)\n     \
    \   }\n        n - a - o", "        // Write your code here\n        val (a, o)\
    \ = s.split(\" and \").map(_.split(\" \")(0).toLong).toList match {\n        \
    \    case List(a, o) => (a, o)\n        }\n        n - a - o", "        // Write\
    \ your code here\n        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        val s1 = s.split(\" \")\n        val a = s1(0).toLong\n        val o =\
    \ s1(3).toLong\n        n - a - o", "        // Your Code Here\n        return\
    \ 0", "        // your code goes here\n        val (a, o) = s.split(\" and \"\
    ).map(_.split(\" \")(0).toLong).toList match {\n            case List(a, o) =>\
    \ (a, o)\n        }\n        n - a - o", "        // Write your code here\n  \
    \      val arr = s.split(\" \")\n        val apples = arr(0).toLong\n        val\
    \ oranges = arr(3).toLong\n        n - apples - oranges", "        val (a, o)\
    \ = s.split(\" \").map(_.toLong).toList match {\n            case List(a, o) =>\
    \ (a, o)\n        }\n        n - a - o", "        // Your code here\n        val\
    \ nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", "     \
    \   // Write your code here\n        val fruit = s.split(\" \")\n        val apple\
    \ = fruit(0).toLong\n        val orange = fruit(3).toLong\n        n - apple -\
    \ orange", "        // Your Code Here\n        return 0l", "        // Write your\
    \ code here\n        val arr = s.split(\" \")\n        val apples = arr(0).toLong\n\
    \        val oranges = arr(3).toLong\n        n - apples - oranges", "       \
    \ // Your Code Here\n        val (a, o) = s.split(\" and \").map(x => x.split(\"\
    \ \")(0).toLong).toList match {\n            case List(a, o) => (a, o)\n     \
    \   }\n        n - a - o", "        // Write your code here\n        val (a, o)\
    \ = s.split(\" and \").map(_.split(\" \").head.toLong).unzip(x => (x, x))\n  \
    \      n - a - o", "        // Write your code here\n        val (a, o) = s.split(\"\
    \ and \").map(_.split(\" \")(0).toLong).toList match {\n            case List(a,\
    \ o) => (a, o)\n        }\n        n - a - o", "        // Your Code Here\n  \
    \      val s1 = s.split(\" \")\n        val a = s1(0).toLong\n        val o =\
    \ s1(3).toLong\n        n - (a + o)", "        // Your code here\n        var\
    \ a = s.split(\" \")(0).toLong\n        var o = s.split(\" \")(3).toLong\n   \
    \     n - a - o", "        // Your Code Here\n        val pattern = \"\"\"(\\\
    d+) apples and (\\d+) oranges\"\"\".r\n        val pattern(a, o) = s\n       \
    \ n - a.toLong - o.toLong", "        val s1 = s.split(\" \")\n        val a =\
    \ s1(0).toLong\n        val o = s1(3).toLong\n        n - a - o", "        //\
    \ Your Code Here\n        return 0l", "        // Write your code here\n     \
    \   val (a, o) = s.split(\" and \").map(_.split(\" \").head.toLong).unzip\n  \
    \      n - a - o", "        // Your Code Here\n        val nums = s.split(\" \"\
    ).map(_.toLong)\n        n - nums(0) - nums(2)", "        // Your code here\n\
    \        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        // Write your code here\n        val fruits = s.split(\" \")\n        val\
    \ apples = fruits(0).toLong\n        val oranges = fruits(3).toLong\n        n\
    \ - apples - oranges", "        // Write your code here\n        val a = s.split(\"\
    \ \")\n        val b = a(0).toLong\n        val c = a(2).toLong\n        n - b\
    \ - c", "        // Write your code here\n        val (a, o) = s.split(\" and\
    \ \").map(_.split(\" \")(0).toLong).toList match {\n            case List(a, o)\
    \ => (a, o)\n        }\n        n - a - o", "        // Write your code here\n\
    \        val fruits = s.split(\" \")\n        val apples = fruits(0).toLong\n\
    \        val oranges = fruits(3).toLong\n        n - apples - oranges", "    \
    \    // Write your code here\n        val fruits = s.split(\" and \")\n      \
    \  val apples = fruits(0).split(\" \")(0).toLong\n        val oranges = fruits(1).split(\"\
    \ \")(0).toLong\n        n - apples - oranges", "        // Write your code here\n\
    \        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        // Write your code here\n        val (a, o) = s.split(\" and \").map(_.split(\"\
    \ \").head.toLong).toList match {\n            case List(a, o) => (a, o)\n   \
    \     }\n        n - a - o", "        // Write your code here\n        val a =\
    \ s.split(\" \")(0).toLong\n        val o = s.split(\" \")(3).toLong\n       \
    \ n - a - o", "        // Your code here\n        val arr = s.split(\" \")\n \
    \       val apples = arr(0).toLong\n        val oranges = arr(3).toLong\n    \
    \    n - apples - oranges", "        // Write your code here\n        val fruits\
    \ = s.split(\" \")\n        val apples = fruits(0).toLong\n        val oranges\
    \ = fruits(3).toLong\n        n - apples - oranges", "        val pattern = \"\
    ([0-9]+) apples and ([0-9]+) oranges\".r\n        val pattern(apples, oranges)\
    \ = s\n        n - (apples.toLong + oranges.toLong)", "        // Your code here\n\
    \        val arr = s.split(\" \")\n        val apple = arr(0).toLong\n       \
    \ val orange = arr(3).toLong\n        n - (apple + orange)", "        val (a,\
    \ o) = s.split(\" and \").map(_.split(\" \").head.toLong).toList match {\n   \
    \         case List(a, o) => (a, o)\n        }\n        n - a - o", "        //\
    \ Write your code here\n        val fruit = s.split(\" \")\n        val apple\
    \ = fruit(0).toLong\n        val orange = fruit(2).toLong\n        n - (apple\
    \ + orange)", "        // Write your code here\n        val a = s.split(\" \"\
    )\n        val apples = a(0).toLong\n        val oranges = a(3).toLong\n     \
    \   n - apples - oranges", "        // Write your code here\n        val (a, o)\
    \ = s.split(\" and \").map(_.split(\" \")(0).toLong).toList match {\n        \
    \    case List(x, y) => (x, y)\n        }\n        n - a - o", "        // Write\
    \ your code here\n        val arr = s.split(\" \")\n        val apples = arr(0).toLong\n\
    \        val oranges = arr(3).toLong\n        n - (apples + oranges)", "     \
    \   // Your code here\n        val l = s.split(\" \")\n        val a = l(0).toLong\n\
    \        val o = l(3).toLong\n        n - a - o", "        // Your Code Here\n\
    \        return 0", "        // Write your code here\n        val s1 = s.split(\"\
    \ \")\n        val n1 = s1(0).toLong\n        val n2 = s1(2).toLong\n        n\
    \ - n1 - n2", "        // Your code here\n        val (a, o) = s.split(\" and\
    \ \").map(_.split(\" \")(0).toLong).unzip(x => x)\n        n - a - o", "     \
    \   // Write your code here\n        val (a, o) = s.split(\" and \").map(_.split(\"\
    \ \")(0).toLong).toList match {\n            case List(a, o) => (a, o)\n     \
    \   }\n        n - a - o", "        // Your Code Here\n        val (a, o) = s.split(\"\
    \ and \").map(_.split(\" \")(0).toLong).toList match {\n            case List(a,\
    \ o) => (a, o)\n        }\n        n - a - o", "        // Write your code here\n\
    \        val pattern = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\".r\n      \
    \  val pattern(apples, oranges) = s\n        n - apples.toLong - oranges.toLong",
  "        // Write your code here\n        val (a, o) = s.split(\" and \").map(_.split(\"\
    \ \").head.toLong).toList match {\n            case List(x, y) => (x, y)\n   \
    \     }\n        n - a - o", "        // Your code here\n        val nums = s.split(\"\
    \ \").map(_.toLong)\n        n - nums(0) - nums(2)", "        // Write your code\
    \ here\n        val (a, o) = s.split(\" \").map(_.toLong).toList match {\n   \
    \         case List(a, o) => (a, o)\n        }\n        n - a - o", "        //\
    \ Write your code here\n        val (a, o) = s.split(\" and \").map(_.split(\"\
    \ \").head.toLong).unzip(x => x)\n        n - a - o", "        // Write your code\
    \ here\n        val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) -\
    \ nums(2)", "        // Write your code here\n        val nums = s.split(\" \"\
    ).map(_.toLong)\n        n - nums(0) - nums(2)", "        // Your code here\n\
    \        val a = s.split(\" \")\n        val apples = a(0).toLong\n        val\
    \ oranges = a(3).toLong\n        n - apples - oranges", "        // Your Code\
    \ Here\n        var arr = s.split(\" \")\n        var a = arr(0).toLong\n    \
    \    var o = arr(3).toLong\n        return n - a - o", "        // Write your\
    \ code here\n        val split = s.split(\" \")\n        val apple = split(0).toLong\n\
    \        val orange = split(3).toLong\n        n - apple - orange", "        //\
    \ Your Code Here\n        val fruits = s.split(\" \")\n        val numApples =\
    \ fruits(0).toLong\n        val numOranges = fruits(3).toLong\n        n - numApples\
    \ - numOranges", "        // Write your code here\n        val fruits = s.split(\"\
    \ \")\n        val apples = fruits(0).toLong\n        val oranges = fruits(3).toLong\n\
    \        n - apples - oranges", "        // Write your code here\n        val\
    \ (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList match {\n \
    \           case List(a, o) => (a, o)\n        }\n        n - a - o", "      \
    \  // Your Code Here\n        return 0", "        // Your Code Here\n        return\
    \ 0", "        // Write your code here\n        val fruits = s.split(\" \")\n\
    \        val apples = fruits(0).toLong\n        val oranges = fruits(3).toLong\n\
    \        n - apples - oranges", "        // Your code here\n        val pattern\
    \ = \"\"\"(\\d+) apples and (\\d+) oranges\"\"\".r\n        val pattern(apples,\
    \ oranges) = s\n        n - (apples.toLong + oranges.toLong)", "        // Your\
    \ code here\n        return 0", "        // Write your code here\n        val\
    \ x = s.split(\" \")\n        val a = x(0).toLong\n        val o = x(3).toLong\n\
    \        n - a - o", "        val (a, o) = s.split(\" and \").map(_.split(\" \"\
    )(0).toLong).toList match {\n            case List(a, o) => (a, o)\n        }\n\
    \        n - a - o", "        // Your Code Here\n        val (a, o) = s.split(\"\
    \ and \").map(_.split(\" \").head.toLong).unzip\n        n - a - o", "       \
    \ // Write your code here\n        val (a, o) = s.split(\" \").map(_.toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        // Write your code here\n        val (a, o) = s.split(\" and \").map(_.split(\"\
    \ \").head.toLong).toList match {\n            case List(a, o) => (a, o)\n   \
    \     }\n        n - a - o", "        // Write your code here\n        val nums\
    \ = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", "        //\
    \ Your Code Here\n        return 0l", "        // Your Code Here\n        val\
    \ (a, o) = s.split(\" and \").map(_.split(\" \").head.toLong).toList match {\n\
    \            case List(a, o) => (a, o)\n        }\n        n - a - o", "     \
    \   // Your Code Here\n        val pattern = \"\"\"(\\d+) apples and (\\d+) oranges\"\
    \"\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong -\
    \ oranges.toLong", "        // Write your code here\n        val fruit = s.split(\"\
    \ \")\n        val apple = fruit(0).toLong\n        val orange = fruit(2).toLong\n\
    \        n - apple - orange", "        // Write your code here\n        val a\
    \ = s.split(\" \")\n        val b = a(0).toLong\n        val c = a(2).toLong\n\
    \        n - b - c", "        // Your code here\n        val pattern = \"([0-9]+)\
    \ apples and ([0-9]+) oranges\".r\n        val pattern(apples, oranges) = s\n\
    \        n - apples.toLong - oranges.toLong", "        // Write your code here\n\
    \        val fruits = s.split(\" \")\n        val numOfApples = fruits(0).toLong\n\
    \        val numOfOranges = fruits(3).toLong\n        val numOfMangoes = n - numOfApples\
    \ - numOfOranges\n        numOfMangoes", "        val (a, o) = s.split(\" \").map(_.toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        // Write your code here\n        val r = \"\"\"(\\d+) apples and (\\d+)\
    \ oranges\"\"\".r\n        val r(a, o) = s\n        n - a.toLong - o.toLong",
  "        // Your code here\n        val arr = s.split(\" \")\n        val apples\
    \ = arr(0).toLong\n        val oranges = arr(3).toLong\n        n - apples - oranges",
  "        // Write your code here\n        val pattern = \"(\\\\d+) apples and (\\\
    \\d+) oranges\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong\
    \ - oranges.toLong", "        val (a, o) = s.split(\" and \").map(_.split(\" \"\
    )(0).toLong).toList match {\n            case List(a, o) => (a, o)\n        }\n\
    \        n - a - o", "        // Your code here\n        val s1 = s.split(\" \"\
    )\n        val a = s1(0).toLong\n        val o = s1(3).toLong\n        n - a -\
    \ o", "        // Your code here\n        val a = s.split(\" \")(0).toLong\n \
    \       val o = s.split(\" \")(3).toLong\n        n - a - o", "        // Your\
    \ code here\n        val a = s.split(\" \")\n        val apples = a(0).toLong\n\
    \        val oranges = a(3).toLong\n        n - (apples + oranges)", "       \
    \ // Your Code Here\n        return 0l", "        // Write your code here\n  \
    \      val arr = s.split(\" \")\n        val numOfApples = arr(0).toLong\n   \
    \     val numOfOranges = arr(3).toLong\n        n - numOfApples - numOfOranges",
  "        val a = s.split(\" \")(0).toLong\n        val o = s.split(\" \")(3).toLong\n\
    \        n - a - o", "        // Write your code here\n        val (a, o) = s.split(\"\
    \ and \").map(_.split(\" \").head.toLong).toList match {\n            case List(a,\
    \ o) => (a, o)\n        }\n        n - a - o", "        // Write your code here\n\
    \        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        // Your Code Here\n        val arr = s.split(\" \")\n        val apples\
    \ = arr(0).toLong\n        val oranges = arr(3).toLong\n        n - apples - oranges",
  "        // Write your code here\n        val nums = s.split(\" \").map(_.toLong)\n\
    \        n - nums(0) - nums(2)", "        // Write your code here\n        val\
    \ (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList match {\n \
    \           case List(a, o) => (a, o)\n        }\n        n - a - o", "      \
    \  // your code here\n        return 0l", "        // Your code here\n       \
    \ val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)", " \
    \       // Write your code here\n        val (a, o) = s.split(\" and \").map(_.split(\"\
    \ \").head.toLong).toList match {\n            case List(a, o) => (a, o)\n   \
    \     }\n        n - a - o", "        // Your Code Here\n        return 0l", " \
    \       // Write your code here\n        val arr = s.split(\" \")\n        val\
    \ apples = arr(0).toLong\n        val oranges = arr(3).toLong\n        n - apples\
    \ - oranges", "        // Write your code here\n        val (a, o) = s.split(\"\
    \ and \").map(_.split(\" \")(0).toLong).toList match {\n            case List(a,\
    \ o) => (a, o)\n        }\n        n - a - o", "        // Write your code here\n\
    \        val nums = s.split(\" \").map(_.toLong)\n        n - nums(0) - nums(2)",
  "        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList match\
    \ {\n            case List(a, o) => (a, o)\n        }\n        n - a - o", " \
    \       // Your code here\n        val pattern = \"([0-9]+) apples and ([0-9]+)\
    \ oranges\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong\
    \ - oranges.toLong", "        // Write your code here\n        val x = s.split(\"\
    \ \")\n        val a = x(0).toLong\n        val o = x(3).toLong\n        n - a\
    \ - o", "        // Write your code here\n        // Return the number of mango\
    \ fruits in the basket\n        val (a, o) = s.split(\" and \").map(_.split(\"\
    \ \")(0).toLong).toList match {\n            case List(a, o) => (a, o)\n     \
    \   }\n        n - a - o", "        // Your code here\n        return 0", "  \
    \      // Your Code Here\n        val a = s.split(\" \")(0).toLong\n        val\
    \ o = s.split(\" \")(3).toLong\n        n - a - o", "        // Your Code Here\n\
    \        return 0", "        val (a, o) = s.split(\" \").map(_.toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        // Your Code Here\n        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(3).toLong\n        n - apples\
    \ - oranges", "        // Your code here\n        val fruits = s.split(\" \")\n\
    \        val apples = fruits(0).toLong\n        val oranges = fruits(3).toLong\n\
    \        n - apples - oranges", "        // Write your code here\n        val\
    \ a = s.split(\" \")(0).toLong\n        val o = s.split(\" \")(3).toLong\n   \
    \     n - a - o", "        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        // Your code here\n        val pattern = \"(\\\\d+) apples and (\\\\d+)\
    \ oranges\".r\n        val pattern(apples, oranges) = s\n        n - (apples.toLong\
    \ + oranges.toLong)", "        // Your code here\n        val nums = s.split(\"\
    \ \").map(_.toLong)\n        n - nums(0) - nums(2)", "        // Write your code\
    \ here\n        val a = s.split(\" \")\n        val b = a(0).toLong\n        val\
    \ c = a(2).toLong\n        val d = n - b - c\n        d", "        // Write your\
    \ code here\n        val a = s.split(\" \")\n        val numApples = a(0).toLong\n\
    \        val numOranges = a(3).toLong\n        n - numApples - numOranges", " \
    \       // Your Code Here\n        val a = s.split(\" \")\n        val apples\
    \ = a(0).toLong\n        val oranges = a(3).toLong\n        n - apples - oranges",
  "        val arr = s.split(\" \")\n        val apples = arr(0).toLong\n        val\
    \ oranges = arr(3).toLong\n        n - apples - oranges", "        // Your Code\
    \ Here\n        var x = s.split(\" \")\n        var a = x(0).toLong\n        var\
    \ o = x(3).toLong\n        n - a - o", "        // Write your code here\n    \
    \    val a = s.split(\" \")(0).toLong\n        val o = s.split(\" \")(3).toLong\n\
    \        n - a - o", "        val fruits = s.split(\" \")\n        val apples\
    \ = fruits(0).toLong\n        val oranges = fruits(3).toLong\n        n - apples\
    \ - oranges", "        // Write your code here\n        val a = s.split(\" \"\
    )\n        val b = a(0).toLong\n        val c = a(2).toLong\n        n - b - c",
  "        // Your code here\n        val (a, o) = s.split(\" and \").map(_.split(\"\
    \ \").head.toLong).toList match {\n            case List(a, o) => (a, o)\n   \
    \     }\n        n - a - o", "        // Write your code here\n        val a =\
    \ s.split(\" \")(0).toLong\n        val o = s.split(\" \")(3).toLong\n       \
    \ n - a - o", "        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        // Write your code here\n        val s1 = s.split(\" \")\n        val a\
    \ = s1(0).toLong\n        val o = s1(3).toLong\n        n - a - o", "        //\
    \ Your Code Here\n        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        // Write your code here\n        val pattern = \"([0-9]+) apples and ([0-9]+)\
    \ oranges\".r\n        val pattern(apples, oranges) = s\n        n - apples.toLong\
    \ - oranges.toLong", "        // Write your code here\n        val (a, o) = s.split(\"\
    \ apples and \").map(_.toLong) match { case Array(a, o) => (a, o) }\n        n\
    \ - a - o", "        // Your code here\n        val nums = s.split(\" \").map(_.toLong)\n\
    \        val total = nums.sum\n        n - total", "        // Write your code\
    \ here\n        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList\
    \ match {\n            case List(x, y) => (x, y)\n        }\n        n - a - o",
  "        // Write your code here\n        val fruits = s.split(\" \")\n        val\
    \ apples = fruits(0).toLong\n        val oranges = fruits(3).toLong\n        n\
    \ - apples - oranges", "        // Write your code here\n        val x = s.split(\"\
    \ \")\n        val a = x(0).toLong\n        val o = x(3).toLong\n        n - a\
    \ - o", "        // Write your code here\n        val fruits = s.split(\" \")\n\
    \        val apples = fruits(0).toLong\n        val oranges = fruits(3).toLong\n\
    \        n - apples - oranges", "        // Write your code here\n        val\
    \ arr = s.split(\" \")\n        val apples = arr(0).toLong\n        val oranges\
    \ = arr(3).toLong\n        n - apples - oranges", "        val s1 = s.split(\"\
    \ \")\n        val a = s1(0).toLong\n        val o = s1(3).toLong\n        n -\
    \ (a + o)", "        val (a, o) = s.split(\" and \").map(_.split(\" \")(0).toLong).toList\
    \ match {\n            case List(a, o) => (a, o)\n        }\n        n - a - o",
  "        // your code here\n        val x = s.split(\" \")\n        val a = x(0).toLong\n\
    \        val o = x(3).toLong\n        n - a - o", "        // Your code here\n\
    \        val a = s.split(\" \")(0).toLong\n        val o = s.split(\" \")(3).toLong\n\
    \        n - a - o"]
stop_tokens:
- "\n    }\n"
