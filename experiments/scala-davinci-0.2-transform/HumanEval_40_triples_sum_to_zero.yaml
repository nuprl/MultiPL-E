name: HumanEval_40_triples_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are three distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> triplesSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def triplesSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
  \ -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
  \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
completions: ["        // YOUR CODE HERE\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        val s = l.toSet\n        for (i <-\
    \ s) {\n            for (j <- s) {\n                if (s.contains(-i - j)) return\
    \ true\n            }\n        }\n        return false", "        // YOUR CODE\
    \ HERE\n        return false", "        // YOUR CODE HERE\n        return false",
  "        // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        // Your code here\n        return false", " \
    \       // your code here\n        return false", "        var h = new HashMap[Long,\
    \ Int]\n        for (i <- l) {\n            if (h.contains(i)) h(i) += 1\n   \
    \         else h(i) = 1\n        }\n        for (i <- l) {\n            for (j\
    \ <- l) {\n                if (i != j) {\n                    val k = -i - j\n\
    \                    if (h.contains(k) && (k != i) && (k != j)) {\n          \
    \              if (i == k) {\n                            if (h(i) >= 3) return\
    \ true\n                        }\n                        else if (j == k) {\n\
    \                            if (h(j) >= 3) return true\n                    \
    \    }\n                        else return true\n                    }\n    \
    \            }\n            }\n        }\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        val s = l.toSet\n        for (i <-\
    \ s) {\n            for (j <- s) {\n                if (i != j && s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false", "      \
    \  val s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n     \
    \           if (i != j && s.contains(-i - j)) return true\n            }\n   \
    \     }\n        return false", "        // your code here\n        return false",
  "        // your code here\n        if (l.length < 3) {\n            return false\n\
    \        }\n        val s = l.sorted\n        for (i <- 0 until s.length - 2)\
    \ {\n            var j = i + 1\n            var k = s.length - 1\n           \
    \ while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n            \
    \    if (sum == 0) {\n                    return true\n                } else\
    \ if (sum < 0) {\n                    j += 1\n                } else {\n     \
    \               k -= 1\n                }\n            }\n        }\n        return\
    \ false", "        var s = l.toSet\n        var r = false\n        for (i <- s)\
    \ {\n            for (j <- s) {\n                if (s.contains(-i - j)) {\n \
    \                   r = true\n                }\n            }\n        }\n  \
    \      return r", "        // YOUR CODE HERE\n        return false", "       \
    \ def triplesSumToZeroHelper(l : List[Long], acc : List[Long]) : Boolean = {\n\
    \            if (l.length < 3) return false\n            if (l.length == 3) return\
    \ l.sum == 0\n            if (l.head + l.tail.head + l.tail.tail.head == 0) return\
    \ true\n            triplesSumToZeroHelper(l.tail, acc)\n        }\n        triplesSumToZeroHelper(l,\
    \ List())", "        // YOUR CODE HERE\n        return false", "        if (l.length\
    \ < 3) {\n            return false\n        }\n        val l2 = l.sorted\n   \
    \     for (i <- 0 to l2.length - 3) {\n            var j = i + 1\n           \
    \ var k = l2.length - 1\n            while (j < k) {\n                val sum\
    \ = l2(i) + l2(j) + l2(k)\n                if (sum == 0) {\n                 \
    \   return true\n                } else if (sum < 0) {\n                    j\
    \ += 1\n                } else {\n                    k -= 1\n               \
    \ }\n            }\n        }\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        // YOUR CODE HERE\n        return false", " \
    \       // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        var s = l.sorted\n        var i = 0\n       \
    \ var j = 1\n        var k = 2\n        while (k < s.length) {\n            if\
    \ (s(i) + s(j) + s(k) == 0) {\n                return true\n            }\n  \
    \          else if (s(i) + s(j) + s(k) < 0) {\n                j += 1\n      \
    \          if (j == k) {\n                    i += 1\n                    j =\
    \ i + 1\n                }\n            }\n            else {\n              \
    \  k += 1\n                if (k == s.length) {\n                    i += 1\n\
    \                    j = i + 1\n                    k = j + 1\n              \
    \  }\n            }\n        }\n        return false", "        var s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                var\
    \ sum = s(i) + s(j) + s(k)\n                if (sum == 0) return true\n      \
    \          else if (sum < 0) j += 1\n                else k -= 1\n           \
    \ }\n        }\n        return false", "        val s = l.toSet\n        val s2\
    \ = s.map(x => x * x)\n        val s3 = s2.map(x => x * x)\n        val s4 = s3.map(x\
    \ => x * x)\n        val s5 = s4.map(x => x * x)\n        val s6 = s5.map(x =>\
    \ x * x)\n        val s7 = s6.map(x => x * x)\n        val s8 = s7.map(x => x\
    \ * x)\n        val s9 = s8.map(x => x * x)\n        val s10 = s9.map(x => x *\
    \ x)\n        val s11 = s10.map(x => x * x)\n        val s12 = s11.map(x => x\
    \ * x)\n        val s13 = s12.map(x => x * x)\n        val s14 = s13.map(x =>\
    \ x * x)\n        val s15 = s14.map(x => x * x)\n        val s16 = s15.map(x =>\
    \ x * x)\n        val s17 = s16.map(x => x * x)\n        val s18 = s17.map(x =>\
    \ x * x)\n        val s19 = s18.map(x => x * x)\n        val s20 = s19.map(x =>\
    \ x * x)\n        val s21 = s20.map(x => x * x)\n        val s22 = s21.map(x =>\
    \ x * x)\n        val s23 = s22.map(x => x * x)\n        val s24 = s23.map(x =>\
    \ x * x)\n        val s25 = s24.map(x => x * x)\n        val s26 = s25.map(x =>\
    \ x * x)\n        val s27 = s26.map(x => x * x)\n        val s28 = s27.map(x =>\
    \ x * x)\n        val s29 = s28.map(x => x * x)\n        val s30 = s29.map(x =>\
    \ x * x)\n        val s31 = s30.map(", "        var m = new HashMap[Long, Long]()\n\
    \        for (i <- l) {\n            if (m.contains(i)) {\n                m(i)\
    \ = m(i) + 1\n            } else {\n                m(i) = 1\n            }\n\
    \        }\n        for (i <- l) {\n            for (j <- l) {\n             \
    \   if (i != j) {\n                    var k = -(i + j)\n                    if\
    \ (m.contains(k)) {\n                        if (i == k && m(k) > 1) {\n     \
    \                       return true\n                        } else if (i != k)\
    \ {\n                            return true\n                        }\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        var h =\
    \ new HashMap[Long, Int]\n        for (i <- l) {\n            if (h.contains(i))\
    \ {\n                h(i) += 1\n            } else {\n                h(i) = 1\n\
    \            }\n        }\n        for (i <- l) {\n            for (j <- l) {\n\
    \                if (i != j) {\n                    if (h.contains(-i - j)) {\n\
    \                        if (i != -i - j || h(-i - j) > 1) {\n               \
    \             if (j != -i - j || h(-i - j) > 1) {\n                          \
    \      return true\n                            }\n                        }\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false", "        // Your code here\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        var m = new HashMap[Long, Int]()\n\
    \        for (i <- l) {\n            if (m.contains(i)) {\n                m(i)\
    \ += 1\n            } else {\n                m(i) = 1\n            }\n      \
    \  }\n        for (i <- l) {\n            for (j <- l) {\n                if (i\
    \ != j) {\n                    if (m.contains(-i - j)) {\n                   \
    \     if (i != -i - j && j != -i - j) {\n                            return true\n\
    \                        } else if (i == -i - j && m(i) > 1) {\n             \
    \               return true\n                        } else if (j == -i - j &&\
    \ m(j) > 1) {\n                            return true\n                     \
    \   }\n                    }\n                }\n            }\n        }\n  \
    \      return false", "        val s = l.toSet\n        for (i <- s) {\n     \
    \       for (j <- s) {\n                for (k <- s) {\n                    if\
    \ (i != j && i != k && j != k && i + j + k == 0) {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false", "        // YOUR CODE HERE\n        return false", "  \
    \      // YOUR CODE HERE\n        return false", "        var result : Boolean\
    \ = false\n        for (i <- 0 until l.length) {\n            for (j <- i + 1\
    \ until l.length) {\n                for (k <- j + 1 until l.length) {\n     \
    \               if (l(i) + l(j) + l(k) == 0) {\n                        result\
    \ = true\n                    }\n                }\n            }\n        }\n\
    \        return result", "        // YOUR CODE HERE\n        return false", " \
    \       var m = Map[Long, Int]()\n        for (i <- l) {\n            if (m.contains(i))\
    \ m(i) += 1\n            else m(i) = 1\n        }\n        for (i <- l) {\n  \
    \          for (j <- l) {\n                if (m.contains(-i - j)) {\n       \
    \             if (i == j && m(i) < 2) return false\n                    if (i\
    \ != j && m(i) < 1 && m(j) < 1) return false\n                    return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ // YOUR CODE HERE\n        return false", "        val l2 = l.sorted\n     \
    \   for (i <- 0 until l2.length - 2) {\n            var j = i + 1\n          \
    \  var k = l2.length - 1\n            while (j < k) {\n                if (l2(i)\
    \ + l2(j) + l2(k) == 0) return true\n                else if (l2(i) + l2(j) +\
    \ l2(k) < 0) j += 1\n                else k -= 1\n            }\n        }\n \
    \       return false", "        var m = Map[Long, Int]()\n        for (i <- l)\
    \ {\n            if (m.contains(i)) {\n                m(i) += 1\n           \
    \ } else {\n                m(i) = 1\n            }\n        }\n        for (i\
    \ <- l) {\n            for (j <- l) {\n                if (m.contains(-i - j))\
    \ {\n                    if (i == j && j == -i - j) {\n                      \
    \  if (m(i) >= 3) {\n                            return true\n               \
    \         }\n                    } else if (i == j) {\n                      \
    \  if (m(i) >= 2) {\n                            return true\n               \
    \         }\n                    } else if (j == -i - j) {\n                 \
    \       if (m(j) >= 2) {\n                            return true\n          \
    \              }\n                    } else if (i == -i - j) {\n            \
    \            if (m(i) >= 2) {\n                            return true\n     \
    \                   }\n                    } else {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false", "        // YOUR CODE HERE\n        return false", "  \
    \      // your code here\n        false", "        // YOUR CODE HERE\n       \
    \ return false", "        // YOUR CODE HERE\n        return false", "        //\
    \ your code here\n        return false", "        val s = l.toSet\n        val\
    \ s2 = s.map(x => -x)\n        val s3 = s.map(x => -2 * x)\n        val s4 = s.map(x\
    \ => -3 * x)\n        val s5 = s.map(x => -4 * x)\n        val s6 = s.map(x =>\
    \ -5 * x)\n        val s7 = s.map(x => -6 * x)\n        val s8 = s.map(x => -7\
    \ * x)\n        val s9 = s.map(x => -8 * x)\n        val s10 = s.map(x => -9 *\
    \ x)\n        val s11 = s.map(x => -10 * x)\n        val s12 = s.map(x => -11\
    \ * x)\n        val s13 = s.map(x => -12 * x)\n        val s14 = s.map(x => -13\
    \ * x)\n        val s15 = s.map(x => -14 * x)\n        val s16 = s.map(x => -15\
    \ * x)\n        val s17 = s.map(x => -16 * x)\n        val s18 = s.map(x => -17\
    \ * x)\n        val s19 = s.map(x => -18 * x)\n        val s20 = s.map(x => -19\
    \ * x)\n        val s21 = s.map(x => -20 * x)\n        val s22 = s.map(x => -21\
    \ * x)\n        val s23 = s.map(x => -22 * x)\n        val s24 = s.map(x => -23\
    \ * x)\n        val s25 = s.map(x => -24 * x)\n        val s26 = s.map(x => -25\
    \ * x)\n        val s27 = s.map(x => -26 * x)\n        val s28 = s.map(x => -27\
    \ * x)\n        val s29 = s.map(x => -28 * x)\n        val s30 = s.map(x => -29\
    \ * x)\n        val s31 = s.map(x =>", "        val s = l.toSet\n        for (i\
    \ <- s) {\n            for (j <- s) {\n                for (k <- s) {\n      \
    \              if (i + j + k == 0) {\n                        return true\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        val l2 =\
    \ l.sorted\n        for (i <- 0 until l2.length - 2) {\n            val a = l2(i)\n\
    \            var j = i + 1\n            var k = l2.length - 1\n            while\
    \ (j < k) {\n                val b = l2(j)\n                val c = l2(k)\n  \
    \              if (a + b + c == 0) return true\n                else if (a + b\
    \ + c < 0) j += 1\n                else k -= 1\n            }\n        }\n   \
    \     return false", "        // YOUR CODE HERE\n        return false", "    \
    \    var result = false\n        for (i <- 0 until l.length - 2) {\n         \
    \   for (j <- i + 1 until l.length - 1) {\n                for (k <- j + 1 until\
    \ l.length) {\n                    if (l(i) + l(j) + l(k) == 0) {\n          \
    \              result = true\n                    }\n                }\n     \
    \       }\n        }\n        return result", "        // YOUR CODE HERE\n   \
    \     return false", "        var s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                var sum = s(i) + s(j) + s(k)\n       \
    \         if (sum == 0) return true\n                else if (sum < 0) j += 1\n\
    \                else k -= 1\n            }\n        }\n        return false",
  "        // YOUR CODE HERE\n        return false", "        // your code here\n\
    \        return false", "        var s = l.sorted\n        var i = 0\n       \
    \ var j = 0\n        var k = 0\n        while (i < s.length - 2) {\n         \
    \   j = i + 1\n            k = s.length - 1\n            while (j < k) {\n   \
    \             if (s(i) + s(j) + s(k) == 0) {\n                    return true\n\
    \                } else if (s(i) + s(j) + s(k) < 0) {\n                    j +=\
    \ 1\n                } else {\n                    k -= 1\n                }\n\
    \            }\n            i += 1\n        }\n        return false", "      \
    \  val s = l.toSet\n        val s2 = s.map(x => x * x)\n        val s3 = s2.map(x\
    \ => x * x)\n        val s4 = s3.map(x => x * x)\n        val s5 = s4.map(x =>\
    \ x * x)\n        val s6 = s5.map(x => x * x)\n        val s7 = s6.map(x => x\
    \ * x)\n        val s8 = s7.map(x => x * x)\n        val s9 = s8.map(x => x *\
    \ x)\n        val s10 = s9.map(x => x * x)\n        val s11 = s10.map(x => x *\
    \ x)\n        val s12 = s11.map(x => x * x)\n        val s13 = s12.map(x => x\
    \ * x)\n        val s14 = s13.map(x => x * x)\n        val s15 = s14.map(x =>\
    \ x * x)\n        val s16 = s15.map(x => x * x)\n        val s17 = s16.map(x =>\
    \ x * x)\n        val s18 = s17.map(x => x * x)\n        val s19 = s18.map(x =>\
    \ x * x)\n        val s20 = s19.map(x => x * x)\n        val s21 = s20.map(x =>\
    \ x * x)\n        val s22 = s21.map(x => x * x)\n        val s23 = s22.map(x =>\
    \ x * x)\n        val s24 = s23.map(x => x * x)\n        val s25 = s24.map(x =>\
    \ x * x)\n        val s26 = s25.map(x => x * x)\n        val s27 = s26.map(x =>\
    \ x * x)\n        val s28 = s27.map(x => x * x)\n        val s29 = s28.map(x =>\
    \ x * x)\n        val s30 = s29.map(x => x * x)\n        val s31 = s30.map(",
  "        // your code here\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        // your code here\n        return false", " \
    \       // your code here\n        if (l.length < 3) false\n        else {\n \
    \           val s = l.sorted\n            var i = 0\n            while (i < s.length\
    \ - 2) {\n                var j = i + 1\n                var k = s.length - 1\n\
    \                while (j < k) {\n                    if (s(i) + s(j) + s(k) ==\
    \ 0) return true\n                    else if (s(i) + s(j) + s(k) < 0) j += 1\n\
    \                    else k -= 1\n                }\n                i += 1\n\
    \            }\n            false\n        }", "        // YOUR CODE HERE\n  \
    \      return false", "        // your code here\n        false", "        val\
    \ s = l.toSet\n        val s2 = s.map(x => x * x)\n        val s3 = s2.map(x =>\
    \ x * x)\n        val s4 = s3.map(x => x * x)\n        val s5 = s4.map(x => x\
    \ * x)\n        val s6 = s5.map(x => x * x)\n        val s7 = s6.map(x => x *\
    \ x)\n        val s8 = s7.map(x => x * x)\n        val s9 = s8.map(x => x * x)\n\
    \        val s10 = s9.map(x => x * x)\n        val s11 = s10.map(x => x * x)\n\
    \        val s12 = s11.map(x => x * x)\n        val s13 = s12.map(x => x * x)\n\
    \        val s14 = s13.map(x => x * x)\n        val s15 = s14.map(x => x * x)\n\
    \        val s16 = s15.map(x => x * x)\n        val s17 = s16.map(x => x * x)\n\
    \        val s18 = s17.map(x => x * x)\n        val s19 = s18.map(x => x * x)\n\
    \        val s20 = s19.map(x => x * x)\n        val s21 = s20.map(x => x * x)\n\
    \        val s22 = s21.map(x => x * x)\n        val s23 = s22.map(x => x * x)\n\
    \        val s24 = s23.map(x => x * x)\n        val s25 = s24.map(x => x * x)\n\
    \        val s26 = s25.map(x => x * x)\n        val s27 = s26.map(x => x * x)\n\
    \        val s28 = s27.map(x => x * x)\n        val s29 = s28.map(x => x * x)\n\
    \        val s30 = s29.map(x => x * x)\n        val s31 = s30.map(", "       \
    \ val m = new HashMap[Long, Int]\n        for (x <- l) {\n            if (m.contains(x))\
    \ m(x) += 1\n            else m(x) = 1\n        }\n        for (x <- l) {\n  \
    \          for (y <- l) {\n                if (x != y) {\n                   \
    \ val z = -(x + y)\n                    if (m.contains(z) && (z != x) && (z !=\
    \ y)) {\n                        if (z == x) {\n                            if\
    \ (m(z) > 1) return true\n                        }\n                        else\
    \ if (z == y) {\n                            if (m(z) > 1) return true\n     \
    \                   }\n                        else return true\n            \
    \        }\n                }\n            }\n        }\n        return false",
  "        // your code here\n        return false", "        if (l.length < 3) {\n\
    \            return false\n        }\n        for (i <- 0 until l.length - 2)\
    \ {\n            for (j <- i + 1 until l.length - 1) {\n                for (k\
    \ <- j + 1 until l.length) {\n                    if (l(i) + l(j) + l(k) == 0)\
    \ {\n                        return true\n                    }\n            \
    \    }\n            }\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        // YOUR CODE HERE\n        return\
    \ false", "        val l2 = l.sorted\n        for (i <- 0 until l2.length - 2)\
    \ {\n            val a = l2(i)\n            var j = i + 1\n            var k =\
    \ l2.length - 1\n            while (j < k) {\n                val b = l2(j)\n\
    \                val c = l2(k)\n                if (a + b + c == 0) return true\n\
    \                else if (a + b + c < 0) j += 1\n                else k -= 1\n\
    \            }\n        }\n        return false", "        // your code here\n\
    \        return false", "        // YOUR CODE HERE\n        return false", " \
    \       val s = l.sorted\n        for (i <- 0 until s.length - 2) {\n        \
    \    val j = i + 1\n            val k = s.length - 1\n            while (j < k)\
    \ {\n                val sum = s(i) + s(j) + s(k)\n                if (sum ==\
    \ 0) return true\n                else if (sum < 0) j += 1\n                else\
    \ k -= 1\n            }\n        }\n        return false", '        return false',
  "        // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        // your code here\n        return false", " \
    \       if (l.length < 3) {\n            return false\n        }\n        val\
    \ s = l.toSet\n        val s2 = s.map(x => x * x)\n        val s3 = s2.toList.sorted\n\
    \        for (i <- 0 until s3.length - 2) {\n            var j = i + 1\n     \
    \       var k = s3.length - 1\n            while (j < k) {\n                if\
    \ (s3(i) + s3(j) == s3(k)) {\n                    return true\n              \
    \  } else if (s3(i) + s3(j) < s3(k)) {\n                    k -= 1\n         \
    \       } else {\n                    j += 1\n                }\n            }\n\
    \        }\n        return false", "        val s = l.sorted\n        for (i <-\
    \ 0 until s.length - 2) {\n            var j = i + 1\n            var k = s.length\
    \ - 1\n            while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n\
    \                if (sum == 0) {\n                    return true\n          \
    \      } else if (sum < 0) {\n                    j += 1\n                } else\
    \ {\n                    k -= 1\n                }\n            }\n        }\n\
    \        return false", "        // YOUR CODE HERE\n        return false", " \
    \       if (l.length < 3) {\n            return false\n        }\n        val\
    \ s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n          \
    \      for (k <- s) {\n                    if (i + j + k == 0) {\n           \
    \             return true\n                    }\n                }\n        \
    \    }\n        }\n        return false", "        val l2 = l.sorted\n       \
    \ for (i <- 0 until l2.length - 2) {\n            var j = i + 1\n            var\
    \ k = l2.length - 1\n            while (j < k) {\n                val sum = l2(i)\
    \ + l2(j) + l2(k)\n                if (sum == 0) return true\n               \
    \ else if (sum < 0) j += 1\n                else k -= 1\n            }\n     \
    \   }\n        return false", "        // YOUR CODE HERE\n        return false",
  "        var s = l.sorted\n        var i = 0\n        while (i < s.length - 2) {\n\
    \            var j = i + 1\n            var k = s.length - 1\n            while\
    \ (j < k) {\n                if (s(i) + s(j) + s(k) == 0) return true\n      \
    \          else if (s(i) + s(j) + s(k) < 0) j += 1\n                else k -=\
    \ 1\n            }\n            i += 1\n        }\n        return false", "  \
    \      val s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n \
    \               if (s.contains(-i - j)) {\n                    return true\n \
    \               }\n            }\n        }\n        return false", "        val\
    \ s = l.sorted\n        for (i <- 0 until s.length - 2) {\n            var j =\
    \ i + 1\n            var k = s.length - 1\n            while (j < k) {\n     \
    \           val sum = s(i) + s(j) + s(k)\n                if (sum == 0) return\
    \ true\n                else if (sum < 0) j += 1\n                else k -= 1\n\
    \            }\n        }\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        val l2 = l.sorted\n        for (i <- 0 until\
    \ l2.length - 2) {\n            var j = i + 1\n            var k = l2.length -\
    \ 1\n            while (j < k) {\n                val sum = l2(i) + l2(j) + l2(k)\n\
    \                if (sum == 0) return true\n                else if (sum < 0)\
    \ j += 1\n                else k -= 1\n            }\n        }\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        val s = l.toSet\n        for (i <-\
    \ s) {\n            for (j <- s) {\n                for (k <- s) {\n         \
    \           if (i != j && i != k && j != k && i + j + k == 0) {\n            \
    \            return true\n                    }\n                }\n         \
    \   }\n        }\n        return false", "        val m = l.toSet\n        val\
    \ s = m.toList.sorted\n        val n = s.length\n        for (i <- 0 until n -\
    \ 2) {\n            for (j <- i + 1 until n - 1) {\n                val k = -(s(i)\
    \ + s(j))\n                if (m.contains(k)) return true\n            }\n   \
    \     }\n        return false", "        // your code here\n        false", " \
    \       val s = l.toSet\n        val s2 = s.map(x => -x)\n        val s3 = s.map(x\
    \ => -2 * x)\n        for (x <- s) {\n            for (y <- s2) {\n          \
    \      if (s3.contains(x + y)) return true\n            }\n        }\n       \
    \ return false", "        // YOUR CODE HERE\n        return false", "        if\
    \ (l.length < 3) {\n            return false\n        }\n        val s = l.sorted\n\
    \        for (i <- 0 until s.length - 2) {\n            var j = i + 1\n      \
    \      var k = s.length - 1\n            while (j < k) {\n                if (s(i)\
    \ + s(j) + s(k) == 0) {\n                    return true\n                } else\
    \ if (s(i) + s(j) + s(k) < 0) {\n                    j += 1\n                }\
    \ else {\n                    k -= 1\n                }\n            }\n     \
    \   }\n        return false", "        var result : Boolean = false\n        for\
    \ (i <- 0 until l.length - 2) {\n            for (j <- i + 1 until l.length -\
    \ 1) {\n                for (k <- j + 1 until l.length) {\n                  \
    \  if (l(i) + l(j) + l(k) == 0) {\n                        result = true\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ result", "        // YOUR CODE HERE\n        return false", "        val h =\
    \ l.toSet\n        for (i <- h) {\n            for (j <- h) {\n              \
    \  for (k <- h) {\n                    if (i != j && i != k && j != k && i + j\
    \ + k == 0) {\n                        return true\n                    }\n  \
    \              }\n            }\n        }\n        return false", "        if\
    \ (l.length < 3) {\n            return false\n        }\n        var s = l.sorted\n\
    \        for (i <- 0 to s.length - 3) {\n            var j = i + 1\n         \
    \   var k = s.length - 1\n            while (j < k) {\n                var sum\
    \ = s(i) + s(j) + s(k)\n                if (sum == 0) {\n                    return\
    \ true\n                } else if (sum < 0) {\n                    j += 1\n  \
    \              } else {\n                    k -= 1\n                }\n     \
    \       }\n        }\n        return false", "        val s = l.toSet\n      \
    \  for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-i\
    \ - j)) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", "        // YOUR CODE HERE\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        // YOUR\
    \ CODE HERE\n        if (l.length < 3) {\n            return false\n        }\n\
    \        for (i <- 0 until l.length - 2) {\n            for (j <- i + 1 until\
    \ l.length - 1) {\n                for (k <- j + 1 until l.length) {\n       \
    \             if (l(i) + l(j) + l(k) == 0) {\n                        return true\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ false", "        val n = l.length\n        if (n < 3) return false\n       \
    \ val s = l.sorted\n        for (i <- 0 until n - 2) {\n            var j = i\
    \ + 1\n            var k = n - 1\n            while (j < k) {\n              \
    \  val sum = s(i) + s(j) + s(k)\n                if (sum == 0) return true\n \
    \               else if (sum < 0) j += 1\n                else k -= 1\n      \
    \      }\n        }\n        return false", "        // your code here\n     \
    \   false", "        if (l.length < 3) {\n            return false\n        }\n\
    \        val s = l.sorted\n        for (i <- 0 until s.length - 2) {\n       \
    \     val j = i + 1\n            val k = s.length - 1\n            while (j <\
    \ k) {\n                val sum = s(i) + s(j) + s(k)\n                if (sum\
    \ == 0) {\n                    return true\n                } else if (sum < 0)\
    \ {\n                    j += 1\n                } else {\n                  \
    \  k -= 1\n                }\n            }\n        }\n        return false",
  "        // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        var s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                if (s(i) + s(j) + s(k) == 0) return true\n\
    \                else if (s(i) + s(j) + s(k) < 0) j += 1\n                else\
    \ k -= 1\n            }\n        }\n        return false", "        // YOUR CODE\
    \ HERE\n        return false", "        val s = l.toSet\n        for (i <- s)\
    \ {\n            for (j <- s) {\n                for (k <- s) {\n            \
    \        if (i != j && i != k && j != k && i + j + k == 0) {\n               \
    \         return true\n                    }\n                }\n            }\n\
    \        }\n        return false", "        // YOUR CODE HERE\n        return\
    \ false", "        // Your code here\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        // YOUR CODE HERE\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        // your\
    \ code here\n        false", "        // YOUR CODE HERE\n        return false",
  '        return false', "        val l2 = l.sorted\n        for (i <- 0 until l2.length\
    \ - 2) {\n            val j = i + 1\n            val k = l2.length - 1\n     \
    \       while (j < k) {\n                val sum = l2(i) + l2(j) + l2(k)\n   \
    \             if (sum == 0) return true\n                else if (sum < 0) j +=\
    \ 1\n                else k -= 1\n            }\n        }\n        return false",
  "        var m = new HashMap[Long, Int]()\n        for (i <- l) {\n            if\
    \ (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n        for\
    \ (i <- l) {\n            for (j <- l) {\n                if (i != j) {\n    \
    \                val k = -(i + j)\n                    if (m.contains(k) && (k\
    \ != i) && (k != j)) {\n                        if (k == i) {\n              \
    \              if (m(k) > 1) return true\n                        }\n        \
    \                else if (k == j) {\n                            if (m(k) > 1)\
    \ return true\n                        }\n                        else if (i ==\
    \ j) {\n                            if (m(i) > 2) return true\n              \
    \          }\n                        else return true\n                    }\n\
    \                }\n            }\n        }\n        return false", "       \
    \ // your code here\n        return false", "        // YOUR CODE HERE\n     \
    \   return false", "        // YOUR CODE HERE\n        return false", "      \
    \  // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n    \
    \    return false", "        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            val a = s(i)\n            var j = i + 1\n            var\
    \ k = s.length - 1\n            while (j < k) {\n                val b = s(j)\n\
    \                val c = s(k)\n                if (a + b + c == 0) return true\n\
    \                else if (a + b + c < 0) j += 1\n                else k -= 1\n\
    \            }\n        }\n        return false", "        val sorted = l.sorted\n\
    \        for (i <- 0 until sorted.length - 2) {\n            var j = i + 1\n \
    \           var k = sorted.length - 1\n            while (j < k) {\n         \
    \       val sum = sorted(i) + sorted(j) + sorted(k)\n                if (sum ==\
    \ 0) return true\n                else if (sum < 0) j += 1\n                else\
    \ k -= 1\n            }\n        }\n        return false", "        // your code\
    \ here\n        return false", "        // YOUR CODE HERE\n        return false",
  "        // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        // YOUR CODE HERE\n        return false", " \
    \       // YOUR CODE HERE\n        return false", "        val s = l.toSet\n \
    \       val s2 = s.map(x => x * x)\n        val s3 = s2.map(x => -x)\n       \
    \ s2.exists(x => s3.contains(x))", "        // YOUR CODE HERE\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        val hs =\
    \ HashSet[Long]()\n        for (i <- l) {\n            hs += i\n        }\n  \
    \      for (i <- l) {\n            for (j <- l) {\n                if (hs.contains(-i\
    \ - j)) {\n                    return true\n                }\n            }\n\
    \        }\n        return false", '        return false', "        // YOUR CODE\
    \ HERE\n        return false", "        // YOUR CODE HERE\n        return false",
  "        // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        val s = l.toSet\n        val s2 = s.map(x =>\
    \ x * x)\n        val s3 = s2.toList.sorted\n        for (i <- 0 until s3.length\
    \ - 2) {\n            var j = i + 1\n            var k = s3.length - 1\n     \
    \       while (j < k) {\n                if (s3(i) + s3(j) == s3(k)) return true\n\
    \                else if (s3(i) + s3(j) < s3(k)) k -= 1\n                else\
    \ j += 1\n            }\n        }\n        return false", "        val l2 = l.sorted\n\
    \        for (i <- 0 until l2.length - 2) {\n            var j = i + 1\n     \
    \       var k = l2.length - 1\n            while (j < k) {\n                if\
    \ (l2(i) + l2(j) + l2(k) == 0) return true\n                else if (l2(i) + l2(j)\
    \ + l2(k) < 0) j += 1\n                else k -= 1\n            }\n        }\n\
    \        return false", "        // YOUR CODE HERE\n        return false", " \
    \       // YOUR CODE HERE\n        return false", '        l.combinations(3).exists(x
    => x.sum == 0)', "        val s = l.toSet\n        val s2 = s.map(x => x * x)\n\
    \        val s3 = s2.map(x => x * x)\n        val s4 = s3.map(x => x * x)\n  \
    \      val s5 = s4.map(x => x * x)\n        val s6 = s5.map(x => x * x)\n    \
    \    val s7 = s6.map(x => x * x)\n        val s8 = s7.map(x => x * x)\n      \
    \  val s9 = s8.map(x => x * x)\n        val s10 = s9.map(x => x * x)\n       \
    \ val s11 = s10.map(x => x * x)\n        val s12 = s11.map(x => x * x)\n     \
    \   val s13 = s12.map(x => x * x)\n        val s14 = s13.map(x => x * x)\n   \
    \     val s15 = s14.map(x => x * x)\n        val s16 = s15.map(x => x * x)\n \
    \       val s17 = s16.map(x => x * x)\n        val s18 = s17.map(x => x * x)\n\
    \        val s19 = s18.map(x => x * x)\n        val s20 = s19.map(x => x * x)\n\
    \        val s21 = s20.map(x => x * x)\n        val s22 = s21.map(x => x * x)\n\
    \        val s23 = s22.map(x => x * x)\n        val s24 = s23.map(x => x * x)\n\
    \        val s25 = s24.map(x => x * x)\n        val s26 = s25.map(x => x * x)\n\
    \        val s27 = s26.map(x => x * x)\n        val s28 = s27.map(x => x * x)\n\
    \        val s29 = s28.map(x => x * x)\n        val s30 = s29.map(x => x * x)\n\
    \        val s31 = s30.map(", "        val s = l.sorted\n        for (i <- 0 until\
    \ s.length - 2) {\n            var j = i + 1\n            var k = s.length - 1\n\
    \            while (j < k) {\n                if (s(i) + s(j) + s(k) == 0) return\
    \ true\n                else if (s(i) + s(j) + s(k) < 0) j += 1\n            \
    \    else k -= 1\n            }\n        }\n        return false", "        val\
    \ s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n          \
    \      if (s.contains(-i - j)) {\n                    return true\n          \
    \      }\n            }\n        }\n        return false", "        val s = l.toSet\n\
    \        for (i <- s) {\n            for (j <- s) {\n                for (k <-\
    \ s) {\n                    if (i != j && i != k && j != k && i + j + k == 0)\
    \ {\n                        return true\n                    }\n            \
    \    }\n            }\n        }\n        return false", "        // YOUR CODE\
    \ HERE\n        return false", "        if (l.length < 3) {\n            return\
    \ false\n        }\n        val s = l.sorted\n        for (i <- 0 until s.length\
    \ - 2) {\n            var j = i + 1\n            var k = s.length - 1\n      \
    \      while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n       \
    \         if (sum == 0) {\n                    return true\n                }\
    \ else if (sum < 0) {\n                    j += 1\n                } else {\n\
    \                    k -= 1\n                }\n            }\n        }\n   \
    \     return false", "        // your code here\n        return false", "    \
    \    val l2 = l.sorted\n        for (i <- 0 until l2.length - 2) {\n         \
    \   val j = i + 1\n            val k = l2.length - 1\n            while (j < k)\
    \ {\n                val sum = l2(i) + l2(j) + l2(k)\n                if (sum\
    \ == 0) return true\n                else if (sum < 0) j += 1\n              \
    \  else k -= 1\n            }\n        }\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        if (l.length < 3) {\n           \
    \ return false\n        }\n        val s = l.toSet\n        for (i <- s) {\n \
    \           for (j <- s) {\n                if (i != j) {\n                  \
    \  if (s.contains(-i - j)) {\n                        return true\n          \
    \          }\n                }\n            }\n        }\n        return false",
  "        // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        // YOUR CODE HERE\n        return false", " \
    \       if (l.length < 3) {\n            return false\n        }\n        val\
    \ s = l.sorted\n        for (i <- 0 until s.length - 2) {\n            var j =\
    \ i + 1\n            var k = s.length - 1\n            while (j < k) {\n     \
    \           val sum = s(i) + s(j) + s(k)\n                if (sum == 0) {\n  \
    \                  return true\n                } else if (sum < 0) {\n      \
    \              j += 1\n                } else {\n                    k -= 1\n\
    \                }\n            }\n        }\n        return false", "       \
    \ // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n     \
    \   return false", "        // YOUR CODE HERE\n        return false", "      \
    \  // YOUR CODE HERE\n        return false", "        val s = l.toSet\n      \
    \  for (i <- s) {\n            for (j <- s) {\n                for (k <- s) {\n\
    \                    if (i != j && i != k && j != k && i + j + k == 0) {\n   \
    \                     return true\n                    }\n                }\n\
    \            }\n        }\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        var s = l.toSet\n        var r = false\n    \
    \    for (i <- s) {\n            for (j <- s) {\n                if (s.contains(-(i\
    \ + j))) {\n                    r = true\n                }\n            }\n \
    \       }\n        return r", "        val s = l.toSet\n        for (i <- s) {\n\
    \            for (j <- s) {\n                for (k <- s) {\n                \
    \    if (i + j + k == 0) return true\n                }\n            }\n     \
    \   }\n        return false", "        // YOUR CODE HERE\n        return false",
  "        val s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n \
    \               if (s.contains(-(i + j))) {\n                    return true\n\
    \                }\n            }\n        }\n        return false", "       \
    \ var result = false\n        for (i <- 0 until l.length) {\n            for (j\
    \ <- i + 1 until l.length) {\n                for (k <- j + 1 until l.length)\
    \ {\n                    if (l(i) + l(j) + l(k) == 0) {\n                    \
    \    result = true\n                    }\n                }\n            }\n\
    \        }\n        return result", "        if (l.length < 3) return false\n\
    \        val s = l.sorted\n        for (i <- 0 until s.length - 2) {\n       \
    \     var j = i + 1\n            var k = s.length - 1\n            while (j <\
    \ k) {\n                if (s(i) + s(j) + s(k) == 0) return true\n           \
    \     else if (s(i) + s(j) + s(k) < 0) j += 1\n                else k -= 1\n \
    \           }\n        }\n        return false", "        val s = l.toSet\n  \
    \      if (s.size < 3) return false\n        val s2 = s.map(x => x * x)\n    \
    \    val s3 = s2.map(x => -x)\n        s2.exists(x => s3.contains(x))", "    \
    \    // your code here\n        false", "        var m = Map[Long, Int]()\n  \
    \      for (i <- l) {\n            if (m.contains(i)) {\n                m(i)\
    \ += 1\n            } else {\n                m(i) = 1\n            }\n      \
    \  }\n        for (i <- l) {\n            for (j <- l) {\n                if (i\
    \ != j) {\n                    var k = -(i + j)\n                    if (m.contains(k))\
    \ {\n                        if (i == k && m(k) > 1) {\n                     \
    \       return true\n                        } else if (j == k && m(k) > 1) {\n\
    \                            return true\n                        } else if (i\
    \ != k && j != k) {\n                            return true\n               \
    \         }\n                    }\n                }\n            }\n       \
    \ }\n        return false", "        // YOUR CODE HERE\n        return false",
  "        // YOUR CODE HERE\n        return false", "        if (l.length < 3) {\n\
    \            return false\n        }\n        val s = l.sorted\n        var i\
    \ = 0\n        while (i < s.length - 2) {\n            var j = i + 1\n       \
    \     var k = s.length - 1\n            while (j < k) {\n                val sum\
    \ = s(i) + s(j) + s(k)\n                if (sum == 0) {\n                    return\
    \ true\n                } else if (sum < 0) {\n                    j += 1\n  \
    \              } else {\n                    k -= 1\n                }\n     \
    \       }\n            i += 1\n        }\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        // YOUR CODE HERE\n        return\
    \ false", "        // YOUR CODE HERE\n        return false", "        var s =\
    \ new HashSet[Long]\n        for (i <- l) {\n            for (j <- l) {\n    \
    \            if (s.contains(-(i + j))) return true\n            }\n          \
    \  s.add(i)\n        }\n        return false", "        // Your code here\n  \
    \      return false", '        l.sorted.combinations(3).exists(x => x.sum == 0)',
  "        // YOUR CODE HERE\n        return false", "        val s = l.toSet\n  \
    \      for (x <- s) {\n            for (y <- s) {\n                for (z <- s)\
    \ {\n                    if (x + y + z == 0) {\n                        return\
    \ true\n                    }\n                }\n            }\n        }\n \
    \       return false", "        // YOUR CODE HERE\n        return false", "  \
    \      // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        if (l.length < 3) {\n            return false\n\
    \        }\n        val s = l.sorted\n        for (i <- 0 until s.length - 2)\
    \ {\n            var j = i + 1\n            var k = s.length - 1\n           \
    \ while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n            \
    \    if (sum == 0) {\n                    return true\n                } else\
    \ if (sum < 0) {\n                    j += 1\n                } else {\n     \
    \               k -= 1\n                }\n            }\n        }\n        return\
    \ false", "        // YOUR CODE HERE\n        if (l.length < 3) {\n          \
    \  return false\n        }\n        val m = l.toSet\n        for (i <- m) {\n\
    \            for (j <- m) {\n                for (k <- m) {\n                \
    \    if (i != j && i != k && j != k && i + j + k == 0) {\n                   \
    \     return true\n                    }\n                }\n            }\n \
    \       }\n        return false", "        // YOUR CODE HERE\n        return false",
  "        var m = Map[Long, Int]()\n        for (i <- l) {\n            if (m.contains(i))\
    \ {\n                m(i) += 1\n            } else {\n                m(i) = 1\n\
    \            }\n        }\n        for (i <- l) {\n            for (j <- l) {\n\
    \                if (i != j) {\n                    var k = -i - j\n         \
    \           if (k != i && k != j) {\n                        if (m.contains(k))\
    \ {\n                            if (k == i && m(k) >= 2) {\n                \
    \                return true\n                            } else if (k == j &&\
    \ m(k) >= 2) {\n                                return true\n                \
    \            } else if (k != i && k != j) {\n                                return\
    \ true\n                            }\n                        }\n           \
    \         }\n                }\n            }\n        }\n        return false",
  "        val s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n \
    \               for (k <- s) {\n                    if (i != j && i != k && j\
    \ != k && i + j + k == 0) return true\n                }\n            }\n    \
    \    }\n        return false", "        // Write your code here\n        return\
    \ false"]
stop_tokens:
- "\n    }\n"
