name: HumanEval_40_triples_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // triples_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are three distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> triplesSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (true)\n    // >>> triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> triplesSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def triplesSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, -1l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 5l.toLong, 7l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 9l.toLong, 7l.toLong))) == (true));\n    assert(triplesSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(triplesSumToZero((List[Long](1l.toLong, 3l.toLong, 5l.toLong,\
  \ -100l.toLong))) == (false));\n    assert(triplesSumToZero((List[Long](100l.toLong,\
  \ 3l.toLong, 5l.toLong, -100l.toLong))) == (false));\n    }\n\n}\n"
completions: ["        // YOUR CODE HERE\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        val s = l.toSet\n        for (i <-\
    \ s) {\n            for (j <- s) {\n                if (s.contains(-i - j)) return\
    \ true\n            }\n        }\n        return false", "        // YOUR CODE\
    \ HERE\n        return false", "        // YOUR CODE HERE\n        return false",
  "        // YOUR CODE HERE\n        return false", "        // YOUR CODE HERE\n\
    \        return false", "        // Your code here\n        return false", " \
    \       // your code here\n        return false", "        var h = new HashMap[Long,\
    \ Int]\n        for (i <- l) {\n            if (h.contains(i)) h(i) += 1\n   \
    \         else h(i) = 1\n        }\n        for (i <- l) {\n            for (j\
    \ <- l) {\n                if (i != j) {\n                    val k = -i - j\n\
    \                    if (h.contains(k) && (k != i) && (k != j)) {\n          \
    \              if (i == k) {\n                            if (h(i) >= 3) return\
    \ true\n                        }\n                        else if (j == k) {\n\
    \                            if (h(j) >= 3) return true\n                    \
    \    }\n                        else return true\n                    }\n    \
    \            }\n            }\n        }\n        return false", "        // YOUR\
    \ CODE HERE\n        return false", "        val s = l.toSet\n        for (i <-\
    \ s) {\n            for (j <- s) {\n                if (i != j && s.contains(-i\
    \ - j)) return true\n            }\n        }\n        return false", "      \
    \  val s = l.toSet\n        for (i <- s) {\n            for (j <- s) {\n     \
    \           if (i != j && s.contains(-i - j)) return true\n            }\n   \
    \     }\n        return false", "        // your code here\n        return false",
  "        // your code here\n        if (l.length < 3) {\n            return false\n\
    \        }\n        val s = l.sorted\n        for (i <- 0 until s.length - 2)\
    \ {\n            var j = i + 1\n            var k = s.length - 1\n           \
    \ while (j < k) {\n                val sum = s(i) + s(j) + s(k)\n            \
    \    if (sum == 0) {\n                    return true\n                } else\
    \ if (sum < 0) {\n                    j += 1\n                } else {\n     \
    \               k -= 1\n                }\n            }\n        }\n        return\
    \ false", "        var s = l.toSet\n        var r = false\n        for (i <- s)\
    \ {\n            for (j <- s) {\n                if (s.contains(-i - j)) {\n \
    \                   r = true\n                }\n            }\n        }\n  \
    \      return r", "        // YOUR CODE HERE\n        return false", "       \
    \ def triplesSumToZeroHelper(l : List[Long], acc : List[Long]) : Boolean = {\n\
    \            if (l.length < 3) return false\n            if (l.length == 3) return\
    \ l.sum == 0\n            if (l.head + l.tail.head + l.tail.tail.head == 0) return\
    \ true\n            triplesSumToZeroHelper(l.tail, acc)\n        }\n        triplesSumToZeroHelper(l,\
    \ List())", "        // YOUR CODE HERE\n        return false", "        if (l.length\
    \ < 3) {\n            return false\n        }\n        val l2 = l.sorted\n   \
    \     for (i <- 0 to l2.length - 3) {\n            var j = i + 1\n           \
    \ var k = l2.length - 1\n            while (j < k) {\n                val sum\
    \ = l2(i) + l2(j) + l2(k)\n                if (sum == 0) {\n                 \
    \   return true\n                } else if (sum < 0) {\n                    j\
    \ += 1\n                } else {\n                    k -= 1\n               \
    \ }\n            }\n        }\n        return false"]
stop_tokens:
- "\n    }\n"
