name: HumanEval_127_intersection
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given two intervals,\n    // where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n    // The given intervals are\
  \ closed which means that the interval (start, end)\n    // includes both start\
  \ and end.\n    // For each given interval, it is assumed that its start is less\
  \ or equal its end.\n    // Your task is to determine whether the length of intersection\
  \ of these two \n    // intervals is a prime number.\n    // Example, the intersection\
  \ of the intervals (1, 3), (2, 4) is (2, 3)\n    // which its length is 1, which\
  \ not a prime number.\n    // If the length of the intersection is a prime number,\
  \ return \"YES\",\n    // otherwise, return \"NO\".\n    // If the two intervals\
  \ don't intersect, return \"NO\".\n    // [input/output] samples:\n    // >>> intersection(((1l,\
  \ 2l)), ((2l, 3l)))\n    // (\"NO\")\n    // >>> intersection(((-1l, 1l)), ((0l,\
  \ 4l)))\n    // (\"NO\")\n    // >>> intersection(((-3l, -1l)), ((-5l, 5l)))\n \
  \   // (\"YES\")\n    def intersection(interval1 : Tuple2[Long, Long], interval2\
  \ : Tuple2[Long, Long]) : String = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(intersection(((1l,\
  \ 2l)), ((2l, 3l))).equals((\"NO\")));\n    assert(intersection(((-1l, 1l)), ((0l,\
  \ 4l))).equals((\"NO\")));\n    assert(intersection(((-3l, -1l)), ((-5l, 5l))).equals((\"\
  YES\")));\n    assert(intersection(((-2l, 2l)), ((-4l, 0l))).equals((\"YES\")));\n\
  \    assert(intersection(((-11l, 2l)), ((-1l, -1l))).equals((\"NO\")));\n    assert(intersection(((1l,\
  \ 2l)), ((3l, 5l))).equals((\"NO\")));\n    assert(intersection(((1l, 2l)), ((1l,\
  \ 2l))).equals((\"NO\")));\n    assert(intersection(((-2l, -2l)), ((-3l, -2l))).equals((\"\
  NO\")));\n    }\n\n}\n"
completions: ["        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) {\n            \"NO\"\n        } else {\n  \
    \          val length = end - start + 1\n            if (length == 1) {\n    \
    \            \"NO\"\n            } else {\n                val primes = Array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 9",
  "        val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        if (start1 > end1 || start2 > end2) return \"NO\"\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) return \"NO\"\n        if (start == end) return \"YES\"\n        if (start\
    \ + 1 == end) return \"NO\"\n        val length = end - start\n        if (length\
    \ % 2 == 0) return \"NO\"\n        if (length % 3 == 0) return \"NO\"\n      \
    \  if (length % 5 == 0) return \"NO\"\n        if (length % 7 == 0) return \"\
    NO\"\n        \"YES\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) {\n            \"NO\"\n        }\
    \ else {\n            val length = end - start + 1\n            if (isPrime(length))\
    \ {\n                \"YES\"\n            } else {\n                \"NO\"\n \
    \           }\n        }", "        val (start1, end1) = interval1\n        val\
    \ (start2, end2) = interval2\n        val start = max(start1, start2)\n      \
    \  val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else if\
    \ (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (start == end) \"YES\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"", "        val start = max(interval1._1,\
    \ interval2._1)\n        val end = min(interval1._2, interval2._2)\n        if\
    \ (start > end) {\n            \"NO\"\n        } else {\n            if (isPrime(end\
    \ - start + 1)) \"YES\" else \"NO\"\n        }", "        val (start1, end1) =\
    \ interval1\n        val (start2, end2) = interval2\n        if (start1 > end1\
    \ || start2 > end2) return \"NO\"\n        val start = max(start1, start2)\n \
    \       val end = min(end1, end2)\n        if (start > end) return \"NO\"\n  \
    \      val length = end - start + 1\n        if (length == 1) return \"NO\"\n\
    \        if (length == 2) return \"YES\"\n        val sqrtLength = sqrt(length).toLong\n\
    \        for (i <- 2l to sqrtLength) {\n            if (length % i == 0) return\
    \ \"NO\"\n        }\n        \"YES\"", "        val start = max(interval1._1,\
    \ interval2._1)\n        val end = min(interval1._2, interval2._2)\n        if\
    \ (start > end) {\n            \"NO\"\n        } else {\n            val length\
    \ = end - start + 1\n            if (length == 1) {\n                \"NO\"\n\
    \            } else {\n                if (length == 2) {\n                  \
    \  \"YES\"\n                } else {\n                    val sqrt = sqrt(length).toLong\n\
    \                    var isPrime = true\n                    for (i <- 2l to sqrt)\
    \ {\n                        if (length % i == 0) {\n                        \
    \    isPrime = false\n                        }\n                    }\n     \
    \               if (isPrime) {\n                        \"YES\"\n            \
    \        } else {\n                        \"NO\"\n                    }\n   \
    \             }\n            }\n        }", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) return \"NO\"\n \
    \       val len = end - start + 1\n        if (len == 1) return \"NO\"\n     \
    \   if (len == 2) return \"YES\"\n        for (i <- 2l until len) {\n        \
    \    if (len % i == 0) return \"NO\"\n        }\n        \"YES\"", "        val\
    \ (start1, end1) = interval1\n        val (start2, end2) = interval2\n       \
    \ val start = max(start1, start2)\n        val end = min(end1, end2)\n       \
    \ if (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n\
    \        else \"NO\"", "        val (start1, end1) = interval1\n        val (start2,\
    \ end2) = interval2\n        val start = max(start1, start2)\n        val end\
    \ = min(end1, end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end\
    \ - start + 1)) \"YES\"\n        else \"NO\"", "        val start = max(interval1._1,\
    \ interval2._1)\n        val end = min(interval1._2, interval2._2)\n        if\
    \ (start > end) return \"NO\"\n        val length = end - start + 1\n        if\
    \ (length == 1) return \"NO\"\n        if (length == 2) return \"YES\"\n     \
    \   if (length % 2 == 0) return \"NO\"\n        var i = 3\n        while (i *\
    \ i <= length) {\n            if (length % i == 0) return \"NO\"\n           \
    \ i += 2\n        }\n        \"YES\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) {\n            \"\
    NO\"\n        } else {\n            val length = end - start + 1\n           \
    \ if (length == 1) {\n                \"NO\"\n            } else {\n         \
    \       val sqrt = sqrt(length).toLong\n                if (sqrt * sqrt == length)\
    \ {\n                    \"NO\"\n                } else {\n                  \
    \  var isPrime = true\n                    for (i <- 2l to sqrt) {\n         \
    \               if (length % i == 0) {\n                            isPrime =\
    \ false\n                        }\n                    }\n                  \
    \  if (isPrime) {\n                        \"YES\"\n                    } else\
    \ {\n                        \"NO\"\n                    }\n                }\n\
    \            }\n        }", "        val (start1, end1) = interval1\n        val\
    \ (start2, end2) = interval2\n        val start = max(start1, start2)\n      \
    \  val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else if\
    \ (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        val start\
    \ = max(start1, start2)\n        val end = min(end1, end2)\n        if (start\
    \ > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"YES\"\n        else\
    \ \"NO\"", "        val (start1, end1) = interval1\n        val (start2, end2)\
    \ = interval2\n        val start = max(start1, start2)\n        val end = min(end1,\
    \ end2)\n        if (start > end) \"NO\"\n        else if (isPrime(end - start\
    \ + 1)) \"YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n\
    \        val (start2, end2) = interval2\n        val start = max(start1, start2)\n\
    \        val end = min(end1, end2)\n        if (start > end) \"NO\"\n        else\
    \ if (isPrime(end - start + 1)) \"YES\"\n        else \"NO\"", "        val (start1,\
    \ end1) = interval1\n        val (start2, end2) = interval2\n        if (start1\
    \ > end1 || start2 > end2) return \"NO\"\n        if (start1 > end2 || start2\
    \ > end1) return \"NO\"\n        val start = max(start1, start2)\n        val\
    \ end = min(end1, end2)\n        val length = end - start + 1\n        if (length\
    \ <= 1) return \"NO\"\n        if (length == 2) return \"YES\"\n        if (length\
    \ % 2 == 0) return \"NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n\
    \            if (length % i == 0) return \"NO\"\n        }\n        \"YES\"",
  "        val (start1, end1) = interval1\n        val (start2, end2) = interval2\n\
    \        val start = max(start1, start2)\n        val end = min(end1, end2)\n\
    \        if (start > end) \"NO\"\n        else if (isPrime(end - start + 1)) \"\
    YES\"\n        else \"NO\"", "        val (start1, end1) = interval1\n       \
    \ val (start2, end2) = interval2\n        val start = max(start1, start2)\n  \
    \      val end = min(end1, end2)\n        if (start > end) return \"NO\"\n   \
    \     val length = end - start + 1\n        if (length == 1) return \"NO\"\n \
    \       if (length == 2) return \"YES\"\n        if (length % 2 == 0) return \"\
    NO\"\n        for (i <- 3 to sqrt(length).toInt by 2) {\n            if (length\
    \ % i == 0) return \"NO\"\n        }\n        \"YES\""]
stop_tokens:
- "\n    }\n"
