name: HumanEval_113_odd_count
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of strings, where each string consists of only digits, return\
  \ a list.\n    // Each element i of the output should be \"the number of odd elements\
  \ in the\n    // string i of the input.\" where all the i's should be replaced by\
  \ the number\n    // of odd digits in the i'th string of the input.\n    // >>>\
  \ oddCount((List[String](\"1234567\")))\n    // (List[String](\"the number of odd\
  \ elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
  3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the str1ng\
  \ 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"\
  ))\n    def oddCount(lst : List[String]) : List[String] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
  1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of\
  \ the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
  the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
  \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
  271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
  \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
  \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
  \    }\n\n}\n"
completions: ["        val oddCount = (s : String) => s.count(_.asDigit % 2 == 1)\n\
    \        val replace = (s : String) => s.replaceAll(\"i\", oddCount(s).toString)\n\
    \        lst.map(replace)", "        lst.map(s => {\n            val count = s.filter(c\
    \ => c.asDigit % 2 == 1).length\n            \"the number of odd elements \" +\
    \ count + \"n the str\" + count + \"ng \" + count + \" of the \" + count + \"\
    nput.\"\n        })", '        lst.map(x => "the number of odd elements " + x.filter(y
    => y.toInt % 2 == 1).length + "n the str" + x.length + "ng " + x.length + " of
    the " + x.length + "nput.")', "        def countOdd(str : String) : Int = {\n\
    \            var count = 0\n            for (i <- 0 until str.length) {\n    \
    \            if (str(i) % 2 == 1) count += 1\n            }\n            count\n\
    \        }\n        var result = new ListBuffer[String]\n        for (i <- 0 until\
    \ lst.length) {\n            var str = lst(i)\n            var oddCount = countOdd(str)\n\
    \            var newStr = \"the number of odd elements \" + oddCount + \"n the\
    \ str\" + oddCount + \"ng \" + oddCount + \" of the \" + oddCount + \"nput.\"\n\
    \            result += newStr\n        }\n        result.toList", "        var\
    \ result = List[String]()\n        for (i <- 0 until lst.length) {\n         \
    \   var count = 0\n            for (j <- 0 until lst(i).length) {\n          \
    \      if (lst(i)(j) % 2 == 1) count += 1\n            }\n            result =\
    \ result :+ \"the number of odd elements \" + count + \"n the str\" + count +\
    \ \"ng \" + count + \" of the \" + count + \"nput.\"\n        }\n        result",
  "        lst.map(str => {\n            val num = str.count(c => c.asDigit % 2 ==\
    \ 1)\n            \"the number of odd elements \" + num + \"n the str\" + num\
    \ + \"ng \" + num + \" of the \" + num + \"nput.\"\n        })", '        lst.map(x
    => x.toList.map(y => if (y.asDigit % 2 == 1) 1 else 0).sum).map(x => "the number
    of odd elements " + x + "n the str" + x + "ng " + x + " of the " + x + "nput.")',
  "        var res : List[String] = List()\n        for (i <- 0 until lst.length)\
    \ {\n            var count = 0\n            for (j <- 0 until lst(i).length) {\n\
    \                if (lst(i)(j) % 2 == 1) count += 1\n            }\n         \
    \   res = res :+ \"the number of odd elements \" + count + \"n the str\" + count\
    \ + \"ng \" + count + \" of the \" + count + \"nput.\"\n        }\n        res",
  '        lst.map(x => "the number of odd elements " + x.filter(y => y.toInt % 2
    == 1).length + "n the str" + x.length + "ng " + x.length + " of the " + x.length
    + "nput.")', '        lst.map(x => x.map(y => if (y.asDigit % 2 == 1) 1 else 0).sum)',
  '        lst.map(x => "the number of odd elements " + x.count(_.asDigit % 2 == 1)
    + "n the str" + x.count(_.asDigit % 2 == 1) + "ng " + x.count(_.asDigit % 2 ==
    1) + " of the " + x.count(_.asDigit % 2 == 1) + "nput.")', "        lst.map(s\
    \ => {\n            val count = s.filter(c => c.asDigit % 2 == 1).length\n   \
    \         s.replaceAll(\"\\\\d\", count.toString)\n        })", "        val odd\
    \ = (x : String) => x.count(_.asDigit % 2 == 1)\n        val replace = (x : String)\
    \ => x.replaceAll(\"[0-9]\", \"n\")\n        lst.map(x => s\"the number of odd\
    \ elements ${odd(x)}n the str${odd(x)}ng ${odd(x)} of the ${odd(x)}nput.\").map(replace)",
  '        lst.map(x => x.filter(y => y.toInt % 2 == 1).length)', "        lst.map(x\
    \ => x.filter(y => y.toInt % 2 == 1).length)\n            .map(x => s\"the number\
    \ of odd elements ${x}n the str${x}ng ${x} of the ${x}nput.\")", "        var\
    \ result = List[String]()\n        for (s <- lst) {\n            var count = 0\n\
    \            for (c <- s) {\n                if (c.asDigit % 2 == 1) count +=\
    \ 1\n            }\n            result = result :+ s\"the number of odd elements\
    \ ${count}n the str${count}ng ${count} of the ${count}nput.\"\n        }\n   \
    \     result", "        lst.map(s => {\n            val oddCount = s.filter(c\
    \ => c.toInt % 2 == 1).length\n            s.replaceAll(\"[0-9]\", \"\").replaceAll(\"\
    i\", oddCount.toString)\n        })", "        lst.map(x => x.filter(y => y.toInt\
    \ % 2 == 1).length)\n            .map(x => \"the number of odd elements \" + x\
    \ + \"n the str\" + x + \"ng \" + x + \" of the \" + x + \"nput.\")", "      \
    \  var result = List[String]()\n        for (i <- 0 until lst.length) {\n    \
    \        var count = 0\n            for (j <- 0 until lst(i).length) {\n     \
    \           if (lst(i)(j) % 2 == 1) count += 1\n            }\n            result\
    \ = result :+ \"the number of odd elements \" + count + \"n the str\" + count\
    \ + \"ng \" + count + \" of the \" + count + \"nput.\"\n        }\n        result",
  '        lst.map(x => x.count(y => y.asDigit % 2 == 1)).map(x => "the number of
    odd elements " + x + "n the str" + x + "ng " + x + " of the " + x + "nput.")']
stop_tokens:
- "\n    }\n"
