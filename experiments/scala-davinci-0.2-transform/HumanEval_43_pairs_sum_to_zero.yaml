name: HumanEval_43_pairs_sum_to_zero
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // pairs_sum_to_zero takes a list of integers as an input.\n    // it returns\
  \ True if there are two distinct elements in the list that\n    // sum to zero,\
  \ and False otherwise.\n    // >>> pairsSumToZero((List[Long](1l.toLong, 3l.toLong,\
  \ 5l.toLong, 0l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong)))\n    // (false)\n    // >>> pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong)))\n    // (true)\n   \
  \ // >>> pairsSumToZero((List[Long](1l.toLong)))\n    // (false)\n    def pairsSumToZero(l\
  \ : List[Long]) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, 5l.toLong, 0l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 3l.toLong, -2l.toLong, 1l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 7l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](2l.toLong,\
  \ 4l.toLong, -5l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](1l.toLong)))\
  \ == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong, 9l.toLong, -1l.toLong,\
  \ 3l.toLong, 2l.toLong, 30l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 3l.toLong, 2l.toLong, 31l.toLong))) == (true));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 30l.toLong))) == (false));\n    assert(pairsSumToZero((List[Long](-3l.toLong,\
  \ 9l.toLong, -1l.toLong, 4l.toLong, 2l.toLong, 31l.toLong))) == (false));\n    }\n\
  \n}\n"
completions: ["        val s = l.toSet\n        for (x <- s) {\n            if (s.contains(-x))\
    \ {\n                return true\n            }\n        }\n        return false",
  "        var h = HashSet[Long]()\n        for (i <- l) {\n            if (h.contains(-i))\
    \ return true\n            h += i\n        }\n        return false", "       \
    \ var s = Set[Long]()\n        for (i <- l) {\n            if (s.contains(-i))\
    \ return true\n            s += i\n        }\n        return false", "       \
    \ val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i)) {\n\
    \                return true\n            }\n        }\n        return false",
  "        val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i))\
    \ {\n                return true\n            }\n        }\n        return false",
  "        var h : HashSet[Long] = new HashSet[Long]\n        for (i <- l) {\n   \
    \         if (h.contains(-i)) {\n                return true\n            }\n\
    \            h.add(i)\n        }\n        return false", "        var s = Set[Long]()\n\
    \        for (x <- l) {\n            if (s.contains(-x)) {\n                return\
    \ true\n            }\n            s.add(x)\n        }\n        return false",
  "        val s = l.toSet\n        for (i <- s) {\n            if (s.contains(-i))\
    \ return true\n        }\n        return false", "        val s = l.toSet\n  \
    \      for (x <- s) {\n            if (s.contains(-x)) return true\n        }\n\
    \        return false", "        // your code here\n        val set = new HashSet[Long]\n\
    \        for (x <- l) {\n            if (set.contains(-x)) return true\n     \
    \       set += x\n        }\n        false", "        var h : HashSet[Long] =\
    \ new HashSet[Long]()\n        for (i <- l) {\n            if (h.contains(-i))\
    \ {\n                return true\n            }\n            h.add(i)\n      \
    \  }\n        return false", "        var m = Map[Long, Int]()\n        for (x\
    \ <- l) {\n            if (m.contains(x)) {\n                m(x) += 1\n     \
    \       } else {\n                m(x) = 1\n            }\n        }\n       \
    \ for (x <- l) {\n            if (m.contains(-x)) {\n                if (x !=\
    \ 0 || m(x) > 1) {\n                    return true\n                }\n     \
    \       }\n        }\n        return false", "        var m = new HashMap[Long,\
    \ Boolean]()\n        for (i <- l) {\n            if (m.contains(i)) return true\n\
    \            m(i) = true\n        }\n        return false", "        val s = l.toSet\n\
    \        for (x <- s) {\n            if (s.contains(-x)) {\n                return\
    \ true\n            }\n        }\n        return false", "        // YOUR CODE\
    \ HERE\n        return false", "        if (l.length < 2) {\n            return\
    \ false\n        }\n        val s = l.toSet\n        for (i <- l) {\n        \
    \    if (s.contains(-i)) {\n                return true\n            }\n     \
    \   }\n        return false", "        val s = l.toSet\n        for (i <- s) {\n\
    \            if (s.contains(-i)) {\n                return true\n            }\n\
    \        }\n        return false", "        if (l.length < 2) {\n            return\
    \ false\n        }\n        val set = new HashSet[Long]()\n        for (i <- 0\
    \ until l.length) {\n            if (set.contains(-l(i))) {\n                return\
    \ true\n            }\n            set.add(l(i))\n        }\n        return false",
  "        // your code here\n        return false", "        // your code here\n\
    \        false"]
stop_tokens:
- "\n    }\n"
